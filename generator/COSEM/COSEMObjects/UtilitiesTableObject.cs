//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the UtilitiesTableObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ut" +
        "ilitiesTableObject")]
    public partial class UtilitiesTableObject : Utilitytables, IUtilitiesTableObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Standard property
        /// </summary>
        private string _standard;
        
        private static Lazy<ITypedElement> _standardAttribute = new Lazy<ITypedElement>(RetrieveStandardAttribute);
        
        /// <summary>
        /// The backing field for the Manufacturer property
        /// </summary>
        private string _manufacturer;
        
        private static Lazy<ITypedElement> _manufacturerAttribute = new Lazy<ITypedElement>(RetrieveManufacturerAttribute);
        
        /// <summary>
        /// The backing field for the StdPending property
        /// </summary>
        private string _stdPending;
        
        private static Lazy<ITypedElement> _stdPendingAttribute = new Lazy<ITypedElement>(RetrieveStdPendingAttribute);
        
        /// <summary>
        /// The backing field for the MfgPending property
        /// </summary>
        private string _mfgPending;
        
        private static Lazy<ITypedElement> _mfgPendingAttribute = new Lazy<ITypedElement>(RetrieveMfgPendingAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Standard property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Standard
        {
            get
            {
                return this._standard;
            }
            set
            {
                if ((this._standard != value))
                {
                    string old = this._standard;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStandardChanging(e);
                    this.OnPropertyChanging("Standard", e, _standardAttribute);
                    this._standard = value;
                    this.OnStandardChanged(e);
                    this.OnPropertyChanged("Standard", e, _standardAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Manufacturer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Manufacturer
        {
            get
            {
                return this._manufacturer;
            }
            set
            {
                if ((this._manufacturer != value))
                {
                    string old = this._manufacturer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManufacturerChanging(e);
                    this.OnPropertyChanging("Manufacturer", e, _manufacturerAttribute);
                    this._manufacturer = value;
                    this.OnManufacturerChanged(e);
                    this.OnPropertyChanged("Manufacturer", e, _manufacturerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StdPending property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string StdPending
        {
            get
            {
                return this._stdPending;
            }
            set
            {
                if ((this._stdPending != value))
                {
                    string old = this._stdPending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStdPendingChanging(e);
                    this.OnPropertyChanging("StdPending", e, _stdPendingAttribute);
                    this._stdPending = value;
                    this.OnStdPendingChanged(e);
                    this.OnPropertyChanged("StdPending", e, _stdPendingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MfgPending property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string MfgPending
        {
            get
            {
                return this._mfgPending;
            }
            set
            {
                if ((this._mfgPending != value))
                {
                    string old = this._mfgPending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMfgPendingChanging(e);
                    this.OnPropertyChanging("MfgPending", e, _mfgPendingAttribute);
                    this._mfgPending = value;
                    this.OnMfgPendingChanged(e);
                    this.OnPropertyChanged("MfgPending", e, _mfgPendingAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ut" +
                            "ilitiesTableObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Standard property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StandardChanging;
        
        /// <summary>
        /// Gets fired when the Standard property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StandardChanged;
        
        /// <summary>
        /// Gets fired before the Manufacturer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManufacturerChanging;
        
        /// <summary>
        /// Gets fired when the Manufacturer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManufacturerChanged;
        
        /// <summary>
        /// Gets fired before the StdPending property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StdPendingChanging;
        
        /// <summary>
        /// Gets fired when the StdPending property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StdPendingChanged;
        
        /// <summary>
        /// Gets fired before the MfgPending property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MfgPendingChanging;
        
        /// <summary>
        /// Gets fired when the MfgPending property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MfgPendingChanged;
        
        private static ITypedElement RetrieveStandardAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UtilitiesTableObject.ClassInstance)).Resolve("Standard")));
        }
        
        /// <summary>
        /// Raises the StandardChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStandardChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StandardChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StandardChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStandardChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StandardChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManufacturerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UtilitiesTableObject.ClassInstance)).Resolve("Manufacturer")));
        }
        
        /// <summary>
        /// Raises the ManufacturerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManufacturerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManufacturerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManufacturerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStdPendingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UtilitiesTableObject.ClassInstance)).Resolve("StdPending")));
        }
        
        /// <summary>
        /// Raises the StdPendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStdPendingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StdPendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StdPendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStdPendingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StdPendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMfgPendingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UtilitiesTableObject.ClassInstance)).Resolve("MfgPending")));
        }
        
        /// <summary>
        /// Raises the MfgPendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMfgPendingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MfgPendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MfgPendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMfgPendingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MfgPendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STANDARD"))
            {
                return this.Standard;
            }
            if ((attribute == "MANUFACTURER"))
            {
                return this.Manufacturer;
            }
            if ((attribute == "STDPENDING"))
            {
                return this.StdPending;
            }
            if ((attribute == "MFGPENDING"))
            {
                return this.MfgPending;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STANDARD"))
            {
                this.Standard = ((string)(value));
                return;
            }
            if ((feature == "MANUFACTURER"))
            {
                this.Manufacturer = ((string)(value));
                return;
            }
            if ((feature == "STDPENDING"))
            {
                this.StdPending = ((string)(value));
                return;
            }
            if ((feature == "MFGPENDING"))
            {
                this.MfgPending = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ut" +
                        "ilitiesTableObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Standard property
        /// </summary>
        private sealed class StandardProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StandardProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "Standard")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Standard;
                }
                set
                {
                    this.ModelElement.Standard = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Manufacturer property
        /// </summary>
        private sealed class ManufacturerProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManufacturerProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "Manufacturer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Manufacturer;
                }
                set
                {
                    this.ModelElement.Manufacturer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StdPending property
        /// </summary>
        private sealed class StdPendingProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StdPendingProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "StdPending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StdPending;
                }
                set
                {
                    this.ModelElement.StdPending = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MfgPending property
        /// </summary>
        private sealed class MfgPendingProxy : ModelPropertyChange<IUtilitiesTableObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MfgPendingProxy(IUtilitiesTableObject modelElement) : 
                    base(modelElement, "MfgPending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MfgPending;
                }
                set
                {
                    this.ModelElement.MfgPending = value;
                }
            }
        }
    }
}

