//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the OutputPulseValues_constants class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ou" +
        "tputPulseValues_constants")]
    public class OutputPulseValues_constants : Data, IOutputPulseValues_constants, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveenergymetrologicalLED property
        /// </summary>
        private Nullable<double> _activeenergymetrologicalLED;
        
        /// <summary>
        /// The backing field for the ReactiveenergymetrologicalLED property
        /// </summary>
        private Nullable<double> _reactiveenergymetrologicalLED;
        
        /// <summary>
        /// The backing field for the ApparentenergymetrologicalLED property
        /// </summary>
        private Nullable<double> _apparentenergymetrologicalLED;
        
        /// <summary>
        /// The backing field for the Activeenergyoutputpulse property
        /// </summary>
        private Nullable<double> _activeenergyoutputpulse;
        
        /// <summary>
        /// The backing field for the Reactiveenergyoutputpulse property
        /// </summary>
        private Nullable<double> _reactiveenergyoutputpulse;
        
        /// <summary>
        /// The backing field for the Apparentenergyoutputpulse property
        /// </summary>
        private Nullable<double> _apparentenergyoutputpulse;
        
        /// <summary>
        /// The backing field for the Volt_squaredhoursmetrologicalLED property
        /// </summary>
        private Nullable<double> _volt_squaredhoursmetrologicalLED;
        
        /// <summary>
        /// The backing field for the Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        private Nullable<double> _ampere_squaredhoursmetrologicalLED;
        
        /// <summary>
        /// The backing field for the Volt_squaredhoursoutputpulse property
        /// </summary>
        private Nullable<double> _volt_squaredhoursoutputpulse;
        
        /// <summary>
        /// The backing field for the Ampere_squaredhoursoutputpulse property
        /// </summary>
        private Nullable<double> _ampere_squaredhoursoutputpulse;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActiveenergymetrologicalLED property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActiveenergymetrologicalLED
        {
            get
            {
                return this._activeenergymetrologicalLED;
            }
            set
            {
                if ((this._activeenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._activeenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ActiveenergymetrologicalLED", e);
                    this._activeenergymetrologicalLED = value;
                    this.OnActiveenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ActiveenergymetrologicalLED", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactiveenergymetrologicalLED property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactiveenergymetrologicalLED
        {
            get
            {
                return this._reactiveenergymetrologicalLED;
            }
            set
            {
                if ((this._reactiveenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._reactiveenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactiveenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ReactiveenergymetrologicalLED", e);
                    this._reactiveenergymetrologicalLED = value;
                    this.OnReactiveenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ReactiveenergymetrologicalLED", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentenergymetrologicalLED property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentenergymetrologicalLED
        {
            get
            {
                return this._apparentenergymetrologicalLED;
            }
            set
            {
                if ((this._apparentenergymetrologicalLED != value))
                {
                    Nullable<double> old = this._apparentenergymetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentenergymetrologicalLEDChanging(e);
                    this.OnPropertyChanging("ApparentenergymetrologicalLED", e);
                    this._apparentenergymetrologicalLED = value;
                    this.OnApparentenergymetrologicalLEDChanged(e);
                    this.OnPropertyChanged("ApparentenergymetrologicalLED", e);
                }
            }
        }
        
        /// <summary>
        /// The Activeenergyoutputpulse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Activeenergyoutputpulse
        {
            get
            {
                return this._activeenergyoutputpulse;
            }
            set
            {
                if ((this._activeenergyoutputpulse != value))
                {
                    Nullable<double> old = this._activeenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Activeenergyoutputpulse", e);
                    this._activeenergyoutputpulse = value;
                    this.OnActiveenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Activeenergyoutputpulse", e);
                }
            }
        }
        
        /// <summary>
        /// The Reactiveenergyoutputpulse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactiveenergyoutputpulse
        {
            get
            {
                return this._reactiveenergyoutputpulse;
            }
            set
            {
                if ((this._reactiveenergyoutputpulse != value))
                {
                    Nullable<double> old = this._reactiveenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactiveenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Reactiveenergyoutputpulse", e);
                    this._reactiveenergyoutputpulse = value;
                    this.OnReactiveenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Reactiveenergyoutputpulse", e);
                }
            }
        }
        
        /// <summary>
        /// The Apparentenergyoutputpulse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Apparentenergyoutputpulse
        {
            get
            {
                return this._apparentenergyoutputpulse;
            }
            set
            {
                if ((this._apparentenergyoutputpulse != value))
                {
                    Nullable<double> old = this._apparentenergyoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentenergyoutputpulseChanging(e);
                    this.OnPropertyChanging("Apparentenergyoutputpulse", e);
                    this._apparentenergyoutputpulse = value;
                    this.OnApparentenergyoutputpulseChanged(e);
                    this.OnPropertyChanged("Apparentenergyoutputpulse", e);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredhoursmetrologicalLED property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Volt_squaredhoursmetrologicalLED
        {
            get
            {
                return this._volt_squaredhoursmetrologicalLED;
            }
            set
            {
                if ((this._volt_squaredhoursmetrologicalLED != value))
                {
                    Nullable<double> old = this._volt_squaredhoursmetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredhoursmetrologicalLEDChanging(e);
                    this.OnPropertyChanging("Volt_squaredhoursmetrologicalLED", e);
                    this._volt_squaredhoursmetrologicalLED = value;
                    this.OnVolt_squaredhoursmetrologicalLEDChanged(e);
                    this.OnPropertyChanged("Volt_squaredhoursmetrologicalLED", e);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ampere_squaredhoursmetrologicalLED
        {
            get
            {
                return this._ampere_squaredhoursmetrologicalLED;
            }
            set
            {
                if ((this._ampere_squaredhoursmetrologicalLED != value))
                {
                    Nullable<double> old = this._ampere_squaredhoursmetrologicalLED;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredhoursmetrologicalLEDChanging(e);
                    this.OnPropertyChanging("Ampere_squaredhoursmetrologicalLED", e);
                    this._ampere_squaredhoursmetrologicalLED = value;
                    this.OnAmpere_squaredhoursmetrologicalLEDChanged(e);
                    this.OnPropertyChanged("Ampere_squaredhoursmetrologicalLED", e);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredhoursoutputpulse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Volt_squaredhoursoutputpulse
        {
            get
            {
                return this._volt_squaredhoursoutputpulse;
            }
            set
            {
                if ((this._volt_squaredhoursoutputpulse != value))
                {
                    Nullable<double> old = this._volt_squaredhoursoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredhoursoutputpulseChanging(e);
                    this.OnPropertyChanging("Volt_squaredhoursoutputpulse", e);
                    this._volt_squaredhoursoutputpulse = value;
                    this.OnVolt_squaredhoursoutputpulseChanged(e);
                    this.OnPropertyChanged("Volt_squaredhoursoutputpulse", e);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredhoursoutputpulse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ampere_squaredhoursoutputpulse
        {
            get
            {
                return this._ampere_squaredhoursoutputpulse;
            }
            set
            {
                if ((this._ampere_squaredhoursoutputpulse != value))
                {
                    Nullable<double> old = this._ampere_squaredhoursoutputpulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredhoursoutputpulseChanging(e);
                    this.OnPropertyChanging("Ampere_squaredhoursoutputpulse", e);
                    this._ampere_squaredhoursoutputpulse = value;
                    this.OnAmpere_squaredhoursoutputpulseChanged(e);
                    this.OnPropertyChanged("Ampere_squaredhoursoutputpulse", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ou" +
                            "tputPulseValues_constants")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActiveenergymetrologicalLED property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ActiveenergymetrologicalLED property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveenergymetrologicalLED property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveenergymetrologicalLED property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ApparentenergymetrologicalLED property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ApparentenergymetrologicalLED property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Activeenergyoutputpulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Activeenergyoutputpulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Reactiveenergyoutputpulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Reactiveenergyoutputpulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Apparentenergyoutputpulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Apparentenergyoutputpulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursoutputpulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursoutputpulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursoutputpulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursoutputpulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Raises the ActiveenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergymetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergymetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentenergymetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergymetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergymetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentenergymetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergyoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergyoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentenergyoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentenergyoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentenergyoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentenergyoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursmetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursmetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursmetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursmetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursmetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursmetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursmetrologicalLEDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursmetrologicalLEDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursmetrologicalLEDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursmetrologicalLEDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursmetrologicalLEDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursmetrologicalLEDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredhoursoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredhoursoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredhoursoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursoutputpulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursoutputpulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursoutputpulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredhoursoutputpulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredhoursoutputpulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredhoursoutputpulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEENERGYMETROLOGICALLED"))
            {
                return this.ActiveenergymetrologicalLED;
            }
            if ((attribute == "REACTIVEENERGYMETROLOGICALLED"))
            {
                return this.ReactiveenergymetrologicalLED;
            }
            if ((attribute == "APPARENTENERGYMETROLOGICALLED"))
            {
                return this.ApparentenergymetrologicalLED;
            }
            if ((attribute == "ACTIVEENERGYOUTPUTPULSE"))
            {
                return this.Activeenergyoutputpulse;
            }
            if ((attribute == "REACTIVEENERGYOUTPUTPULSE"))
            {
                return this.Reactiveenergyoutputpulse;
            }
            if ((attribute == "APPARENTENERGYOUTPUTPULSE"))
            {
                return this.Apparentenergyoutputpulse;
            }
            if ((attribute == "VOLT_SQUAREDHOURSMETROLOGICALLED"))
            {
                return this.Volt_squaredhoursmetrologicalLED;
            }
            if ((attribute == "AMPERE_SQUAREDHOURSMETROLOGICALLED"))
            {
                return this.Ampere_squaredhoursmetrologicalLED;
            }
            if ((attribute == "VOLT_SQUAREDHOURSOUTPUTPULSE"))
            {
                return this.Volt_squaredhoursoutputpulse;
            }
            if ((attribute == "AMPERE_SQUAREDHOURSOUTPUTPULSE"))
            {
                return this.Ampere_squaredhoursoutputpulse;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEENERGYMETROLOGICALLED"))
            {
                this.ActiveenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEENERGYMETROLOGICALLED"))
            {
                this.ReactiveenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "APPARENTENERGYMETROLOGICALLED"))
            {
                this.ApparentenergymetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEENERGYOUTPUTPULSE"))
            {
                this.Activeenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEENERGYOUTPUTPULSE"))
            {
                this.Reactiveenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "APPARENTENERGYOUTPUTPULSE"))
            {
                this.Apparentenergyoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURSMETROLOGICALLED"))
            {
                this.Volt_squaredhoursmetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURSMETROLOGICALLED"))
            {
                this.Ampere_squaredhoursmetrologicalLED = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURSOUTPUTPULSE"))
            {
                this.Volt_squaredhoursoutputpulse = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURSOUTPUTPULSE"))
            {
                this.Ampere_squaredhoursoutputpulse = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ou" +
                        "tputPulseValues_constants")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveenergymetrologicalLED property
        /// </summary>
        private sealed class ActiveenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActiveenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ActiveenergymetrologicalLED = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveenergymetrologicalLEDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveenergymetrologicalLEDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactiveenergymetrologicalLED property
        /// </summary>
        private sealed class ReactiveenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactiveenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactiveenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ReactiveenergymetrologicalLED = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactiveenergymetrologicalLEDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactiveenergymetrologicalLEDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentenergymetrologicalLED property
        /// </summary>
        private sealed class ApparentenergymetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentenergymetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentenergymetrologicalLED;
                }
                set
                {
                    this.ModelElement.ApparentenergymetrologicalLED = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentenergymetrologicalLEDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentenergymetrologicalLEDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Activeenergyoutputpulse property
        /// </summary>
        private sealed class ActiveenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Activeenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Activeenergyoutputpulse = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveenergyoutputpulseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveenergyoutputpulseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactiveenergyoutputpulse property
        /// </summary>
        private sealed class ReactiveenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactiveenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactiveenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Reactiveenergyoutputpulse = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactiveenergyoutputpulseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactiveenergyoutputpulseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparentenergyoutputpulse property
        /// </summary>
        private sealed class ApparentenergyoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentenergyoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparentenergyoutputpulse;
                }
                set
                {
                    this.ModelElement.Apparentenergyoutputpulse = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentenergyoutputpulseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentenergyoutputpulseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredhoursmetrologicalLED property
        /// </summary>
        private sealed class Volt_squaredhoursmetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredhoursmetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredhoursmetrologicalLED;
                }
                set
                {
                    this.ModelElement.Volt_squaredhoursmetrologicalLED = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredhoursmetrologicalLEDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredhoursmetrologicalLEDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        private sealed class Ampere_squaredhoursmetrologicalLEDProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredhoursmetrologicalLEDProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredhoursmetrologicalLED;
                }
                set
                {
                    this.ModelElement.Ampere_squaredhoursmetrologicalLED = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredhoursmetrologicalLEDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredhoursmetrologicalLEDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredhoursoutputpulse property
        /// </summary>
        private sealed class Volt_squaredhoursoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredhoursoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredhoursoutputpulse;
                }
                set
                {
                    this.ModelElement.Volt_squaredhoursoutputpulse = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredhoursoutputpulseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredhoursoutputpulseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredhoursoutputpulse property
        /// </summary>
        private sealed class Ampere_squaredhoursoutputpulseProxy : ModelPropertyChange<IOutputPulseValues_constants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredhoursoutputpulseProxy(IOutputPulseValues_constants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredhoursoutputpulse;
                }
                set
                {
                    this.ModelElement.Ampere_squaredhoursoutputpulse = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredhoursoutputpulseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredhoursoutputpulseChanged -= handler;
            }
        }
    }
}

