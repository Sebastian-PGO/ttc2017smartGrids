//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ScriptTable class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Sc" +
        "riptTable")]
    public class ScriptTable : Scripttable, IScriptTable, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GlobalMeterReset property
        /// </summary>
        private IGlobalMeterReset _globalMeterReset;
        
        /// <summary>
        /// The backing field for the MDIReset property
        /// </summary>
        private IMDIReset _mDIReset;
        
        /// <summary>
        /// The backing field for the Tariffication property
        /// </summary>
        private ITariffication _tariffication;
        
        /// <summary>
        /// The backing field for the AcitvateTest property
        /// </summary>
        private IActivateTestMode _acitvateTest;
        
        /// <summary>
        /// The backing field for the ActivateNormal property
        /// </summary>
        private IActivateNormalMode _activateNormal;
        
        /// <summary>
        /// The backing field for the SetOutput property
        /// </summary>
        private ISetOutputSignal _setOutput;
        
        /// <summary>
        /// The backing field for the SwitchOptical property
        /// </summary>
        private ISwitchOpticalTestOutput _switchOptical;
        
        /// <summary>
        /// The backing field for the PowerQuality property
        /// </summary>
        private IPowerQualityMeasurementManagement _powerQuality;
        
        /// <summary>
        /// The backing field for the Disconnect property
        /// </summary>
        private IDisconnectControl _disconnect;
        
        /// <summary>
        /// The backing field for the Image property
        /// </summary>
        private IImageActivation _image;
        
        /// <summary>
        /// The backing field for the Push property
        /// </summary>
        private IPush _push;
        
        /// <summary>
        /// The backing field for the Broadcast property
        /// </summary>
        private IBroadcast _broadcast;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The globalMeterReset property
        /// </summary>
        [XmlElementNameAttribute("globalMeterReset")]
        [XmlAttributeAttribute(true)]
        public virtual IGlobalMeterReset GlobalMeterReset
        {
            get
            {
                return this._globalMeterReset;
            }
            set
            {
                if ((this._globalMeterReset != value))
                {
                    IGlobalMeterReset old = this._globalMeterReset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGlobalMeterResetChanging(e);
                    this.OnPropertyChanging("GlobalMeterReset", e);
                    this._globalMeterReset = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGlobalMeterReset;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGlobalMeterReset;
                    }
                    this.OnGlobalMeterResetChanged(e);
                    this.OnPropertyChanged("GlobalMeterReset", e);
                }
            }
        }
        
        /// <summary>
        /// The MDIReset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMDIReset MDIReset
        {
            get
            {
                return this._mDIReset;
            }
            set
            {
                if ((this._mDIReset != value))
                {
                    IMDIReset old = this._mDIReset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMDIResetChanging(e);
                    this.OnPropertyChanging("MDIReset", e);
                    this._mDIReset = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMDIReset;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMDIReset;
                    }
                    this.OnMDIResetChanged(e);
                    this.OnPropertyChanged("MDIReset", e);
                }
            }
        }
        
        /// <summary>
        /// The Tariffication property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ITariffication Tariffication
        {
            get
            {
                return this._tariffication;
            }
            set
            {
                if ((this._tariffication != value))
                {
                    ITariffication old = this._tariffication;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTarifficationChanging(e);
                    this.OnPropertyChanging("Tariffication", e);
                    this._tariffication = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTariffication;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTariffication;
                    }
                    this.OnTarifficationChanged(e);
                    this.OnPropertyChanged("Tariffication", e);
                }
            }
        }
        
        /// <summary>
        /// The AcitvateTest property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IActivateTestMode AcitvateTest
        {
            get
            {
                return this._acitvateTest;
            }
            set
            {
                if ((this._acitvateTest != value))
                {
                    IActivateTestMode old = this._acitvateTest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAcitvateTestChanging(e);
                    this.OnPropertyChanging("AcitvateTest", e);
                    this._acitvateTest = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAcitvateTest;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAcitvateTest;
                    }
                    this.OnAcitvateTestChanged(e);
                    this.OnPropertyChanged("AcitvateTest", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivateNormal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IActivateNormalMode ActivateNormal
        {
            get
            {
                return this._activateNormal;
            }
            set
            {
                if ((this._activateNormal != value))
                {
                    IActivateNormalMode old = this._activateNormal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivateNormalChanging(e);
                    this.OnPropertyChanging("ActivateNormal", e);
                    this._activateNormal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetActivateNormal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetActivateNormal;
                    }
                    this.OnActivateNormalChanged(e);
                    this.OnPropertyChanged("ActivateNormal", e);
                }
            }
        }
        
        /// <summary>
        /// The SetOutput property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISetOutputSignal SetOutput
        {
            get
            {
                return this._setOutput;
            }
            set
            {
                if ((this._setOutput != value))
                {
                    ISetOutputSignal old = this._setOutput;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetOutputChanging(e);
                    this.OnPropertyChanging("SetOutput", e);
                    this._setOutput = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetOutput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetOutput;
                    }
                    this.OnSetOutputChanged(e);
                    this.OnPropertyChanged("SetOutput", e);
                }
            }
        }
        
        /// <summary>
        /// The SwitchOptical property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISwitchOpticalTestOutput SwitchOptical
        {
            get
            {
                return this._switchOptical;
            }
            set
            {
                if ((this._switchOptical != value))
                {
                    ISwitchOpticalTestOutput old = this._switchOptical;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOpticalChanging(e);
                    this.OnPropertyChanging("SwitchOptical", e);
                    this._switchOptical = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwitchOptical;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwitchOptical;
                    }
                    this.OnSwitchOpticalChanged(e);
                    this.OnPropertyChanged("SwitchOptical", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerQuality property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IPowerQualityMeasurementManagement PowerQuality
        {
            get
            {
                return this._powerQuality;
            }
            set
            {
                if ((this._powerQuality != value))
                {
                    IPowerQualityMeasurementManagement old = this._powerQuality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerQualityChanging(e);
                    this.OnPropertyChanging("PowerQuality", e);
                    this._powerQuality = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPowerQuality;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPowerQuality;
                    }
                    this.OnPowerQualityChanged(e);
                    this.OnPropertyChanged("PowerQuality", e);
                }
            }
        }
        
        /// <summary>
        /// The Disconnect property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDisconnectControl Disconnect
        {
            get
            {
                return this._disconnect;
            }
            set
            {
                if ((this._disconnect != value))
                {
                    IDisconnectControl old = this._disconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectChanging(e);
                    this.OnPropertyChanging("Disconnect", e);
                    this._disconnect = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDisconnect;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDisconnect;
                    }
                    this.OnDisconnectChanged(e);
                    this.OnPropertyChanged("Disconnect", e);
                }
            }
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IImageActivation Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    IImageActivation old = this._image;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImageChanging(e);
                    this.OnPropertyChanging("Image", e);
                    this._image = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImage;
                    }
                    this.OnImageChanged(e);
                    this.OnPropertyChanged("Image", e);
                }
            }
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IPush Push
        {
            get
            {
                return this._push;
            }
            set
            {
                if ((this._push != value))
                {
                    IPush old = this._push;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPushChanging(e);
                    this.OnPropertyChanging("Push", e);
                    this._push = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPush;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPush;
                    }
                    this.OnPushChanged(e);
                    this.OnPropertyChanged("Push", e);
                }
            }
        }
        
        /// <summary>
        /// The Broadcast property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBroadcast Broadcast
        {
            get
            {
                return this._broadcast;
            }
            set
            {
                if ((this._broadcast != value))
                {
                    IBroadcast old = this._broadcast;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBroadcastChanging(e);
                    this.OnPropertyChanging("Broadcast", e);
                    this._broadcast = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBroadcast;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBroadcast;
                    }
                    this.OnBroadcastChanged(e);
                    this.OnPropertyChanged("Broadcast", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ScriptTableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Sc" +
                            "riptTable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GlobalMeterReset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlobalMeterResetChanging;
        
        /// <summary>
        /// Gets fired when the GlobalMeterReset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlobalMeterResetChanged;
        
        /// <summary>
        /// Gets fired before the MDIReset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MDIResetChanging;
        
        /// <summary>
        /// Gets fired when the MDIReset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MDIResetChanged;
        
        /// <summary>
        /// Gets fired before the Tariffication property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TarifficationChanging;
        
        /// <summary>
        /// Gets fired when the Tariffication property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TarifficationChanged;
        
        /// <summary>
        /// Gets fired before the AcitvateTest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcitvateTestChanging;
        
        /// <summary>
        /// Gets fired when the AcitvateTest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcitvateTestChanged;
        
        /// <summary>
        /// Gets fired before the ActivateNormal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivateNormalChanging;
        
        /// <summary>
        /// Gets fired when the ActivateNormal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivateNormalChanged;
        
        /// <summary>
        /// Gets fired before the SetOutput property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetOutputChanging;
        
        /// <summary>
        /// Gets fired when the SetOutput property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetOutputChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOptical property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOpticalChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOptical property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOpticalChanged;
        
        /// <summary>
        /// Gets fired before the PowerQuality property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerQualityChanging;
        
        /// <summary>
        /// Gets fired when the PowerQuality property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerQualityChanged;
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PushChanged;
        
        /// <summary>
        /// Gets fired before the Broadcast property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BroadcastChanging;
        
        /// <summary>
        /// Gets fired when the Broadcast property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BroadcastChanged;
        
        /// <summary>
        /// Raises the GlobalMeterResetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlobalMeterResetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlobalMeterResetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GlobalMeterResetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlobalMeterResetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlobalMeterResetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GlobalMeterReset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGlobalMeterReset(object sender, System.EventArgs eventArgs)
        {
            this.GlobalMeterReset = null;
        }
        
        /// <summary>
        /// Raises the MDIResetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMDIResetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MDIResetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MDIResetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMDIResetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MDIResetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MDIReset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMDIReset(object sender, System.EventArgs eventArgs)
        {
            this.MDIReset = null;
        }
        
        /// <summary>
        /// Raises the TarifficationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTarifficationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TarifficationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TarifficationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTarifficationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TarifficationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tariffication property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTariffication(object sender, System.EventArgs eventArgs)
        {
            this.Tariffication = null;
        }
        
        /// <summary>
        /// Raises the AcitvateTestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcitvateTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcitvateTestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AcitvateTestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcitvateTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcitvateTestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AcitvateTest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAcitvateTest(object sender, System.EventArgs eventArgs)
        {
            this.AcitvateTest = null;
        }
        
        /// <summary>
        /// Raises the ActivateNormalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivateNormalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivateNormalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivateNormalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivateNormalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivateNormalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ActivateNormal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActivateNormal(object sender, System.EventArgs eventArgs)
        {
            this.ActivateNormal = null;
        }
        
        /// <summary>
        /// Raises the SetOutputChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetOutputChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetOutputChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetOutputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetOutputChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetOutputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetOutput property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetOutput(object sender, System.EventArgs eventArgs)
        {
            this.SetOutput = null;
        }
        
        /// <summary>
        /// Raises the SwitchOpticalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOpticalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOpticalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOpticalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOpticalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOpticalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwitchOptical property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwitchOptical(object sender, System.EventArgs eventArgs)
        {
            this.SwitchOptical = null;
        }
        
        /// <summary>
        /// Raises the PowerQualityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerQualityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerQualityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerQualityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerQualityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerQualityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerQuality property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerQuality(object sender, System.EventArgs eventArgs)
        {
            this.PowerQuality = null;
        }
        
        /// <summary>
        /// Raises the DisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Disconnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDisconnect(object sender, System.EventArgs eventArgs)
        {
            this.Disconnect = null;
        }
        
        /// <summary>
        /// Raises the ImageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Image property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImage(object sender, System.EventArgs eventArgs)
        {
            this.Image = null;
        }
        
        /// <summary>
        /// Raises the PushChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PushChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PushChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PushChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Push property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPush(object sender, System.EventArgs eventArgs)
        {
            this.Push = null;
        }
        
        /// <summary>
        /// Raises the BroadcastChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBroadcastChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BroadcastChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BroadcastChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBroadcastChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BroadcastChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Broadcast property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBroadcast(object sender, System.EventArgs eventArgs)
        {
            this.Broadcast = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GLOBALMETERRESET"))
            {
                this.GlobalMeterReset = ((IGlobalMeterReset)(value));
                return;
            }
            if ((feature == "MDIRESET"))
            {
                this.MDIReset = ((IMDIReset)(value));
                return;
            }
            if ((feature == "TARIFFICATION"))
            {
                this.Tariffication = ((ITariffication)(value));
                return;
            }
            if ((feature == "ACITVATETEST"))
            {
                this.AcitvateTest = ((IActivateTestMode)(value));
                return;
            }
            if ((feature == "ACTIVATENORMAL"))
            {
                this.ActivateNormal = ((IActivateNormalMode)(value));
                return;
            }
            if ((feature == "SETOUTPUT"))
            {
                this.SetOutput = ((ISetOutputSignal)(value));
                return;
            }
            if ((feature == "SWITCHOPTICAL"))
            {
                this.SwitchOptical = ((ISwitchOpticalTestOutput)(value));
                return;
            }
            if ((feature == "POWERQUALITY"))
            {
                this.PowerQuality = ((IPowerQualityMeasurementManagement)(value));
                return;
            }
            if ((feature == "DISCONNECT"))
            {
                this.Disconnect = ((IDisconnectControl)(value));
                return;
            }
            if ((feature == "IMAGE"))
            {
                this.Image = ((IImageActivation)(value));
                return;
            }
            if ((feature == "PUSH"))
            {
                this.Push = ((IPush)(value));
                return;
            }
            if ((feature == "BROADCAST"))
            {
                this.Broadcast = ((IBroadcast)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GlobalMeterReset"))
            {
                return new GlobalMeterResetProxy(this);
            }
            if ((attribute == "MDIReset"))
            {
                return new MDIResetProxy(this);
            }
            if ((attribute == "Tariffication"))
            {
                return new TarifficationProxy(this);
            }
            if ((attribute == "AcitvateTest"))
            {
                return new AcitvateTestProxy(this);
            }
            if ((attribute == "ActivateNormal"))
            {
                return new ActivateNormalProxy(this);
            }
            if ((attribute == "SetOutput"))
            {
                return new SetOutputProxy(this);
            }
            if ((attribute == "SwitchOptical"))
            {
                return new SwitchOpticalProxy(this);
            }
            if ((attribute == "PowerQuality"))
            {
                return new PowerQualityProxy(this);
            }
            if ((attribute == "Disconnect"))
            {
                return new DisconnectProxy(this);
            }
            if ((attribute == "Image"))
            {
                return new ImageProxy(this);
            }
            if ((attribute == "Push"))
            {
                return new PushProxy(this);
            }
            if ((attribute == "Broadcast"))
            {
                return new BroadcastProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GlobalMeterReset"))
            {
                return new GlobalMeterResetProxy(this);
            }
            if ((reference == "MDIReset"))
            {
                return new MDIResetProxy(this);
            }
            if ((reference == "Tariffication"))
            {
                return new TarifficationProxy(this);
            }
            if ((reference == "AcitvateTest"))
            {
                return new AcitvateTestProxy(this);
            }
            if ((reference == "ActivateNormal"))
            {
                return new ActivateNormalProxy(this);
            }
            if ((reference == "SetOutput"))
            {
                return new SetOutputProxy(this);
            }
            if ((reference == "SwitchOptical"))
            {
                return new SwitchOpticalProxy(this);
            }
            if ((reference == "PowerQuality"))
            {
                return new PowerQualityProxy(this);
            }
            if ((reference == "Disconnect"))
            {
                return new DisconnectProxy(this);
            }
            if ((reference == "Image"))
            {
                return new ImageProxy(this);
            }
            if ((reference == "Push"))
            {
                return new PushProxy(this);
            }
            if ((reference == "Broadcast"))
            {
                return new BroadcastProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Sc" +
                        "riptTable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ScriptTable class
        /// </summary>
        public class ScriptTableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ScriptTable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ScriptTableReferencedElementsCollection(ScriptTable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GlobalMeterReset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MDIReset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffication != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AcitvateTest != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ActivateNormal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetOutput != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwitchOptical != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerQuality != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Disconnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Image != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Push != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Broadcast != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GlobalMeterResetChanged += this.PropagateValueChanges;
                this._parent.MDIResetChanged += this.PropagateValueChanges;
                this._parent.TarifficationChanged += this.PropagateValueChanges;
                this._parent.AcitvateTestChanged += this.PropagateValueChanges;
                this._parent.ActivateNormalChanged += this.PropagateValueChanges;
                this._parent.SetOutputChanged += this.PropagateValueChanges;
                this._parent.SwitchOpticalChanged += this.PropagateValueChanges;
                this._parent.PowerQualityChanged += this.PropagateValueChanges;
                this._parent.DisconnectChanged += this.PropagateValueChanges;
                this._parent.ImageChanged += this.PropagateValueChanges;
                this._parent.PushChanged += this.PropagateValueChanges;
                this._parent.BroadcastChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GlobalMeterResetChanged -= this.PropagateValueChanges;
                this._parent.MDIResetChanged -= this.PropagateValueChanges;
                this._parent.TarifficationChanged -= this.PropagateValueChanges;
                this._parent.AcitvateTestChanged -= this.PropagateValueChanges;
                this._parent.ActivateNormalChanged -= this.PropagateValueChanges;
                this._parent.SetOutputChanged -= this.PropagateValueChanges;
                this._parent.SwitchOpticalChanged -= this.PropagateValueChanges;
                this._parent.PowerQualityChanged -= this.PropagateValueChanges;
                this._parent.DisconnectChanged -= this.PropagateValueChanges;
                this._parent.ImageChanged -= this.PropagateValueChanges;
                this._parent.PushChanged -= this.PropagateValueChanges;
                this._parent.BroadcastChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GlobalMeterReset == null))
                {
                    IGlobalMeterReset globalMeterResetCasted = item.As<IGlobalMeterReset>();
                    if ((globalMeterResetCasted != null))
                    {
                        this._parent.GlobalMeterReset = globalMeterResetCasted;
                        return;
                    }
                }
                if ((this._parent.MDIReset == null))
                {
                    IMDIReset mDIResetCasted = item.As<IMDIReset>();
                    if ((mDIResetCasted != null))
                    {
                        this._parent.MDIReset = mDIResetCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffication == null))
                {
                    ITariffication tarifficationCasted = item.As<ITariffication>();
                    if ((tarifficationCasted != null))
                    {
                        this._parent.Tariffication = tarifficationCasted;
                        return;
                    }
                }
                if ((this._parent.AcitvateTest == null))
                {
                    IActivateTestMode acitvateTestCasted = item.As<IActivateTestMode>();
                    if ((acitvateTestCasted != null))
                    {
                        this._parent.AcitvateTest = acitvateTestCasted;
                        return;
                    }
                }
                if ((this._parent.ActivateNormal == null))
                {
                    IActivateNormalMode activateNormalCasted = item.As<IActivateNormalMode>();
                    if ((activateNormalCasted != null))
                    {
                        this._parent.ActivateNormal = activateNormalCasted;
                        return;
                    }
                }
                if ((this._parent.SetOutput == null))
                {
                    ISetOutputSignal setOutputCasted = item.As<ISetOutputSignal>();
                    if ((setOutputCasted != null))
                    {
                        this._parent.SetOutput = setOutputCasted;
                        return;
                    }
                }
                if ((this._parent.SwitchOptical == null))
                {
                    ISwitchOpticalTestOutput switchOpticalCasted = item.As<ISwitchOpticalTestOutput>();
                    if ((switchOpticalCasted != null))
                    {
                        this._parent.SwitchOptical = switchOpticalCasted;
                        return;
                    }
                }
                if ((this._parent.PowerQuality == null))
                {
                    IPowerQualityMeasurementManagement powerQualityCasted = item.As<IPowerQualityMeasurementManagement>();
                    if ((powerQualityCasted != null))
                    {
                        this._parent.PowerQuality = powerQualityCasted;
                        return;
                    }
                }
                if ((this._parent.Disconnect == null))
                {
                    IDisconnectControl disconnectCasted = item.As<IDisconnectControl>();
                    if ((disconnectCasted != null))
                    {
                        this._parent.Disconnect = disconnectCasted;
                        return;
                    }
                }
                if ((this._parent.Image == null))
                {
                    IImageActivation imageCasted = item.As<IImageActivation>();
                    if ((imageCasted != null))
                    {
                        this._parent.Image = imageCasted;
                        return;
                    }
                }
                if ((this._parent.Push == null))
                {
                    IPush pushCasted = item.As<IPush>();
                    if ((pushCasted != null))
                    {
                        this._parent.Push = pushCasted;
                        return;
                    }
                }
                if ((this._parent.Broadcast == null))
                {
                    IBroadcast broadcastCasted = item.As<IBroadcast>();
                    if ((broadcastCasted != null))
                    {
                        this._parent.Broadcast = broadcastCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GlobalMeterReset = null;
                this._parent.MDIReset = null;
                this._parent.Tariffication = null;
                this._parent.AcitvateTest = null;
                this._parent.ActivateNormal = null;
                this._parent.SetOutput = null;
                this._parent.SwitchOptical = null;
                this._parent.PowerQuality = null;
                this._parent.Disconnect = null;
                this._parent.Image = null;
                this._parent.Push = null;
                this._parent.Broadcast = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GlobalMeterReset))
                {
                    return true;
                }
                if ((item == this._parent.MDIReset))
                {
                    return true;
                }
                if ((item == this._parent.Tariffication))
                {
                    return true;
                }
                if ((item == this._parent.AcitvateTest))
                {
                    return true;
                }
                if ((item == this._parent.ActivateNormal))
                {
                    return true;
                }
                if ((item == this._parent.SetOutput))
                {
                    return true;
                }
                if ((item == this._parent.SwitchOptical))
                {
                    return true;
                }
                if ((item == this._parent.PowerQuality))
                {
                    return true;
                }
                if ((item == this._parent.Disconnect))
                {
                    return true;
                }
                if ((item == this._parent.Image))
                {
                    return true;
                }
                if ((item == this._parent.Push))
                {
                    return true;
                }
                if ((item == this._parent.Broadcast))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GlobalMeterReset != null))
                {
                    array[arrayIndex] = this._parent.GlobalMeterReset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MDIReset != null))
                {
                    array[arrayIndex] = this._parent.MDIReset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffication != null))
                {
                    array[arrayIndex] = this._parent.Tariffication;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AcitvateTest != null))
                {
                    array[arrayIndex] = this._parent.AcitvateTest;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ActivateNormal != null))
                {
                    array[arrayIndex] = this._parent.ActivateNormal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetOutput != null))
                {
                    array[arrayIndex] = this._parent.SetOutput;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwitchOptical != null))
                {
                    array[arrayIndex] = this._parent.SwitchOptical;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerQuality != null))
                {
                    array[arrayIndex] = this._parent.PowerQuality;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Disconnect != null))
                {
                    array[arrayIndex] = this._parent.Disconnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Image != null))
                {
                    array[arrayIndex] = this._parent.Image;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Push != null))
                {
                    array[arrayIndex] = this._parent.Push;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Broadcast != null))
                {
                    array[arrayIndex] = this._parent.Broadcast;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GlobalMeterReset == item))
                {
                    this._parent.GlobalMeterReset = null;
                    return true;
                }
                if ((this._parent.MDIReset == item))
                {
                    this._parent.MDIReset = null;
                    return true;
                }
                if ((this._parent.Tariffication == item))
                {
                    this._parent.Tariffication = null;
                    return true;
                }
                if ((this._parent.AcitvateTest == item))
                {
                    this._parent.AcitvateTest = null;
                    return true;
                }
                if ((this._parent.ActivateNormal == item))
                {
                    this._parent.ActivateNormal = null;
                    return true;
                }
                if ((this._parent.SetOutput == item))
                {
                    this._parent.SetOutput = null;
                    return true;
                }
                if ((this._parent.SwitchOptical == item))
                {
                    this._parent.SwitchOptical = null;
                    return true;
                }
                if ((this._parent.PowerQuality == item))
                {
                    this._parent.PowerQuality = null;
                    return true;
                }
                if ((this._parent.Disconnect == item))
                {
                    this._parent.Disconnect = null;
                    return true;
                }
                if ((this._parent.Image == item))
                {
                    this._parent.Image = null;
                    return true;
                }
                if ((this._parent.Push == item))
                {
                    this._parent.Push = null;
                    return true;
                }
                if ((this._parent.Broadcast == item))
                {
                    this._parent.Broadcast = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GlobalMeterReset).Concat(this._parent.MDIReset).Concat(this._parent.Tariffication).Concat(this._parent.AcitvateTest).Concat(this._parent.ActivateNormal).Concat(this._parent.SetOutput).Concat(this._parent.SwitchOptical).Concat(this._parent.PowerQuality).Concat(this._parent.Disconnect).Concat(this._parent.Image).Concat(this._parent.Push).Concat(this._parent.Broadcast).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the globalMeterReset property
        /// </summary>
        private sealed class GlobalMeterResetProxy : ModelPropertyChange<IScriptTable, IGlobalMeterReset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GlobalMeterResetProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGlobalMeterReset Value
            {
                get
                {
                    return this.ModelElement.GlobalMeterReset;
                }
                set
                {
                    this.ModelElement.GlobalMeterReset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GlobalMeterResetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GlobalMeterResetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MDIReset property
        /// </summary>
        private sealed class MDIResetProxy : ModelPropertyChange<IScriptTable, IMDIReset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MDIResetProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMDIReset Value
            {
                get
                {
                    return this.ModelElement.MDIReset;
                }
                set
                {
                    this.ModelElement.MDIReset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MDIResetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MDIResetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tariffication property
        /// </summary>
        private sealed class TarifficationProxy : ModelPropertyChange<IScriptTable, ITariffication>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TarifficationProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITariffication Value
            {
                get
                {
                    return this.ModelElement.Tariffication;
                }
                set
                {
                    this.ModelElement.Tariffication = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TarifficationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TarifficationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AcitvateTest property
        /// </summary>
        private sealed class AcitvateTestProxy : ModelPropertyChange<IScriptTable, IActivateTestMode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AcitvateTestProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivateTestMode Value
            {
                get
                {
                    return this.ModelElement.AcitvateTest;
                }
                set
                {
                    this.ModelElement.AcitvateTest = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AcitvateTestChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AcitvateTestChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivateNormal property
        /// </summary>
        private sealed class ActivateNormalProxy : ModelPropertyChange<IScriptTable, IActivateNormalMode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivateNormalProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivateNormalMode Value
            {
                get
                {
                    return this.ModelElement.ActivateNormal;
                }
                set
                {
                    this.ModelElement.ActivateNormal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivateNormalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivateNormalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetOutput property
        /// </summary>
        private sealed class SetOutputProxy : ModelPropertyChange<IScriptTable, ISetOutputSignal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetOutputProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISetOutputSignal Value
            {
                get
                {
                    return this.ModelElement.SetOutput;
                }
                set
                {
                    this.ModelElement.SetOutput = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetOutputChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetOutputChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwitchOptical property
        /// </summary>
        private sealed class SwitchOpticalProxy : ModelPropertyChange<IScriptTable, ISwitchOpticalTestOutput>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOpticalProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISwitchOpticalTestOutput Value
            {
                get
                {
                    return this.ModelElement.SwitchOptical;
                }
                set
                {
                    this.ModelElement.SwitchOptical = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwitchOpticalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwitchOpticalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerQuality property
        /// </summary>
        private sealed class PowerQualityProxy : ModelPropertyChange<IScriptTable, IPowerQualityMeasurementManagement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerQualityProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerQualityMeasurementManagement Value
            {
                get
                {
                    return this.ModelElement.PowerQuality;
                }
                set
                {
                    this.ModelElement.PowerQuality = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerQualityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerQualityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Disconnect property
        /// </summary>
        private sealed class DisconnectProxy : ModelPropertyChange<IScriptTable, IDisconnectControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDisconnectControl Value
            {
                get
                {
                    return this.ModelElement.Disconnect;
                }
                set
                {
                    this.ModelElement.Disconnect = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisconnectChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisconnectChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Image property
        /// </summary>
        private sealed class ImageProxy : ModelPropertyChange<IScriptTable, IImageActivation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImageProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImageActivation Value
            {
                get
                {
                    return this.ModelElement.Image;
                }
                set
                {
                    this.ModelElement.Image = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ImageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ImageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Push property
        /// </summary>
        private sealed class PushProxy : ModelPropertyChange<IScriptTable, IPush>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PushProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPush Value
            {
                get
                {
                    return this.ModelElement.Push;
                }
                set
                {
                    this.ModelElement.Push = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PushChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PushChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Broadcast property
        /// </summary>
        private sealed class BroadcastProxy : ModelPropertyChange<IScriptTable, IBroadcast>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BroadcastProxy(IScriptTable modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBroadcast Value
            {
                get
                {
                    return this.ModelElement.Broadcast;
                }
                set
                {
                    this.ModelElement.Broadcast = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BroadcastChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BroadcastChanged -= handler;
            }
        }
    }
}

