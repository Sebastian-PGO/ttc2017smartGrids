//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ElectricityTimeEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
        "ectricityTimeEntries")]
    public class ElectricityTimeEntries : Data, IElectricityTimeEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Time_expired_since_last_end_of_billing_period property
        /// </summary>
        private string _time_expired_since_last_end_of_billing_period;
        
        /// <summary>
        /// The backing field for the Localtime property
        /// </summary>
        private string _localtime;
        
        /// <summary>
        /// The backing field for the Localdate property
        /// </summary>
        private string _localdate;
        
        /// <summary>
        /// The backing field for the Weekday property
        /// </summary>
        private string _weekday;
        
        /// <summary>
        /// The backing field for the Timeoflastreset property
        /// </summary>
        private string _timeoflastreset;
        
        /// <summary>
        /// The backing field for the Dateoflastreset property
        /// </summary>
        private string _dateoflastreset;
        
        /// <summary>
        /// The backing field for the Outputpulseduration property
        /// </summary>
        private string _outputpulseduration;
        
        /// <summary>
        /// The backing field for the Clocksynchronizationwindow property
        /// </summary>
        private string _clocksynchronizationwindow;
        
        /// <summary>
        /// The backing field for the Clock_synchronization_method property
        /// </summary>
        private string _clock_synchronization_method;
        
        /// <summary>
        /// The backing field for the Clock_time_shift_limit property
        /// </summary>
        private string _clock_time_shift_limit;
        
        /// <summary>
        /// The backing field for the Billing_period_reset_lockout_time property
        /// </summary>
        private string _billing_period_reset_lockout_time;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Time_expired_since_last_end_of_billing_period property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Time_expired_since_last_end_of_billing_period
        {
            get
            {
                return this._time_expired_since_last_end_of_billing_period;
            }
            set
            {
                if ((this._time_expired_since_last_end_of_billing_period != value))
                {
                    string old = this._time_expired_since_last_end_of_billing_period;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_expired_since_last_end_of_billing_periodChanging(e);
                    this.OnPropertyChanging("Time_expired_since_last_end_of_billing_period", e);
                    this._time_expired_since_last_end_of_billing_period = value;
                    this.OnTime_expired_since_last_end_of_billing_periodChanged(e);
                    this.OnPropertyChanged("Time_expired_since_last_end_of_billing_period", e);
                }
            }
        }
        
        /// <summary>
        /// The Localtime property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Localtime
        {
            get
            {
                return this._localtime;
            }
            set
            {
                if ((this._localtime != value))
                {
                    string old = this._localtime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocaltimeChanging(e);
                    this.OnPropertyChanging("Localtime", e);
                    this._localtime = value;
                    this.OnLocaltimeChanged(e);
                    this.OnPropertyChanged("Localtime", e);
                }
            }
        }
        
        /// <summary>
        /// The Localdate property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Localdate
        {
            get
            {
                return this._localdate;
            }
            set
            {
                if ((this._localdate != value))
                {
                    string old = this._localdate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocaldateChanging(e);
                    this.OnPropertyChanging("Localdate", e);
                    this._localdate = value;
                    this.OnLocaldateChanged(e);
                    this.OnPropertyChanged("Localdate", e);
                }
            }
        }
        
        /// <summary>
        /// The Weekday property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Weekday
        {
            get
            {
                return this._weekday;
            }
            set
            {
                if ((this._weekday != value))
                {
                    string old = this._weekday;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeekdayChanging(e);
                    this.OnPropertyChanging("Weekday", e);
                    this._weekday = value;
                    this.OnWeekdayChanged(e);
                    this.OnPropertyChanged("Weekday", e);
                }
            }
        }
        
        /// <summary>
        /// The Timeoflastreset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Timeoflastreset
        {
            get
            {
                return this._timeoflastreset;
            }
            set
            {
                if ((this._timeoflastreset != value))
                {
                    string old = this._timeoflastreset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeoflastresetChanging(e);
                    this.OnPropertyChanging("Timeoflastreset", e);
                    this._timeoflastreset = value;
                    this.OnTimeoflastresetChanged(e);
                    this.OnPropertyChanged("Timeoflastreset", e);
                }
            }
        }
        
        /// <summary>
        /// The Dateoflastreset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Dateoflastreset
        {
            get
            {
                return this._dateoflastreset;
            }
            set
            {
                if ((this._dateoflastreset != value))
                {
                    string old = this._dateoflastreset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateoflastresetChanging(e);
                    this.OnPropertyChanging("Dateoflastreset", e);
                    this._dateoflastreset = value;
                    this.OnDateoflastresetChanged(e);
                    this.OnPropertyChanged("Dateoflastreset", e);
                }
            }
        }
        
        /// <summary>
        /// The Outputpulseduration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Outputpulseduration
        {
            get
            {
                return this._outputpulseduration;
            }
            set
            {
                if ((this._outputpulseduration != value))
                {
                    string old = this._outputpulseduration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputpulsedurationChanging(e);
                    this.OnPropertyChanging("Outputpulseduration", e);
                    this._outputpulseduration = value;
                    this.OnOutputpulsedurationChanged(e);
                    this.OnPropertyChanged("Outputpulseduration", e);
                }
            }
        }
        
        /// <summary>
        /// The Clocksynchronizationwindow property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Clocksynchronizationwindow
        {
            get
            {
                return this._clocksynchronizationwindow;
            }
            set
            {
                if ((this._clocksynchronizationwindow != value))
                {
                    string old = this._clocksynchronizationwindow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClocksynchronizationwindowChanging(e);
                    this.OnPropertyChanging("Clocksynchronizationwindow", e);
                    this._clocksynchronizationwindow = value;
                    this.OnClocksynchronizationwindowChanged(e);
                    this.OnPropertyChanged("Clocksynchronizationwindow", e);
                }
            }
        }
        
        /// <summary>
        /// The Clock_synchronization_method property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Clock_synchronization_method
        {
            get
            {
                return this._clock_synchronization_method;
            }
            set
            {
                if ((this._clock_synchronization_method != value))
                {
                    string old = this._clock_synchronization_method;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClock_synchronization_methodChanging(e);
                    this.OnPropertyChanging("Clock_synchronization_method", e);
                    this._clock_synchronization_method = value;
                    this.OnClock_synchronization_methodChanged(e);
                    this.OnPropertyChanged("Clock_synchronization_method", e);
                }
            }
        }
        
        /// <summary>
        /// The Clock_time_shift_limit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Clock_time_shift_limit
        {
            get
            {
                return this._clock_time_shift_limit;
            }
            set
            {
                if ((this._clock_time_shift_limit != value))
                {
                    string old = this._clock_time_shift_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClock_time_shift_limitChanging(e);
                    this.OnPropertyChanging("Clock_time_shift_limit", e);
                    this._clock_time_shift_limit = value;
                    this.OnClock_time_shift_limitChanged(e);
                    this.OnPropertyChanged("Clock_time_shift_limit", e);
                }
            }
        }
        
        /// <summary>
        /// The Billing_period_reset_lockout_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Billing_period_reset_lockout_time
        {
            get
            {
                return this._billing_period_reset_lockout_time;
            }
            set
            {
                if ((this._billing_period_reset_lockout_time != value))
                {
                    string old = this._billing_period_reset_lockout_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilling_period_reset_lockout_timeChanging(e);
                    this.OnPropertyChanging("Billing_period_reset_lockout_time", e);
                    this._billing_period_reset_lockout_time = value;
                    this.OnBilling_period_reset_lockout_timeChanged(e);
                    this.OnPropertyChanged("Billing_period_reset_lockout_time", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                            "ectricityTimeEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Time_expired_since_last_end_of_billing_period property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanging;
        
        /// <summary>
        /// Gets fired when the Time_expired_since_last_end_of_billing_period property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_expired_since_last_end_of_billing_periodChanged;
        
        /// <summary>
        /// Gets fired before the Localtime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaltimeChanging;
        
        /// <summary>
        /// Gets fired when the Localtime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaltimeChanged;
        
        /// <summary>
        /// Gets fired before the Localdate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaldateChanging;
        
        /// <summary>
        /// Gets fired when the Localdate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaldateChanged;
        
        /// <summary>
        /// Gets fired before the Weekday property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeekdayChanging;
        
        /// <summary>
        /// Gets fired when the Weekday property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeekdayChanged;
        
        /// <summary>
        /// Gets fired before the Timeoflastreset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Timeoflastreset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Dateoflastreset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateoflastresetChanging;
        
        /// <summary>
        /// Gets fired when the Dateoflastreset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateoflastresetChanged;
        
        /// <summary>
        /// Gets fired before the Outputpulseduration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputpulsedurationChanging;
        
        /// <summary>
        /// Gets fired when the Outputpulseduration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputpulsedurationChanged;
        
        /// <summary>
        /// Gets fired before the Clocksynchronizationwindow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanging;
        
        /// <summary>
        /// Gets fired when the Clocksynchronizationwindow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClocksynchronizationwindowChanged;
        
        /// <summary>
        /// Gets fired before the Clock_synchronization_method property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanging;
        
        /// <summary>
        /// Gets fired when the Clock_synchronization_method property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Clock_synchronization_methodChanged;
        
        /// <summary>
        /// Gets fired before the Clock_time_shift_limit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanging;
        
        /// <summary>
        /// Gets fired when the Clock_time_shift_limit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Clock_time_shift_limitChanged;
        
        /// <summary>
        /// Gets fired before the Billing_period_reset_lockout_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanging;
        
        /// <summary>
        /// Gets fired when the Billing_period_reset_lockout_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Billing_period_reset_lockout_timeChanged;
        
        /// <summary>
        /// Raises the Time_expired_since_last_end_of_billing_periodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_expired_since_last_end_of_billing_periodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_expired_since_last_end_of_billing_periodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_expired_since_last_end_of_billing_periodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_expired_since_last_end_of_billing_periodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_expired_since_last_end_of_billing_periodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaltimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaltimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaltimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaltimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaltimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaltimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaldateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaldateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaldateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaldateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaldateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaldateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeekdayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeekdayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeekdayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeekdayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeekdayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeekdayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoflastresetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoflastresetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeoflastresetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoflastresetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoflastresetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeoflastresetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateoflastresetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateoflastresetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateoflastresetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateoflastresetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateoflastresetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateoflastresetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputpulsedurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputpulsedurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputpulsedurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputpulsedurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputpulsedurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputpulsedurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClocksynchronizationwindowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClocksynchronizationwindowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClocksynchronizationwindowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClocksynchronizationwindowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClocksynchronizationwindowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClocksynchronizationwindowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_synchronization_methodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_synchronization_methodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Clock_synchronization_methodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_synchronization_methodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_synchronization_methodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Clock_synchronization_methodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_time_shift_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_time_shift_limitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Clock_time_shift_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Clock_time_shift_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClock_time_shift_limitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Clock_time_shift_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Billing_period_reset_lockout_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_reset_lockout_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Billing_period_reset_lockout_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Billing_period_reset_lockout_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_reset_lockout_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Billing_period_reset_lockout_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIME_EXPIRED_SINCE_LAST_END_OF_BILLING_PERIOD"))
            {
                return this.Time_expired_since_last_end_of_billing_period;
            }
            if ((attribute == "LOCALTIME"))
            {
                return this.Localtime;
            }
            if ((attribute == "LOCALDATE"))
            {
                return this.Localdate;
            }
            if ((attribute == "WEEKDAY"))
            {
                return this.Weekday;
            }
            if ((attribute == "TIMEOFLASTRESET"))
            {
                return this.Timeoflastreset;
            }
            if ((attribute == "DATEOFLASTRESET"))
            {
                return this.Dateoflastreset;
            }
            if ((attribute == "OUTPUTPULSEDURATION"))
            {
                return this.Outputpulseduration;
            }
            if ((attribute == "CLOCKSYNCHRONIZATIONWINDOW"))
            {
                return this.Clocksynchronizationwindow;
            }
            if ((attribute == "CLOCK_SYNCHRONIZATION_METHOD"))
            {
                return this.Clock_synchronization_method;
            }
            if ((attribute == "CLOCK_TIME_SHIFT_LIMIT"))
            {
                return this.Clock_time_shift_limit;
            }
            if ((attribute == "BILLING_PERIOD_RESET_LOCKOUT_TIME"))
            {
                return this.Billing_period_reset_lockout_time;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIME_EXPIRED_SINCE_LAST_END_OF_BILLING_PERIOD"))
            {
                this.Time_expired_since_last_end_of_billing_period = ((string)(value));
                return;
            }
            if ((feature == "LOCALTIME"))
            {
                this.Localtime = ((string)(value));
                return;
            }
            if ((feature == "LOCALDATE"))
            {
                this.Localdate = ((string)(value));
                return;
            }
            if ((feature == "WEEKDAY"))
            {
                this.Weekday = ((string)(value));
                return;
            }
            if ((feature == "TIMEOFLASTRESET"))
            {
                this.Timeoflastreset = ((string)(value));
                return;
            }
            if ((feature == "DATEOFLASTRESET"))
            {
                this.Dateoflastreset = ((string)(value));
                return;
            }
            if ((feature == "OUTPUTPULSEDURATION"))
            {
                this.Outputpulseduration = ((string)(value));
                return;
            }
            if ((feature == "CLOCKSYNCHRONIZATIONWINDOW"))
            {
                this.Clocksynchronizationwindow = ((string)(value));
                return;
            }
            if ((feature == "CLOCK_SYNCHRONIZATION_METHOD"))
            {
                this.Clock_synchronization_method = ((string)(value));
                return;
            }
            if ((feature == "CLOCK_TIME_SHIFT_LIMIT"))
            {
                this.Clock_time_shift_limit = ((string)(value));
                return;
            }
            if ((feature == "BILLING_PERIOD_RESET_LOCKOUT_TIME"))
            {
                this.Billing_period_reset_lockout_time = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                        "ectricityTimeEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_expired_since_last_end_of_billing_period property
        /// </summary>
        private sealed class Time_expired_since_last_end_of_billing_periodProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_expired_since_last_end_of_billing_periodProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_expired_since_last_end_of_billing_period;
                }
                set
                {
                    this.ModelElement.Time_expired_since_last_end_of_billing_period = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Time_expired_since_last_end_of_billing_periodChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Time_expired_since_last_end_of_billing_periodChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Localtime property
        /// </summary>
        private sealed class LocaltimeProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocaltimeProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Localtime;
                }
                set
                {
                    this.ModelElement.Localtime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaltimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaltimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Localdate property
        /// </summary>
        private sealed class LocaldateProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocaldateProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Localdate;
                }
                set
                {
                    this.ModelElement.Localdate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaldateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaldateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Weekday property
        /// </summary>
        private sealed class WeekdayProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeekdayProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Weekday;
                }
                set
                {
                    this.ModelElement.Weekday = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WeekdayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WeekdayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Timeoflastreset property
        /// </summary>
        private sealed class TimeoflastresetProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeoflastresetProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Timeoflastreset;
                }
                set
                {
                    this.ModelElement.Timeoflastreset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeoflastresetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeoflastresetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Dateoflastreset property
        /// </summary>
        private sealed class DateoflastresetProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateoflastresetProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dateoflastreset;
                }
                set
                {
                    this.ModelElement.Dateoflastreset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateoflastresetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateoflastresetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Outputpulseduration property
        /// </summary>
        private sealed class OutputpulsedurationProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputpulsedurationProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Outputpulseduration;
                }
                set
                {
                    this.ModelElement.Outputpulseduration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutputpulsedurationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutputpulsedurationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clocksynchronizationwindow property
        /// </summary>
        private sealed class ClocksynchronizationwindowProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClocksynchronizationwindowProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clocksynchronizationwindow;
                }
                set
                {
                    this.ModelElement.Clocksynchronizationwindow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClocksynchronizationwindowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClocksynchronizationwindowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clock_synchronization_method property
        /// </summary>
        private sealed class Clock_synchronization_methodProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Clock_synchronization_methodProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clock_synchronization_method;
                }
                set
                {
                    this.ModelElement.Clock_synchronization_method = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Clock_synchronization_methodChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Clock_synchronization_methodChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Clock_time_shift_limit property
        /// </summary>
        private sealed class Clock_time_shift_limitProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Clock_time_shift_limitProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Clock_time_shift_limit;
                }
                set
                {
                    this.ModelElement.Clock_time_shift_limit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Clock_time_shift_limitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Clock_time_shift_limitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billing_period_reset_lockout_time property
        /// </summary>
        private sealed class Billing_period_reset_lockout_timeProxy : ModelPropertyChange<IElectricityTimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Billing_period_reset_lockout_timeProxy(IElectricityTimeEntries modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Billing_period_reset_lockout_time;
                }
                set
                {
                    this.ModelElement.Billing_period_reset_lockout_time = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Billing_period_reset_lockout_timeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Billing_period_reset_lockout_timeChanged -= handler;
            }
        }
    }
}

