//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The public interface for OutputPulseValues_constants
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OutputPulseValues_constants))]
    [XmlDefaultImplementationTypeAttribute(typeof(OutputPulseValues_constants))]
    public interface IOutputPulseValues_constants : IModelElement, IData
    {
        
        /// <summary>
        /// The ActiveenergymetrologicalLED property
        /// </summary>
        Nullable<double> ActiveenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactiveenergymetrologicalLED property
        /// </summary>
        Nullable<double> ReactiveenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ApparentenergymetrologicalLED property
        /// </summary>
        Nullable<double> ApparentenergymetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Activeenergyoutputpulse property
        /// </summary>
        Nullable<double> Activeenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Reactiveenergyoutputpulse property
        /// </summary>
        Nullable<double> Reactiveenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Apparentenergyoutputpulse property
        /// </summary>
        Nullable<double> Apparentenergyoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squaredhoursmetrologicalLED property
        /// </summary>
        Nullable<double> Volt_squaredhoursmetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squaredhoursmetrologicalLED property
        /// </summary>
        Nullable<double> Ampere_squaredhoursmetrologicalLED
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Volt_squaredhoursoutputpulse property
        /// </summary>
        Nullable<double> Volt_squaredhoursoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Ampere_squaredhoursoutputpulse property
        /// </summary>
        Nullable<double> Ampere_squaredhoursoutputpulse
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ActiveenergymetrologicalLED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ActiveenergymetrologicalLED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveenergymetrologicalLED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveenergymetrologicalLED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the ApparentenergymetrologicalLED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the ApparentenergymetrologicalLED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApparentenergymetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Activeenergyoutputpulse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Activeenergyoutputpulse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Reactiveenergyoutputpulse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Reactiveenergyoutputpulse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Apparentenergyoutputpulse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Apparentenergyoutputpulse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApparentenergyoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursmetrologicalLED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursmetrologicalLED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursmetrologicalLEDChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredhoursoutputpulse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredhoursoutputpulse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Volt_squaredhoursoutputpulseChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredhoursoutputpulse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredhoursoutputpulse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Ampere_squaredhoursoutputpulseChanged;
    }
}

