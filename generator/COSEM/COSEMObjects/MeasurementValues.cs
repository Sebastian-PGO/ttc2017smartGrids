//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the MeasurementValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
        "asurementValues")]
    public partial class MeasurementValues : Data, IMeasurementValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Billing_period_average property
        /// </summary>
        private Nullable<double> _billing_period_average;
        
        private static Lazy<ITypedElement> _billing_period_averageAttribute = new Lazy<ITypedElement>(RetrieveBilling_period_averageAttribute);
        
        /// <summary>
        /// The backing field for the Cumulative_minimum property
        /// </summary>
        private Nullable<double> _cumulative_minimum;
        
        private static Lazy<ITypedElement> _cumulative_minimumAttribute = new Lazy<ITypedElement>(RetrieveCumulative_minimumAttribute);
        
        /// <summary>
        /// The backing field for the Cumulative_maximum property
        /// </summary>
        private Nullable<double> _cumulative_maximum;
        
        private static Lazy<ITypedElement> _cumulative_maximumAttribute = new Lazy<ITypedElement>(RetrieveCumulative_maximumAttribute);
        
        /// <summary>
        /// The backing field for the Minimum property
        /// </summary>
        private Nullable<double> _minimum;
        
        private static Lazy<ITypedElement> _minimumAttribute = new Lazy<ITypedElement>(RetrieveMinimumAttribute);
        
        /// <summary>
        /// The backing field for the Current_average property
        /// </summary>
        private Nullable<double> _current_average;
        
        private static Lazy<ITypedElement> _current_averageAttribute = new Lazy<ITypedElement>(RetrieveCurrent_averageAttribute);
        
        /// <summary>
        /// The backing field for the Last_average property
        /// </summary>
        private Nullable<double> _last_average;
        
        private static Lazy<ITypedElement> _last_averageAttribute = new Lazy<ITypedElement>(RetrieveLast_averageAttribute);
        
        /// <summary>
        /// The backing field for the Maximum property
        /// </summary>
        private Nullable<double> _maximum;
        
        private static Lazy<ITypedElement> _maximumAttribute = new Lazy<ITypedElement>(RetrieveMaximumAttribute);
        
        /// <summary>
        /// The backing field for the Instantaneous_value property
        /// </summary>
        private Nullable<double> _instantaneous_value;
        
        private static Lazy<ITypedElement> _instantaneous_valueAttribute = new Lazy<ITypedElement>(RetrieveInstantaneous_valueAttribute);
        
        /// <summary>
        /// The backing field for the Time_integral property
        /// </summary>
        private Nullable<double> _time_integral;
        
        private static Lazy<ITypedElement> _time_integralAttribute = new Lazy<ITypedElement>(RetrieveTime_integralAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_threshold property
        /// </summary>
        private Nullable<double> _under_limit_threshold;
        
        private static Lazy<ITypedElement> _under_limit_thresholdAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_occurrence_counter property
        /// </summary>
        private Nullable<double> _under_limit_occurrence_counter;
        
        private static Lazy<ITypedElement> _under_limit_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_duration property
        /// </summary>
        private Nullable<double> _under_limit_duration;
        
        private static Lazy<ITypedElement> _under_limit_durationAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_durationAttribute);
        
        /// <summary>
        /// The backing field for the Under_limit_magnitude property
        /// </summary>
        private Nullable<double> _under_limit_magnitude;
        
        private static Lazy<ITypedElement> _under_limit_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveUnder_limit_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_threshold property
        /// </summary>
        private Nullable<double> _over_limit_threshold;
        
        private static Lazy<ITypedElement> _over_limit_thresholdAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_occurrence_counter property
        /// </summary>
        private Nullable<double> _over_limit_occurrence_counter;
        
        private static Lazy<ITypedElement> _over_limit_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_duration property
        /// </summary>
        private Nullable<double> _over_limit_duration;
        
        private static Lazy<ITypedElement> _over_limit_durationAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_durationAttribute);
        
        /// <summary>
        /// The backing field for the Over_limit_magnitude property
        /// </summary>
        private Nullable<double> _over_limit_magnitude;
        
        private static Lazy<ITypedElement> _over_limit_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveOver_limit_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Missing_threshold property
        /// </summary>
        private Nullable<bool> _missing_threshold;
        
        private static Lazy<ITypedElement> _missing_thresholdAttribute = new Lazy<ITypedElement>(RetrieveMissing_thresholdAttribute);
        
        /// <summary>
        /// The backing field for the Missing_occurrence_counter property
        /// </summary>
        private Nullable<bool> _missing_occurrence_counter;
        
        private static Lazy<ITypedElement> _missing_occurrence_counterAttribute = new Lazy<ITypedElement>(RetrieveMissing_occurrence_counterAttribute);
        
        /// <summary>
        /// The backing field for the Missing_duration property
        /// </summary>
        private Nullable<bool> _missing_duration;
        
        private static Lazy<ITypedElement> _missing_durationAttribute = new Lazy<ITypedElement>(RetrieveMissing_durationAttribute);
        
        /// <summary>
        /// The backing field for the Missing_magnitude property
        /// </summary>
        private Nullable<bool> _missing_magnitude;
        
        private static Lazy<ITypedElement> _missing_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveMissing_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_under_limit property
        /// </summary>
        private string _time_threshold_for_under_limit;
        
        private static Lazy<ITypedElement> _time_threshold_for_under_limitAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_under_limitAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_over_limit property
        /// </summary>
        private string _time_threshold_for_over_limit;
        
        private static Lazy<ITypedElement> _time_threshold_for_over_limitAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_over_limitAttribute);
        
        /// <summary>
        /// The backing field for the Time_threshold_for_missing_magnitude property
        /// </summary>
        private string _time_threshold_for_missing_magnitude;
        
        private static Lazy<ITypedElement> _time_threshold_for_missing_magnitudeAttribute = new Lazy<ITypedElement>(RetrieveTime_threshold_for_missing_magnitudeAttribute);
        
        /// <summary>
        /// The backing field for the Contracted_value property
        /// </summary>
        private Nullable<double> _contracted_value;
        
        private static Lazy<ITypedElement> _contracted_valueAttribute = new Lazy<ITypedElement>(RetrieveContracted_valueAttribute);
        
        /// <summary>
        /// The backing field for the Minimum_for_recording_interval property
        /// </summary>
        private Nullable<double> _minimum_for_recording_interval;
        
        private static Lazy<ITypedElement> _minimum_for_recording_intervalAttribute = new Lazy<ITypedElement>(RetrieveMinimum_for_recording_intervalAttribute);
        
        /// <summary>
        /// The backing field for the Maximum_for_recording_interval property
        /// </summary>
        private Nullable<double> _maximum_for_recording_interval;
        
        private static Lazy<ITypedElement> _maximum_for_recording_intervalAttribute = new Lazy<ITypedElement>(RetrieveMaximum_for_recording_intervalAttribute);
        
        /// <summary>
        /// The backing field for the Test_average property
        /// </summary>
        private Nullable<double> _test_average;
        
        private static Lazy<ITypedElement> _test_averageAttribute = new Lazy<ITypedElement>(RetrieveTest_averageAttribute);
        
        private static Lazy<ITypedElement> _calculationsReference = new Lazy<ITypedElement>(RetrieveCalculationsReference);
        
        /// <summary>
        /// The backing field for the Calculations property
        /// </summary>
        private IElectricityValues _calculations;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Billing_period_average property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Billing_period_average
        {
            get
            {
                return this._billing_period_average;
            }
            set
            {
                if ((this._billing_period_average != value))
                {
                    Nullable<double> old = this._billing_period_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilling_period_averageChanging(e);
                    this.OnPropertyChanging("Billing_period_average", e, _billing_period_averageAttribute);
                    this._billing_period_average = value;
                    this.OnBilling_period_averageChanged(e);
                    this.OnPropertyChanged("Billing_period_average", e, _billing_period_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Cumulative_minimum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Cumulative_minimum
        {
            get
            {
                return this._cumulative_minimum;
            }
            set
            {
                if ((this._cumulative_minimum != value))
                {
                    Nullable<double> old = this._cumulative_minimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumulative_minimumChanging(e);
                    this.OnPropertyChanging("Cumulative_minimum", e, _cumulative_minimumAttribute);
                    this._cumulative_minimum = value;
                    this.OnCumulative_minimumChanged(e);
                    this.OnPropertyChanged("Cumulative_minimum", e, _cumulative_minimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Cumulative_maximum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Cumulative_maximum
        {
            get
            {
                return this._cumulative_maximum;
            }
            set
            {
                if ((this._cumulative_maximum != value))
                {
                    Nullable<double> old = this._cumulative_maximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumulative_maximumChanging(e);
                    this.OnPropertyChanging("Cumulative_maximum", e, _cumulative_maximumAttribute);
                    this._cumulative_maximum = value;
                    this.OnCumulative_maximumChanged(e);
                    this.OnPropertyChanged("Cumulative_maximum", e, _cumulative_maximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Minimum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Minimum
        {
            get
            {
                return this._minimum;
            }
            set
            {
                if ((this._minimum != value))
                {
                    Nullable<double> old = this._minimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumChanging(e);
                    this.OnPropertyChanging("Minimum", e, _minimumAttribute);
                    this._minimum = value;
                    this.OnMinimumChanged(e);
                    this.OnPropertyChanged("Minimum", e, _minimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Current_average property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Current_average
        {
            get
            {
                return this._current_average;
            }
            set
            {
                if ((this._current_average != value))
                {
                    Nullable<double> old = this._current_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrent_averageChanging(e);
                    this.OnPropertyChanging("Current_average", e, _current_averageAttribute);
                    this._current_average = value;
                    this.OnCurrent_averageChanged(e);
                    this.OnPropertyChanged("Current_average", e, _current_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Last_average property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Last_average
        {
            get
            {
                return this._last_average;
            }
            set
            {
                if ((this._last_average != value))
                {
                    Nullable<double> old = this._last_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLast_averageChanging(e);
                    this.OnPropertyChanging("Last_average", e, _last_averageAttribute);
                    this._last_average = value;
                    this.OnLast_averageChanged(e);
                    this.OnPropertyChanged("Last_average", e, _last_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Maximum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Maximum
        {
            get
            {
                return this._maximum;
            }
            set
            {
                if ((this._maximum != value))
                {
                    Nullable<double> old = this._maximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumChanging(e);
                    this.OnPropertyChanging("Maximum", e, _maximumAttribute);
                    this._maximum = value;
                    this.OnMaximumChanged(e);
                    this.OnPropertyChanged("Maximum", e, _maximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Instantaneous_value property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Instantaneous_value
        {
            get
            {
                return this._instantaneous_value;
            }
            set
            {
                if ((this._instantaneous_value != value))
                {
                    Nullable<double> old = this._instantaneous_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstantaneous_valueChanging(e);
                    this.OnPropertyChanging("Instantaneous_value", e, _instantaneous_valueAttribute);
                    this._instantaneous_value = value;
                    this.OnInstantaneous_valueChanged(e);
                    this.OnPropertyChanged("Instantaneous_value", e, _instantaneous_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_integral property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Time_integral
        {
            get
            {
                return this._time_integral;
            }
            set
            {
                if ((this._time_integral != value))
                {
                    Nullable<double> old = this._time_integral;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_integralChanging(e);
                    this.OnPropertyChanging("Time_integral", e, _time_integralAttribute);
                    this._time_integral = value;
                    this.OnTime_integralChanged(e);
                    this.OnPropertyChanged("Time_integral", e, _time_integralAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_threshold property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Under_limit_threshold
        {
            get
            {
                return this._under_limit_threshold;
            }
            set
            {
                if ((this._under_limit_threshold != value))
                {
                    Nullable<double> old = this._under_limit_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_thresholdChanging(e);
                    this.OnPropertyChanging("Under_limit_threshold", e, _under_limit_thresholdAttribute);
                    this._under_limit_threshold = value;
                    this.OnUnder_limit_thresholdChanged(e);
                    this.OnPropertyChanged("Under_limit_threshold", e, _under_limit_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_occurrence_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Under_limit_occurrence_counter
        {
            get
            {
                return this._under_limit_occurrence_counter;
            }
            set
            {
                if ((this._under_limit_occurrence_counter != value))
                {
                    Nullable<double> old = this._under_limit_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Under_limit_occurrence_counter", e, _under_limit_occurrence_counterAttribute);
                    this._under_limit_occurrence_counter = value;
                    this.OnUnder_limit_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Under_limit_occurrence_counter", e, _under_limit_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Under_limit_duration
        {
            get
            {
                return this._under_limit_duration;
            }
            set
            {
                if ((this._under_limit_duration != value))
                {
                    Nullable<double> old = this._under_limit_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_durationChanging(e);
                    this.OnPropertyChanging("Under_limit_duration", e, _under_limit_durationAttribute);
                    this._under_limit_duration = value;
                    this.OnUnder_limit_durationChanged(e);
                    this.OnPropertyChanged("Under_limit_duration", e, _under_limit_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Under_limit_magnitude property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Under_limit_magnitude
        {
            get
            {
                return this._under_limit_magnitude;
            }
            set
            {
                if ((this._under_limit_magnitude != value))
                {
                    Nullable<double> old = this._under_limit_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnder_limit_magnitudeChanging(e);
                    this.OnPropertyChanging("Under_limit_magnitude", e, _under_limit_magnitudeAttribute);
                    this._under_limit_magnitude = value;
                    this.OnUnder_limit_magnitudeChanged(e);
                    this.OnPropertyChanged("Under_limit_magnitude", e, _under_limit_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_threshold property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Over_limit_threshold
        {
            get
            {
                return this._over_limit_threshold;
            }
            set
            {
                if ((this._over_limit_threshold != value))
                {
                    Nullable<double> old = this._over_limit_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_thresholdChanging(e);
                    this.OnPropertyChanging("Over_limit_threshold", e, _over_limit_thresholdAttribute);
                    this._over_limit_threshold = value;
                    this.OnOver_limit_thresholdChanged(e);
                    this.OnPropertyChanged("Over_limit_threshold", e, _over_limit_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_occurrence_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Over_limit_occurrence_counter
        {
            get
            {
                return this._over_limit_occurrence_counter;
            }
            set
            {
                if ((this._over_limit_occurrence_counter != value))
                {
                    Nullable<double> old = this._over_limit_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Over_limit_occurrence_counter", e, _over_limit_occurrence_counterAttribute);
                    this._over_limit_occurrence_counter = value;
                    this.OnOver_limit_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Over_limit_occurrence_counter", e, _over_limit_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Over_limit_duration
        {
            get
            {
                return this._over_limit_duration;
            }
            set
            {
                if ((this._over_limit_duration != value))
                {
                    Nullable<double> old = this._over_limit_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_durationChanging(e);
                    this.OnPropertyChanging("Over_limit_duration", e, _over_limit_durationAttribute);
                    this._over_limit_duration = value;
                    this.OnOver_limit_durationChanged(e);
                    this.OnPropertyChanged("Over_limit_duration", e, _over_limit_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Over_limit_magnitude property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Over_limit_magnitude
        {
            get
            {
                return this._over_limit_magnitude;
            }
            set
            {
                if ((this._over_limit_magnitude != value))
                {
                    Nullable<double> old = this._over_limit_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOver_limit_magnitudeChanging(e);
                    this.OnPropertyChanging("Over_limit_magnitude", e, _over_limit_magnitudeAttribute);
                    this._over_limit_magnitude = value;
                    this.OnOver_limit_magnitudeChanged(e);
                    this.OnPropertyChanged("Over_limit_magnitude", e, _over_limit_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_threshold property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Missing_threshold
        {
            get
            {
                return this._missing_threshold;
            }
            set
            {
                if ((this._missing_threshold != value))
                {
                    Nullable<bool> old = this._missing_threshold;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_thresholdChanging(e);
                    this.OnPropertyChanging("Missing_threshold", e, _missing_thresholdAttribute);
                    this._missing_threshold = value;
                    this.OnMissing_thresholdChanged(e);
                    this.OnPropertyChanged("Missing_threshold", e, _missing_thresholdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_occurrence_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Missing_occurrence_counter
        {
            get
            {
                return this._missing_occurrence_counter;
            }
            set
            {
                if ((this._missing_occurrence_counter != value))
                {
                    Nullable<bool> old = this._missing_occurrence_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_occurrence_counterChanging(e);
                    this.OnPropertyChanging("Missing_occurrence_counter", e, _missing_occurrence_counterAttribute);
                    this._missing_occurrence_counter = value;
                    this.OnMissing_occurrence_counterChanged(e);
                    this.OnPropertyChanged("Missing_occurrence_counter", e, _missing_occurrence_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_duration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Missing_duration
        {
            get
            {
                return this._missing_duration;
            }
            set
            {
                if ((this._missing_duration != value))
                {
                    Nullable<bool> old = this._missing_duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_durationChanging(e);
                    this.OnPropertyChanging("Missing_duration", e, _missing_durationAttribute);
                    this._missing_duration = value;
                    this.OnMissing_durationChanged(e);
                    this.OnPropertyChanged("Missing_duration", e, _missing_durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Missing_magnitude property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Missing_magnitude
        {
            get
            {
                return this._missing_magnitude;
            }
            set
            {
                if ((this._missing_magnitude != value))
                {
                    Nullable<bool> old = this._missing_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMissing_magnitudeChanging(e);
                    this.OnPropertyChanging("Missing_magnitude", e, _missing_magnitudeAttribute);
                    this._missing_magnitude = value;
                    this.OnMissing_magnitudeChanged(e);
                    this.OnPropertyChanged("Missing_magnitude", e, _missing_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_under_limit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Time_threshold_for_under_limit
        {
            get
            {
                return this._time_threshold_for_under_limit;
            }
            set
            {
                if ((this._time_threshold_for_under_limit != value))
                {
                    string old = this._time_threshold_for_under_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_under_limitChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_under_limit", e, _time_threshold_for_under_limitAttribute);
                    this._time_threshold_for_under_limit = value;
                    this.OnTime_threshold_for_under_limitChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_under_limit", e, _time_threshold_for_under_limitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_over_limit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Time_threshold_for_over_limit
        {
            get
            {
                return this._time_threshold_for_over_limit;
            }
            set
            {
                if ((this._time_threshold_for_over_limit != value))
                {
                    string old = this._time_threshold_for_over_limit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_over_limitChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_over_limit", e, _time_threshold_for_over_limitAttribute);
                    this._time_threshold_for_over_limit = value;
                    this.OnTime_threshold_for_over_limitChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_over_limit", e, _time_threshold_for_over_limitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_for_missing_magnitude property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Time_threshold_for_missing_magnitude
        {
            get
            {
                return this._time_threshold_for_missing_magnitude;
            }
            set
            {
                if ((this._time_threshold_for_missing_magnitude != value))
                {
                    string old = this._time_threshold_for_missing_magnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_for_missing_magnitudeChanging(e);
                    this.OnPropertyChanging("Time_threshold_for_missing_magnitude", e, _time_threshold_for_missing_magnitudeAttribute);
                    this._time_threshold_for_missing_magnitude = value;
                    this.OnTime_threshold_for_missing_magnitudeChanged(e);
                    this.OnPropertyChanged("Time_threshold_for_missing_magnitude", e, _time_threshold_for_missing_magnitudeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Contracted_value property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Contracted_value
        {
            get
            {
                return this._contracted_value;
            }
            set
            {
                if ((this._contracted_value != value))
                {
                    Nullable<double> old = this._contracted_value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContracted_valueChanging(e);
                    this.OnPropertyChanging("Contracted_value", e, _contracted_valueAttribute);
                    this._contracted_value = value;
                    this.OnContracted_valueChanged(e);
                    this.OnPropertyChanged("Contracted_value", e, _contracted_valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Minimum_for_recording_interval property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Minimum_for_recording_interval
        {
            get
            {
                return this._minimum_for_recording_interval;
            }
            set
            {
                if ((this._minimum_for_recording_interval != value))
                {
                    Nullable<double> old = this._minimum_for_recording_interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimum_for_recording_intervalChanging(e);
                    this.OnPropertyChanging("Minimum_for_recording_interval", e, _minimum_for_recording_intervalAttribute);
                    this._minimum_for_recording_interval = value;
                    this.OnMinimum_for_recording_intervalChanged(e);
                    this.OnPropertyChanged("Minimum_for_recording_interval", e, _minimum_for_recording_intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Maximum_for_recording_interval property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Maximum_for_recording_interval
        {
            get
            {
                return this._maximum_for_recording_interval;
            }
            set
            {
                if ((this._maximum_for_recording_interval != value))
                {
                    Nullable<double> old = this._maximum_for_recording_interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximum_for_recording_intervalChanging(e);
                    this.OnPropertyChanging("Maximum_for_recording_interval", e, _maximum_for_recording_intervalAttribute);
                    this._maximum_for_recording_interval = value;
                    this.OnMaximum_for_recording_intervalChanged(e);
                    this.OnPropertyChanged("Maximum_for_recording_interval", e, _maximum_for_recording_intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Test_average property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Test_average
        {
            get
            {
                return this._test_average;
            }
            set
            {
                if ((this._test_average != value))
                {
                    Nullable<double> old = this._test_average;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTest_averageChanging(e);
                    this.OnPropertyChanging("Test_average", e, _test_averageAttribute);
                    this._test_average = value;
                    this.OnTest_averageChanged(e);
                    this.OnPropertyChanged("Test_average", e, _test_averageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The calculations property
        /// </summary>
        [XmlElementNameAttribute("calculations")]
        [XmlAttributeAttribute(true)]
        public virtual IElectricityValues Calculations
        {
            get
            {
                return this._calculations;
            }
            set
            {
                if ((this._calculations != value))
                {
                    IElectricityValues old = this._calculations;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCalculationsChanging(e);
                    this.OnPropertyChanging("Calculations", e, _calculationsReference);
                    this._calculations = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCalculations;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCalculations;
                    }
                    this.OnCalculationsChanged(e);
                    this.OnPropertyChanged("Calculations", e, _calculationsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeasurementValuesReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                            "asurementValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Billing_period_average property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Billing_period_averageChanging;
        
        /// <summary>
        /// Gets fired when the Billing_period_average property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Billing_period_averageChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_minimum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Cumulative_minimumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_minimum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Cumulative_minimumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_maximum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Cumulative_maximumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_maximum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Cumulative_maximumChanged;
        
        /// <summary>
        /// Gets fired before the Minimum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumChanging;
        
        /// <summary>
        /// Gets fired when the Minimum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumChanged;
        
        /// <summary>
        /// Gets fired before the Current_average property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Current_averageChanging;
        
        /// <summary>
        /// Gets fired when the Current_average property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Current_averageChanged;
        
        /// <summary>
        /// Gets fired before the Last_average property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Last_averageChanging;
        
        /// <summary>
        /// Gets fired when the Last_average property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Last_averageChanged;
        
        /// <summary>
        /// Gets fired before the Maximum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumChanging;
        
        /// <summary>
        /// Gets fired when the Maximum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumChanged;
        
        /// <summary>
        /// Gets fired before the Instantaneous_value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Instantaneous_value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Time_integral property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_integralChanging;
        
        /// <summary>
        /// Gets fired when the Time_integral property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_integralChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_threshold property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_threshold property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_occurrence_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_occurrence_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_magnitude property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_magnitude property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_threshold property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_threshold property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_occurrence_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_occurrence_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_magnitude property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_magnitude property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Missing_threshold property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Missing_threshold property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Missing_occurrence_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Missing_occurrence_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Missing_duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_durationChanging;
        
        /// <summary>
        /// Gets fired when the Missing_duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_durationChanged;
        
        /// <summary>
        /// Gets fired before the Missing_magnitude property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Missing_magnitude property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_under_limit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_under_limit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_over_limit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_over_limit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_missing_magnitude property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_missing_magnitude property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Contracted_value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Contracted_valueChanging;
        
        /// <summary>
        /// Gets fired when the Contracted_value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Contracted_valueChanged;
        
        /// <summary>
        /// Gets fired before the Minimum_for_recording_interval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Minimum_for_recording_interval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Maximum_for_recording_interval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Maximum_for_recording_interval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Test_average property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Test_averageChanging;
        
        /// <summary>
        /// Gets fired when the Test_average property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Test_averageChanged;
        
        /// <summary>
        /// Gets fired before the Calculations property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CalculationsChanging;
        
        /// <summary>
        /// Gets fired when the Calculations property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CalculationsChanged;
        
        private static ITypedElement RetrieveBilling_period_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Billing_period_average")));
        }
        
        /// <summary>
        /// Raises the Billing_period_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_averageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Billing_period_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Billing_period_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilling_period_averageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Billing_period_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumulative_minimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Cumulative_minimum")));
        }
        
        /// <summary>
        /// Raises the Cumulative_minimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_minimumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Cumulative_minimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Cumulative_minimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_minimumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Cumulative_minimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumulative_maximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Cumulative_maximum")));
        }
        
        /// <summary>
        /// Raises the Cumulative_maximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_maximumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Cumulative_maximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Cumulative_maximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumulative_maximumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Cumulative_maximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Minimum")));
        }
        
        /// <summary>
        /// Raises the MinimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrent_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Current_average")));
        }
        
        /// <summary>
        /// Raises the Current_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrent_averageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Current_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Current_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrent_averageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Current_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLast_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Last_average")));
        }
        
        /// <summary>
        /// Raises the Last_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLast_averageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Last_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Last_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLast_averageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Last_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Maximum")));
        }
        
        /// <summary>
        /// Raises the MaximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInstantaneous_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Instantaneous_value")));
        }
        
        /// <summary>
        /// Raises the Instantaneous_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstantaneous_valueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Instantaneous_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Instantaneous_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstantaneous_valueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Instantaneous_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_integralAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Time_integral")));
        }
        
        /// <summary>
        /// Raises the Time_integralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_integralChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_integralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_integralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_integralChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_integralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Under_limit_threshold")));
        }
        
        /// <summary>
        /// Raises the Under_limit_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Under_limit_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Under_limit_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Under_limit_duration")));
        }
        
        /// <summary>
        /// Raises the Under_limit_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnder_limit_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Under_limit_magnitude")));
        }
        
        /// <summary>
        /// Raises the Under_limit_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Under_limit_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnder_limit_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Under_limit_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Over_limit_threshold")));
        }
        
        /// <summary>
        /// Raises the Over_limit_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Over_limit_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Over_limit_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Over_limit_duration")));
        }
        
        /// <summary>
        /// Raises the Over_limit_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOver_limit_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Over_limit_magnitude")));
        }
        
        /// <summary>
        /// Raises the Over_limit_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Over_limit_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOver_limit_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Over_limit_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_thresholdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Missing_threshold")));
        }
        
        /// <summary>
        /// Raises the Missing_thresholdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_thresholdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_thresholdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_thresholdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_thresholdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_thresholdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_occurrence_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Missing_occurrence_counter")));
        }
        
        /// <summary>
        /// Raises the Missing_occurrence_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_occurrence_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_occurrence_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_occurrence_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_occurrence_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_occurrence_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_durationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Missing_duration")));
        }
        
        /// <summary>
        /// Raises the Missing_durationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_durationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_durationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_durationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_durationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_durationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMissing_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Missing_magnitude")));
        }
        
        /// <summary>
        /// Raises the Missing_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Missing_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMissing_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Missing_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_under_limitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_under_limit")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_under_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_under_limitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_under_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_under_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_under_limitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_under_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_over_limitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_over_limit")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_over_limitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_over_limitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_over_limitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_over_limitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_over_limitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_over_limitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTime_threshold_for_missing_magnitudeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Time_threshold_for_missing_magnitude")));
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_missing_magnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_missing_magnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_missing_magnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_for_missing_magnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_for_missing_magnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_for_missing_magnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveContracted_valueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Contracted_value")));
        }
        
        /// <summary>
        /// Raises the Contracted_valueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContracted_valueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Contracted_valueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Contracted_valueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContracted_valueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Contracted_valueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimum_for_recording_intervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Minimum_for_recording_interval")));
        }
        
        /// <summary>
        /// Raises the Minimum_for_recording_intervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimum_for_recording_intervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Minimum_for_recording_intervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Minimum_for_recording_intervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimum_for_recording_intervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Minimum_for_recording_intervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximum_for_recording_intervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Maximum_for_recording_interval")));
        }
        
        /// <summary>
        /// Raises the Maximum_for_recording_intervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximum_for_recording_intervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Maximum_for_recording_intervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Maximum_for_recording_intervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximum_for_recording_intervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Maximum_for_recording_intervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTest_averageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("Test_average")));
        }
        
        /// <summary>
        /// Raises the Test_averageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTest_averageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Test_averageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Test_averageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTest_averageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Test_averageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCalculationsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementValues.ClassInstance)).Resolve("calculations")));
        }
        
        /// <summary>
        /// Raises the CalculationsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CalculationsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CalculationsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CalculationsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Calculations property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCalculations(object sender, System.EventArgs eventArgs)
        {
            this.Calculations = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BILLING_PERIOD_AVERAGE"))
            {
                return this.Billing_period_average;
            }
            if ((attribute == "CUMULATIVE_MINIMUM"))
            {
                return this.Cumulative_minimum;
            }
            if ((attribute == "CUMULATIVE_MAXIMUM"))
            {
                return this.Cumulative_maximum;
            }
            if ((attribute == "MINIMUM"))
            {
                return this.Minimum;
            }
            if ((attribute == "CURRENT_AVERAGE"))
            {
                return this.Current_average;
            }
            if ((attribute == "LAST_AVERAGE"))
            {
                return this.Last_average;
            }
            if ((attribute == "MAXIMUM"))
            {
                return this.Maximum;
            }
            if ((attribute == "INSTANTANEOUS_VALUE"))
            {
                return this.Instantaneous_value;
            }
            if ((attribute == "TIME_INTEGRAL"))
            {
                return this.Time_integral;
            }
            if ((attribute == "UNDER_LIMIT_THRESHOLD"))
            {
                return this.Under_limit_threshold;
            }
            if ((attribute == "UNDER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return this.Under_limit_occurrence_counter;
            }
            if ((attribute == "UNDER_LIMIT_DURATION"))
            {
                return this.Under_limit_duration;
            }
            if ((attribute == "UNDER_LIMIT_MAGNITUDE"))
            {
                return this.Under_limit_magnitude;
            }
            if ((attribute == "OVER_LIMIT_THRESHOLD"))
            {
                return this.Over_limit_threshold;
            }
            if ((attribute == "OVER_LIMIT_OCCURRENCE_COUNTER"))
            {
                return this.Over_limit_occurrence_counter;
            }
            if ((attribute == "OVER_LIMIT_DURATION"))
            {
                return this.Over_limit_duration;
            }
            if ((attribute == "OVER_LIMIT_MAGNITUDE"))
            {
                return this.Over_limit_magnitude;
            }
            if ((attribute == "MISSING_THRESHOLD"))
            {
                return this.Missing_threshold;
            }
            if ((attribute == "MISSING_OCCURRENCE_COUNTER"))
            {
                return this.Missing_occurrence_counter;
            }
            if ((attribute == "MISSING_DURATION"))
            {
                return this.Missing_duration;
            }
            if ((attribute == "MISSING_MAGNITUDE"))
            {
                return this.Missing_magnitude;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_UNDER_LIMIT"))
            {
                return this.Time_threshold_for_under_limit;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_OVER_LIMIT"))
            {
                return this.Time_threshold_for_over_limit;
            }
            if ((attribute == "TIME_THRESHOLD_FOR_MISSING_MAGNITUDE"))
            {
                return this.Time_threshold_for_missing_magnitude;
            }
            if ((attribute == "CONTRACTED_VALUE"))
            {
                return this.Contracted_value;
            }
            if ((attribute == "MINIMUM_FOR_RECORDING_INTERVAL"))
            {
                return this.Minimum_for_recording_interval;
            }
            if ((attribute == "MAXIMUM_FOR_RECORDING_INTERVAL"))
            {
                return this.Maximum_for_recording_interval;
            }
            if ((attribute == "TEST_AVERAGE"))
            {
                return this.Test_average;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CALCULATIONS"))
            {
                this.Calculations = ((IElectricityValues)(value));
                return;
            }
            if ((feature == "BILLING_PERIOD_AVERAGE"))
            {
                this.Billing_period_average = ((double)(value));
                return;
            }
            if ((feature == "CUMULATIVE_MINIMUM"))
            {
                this.Cumulative_minimum = ((double)(value));
                return;
            }
            if ((feature == "CUMULATIVE_MAXIMUM"))
            {
                this.Cumulative_maximum = ((double)(value));
                return;
            }
            if ((feature == "MINIMUM"))
            {
                this.Minimum = ((double)(value));
                return;
            }
            if ((feature == "CURRENT_AVERAGE"))
            {
                this.Current_average = ((double)(value));
                return;
            }
            if ((feature == "LAST_AVERAGE"))
            {
                this.Last_average = ((double)(value));
                return;
            }
            if ((feature == "MAXIMUM"))
            {
                this.Maximum = ((double)(value));
                return;
            }
            if ((feature == "INSTANTANEOUS_VALUE"))
            {
                this.Instantaneous_value = ((double)(value));
                return;
            }
            if ((feature == "TIME_INTEGRAL"))
            {
                this.Time_integral = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_THRESHOLD"))
            {
                this.Under_limit_threshold = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_OCCURRENCE_COUNTER"))
            {
                this.Under_limit_occurrence_counter = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_DURATION"))
            {
                this.Under_limit_duration = ((double)(value));
                return;
            }
            if ((feature == "UNDER_LIMIT_MAGNITUDE"))
            {
                this.Under_limit_magnitude = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_THRESHOLD"))
            {
                this.Over_limit_threshold = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_OCCURRENCE_COUNTER"))
            {
                this.Over_limit_occurrence_counter = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_DURATION"))
            {
                this.Over_limit_duration = ((double)(value));
                return;
            }
            if ((feature == "OVER_LIMIT_MAGNITUDE"))
            {
                this.Over_limit_magnitude = ((double)(value));
                return;
            }
            if ((feature == "MISSING_THRESHOLD"))
            {
                this.Missing_threshold = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_OCCURRENCE_COUNTER"))
            {
                this.Missing_occurrence_counter = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_DURATION"))
            {
                this.Missing_duration = ((bool)(value));
                return;
            }
            if ((feature == "MISSING_MAGNITUDE"))
            {
                this.Missing_magnitude = ((bool)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_UNDER_LIMIT"))
            {
                this.Time_threshold_for_under_limit = ((string)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_OVER_LIMIT"))
            {
                this.Time_threshold_for_over_limit = ((string)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_FOR_MISSING_MAGNITUDE"))
            {
                this.Time_threshold_for_missing_magnitude = ((string)(value));
                return;
            }
            if ((feature == "CONTRACTED_VALUE"))
            {
                this.Contracted_value = ((double)(value));
                return;
            }
            if ((feature == "MINIMUM_FOR_RECORDING_INTERVAL"))
            {
                this.Minimum_for_recording_interval = ((double)(value));
                return;
            }
            if ((feature == "MAXIMUM_FOR_RECORDING_INTERVAL"))
            {
                this.Maximum_for_recording_interval = ((double)(value));
                return;
            }
            if ((feature == "TEST_AVERAGE"))
            {
                this.Test_average = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Calculations"))
            {
                return new CalculationsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Calculations"))
            {
                return new CalculationsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                        "asurementValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeasurementValues class
        /// </summary>
        public class MeasurementValuesReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeasurementValues _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeasurementValuesReferencedElementsCollection(MeasurementValues parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Calculations != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CalculationsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CalculationsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Calculations == null))
                {
                    IElectricityValues calculationsCasted = item.As<IElectricityValues>();
                    if ((calculationsCasted != null))
                    {
                        this._parent.Calculations = calculationsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Calculations = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Calculations))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Calculations != null))
                {
                    array[arrayIndex] = this._parent.Calculations;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Calculations == item))
                {
                    this._parent.Calculations = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Calculations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Billing_period_average property
        /// </summary>
        private sealed class Billing_period_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Billing_period_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Billing_period_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Billing_period_average;
                }
                set
                {
                    this.ModelElement.Billing_period_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Cumulative_minimum property
        /// </summary>
        private sealed class Cumulative_minimumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Cumulative_minimumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Cumulative_minimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Cumulative_minimum;
                }
                set
                {
                    this.ModelElement.Cumulative_minimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Cumulative_maximum property
        /// </summary>
        private sealed class Cumulative_maximumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Cumulative_maximumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Cumulative_maximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Cumulative_maximum;
                }
                set
                {
                    this.ModelElement.Cumulative_maximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Minimum property
        /// </summary>
        private sealed class MinimumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Minimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Minimum;
                }
                set
                {
                    this.ModelElement.Minimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Current_average property
        /// </summary>
        private sealed class Current_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Current_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Current_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Current_average;
                }
                set
                {
                    this.ModelElement.Current_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Last_average property
        /// </summary>
        private sealed class Last_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Last_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Last_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Last_average;
                }
                set
                {
                    this.ModelElement.Last_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Maximum property
        /// </summary>
        private sealed class MaximumProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Maximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Maximum;
                }
                set
                {
                    this.ModelElement.Maximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Instantaneous_value property
        /// </summary>
        private sealed class Instantaneous_valueProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Instantaneous_valueProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Instantaneous_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Instantaneous_value;
                }
                set
                {
                    this.ModelElement.Instantaneous_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_integral property
        /// </summary>
        private sealed class Time_integralProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_integralProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_integral")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Time_integral;
                }
                set
                {
                    this.ModelElement.Time_integral = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_threshold property
        /// </summary>
        private sealed class Under_limit_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_threshold;
                }
                set
                {
                    this.ModelElement.Under_limit_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_occurrence_counter property
        /// </summary>
        private sealed class Under_limit_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Under_limit_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_duration property
        /// </summary>
        private sealed class Under_limit_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_duration;
                }
                set
                {
                    this.ModelElement.Under_limit_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Under_limit_magnitude property
        /// </summary>
        private sealed class Under_limit_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Under_limit_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Under_limit_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Under_limit_magnitude;
                }
                set
                {
                    this.ModelElement.Under_limit_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_threshold property
        /// </summary>
        private sealed class Over_limit_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_threshold;
                }
                set
                {
                    this.ModelElement.Over_limit_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_occurrence_counter property
        /// </summary>
        private sealed class Over_limit_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Over_limit_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_duration property
        /// </summary>
        private sealed class Over_limit_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_duration;
                }
                set
                {
                    this.ModelElement.Over_limit_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Over_limit_magnitude property
        /// </summary>
        private sealed class Over_limit_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Over_limit_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Over_limit_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Over_limit_magnitude;
                }
                set
                {
                    this.ModelElement.Over_limit_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_threshold property
        /// </summary>
        private sealed class Missing_thresholdProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_thresholdProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_threshold")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_threshold;
                }
                set
                {
                    this.ModelElement.Missing_threshold = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_occurrence_counter property
        /// </summary>
        private sealed class Missing_occurrence_counterProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_occurrence_counterProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_occurrence_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_occurrence_counter;
                }
                set
                {
                    this.ModelElement.Missing_occurrence_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_duration property
        /// </summary>
        private sealed class Missing_durationProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_durationProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_duration;
                }
                set
                {
                    this.ModelElement.Missing_duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Missing_magnitude property
        /// </summary>
        private sealed class Missing_magnitudeProxy : ModelPropertyChange<IMeasurementValues, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Missing_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Missing_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Missing_magnitude;
                }
                set
                {
                    this.ModelElement.Missing_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_under_limit property
        /// </summary>
        private sealed class Time_threshold_for_under_limitProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_under_limitProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_under_limit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_under_limit;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_under_limit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_over_limit property
        /// </summary>
        private sealed class Time_threshold_for_over_limitProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_over_limitProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_over_limit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_over_limit;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_over_limit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_for_missing_magnitude property
        /// </summary>
        private sealed class Time_threshold_for_missing_magnitudeProxy : ModelPropertyChange<IMeasurementValues, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_for_missing_magnitudeProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Time_threshold_for_missing_magnitude")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_for_missing_magnitude;
                }
                set
                {
                    this.ModelElement.Time_threshold_for_missing_magnitude = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Contracted_value property
        /// </summary>
        private sealed class Contracted_valueProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Contracted_valueProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Contracted_value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Contracted_value;
                }
                set
                {
                    this.ModelElement.Contracted_value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Minimum_for_recording_interval property
        /// </summary>
        private sealed class Minimum_for_recording_intervalProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Minimum_for_recording_intervalProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Minimum_for_recording_interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Minimum_for_recording_interval;
                }
                set
                {
                    this.ModelElement.Minimum_for_recording_interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Maximum_for_recording_interval property
        /// </summary>
        private sealed class Maximum_for_recording_intervalProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Maximum_for_recording_intervalProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Maximum_for_recording_interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Maximum_for_recording_interval;
                }
                set
                {
                    this.ModelElement.Maximum_for_recording_interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Test_average property
        /// </summary>
        private sealed class Test_averageProxy : ModelPropertyChange<IMeasurementValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Test_averageProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "Test_average")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Test_average;
                }
                set
                {
                    this.ModelElement.Test_average = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the calculations property
        /// </summary>
        private sealed class CalculationsProxy : ModelPropertyChange<IMeasurementValues, IElectricityValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CalculationsProxy(IMeasurementValues modelElement) : 
                    base(modelElement, "calculations")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityValues Value
            {
                get
                {
                    return this.ModelElement.Calculations;
                }
                set
                {
                    this.ModelElement.Calculations = value;
                }
            }
        }
    }
}

