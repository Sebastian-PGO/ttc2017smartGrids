//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the EnvironmentRelatedParameters class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/En" +
        "vironmentRelatedParameters")]
    public class EnvironmentRelatedParameters : Register, IEnvironmentRelatedParameters, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Ambient_temperature property
        /// </summary>
        private Nullable<double> _ambient_temperature;
        
        /// <summary>
        /// The backing field for the Ambient_pressure property
        /// </summary>
        private Nullable<double> _ambient_pressure;
        
        /// <summary>
        /// The backing field for the Relative_humidity property
        /// </summary>
        private Nullable<double> _relative_humidity;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ambient_temperature property
        /// </summary>
        [XmlElementNameAttribute("ambient_temperature")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ambient_temperature
        {
            get
            {
                return this._ambient_temperature;
            }
            set
            {
                if ((this._ambient_temperature != value))
                {
                    Nullable<double> old = this._ambient_temperature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmbient_temperatureChanging(e);
                    this.OnPropertyChanging("Ambient_temperature", e);
                    this._ambient_temperature = value;
                    this.OnAmbient_temperatureChanged(e);
                    this.OnPropertyChanged("Ambient_temperature", e);
                }
            }
        }
        
        /// <summary>
        /// The Ambient_pressure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ambient_pressure
        {
            get
            {
                return this._ambient_pressure;
            }
            set
            {
                if ((this._ambient_pressure != value))
                {
                    Nullable<double> old = this._ambient_pressure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmbient_pressureChanging(e);
                    this.OnPropertyChanging("Ambient_pressure", e);
                    this._ambient_pressure = value;
                    this.OnAmbient_pressureChanged(e);
                    this.OnPropertyChanged("Ambient_pressure", e);
                }
            }
        }
        
        /// <summary>
        /// The Relative_humidity property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Relative_humidity
        {
            get
            {
                return this._relative_humidity;
            }
            set
            {
                if ((this._relative_humidity != value))
                {
                    Nullable<double> old = this._relative_humidity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelative_humidityChanging(e);
                    this.OnPropertyChanging("Relative_humidity", e);
                    this._relative_humidity = value;
                    this.OnRelative_humidityChanged(e);
                    this.OnPropertyChanged("Relative_humidity", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/En" +
                            "vironmentRelatedParameters")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Ambient_temperature property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ambient_temperatureChanging;
        
        /// <summary>
        /// Gets fired when the Ambient_temperature property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ambient_temperatureChanged;
        
        /// <summary>
        /// Gets fired before the Ambient_pressure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ambient_pressureChanging;
        
        /// <summary>
        /// Gets fired when the Ambient_pressure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ambient_pressureChanged;
        
        /// <summary>
        /// Gets fired before the Relative_humidity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Relative_humidityChanging;
        
        /// <summary>
        /// Gets fired when the Relative_humidity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Relative_humidityChanged;
        
        /// <summary>
        /// Raises the Ambient_temperatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_temperatureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ambient_temperatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ambient_temperatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_temperatureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ambient_temperatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ambient_pressureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_pressureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ambient_pressureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ambient_pressureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbient_pressureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ambient_pressureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Relative_humidityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelative_humidityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Relative_humidityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Relative_humidityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelative_humidityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Relative_humidityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AMBIENT_TEMPERATURE"))
            {
                return this.Ambient_temperature;
            }
            if ((attribute == "AMBIENT_PRESSURE"))
            {
                return this.Ambient_pressure;
            }
            if ((attribute == "RELATIVE_HUMIDITY"))
            {
                return this.Relative_humidity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AMBIENT_TEMPERATURE"))
            {
                this.Ambient_temperature = ((double)(value));
                return;
            }
            if ((feature == "AMBIENT_PRESSURE"))
            {
                this.Ambient_pressure = ((double)(value));
                return;
            }
            if ((feature == "RELATIVE_HUMIDITY"))
            {
                this.Relative_humidity = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/En" +
                        "vironmentRelatedParameters")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ambient_temperature property
        /// </summary>
        private sealed class Ambient_temperatureProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ambient_temperatureProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ambient_temperature;
                }
                set
                {
                    this.ModelElement.Ambient_temperature = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ambient_temperatureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ambient_temperatureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ambient_pressure property
        /// </summary>
        private sealed class Ambient_pressureProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ambient_pressureProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ambient_pressure;
                }
                set
                {
                    this.ModelElement.Ambient_pressure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ambient_pressureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ambient_pressureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Relative_humidity property
        /// </summary>
        private sealed class Relative_humidityProxy : ModelPropertyChange<IEnvironmentRelatedParameters, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Relative_humidityProxy(IEnvironmentRelatedParameters modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Relative_humidity;
                }
                set
                {
                    this.ModelElement.Relative_humidity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Relative_humidityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Relative_humidityChanged -= handler;
            }
        }
    }
}

