//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the PowerFailureMonitoring class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Po" +
        "werFailureMonitoring")]
    public class PowerFailureMonitoring : Data, IPowerFailureMonitoring, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FailuresAllPhases property
        /// </summary>
        private Nullable<int> _failuresAllPhases;
        
        /// <summary>
        /// The backing field for the FailuresL1 property
        /// </summary>
        private Nullable<int> _failuresL1;
        
        /// <summary>
        /// The backing field for the FailuresL2 property
        /// </summary>
        private Nullable<int> _failuresL2;
        
        /// <summary>
        /// The backing field for the FailuresL3 property
        /// </summary>
        private Nullable<int> _failuresL3;
        
        /// <summary>
        /// The backing field for the FailuresAny property
        /// </summary>
        private Nullable<int> _failuresAny;
        
        /// <summary>
        /// The backing field for the Auxiliarysupply property
        /// </summary>
        private string _auxiliarysupply;
        
        /// <summary>
        /// The backing field for the LongFailsAll property
        /// </summary>
        private Nullable<int> _longFailsAll;
        
        /// <summary>
        /// The backing field for the LongFailsL1 property
        /// </summary>
        private Nullable<int> _longFailsL1;
        
        /// <summary>
        /// The backing field for the LongFailsL2 property
        /// </summary>
        private Nullable<int> _longFailsL2;
        
        /// <summary>
        /// The backing field for the LongFailsL3 property
        /// </summary>
        private Nullable<int> _longFailsL3;
        
        /// <summary>
        /// The backing field for the LongFailsAny property
        /// </summary>
        private Nullable<int> _longFailsAny;
        
        /// <summary>
        /// The backing field for the TimeAll property
        /// </summary>
        private string _timeAll;
        
        /// <summary>
        /// The backing field for the TimeL1 property
        /// </summary>
        private string _timeL1;
        
        /// <summary>
        /// The backing field for the TimeL2 property
        /// </summary>
        private string _timeL2;
        
        /// <summary>
        /// The backing field for the TimeL3 property
        /// </summary>
        private string _timeL3;
        
        /// <summary>
        /// The backing field for the TimeAny property
        /// </summary>
        private string _timeAny;
        
        /// <summary>
        /// The backing field for the DurationAll property
        /// </summary>
        private Nullable<int> _durationAll;
        
        /// <summary>
        /// The backing field for the DurationL1 property
        /// </summary>
        private Nullable<int> _durationL1;
        
        /// <summary>
        /// The backing field for the DurationL2 property
        /// </summary>
        private Nullable<int> _durationL2;
        
        /// <summary>
        /// The backing field for the DurationL3 property
        /// </summary>
        private Nullable<int> _durationL3;
        
        /// <summary>
        /// The backing field for the DurationAny property
        /// </summary>
        private Nullable<int> _durationAny;
        
        /// <summary>
        /// The backing field for the Time_threshold_long_powerfailure property
        /// </summary>
        private Nullable<int> _time_threshold_long_powerfailure;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The FailuresAllPhases property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FailuresAllPhases
        {
            get
            {
                return this._failuresAllPhases;
            }
            set
            {
                if ((this._failuresAllPhases != value))
                {
                    Nullable<int> old = this._failuresAllPhases;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresAllPhasesChanging(e);
                    this.OnPropertyChanging("FailuresAllPhases", e);
                    this._failuresAllPhases = value;
                    this.OnFailuresAllPhasesChanged(e);
                    this.OnPropertyChanged("FailuresAllPhases", e);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FailuresL1
        {
            get
            {
                return this._failuresL1;
            }
            set
            {
                if ((this._failuresL1 != value))
                {
                    Nullable<int> old = this._failuresL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL1Changing(e);
                    this.OnPropertyChanging("FailuresL1", e);
                    this._failuresL1 = value;
                    this.OnFailuresL1Changed(e);
                    this.OnPropertyChanged("FailuresL1", e);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FailuresL2
        {
            get
            {
                return this._failuresL2;
            }
            set
            {
                if ((this._failuresL2 != value))
                {
                    Nullable<int> old = this._failuresL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL2Changing(e);
                    this.OnPropertyChanging("FailuresL2", e);
                    this._failuresL2 = value;
                    this.OnFailuresL2Changed(e);
                    this.OnPropertyChanged("FailuresL2", e);
                }
            }
        }
        
        /// <summary>
        /// The FailuresL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FailuresL3
        {
            get
            {
                return this._failuresL3;
            }
            set
            {
                if ((this._failuresL3 != value))
                {
                    Nullable<int> old = this._failuresL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresL3Changing(e);
                    this.OnPropertyChanging("FailuresL3", e);
                    this._failuresL3 = value;
                    this.OnFailuresL3Changed(e);
                    this.OnPropertyChanged("FailuresL3", e);
                }
            }
        }
        
        /// <summary>
        /// The FailuresAny property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FailuresAny
        {
            get
            {
                return this._failuresAny;
            }
            set
            {
                if ((this._failuresAny != value))
                {
                    Nullable<int> old = this._failuresAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailuresAnyChanging(e);
                    this.OnPropertyChanging("FailuresAny", e);
                    this._failuresAny = value;
                    this.OnFailuresAnyChanged(e);
                    this.OnPropertyChanged("FailuresAny", e);
                }
            }
        }
        
        /// <summary>
        /// The Auxiliarysupply property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Auxiliarysupply
        {
            get
            {
                return this._auxiliarysupply;
            }
            set
            {
                if ((this._auxiliarysupply != value))
                {
                    string old = this._auxiliarysupply;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxiliarysupplyChanging(e);
                    this.OnPropertyChanging("Auxiliarysupply", e);
                    this._auxiliarysupply = value;
                    this.OnAuxiliarysupplyChanged(e);
                    this.OnPropertyChanged("Auxiliarysupply", e);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LongFailsAll
        {
            get
            {
                return this._longFailsAll;
            }
            set
            {
                if ((this._longFailsAll != value))
                {
                    Nullable<int> old = this._longFailsAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsAllChanging(e);
                    this.OnPropertyChanging("LongFailsAll", e);
                    this._longFailsAll = value;
                    this.OnLongFailsAllChanged(e);
                    this.OnPropertyChanged("LongFailsAll", e);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LongFailsL1
        {
            get
            {
                return this._longFailsL1;
            }
            set
            {
                if ((this._longFailsL1 != value))
                {
                    Nullable<int> old = this._longFailsL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL1Changing(e);
                    this.OnPropertyChanging("LongFailsL1", e);
                    this._longFailsL1 = value;
                    this.OnLongFailsL1Changed(e);
                    this.OnPropertyChanged("LongFailsL1", e);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LongFailsL2
        {
            get
            {
                return this._longFailsL2;
            }
            set
            {
                if ((this._longFailsL2 != value))
                {
                    Nullable<int> old = this._longFailsL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL2Changing(e);
                    this.OnPropertyChanging("LongFailsL2", e);
                    this._longFailsL2 = value;
                    this.OnLongFailsL2Changed(e);
                    this.OnPropertyChanged("LongFailsL2", e);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LongFailsL3
        {
            get
            {
                return this._longFailsL3;
            }
            set
            {
                if ((this._longFailsL3 != value))
                {
                    Nullable<int> old = this._longFailsL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsL3Changing(e);
                    this.OnPropertyChanging("LongFailsL3", e);
                    this._longFailsL3 = value;
                    this.OnLongFailsL3Changed(e);
                    this.OnPropertyChanged("LongFailsL3", e);
                }
            }
        }
        
        /// <summary>
        /// The LongFailsAny property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LongFailsAny
        {
            get
            {
                return this._longFailsAny;
            }
            set
            {
                if ((this._longFailsAny != value))
                {
                    Nullable<int> old = this._longFailsAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongFailsAnyChanging(e);
                    this.OnPropertyChanging("LongFailsAny", e);
                    this._longFailsAny = value;
                    this.OnLongFailsAnyChanged(e);
                    this.OnPropertyChanged("LongFailsAny", e);
                }
            }
        }
        
        /// <summary>
        /// The TimeAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimeAll
        {
            get
            {
                return this._timeAll;
            }
            set
            {
                if ((this._timeAll != value))
                {
                    string old = this._timeAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeAllChanging(e);
                    this.OnPropertyChanging("TimeAll", e);
                    this._timeAll = value;
                    this.OnTimeAllChanged(e);
                    this.OnPropertyChanged("TimeAll", e);
                }
            }
        }
        
        /// <summary>
        /// The TimeL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimeL1
        {
            get
            {
                return this._timeL1;
            }
            set
            {
                if ((this._timeL1 != value))
                {
                    string old = this._timeL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL1Changing(e);
                    this.OnPropertyChanging("TimeL1", e);
                    this._timeL1 = value;
                    this.OnTimeL1Changed(e);
                    this.OnPropertyChanged("TimeL1", e);
                }
            }
        }
        
        /// <summary>
        /// The TimeL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimeL2
        {
            get
            {
                return this._timeL2;
            }
            set
            {
                if ((this._timeL2 != value))
                {
                    string old = this._timeL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL2Changing(e);
                    this.OnPropertyChanging("TimeL2", e);
                    this._timeL2 = value;
                    this.OnTimeL2Changed(e);
                    this.OnPropertyChanged("TimeL2", e);
                }
            }
        }
        
        /// <summary>
        /// The TimeL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimeL3
        {
            get
            {
                return this._timeL3;
            }
            set
            {
                if ((this._timeL3 != value))
                {
                    string old = this._timeL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeL3Changing(e);
                    this.OnPropertyChanging("TimeL3", e);
                    this._timeL3 = value;
                    this.OnTimeL3Changed(e);
                    this.OnPropertyChanged("TimeL3", e);
                }
            }
        }
        
        /// <summary>
        /// The TimeAny property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TimeAny
        {
            get
            {
                return this._timeAny;
            }
            set
            {
                if ((this._timeAny != value))
                {
                    string old = this._timeAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeAnyChanging(e);
                    this.OnPropertyChanging("TimeAny", e);
                    this._timeAny = value;
                    this.OnTimeAnyChanged(e);
                    this.OnPropertyChanged("TimeAny", e);
                }
            }
        }
        
        /// <summary>
        /// The DurationAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> DurationAll
        {
            get
            {
                return this._durationAll;
            }
            set
            {
                if ((this._durationAll != value))
                {
                    Nullable<int> old = this._durationAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationAllChanging(e);
                    this.OnPropertyChanging("DurationAll", e);
                    this._durationAll = value;
                    this.OnDurationAllChanged(e);
                    this.OnPropertyChanged("DurationAll", e);
                }
            }
        }
        
        /// <summary>
        /// The DurationL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> DurationL1
        {
            get
            {
                return this._durationL1;
            }
            set
            {
                if ((this._durationL1 != value))
                {
                    Nullable<int> old = this._durationL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL1Changing(e);
                    this.OnPropertyChanging("DurationL1", e);
                    this._durationL1 = value;
                    this.OnDurationL1Changed(e);
                    this.OnPropertyChanged("DurationL1", e);
                }
            }
        }
        
        /// <summary>
        /// The DurationL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> DurationL2
        {
            get
            {
                return this._durationL2;
            }
            set
            {
                if ((this._durationL2 != value))
                {
                    Nullable<int> old = this._durationL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL2Changing(e);
                    this.OnPropertyChanging("DurationL2", e);
                    this._durationL2 = value;
                    this.OnDurationL2Changed(e);
                    this.OnPropertyChanged("DurationL2", e);
                }
            }
        }
        
        /// <summary>
        /// The DurationL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> DurationL3
        {
            get
            {
                return this._durationL3;
            }
            set
            {
                if ((this._durationL3 != value))
                {
                    Nullable<int> old = this._durationL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationL3Changing(e);
                    this.OnPropertyChanging("DurationL3", e);
                    this._durationL3 = value;
                    this.OnDurationL3Changed(e);
                    this.OnPropertyChanged("DurationL3", e);
                }
            }
        }
        
        /// <summary>
        /// The DurationAny property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> DurationAny
        {
            get
            {
                return this._durationAny;
            }
            set
            {
                if ((this._durationAny != value))
                {
                    Nullable<int> old = this._durationAny;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationAnyChanging(e);
                    this.OnPropertyChanging("DurationAny", e);
                    this._durationAny = value;
                    this.OnDurationAnyChanged(e);
                    this.OnPropertyChanged("DurationAny", e);
                }
            }
        }
        
        /// <summary>
        /// The Time_threshold_long_powerfailure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Time_threshold_long_powerfailure
        {
            get
            {
                return this._time_threshold_long_powerfailure;
            }
            set
            {
                if ((this._time_threshold_long_powerfailure != value))
                {
                    Nullable<int> old = this._time_threshold_long_powerfailure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTime_threshold_long_powerfailureChanging(e);
                    this.OnPropertyChanging("Time_threshold_long_powerfailure", e);
                    this._time_threshold_long_powerfailure = value;
                    this.OnTime_threshold_long_powerfailureChanged(e);
                    this.OnPropertyChanged("Time_threshold_long_powerfailure", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Po" +
                            "werFailureMonitoring")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FailuresAllPhases property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanging;
        
        /// <summary>
        /// Gets fired when the FailuresAllPhases property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresAllPhasesChanged;
        
        /// <summary>
        /// Gets fired before the FailuresL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL1Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL1Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL2Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL2Changed;
        
        /// <summary>
        /// Gets fired before the FailuresL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL3Changing;
        
        /// <summary>
        /// Gets fired when the FailuresL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresL3Changed;
        
        /// <summary>
        /// Gets fired before the FailuresAny property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresAnyChanging;
        
        /// <summary>
        /// Gets fired when the FailuresAny property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailuresAnyChanged;
        
        /// <summary>
        /// Gets fired before the Auxiliarysupply property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanging;
        
        /// <summary>
        /// Gets fired when the Auxiliarysupply property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliarysupplyChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsAllChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsAllChanged;
        
        /// <summary>
        /// Gets fired before the LongFailsL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL1Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL1Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL2Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL2Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL3Changing;
        
        /// <summary>
        /// Gets fired when the LongFailsL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsL3Changed;
        
        /// <summary>
        /// Gets fired before the LongFailsAny property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsAnyChanging;
        
        /// <summary>
        /// Gets fired when the LongFailsAny property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongFailsAnyChanged;
        
        /// <summary>
        /// Gets fired before the TimeAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeAllChanging;
        
        /// <summary>
        /// Gets fired when the TimeAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeAllChanged;
        
        /// <summary>
        /// Gets fired before the TimeL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL1Changing;
        
        /// <summary>
        /// Gets fired when the TimeL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL1Changed;
        
        /// <summary>
        /// Gets fired before the TimeL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL2Changing;
        
        /// <summary>
        /// Gets fired when the TimeL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL2Changed;
        
        /// <summary>
        /// Gets fired before the TimeL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL3Changing;
        
        /// <summary>
        /// Gets fired when the TimeL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeL3Changed;
        
        /// <summary>
        /// Gets fired before the TimeAny property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeAnyChanging;
        
        /// <summary>
        /// Gets fired when the TimeAny property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeAnyChanged;
        
        /// <summary>
        /// Gets fired before the DurationAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationAllChanging;
        
        /// <summary>
        /// Gets fired when the DurationAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationAllChanged;
        
        /// <summary>
        /// Gets fired before the DurationL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL1Changing;
        
        /// <summary>
        /// Gets fired when the DurationL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL1Changed;
        
        /// <summary>
        /// Gets fired before the DurationL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL2Changing;
        
        /// <summary>
        /// Gets fired when the DurationL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL2Changed;
        
        /// <summary>
        /// Gets fired before the DurationL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL3Changing;
        
        /// <summary>
        /// Gets fired when the DurationL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationL3Changed;
        
        /// <summary>
        /// Gets fired before the DurationAny property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationAnyChanging;
        
        /// <summary>
        /// Gets fired when the DurationAny property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationAnyChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_long_powerfailure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_long_powerfailure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Time_threshold_long_powerfailureChanged;
        
        /// <summary>
        /// Raises the FailuresAllPhasesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAllPhasesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresAllPhasesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresAllPhasesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAllPhasesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresAllPhasesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAnyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailuresAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailuresAnyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailuresAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxiliarysupplyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliarysupplyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliarysupplyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxiliarysupplyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliarysupplyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliarysupplyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAnyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongFailsAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongFailsAnyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongFailsAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAnyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeAnyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAnyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAnyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationAnyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationAnyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationAnyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationAnyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_long_powerfailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_long_powerfailureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_long_powerfailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Time_threshold_long_powerfailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTime_threshold_long_powerfailureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Time_threshold_long_powerfailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FAILURESALLPHASES"))
            {
                return this.FailuresAllPhases;
            }
            if ((attribute == "FAILURESL1"))
            {
                return this.FailuresL1;
            }
            if ((attribute == "FAILURESL2"))
            {
                return this.FailuresL2;
            }
            if ((attribute == "FAILURESL3"))
            {
                return this.FailuresL3;
            }
            if ((attribute == "FAILURESANY"))
            {
                return this.FailuresAny;
            }
            if ((attribute == "AUXILIARYSUPPLY"))
            {
                return this.Auxiliarysupply;
            }
            if ((attribute == "LONGFAILSALL"))
            {
                return this.LongFailsAll;
            }
            if ((attribute == "LONGFAILSL1"))
            {
                return this.LongFailsL1;
            }
            if ((attribute == "LONGFAILSL2"))
            {
                return this.LongFailsL2;
            }
            if ((attribute == "LONGFAILSL3"))
            {
                return this.LongFailsL3;
            }
            if ((attribute == "LONGFAILSANY"))
            {
                return this.LongFailsAny;
            }
            if ((attribute == "TIMEALL"))
            {
                return this.TimeAll;
            }
            if ((attribute == "TIMEL1"))
            {
                return this.TimeL1;
            }
            if ((attribute == "TIMEL2"))
            {
                return this.TimeL2;
            }
            if ((attribute == "TIMEL3"))
            {
                return this.TimeL3;
            }
            if ((attribute == "TIMEANY"))
            {
                return this.TimeAny;
            }
            if ((attribute == "DURATIONALL"))
            {
                return this.DurationAll;
            }
            if ((attribute == "DURATIONL1"))
            {
                return this.DurationL1;
            }
            if ((attribute == "DURATIONL2"))
            {
                return this.DurationL2;
            }
            if ((attribute == "DURATIONL3"))
            {
                return this.DurationL3;
            }
            if ((attribute == "DURATIONANY"))
            {
                return this.DurationAny;
            }
            if ((attribute == "TIME_THRESHOLD_LONG_POWERFAILURE"))
            {
                return this.Time_threshold_long_powerfailure;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FAILURESALLPHASES"))
            {
                this.FailuresAllPhases = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL1"))
            {
                this.FailuresL1 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL2"))
            {
                this.FailuresL2 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESL3"))
            {
                this.FailuresL3 = ((int)(value));
                return;
            }
            if ((feature == "FAILURESANY"))
            {
                this.FailuresAny = ((int)(value));
                return;
            }
            if ((feature == "AUXILIARYSUPPLY"))
            {
                this.Auxiliarysupply = ((string)(value));
                return;
            }
            if ((feature == "LONGFAILSALL"))
            {
                this.LongFailsAll = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL1"))
            {
                this.LongFailsL1 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL2"))
            {
                this.LongFailsL2 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSL3"))
            {
                this.LongFailsL3 = ((int)(value));
                return;
            }
            if ((feature == "LONGFAILSANY"))
            {
                this.LongFailsAny = ((int)(value));
                return;
            }
            if ((feature == "TIMEALL"))
            {
                this.TimeAll = ((string)(value));
                return;
            }
            if ((feature == "TIMEL1"))
            {
                this.TimeL1 = ((string)(value));
                return;
            }
            if ((feature == "TIMEL2"))
            {
                this.TimeL2 = ((string)(value));
                return;
            }
            if ((feature == "TIMEL3"))
            {
                this.TimeL3 = ((string)(value));
                return;
            }
            if ((feature == "TIMEANY"))
            {
                this.TimeAny = ((string)(value));
                return;
            }
            if ((feature == "DURATIONALL"))
            {
                this.DurationAll = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL1"))
            {
                this.DurationL1 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL2"))
            {
                this.DurationL2 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONL3"))
            {
                this.DurationL3 = ((int)(value));
                return;
            }
            if ((feature == "DURATIONANY"))
            {
                this.DurationAny = ((int)(value));
                return;
            }
            if ((feature == "TIME_THRESHOLD_LONG_POWERFAILURE"))
            {
                this.Time_threshold_long_powerfailure = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Po" +
                        "werFailureMonitoring")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresAllPhases property
        /// </summary>
        private sealed class FailuresAllPhasesProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresAllPhasesProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresAllPhases;
                }
                set
                {
                    this.ModelElement.FailuresAllPhases = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresAllPhasesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresAllPhasesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL1 property
        /// </summary>
        private sealed class FailuresL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL1;
                }
                set
                {
                    this.ModelElement.FailuresL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL2 property
        /// </summary>
        private sealed class FailuresL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL2;
                }
                set
                {
                    this.ModelElement.FailuresL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresL3 property
        /// </summary>
        private sealed class FailuresL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresL3;
                }
                set
                {
                    this.ModelElement.FailuresL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FailuresAny property
        /// </summary>
        private sealed class FailuresAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailuresAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FailuresAny;
                }
                set
                {
                    this.ModelElement.FailuresAny = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresAnyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailuresAnyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Auxiliarysupply property
        /// </summary>
        private sealed class AuxiliarysupplyProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxiliarysupplyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Auxiliarysupply;
                }
                set
                {
                    this.ModelElement.Auxiliarysupply = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxiliarysupplyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxiliarysupplyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsAll property
        /// </summary>
        private sealed class LongFailsAllProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsAll;
                }
                set
                {
                    this.ModelElement.LongFailsAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL1 property
        /// </summary>
        private sealed class LongFailsL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL1;
                }
                set
                {
                    this.ModelElement.LongFailsL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL2 property
        /// </summary>
        private sealed class LongFailsL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL2;
                }
                set
                {
                    this.ModelElement.LongFailsL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsL3 property
        /// </summary>
        private sealed class LongFailsL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsL3;
                }
                set
                {
                    this.ModelElement.LongFailsL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LongFailsAny property
        /// </summary>
        private sealed class LongFailsAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongFailsAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.LongFailsAny;
                }
                set
                {
                    this.ModelElement.LongFailsAny = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsAnyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongFailsAnyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeAll property
        /// </summary>
        private sealed class TimeAllProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeAll;
                }
                set
                {
                    this.ModelElement.TimeAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL1 property
        /// </summary>
        private sealed class TimeL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL1;
                }
                set
                {
                    this.ModelElement.TimeL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL2 property
        /// </summary>
        private sealed class TimeL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL2;
                }
                set
                {
                    this.ModelElement.TimeL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeL3 property
        /// </summary>
        private sealed class TimeL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeL3;
                }
                set
                {
                    this.ModelElement.TimeL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeAny property
        /// </summary>
        private sealed class TimeAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeAny;
                }
                set
                {
                    this.ModelElement.TimeAny = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeAnyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeAnyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationAll property
        /// </summary>
        private sealed class DurationAllProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationAllProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationAll;
                }
                set
                {
                    this.ModelElement.DurationAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL1 property
        /// </summary>
        private sealed class DurationL1Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL1Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL1;
                }
                set
                {
                    this.ModelElement.DurationL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL2 property
        /// </summary>
        private sealed class DurationL2Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL2Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL2;
                }
                set
                {
                    this.ModelElement.DurationL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationL3 property
        /// </summary>
        private sealed class DurationL3Proxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationL3Proxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationL3;
                }
                set
                {
                    this.ModelElement.DurationL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DurationAny property
        /// </summary>
        private sealed class DurationAnyProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationAnyProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.DurationAny;
                }
                set
                {
                    this.ModelElement.DurationAny = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationAnyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DurationAnyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Time_threshold_long_powerfailure property
        /// </summary>
        private sealed class Time_threshold_long_powerfailureProxy : ModelPropertyChange<IPowerFailureMonitoring, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Time_threshold_long_powerfailureProxy(IPowerFailureMonitoring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Time_threshold_long_powerfailure;
                }
                set
                {
                    this.ModelElement.Time_threshold_long_powerfailure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Time_threshold_long_powerfailureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Time_threshold_long_powerfailureChanged -= handler;
            }
        }
    }
}

