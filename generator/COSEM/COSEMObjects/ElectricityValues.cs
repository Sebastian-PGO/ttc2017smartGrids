//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ElectricityValues class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
        "ectricityValues")]
    public class ElectricityValues : Data, IElectricityValues, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActivePowerpL1 property
        /// </summary>
        private Nullable<double> _activePowerpL1;
        
        /// <summary>
        /// The backing field for the ActivePowerpall property
        /// </summary>
        private Nullable<double> _activePowerpall;
        
        /// <summary>
        /// The backing field for the ActivePowerpL2 property
        /// </summary>
        private Nullable<double> _activePowerpL2;
        
        /// <summary>
        /// The backing field for the ActivePowerpL3 property
        /// </summary>
        private Nullable<double> _activePowerpL3;
        
        /// <summary>
        /// The backing field for the ActivePowermL2 property
        /// </summary>
        private Nullable<double> _activePowermL2;
        
        /// <summary>
        /// The backing field for the ActivePowermL1 property
        /// </summary>
        private Nullable<double> _activePowermL1;
        
        /// <summary>
        /// The backing field for the ActivePowermL3 property
        /// </summary>
        private Nullable<double> _activePowermL3;
        
        /// <summary>
        /// The backing field for the ActivePowermall property
        /// </summary>
        private Nullable<double> _activePowermall;
        
        /// <summary>
        /// The backing field for the ReactivePowerpL1 property
        /// </summary>
        private Nullable<double> _reactivePowerpL1;
        
        /// <summary>
        /// The backing field for the ReactivePowerpL2 property
        /// </summary>
        private Nullable<double> _reactivePowerpL2;
        
        /// <summary>
        /// The backing field for the ReactivePowerpL3 property
        /// </summary>
        private Nullable<double> _reactivePowerpL3;
        
        /// <summary>
        /// The backing field for the ReactivePowerpall property
        /// </summary>
        private Nullable<double> _reactivePowerpall;
        
        /// <summary>
        /// The backing field for the ReactivePowermL1 property
        /// </summary>
        private Nullable<double> _reactivePowermL1;
        
        /// <summary>
        /// The backing field for the ReactivePowermL2 property
        /// </summary>
        private Nullable<double> _reactivePowermL2;
        
        /// <summary>
        /// The backing field for the ReactivePowermL3 property
        /// </summary>
        private Nullable<double> _reactivePowermL3;
        
        /// <summary>
        /// The backing field for the ReactivePowermall property
        /// </summary>
        private Nullable<double> _reactivePowermall;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL1 property
        /// </summary>
        private Nullable<double> _reactivePowerQIL1;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL2 property
        /// </summary>
        private Nullable<double> _reactivePowerQIL2;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIL3 property
        /// </summary>
        private Nullable<double> _reactivePowerQIL3;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIall property
        /// </summary>
        private Nullable<double> _reactivePowerQIall;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL1 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIL1;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL2 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIL2;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIL3 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIL3;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIall property
        /// </summary>
        private Nullable<double> _reactivePowerQIIall;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL1 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIIL1;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL2 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIIL2;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIL3 property
        /// </summary>
        private Nullable<double> _reactivePowerQIIIL3;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIIIall property
        /// </summary>
        private Nullable<double> _reactivePowerQIIIall;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL1 property
        /// </summary>
        private Nullable<double> _reactivePowerQIVL1;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL2 property
        /// </summary>
        private Nullable<double> _reactivePowerQIVL2;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVL3 property
        /// </summary>
        private Nullable<double> _reactivePowerQIVL3;
        
        /// <summary>
        /// The backing field for the ReactivePowerQIVall property
        /// </summary>
        private Nullable<double> _reactivePowerQIVall;
        
        /// <summary>
        /// The backing field for the ApparentPowerpL1 property
        /// </summary>
        private Nullable<double> _apparentPowerpL1;
        
        /// <summary>
        /// The backing field for the ApparentPowerpL2 property
        /// </summary>
        private Nullable<double> _apparentPowerpL2;
        
        /// <summary>
        /// The backing field for the ApparentPowerpL3 property
        /// </summary>
        private Nullable<double> _apparentPowerpL3;
        
        /// <summary>
        /// The backing field for the ApparentPowerpAll property
        /// </summary>
        private Nullable<double> _apparentPowerpAll;
        
        /// <summary>
        /// The backing field for the ApparentPowermL1 property
        /// </summary>
        private Nullable<double> _apparentPowermL1;
        
        /// <summary>
        /// The backing field for the ApparentPowermL2 property
        /// </summary>
        private Nullable<double> _apparentPowermL2;
        
        /// <summary>
        /// The backing field for the ApparentPowermL3 property
        /// </summary>
        private Nullable<double> _apparentPowermL3;
        
        /// <summary>
        /// The backing field for the ApparentPowermAll property
        /// </summary>
        private Nullable<double> _apparentPowermAll;
        
        /// <summary>
        /// The backing field for the CurrentL1 property
        /// </summary>
        private Nullable<double> _currentL1;
        
        /// <summary>
        /// The backing field for the CurrentL2 property
        /// </summary>
        private Nullable<double> _currentL2;
        
        /// <summary>
        /// The backing field for the CurrentL3 property
        /// </summary>
        private Nullable<double> _currentL3;
        
        /// <summary>
        /// The backing field for the CurrentAll property
        /// </summary>
        private Nullable<double> _currentAll;
        
        /// <summary>
        /// The backing field for the VoltageL1 property
        /// </summary>
        private Nullable<double> _voltageL1;
        
        /// <summary>
        /// The backing field for the VoltageL2 property
        /// </summary>
        private Nullable<double> _voltageL2;
        
        /// <summary>
        /// The backing field for the VoltageL3 property
        /// </summary>
        private Nullable<double> _voltageL3;
        
        /// <summary>
        /// The backing field for the VoltageAll property
        /// </summary>
        private Nullable<double> _voltageAll;
        
        /// <summary>
        /// The backing field for the PowerFactorL1 property
        /// </summary>
        private Nullable<double> _powerFactorL1;
        
        /// <summary>
        /// The backing field for the PowerFactorL2 property
        /// </summary>
        private Nullable<double> _powerFactorL2;
        
        /// <summary>
        /// The backing field for the PowerFactorL3 property
        /// </summary>
        private Nullable<double> _powerFactorL3;
        
        /// <summary>
        /// The backing field for the PowerFactorAll property
        /// </summary>
        private Nullable<double> _powerFactorAll;
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL1 property
        /// </summary>
        private Nullable<double> _supplyFrequencyL1;
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL2 property
        /// </summary>
        private Nullable<double> _supplyFrequencyL2;
        
        /// <summary>
        /// The backing field for the SupplyFrequencyL3 property
        /// </summary>
        private Nullable<double> _supplyFrequencyL3;
        
        /// <summary>
        /// The backing field for the SupplyFrequencyAll property
        /// </summary>
        private Nullable<double> _supplyFrequencyAll;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL1 property
        /// </summary>
        private Nullable<double> _activePowerAbsPL1;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL2 property
        /// </summary>
        private Nullable<double> _activePowerAbsPL2;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPL3 property
        /// </summary>
        private Nullable<double> _activePowerAbsPL3;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsPAll property
        /// </summary>
        private Nullable<double> _activePowerAbsPAll;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML1 property
        /// </summary>
        private Nullable<double> _activePowerAbsML1;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML2 property
        /// </summary>
        private Nullable<double> _activePowerAbsML2;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsML3 property
        /// </summary>
        private Nullable<double> _activePowerAbsML3;
        
        /// <summary>
        /// The backing field for the ActivePowerAbsMAll property
        /// </summary>
        private Nullable<double> _activePowerAbsMAll;
        
        /// <summary>
        /// The backing field for the ActivePowerQIL1 property
        /// </summary>
        private Nullable<double> _activePowerQIL1;
        
        /// <summary>
        /// The backing field for the ActivePowerQIL2 property
        /// </summary>
        private Nullable<double> _activePowerQIL2;
        
        /// <summary>
        /// The backing field for the ActivePowerQIL3 property
        /// </summary>
        private Nullable<double> _activePowerQIL3;
        
        /// <summary>
        /// The backing field for the ActivePowerQIall property
        /// </summary>
        private Nullable<double> _activePowerQIall;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL1 property
        /// </summary>
        private Nullable<double> _activePowerQIIL1;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL2 property
        /// </summary>
        private Nullable<double> _activePowerQIIL2;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIL3 property
        /// </summary>
        private Nullable<double> _activePowerQIIL3;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIall property
        /// </summary>
        private Nullable<double> _activePowerQIIall;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL1 property
        /// </summary>
        private Nullable<double> _activePowerQIIIL1;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL2 property
        /// </summary>
        private Nullable<double> _activePowerQIIIL2;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIL3 property
        /// </summary>
        private Nullable<double> _activePowerQIIIL3;
        
        /// <summary>
        /// The backing field for the ActivePowerQIIIall property
        /// </summary>
        private Nullable<double> _activePowerQIIIall;
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL1 property
        /// </summary>
        private Nullable<double> _activePowerQIVL1;
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL2 property
        /// </summary>
        private Nullable<double> _activePowerQIVL2;
        
        /// <summary>
        /// The backing field for the ActivePowerQIVL3 property
        /// </summary>
        private Nullable<double> _activePowerQIVL3;
        
        /// <summary>
        /// The backing field for the ActivePowerQIVall property
        /// </summary>
        private Nullable<double> _activePowerQIVall;
        
        /// <summary>
        /// The backing field for the Angles property
        /// </summary>
        private Nullable<double> _angles;
        
        /// <summary>
        /// The backing field for the Pulses property
        /// </summary>
        private Nullable<int> _pulses;
        
        /// <summary>
        /// The backing field for the Ampere_squaredHours property
        /// </summary>
        private Nullable<double> _ampere_squaredHours;
        
        /// <summary>
        /// The backing field for the Volt_squaredHours property
        /// </summary>
        private Nullable<double> _volt_squaredHours;
        
        /// <summary>
        /// The backing field for the NeutralCurrent property
        /// </summary>
        private Nullable<double> _neutralCurrent;
        
        /// <summary>
        /// The backing field for the NeutralVoltage property
        /// </summary>
        private Nullable<double> _neutralVoltage;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActivePowerpL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerpL1
        {
            get
            {
                return this._activePowerpL1;
            }
            set
            {
                if ((this._activePowerpL1 != value))
                {
                    Nullable<double> old = this._activePowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL1Changing(e);
                    this.OnPropertyChanging("ActivePowerpL1", e);
                    this._activePowerpL1 = value;
                    this.OnActivePowerpL1Changed(e);
                    this.OnPropertyChanged("ActivePowerpL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerpall
        {
            get
            {
                return this._activePowerpall;
            }
            set
            {
                if ((this._activePowerpall != value))
                {
                    Nullable<double> old = this._activePowerpall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpallChanging(e);
                    this.OnPropertyChanging("ActivePowerpall", e);
                    this._activePowerpall = value;
                    this.OnActivePowerpallChanged(e);
                    this.OnPropertyChanged("ActivePowerpall", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerpL2
        {
            get
            {
                return this._activePowerpL2;
            }
            set
            {
                if ((this._activePowerpL2 != value))
                {
                    Nullable<double> old = this._activePowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL2Changing(e);
                    this.OnPropertyChanging("ActivePowerpL2", e);
                    this._activePowerpL2 = value;
                    this.OnActivePowerpL2Changed(e);
                    this.OnPropertyChanged("ActivePowerpL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerpL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerpL3
        {
            get
            {
                return this._activePowerpL3;
            }
            set
            {
                if ((this._activePowerpL3 != value))
                {
                    Nullable<double> old = this._activePowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerpL3Changing(e);
                    this.OnPropertyChanging("ActivePowerpL3", e);
                    this._activePowerpL3 = value;
                    this.OnActivePowerpL3Changed(e);
                    this.OnPropertyChanged("ActivePowerpL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowermL2
        {
            get
            {
                return this._activePowermL2;
            }
            set
            {
                if ((this._activePowermL2 != value))
                {
                    Nullable<double> old = this._activePowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL2Changing(e);
                    this.OnPropertyChanging("ActivePowermL2", e);
                    this._activePowermL2 = value;
                    this.OnActivePowermL2Changed(e);
                    this.OnPropertyChanged("ActivePowermL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowermL1
        {
            get
            {
                return this._activePowermL1;
            }
            set
            {
                if ((this._activePowermL1 != value))
                {
                    Nullable<double> old = this._activePowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL1Changing(e);
                    this.OnPropertyChanging("ActivePowermL1", e);
                    this._activePowermL1 = value;
                    this.OnActivePowermL1Changed(e);
                    this.OnPropertyChanged("ActivePowermL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowermL3
        {
            get
            {
                return this._activePowermL3;
            }
            set
            {
                if ((this._activePowermL3 != value))
                {
                    Nullable<double> old = this._activePowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermL3Changing(e);
                    this.OnPropertyChanging("ActivePowermL3", e);
                    this._activePowermL3 = value;
                    this.OnActivePowermL3Changed(e);
                    this.OnPropertyChanged("ActivePowermL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowermall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowermall
        {
            get
            {
                return this._activePowermall;
            }
            set
            {
                if ((this._activePowermall != value))
                {
                    Nullable<double> old = this._activePowermall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowermallChanging(e);
                    this.OnPropertyChanging("ActivePowermall", e);
                    this._activePowermall = value;
                    this.OnActivePowermallChanged(e);
                    this.OnPropertyChanged("ActivePowermall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerpL1
        {
            get
            {
                return this._reactivePowerpL1;
            }
            set
            {
                if ((this._reactivePowerpL1 != value))
                {
                    Nullable<double> old = this._reactivePowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL1", e);
                    this._reactivePowerpL1 = value;
                    this.OnReactivePowerpL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerpL2
        {
            get
            {
                return this._reactivePowerpL2;
            }
            set
            {
                if ((this._reactivePowerpL2 != value))
                {
                    Nullable<double> old = this._reactivePowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL2", e);
                    this._reactivePowerpL2 = value;
                    this.OnReactivePowerpL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerpL3
        {
            get
            {
                return this._reactivePowerpL3;
            }
            set
            {
                if ((this._reactivePowerpL3 != value))
                {
                    Nullable<double> old = this._reactivePowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerpL3", e);
                    this._reactivePowerpL3 = value;
                    this.OnReactivePowerpL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerpL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerpall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerpall
        {
            get
            {
                return this._reactivePowerpall;
            }
            set
            {
                if ((this._reactivePowerpall != value))
                {
                    Nullable<double> old = this._reactivePowerpall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerpallChanging(e);
                    this.OnPropertyChanging("ReactivePowerpall", e);
                    this._reactivePowerpall = value;
                    this.OnReactivePowerpallChanged(e);
                    this.OnPropertyChanged("ReactivePowerpall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowermL1
        {
            get
            {
                return this._reactivePowermL1;
            }
            set
            {
                if ((this._reactivePowermL1 != value))
                {
                    Nullable<double> old = this._reactivePowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL1Changing(e);
                    this.OnPropertyChanging("ReactivePowermL1", e);
                    this._reactivePowermL1 = value;
                    this.OnReactivePowermL1Changed(e);
                    this.OnPropertyChanged("ReactivePowermL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowermL2
        {
            get
            {
                return this._reactivePowermL2;
            }
            set
            {
                if ((this._reactivePowermL2 != value))
                {
                    Nullable<double> old = this._reactivePowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL2Changing(e);
                    this.OnPropertyChanging("ReactivePowermL2", e);
                    this._reactivePowermL2 = value;
                    this.OnReactivePowermL2Changed(e);
                    this.OnPropertyChanged("ReactivePowermL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowermL3
        {
            get
            {
                return this._reactivePowermL3;
            }
            set
            {
                if ((this._reactivePowermL3 != value))
                {
                    Nullable<double> old = this._reactivePowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermL3Changing(e);
                    this.OnPropertyChanging("ReactivePowermL3", e);
                    this._reactivePowermL3 = value;
                    this.OnReactivePowermL3Changed(e);
                    this.OnPropertyChanged("ReactivePowermL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowermall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowermall
        {
            get
            {
                return this._reactivePowermall;
            }
            set
            {
                if ((this._reactivePowermall != value))
                {
                    Nullable<double> old = this._reactivePowermall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowermallChanging(e);
                    this.OnPropertyChanging("ReactivePowermall", e);
                    this._reactivePowermall = value;
                    this.OnReactivePowermallChanged(e);
                    this.OnPropertyChanged("ReactivePowermall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIL1
        {
            get
            {
                return this._reactivePowerQIL1;
            }
            set
            {
                if ((this._reactivePowerQIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL1", e);
                    this._reactivePowerQIL1 = value;
                    this.OnReactivePowerQIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIL2
        {
            get
            {
                return this._reactivePowerQIL2;
            }
            set
            {
                if ((this._reactivePowerQIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL2", e);
                    this._reactivePowerQIL2 = value;
                    this.OnReactivePowerQIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIL3
        {
            get
            {
                return this._reactivePowerQIL3;
            }
            set
            {
                if ((this._reactivePowerQIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIL3", e);
                    this._reactivePowerQIL3 = value;
                    this.OnReactivePowerQIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIall
        {
            get
            {
                return this._reactivePowerQIall;
            }
            set
            {
                if ((this._reactivePowerQIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIall", e);
                    this._reactivePowerQIall = value;
                    this.OnReactivePowerQIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIL1
        {
            get
            {
                return this._reactivePowerQIIL1;
            }
            set
            {
                if ((this._reactivePowerQIIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL1", e);
                    this._reactivePowerQIIL1 = value;
                    this.OnReactivePowerQIIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIL2
        {
            get
            {
                return this._reactivePowerQIIL2;
            }
            set
            {
                if ((this._reactivePowerQIIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL2", e);
                    this._reactivePowerQIIL2 = value;
                    this.OnReactivePowerQIIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIL3
        {
            get
            {
                return this._reactivePowerQIIL3;
            }
            set
            {
                if ((this._reactivePowerQIIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIL3", e);
                    this._reactivePowerQIIL3 = value;
                    this.OnReactivePowerQIIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIall
        {
            get
            {
                return this._reactivePowerQIIall;
            }
            set
            {
                if ((this._reactivePowerQIIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIIall", e);
                    this._reactivePowerQIIall = value;
                    this.OnReactivePowerQIIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIIL1
        {
            get
            {
                return this._reactivePowerQIIIL1;
            }
            set
            {
                if ((this._reactivePowerQIIIL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL1", e);
                    this._reactivePowerQIIIL1 = value;
                    this.OnReactivePowerQIIIL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIIL2
        {
            get
            {
                return this._reactivePowerQIIIL2;
            }
            set
            {
                if ((this._reactivePowerQIIIL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL2", e);
                    this._reactivePowerQIIIL2 = value;
                    this.OnReactivePowerQIIIL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIIL3
        {
            get
            {
                return this._reactivePowerQIIIL3;
            }
            set
            {
                if ((this._reactivePowerQIIIL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIIIL3", e);
                    this._reactivePowerQIIIL3 = value;
                    this.OnReactivePowerQIIIL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIIIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIIIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIIIall
        {
            get
            {
                return this._reactivePowerQIIIall;
            }
            set
            {
                if ((this._reactivePowerQIIIall != value))
                {
                    Nullable<double> old = this._reactivePowerQIIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIIIallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIIIall", e);
                    this._reactivePowerQIIIall = value;
                    this.OnReactivePowerQIIIallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIIIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIVL1
        {
            get
            {
                return this._reactivePowerQIVL1;
            }
            set
            {
                if ((this._reactivePowerQIVL1 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL1Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL1", e);
                    this._reactivePowerQIVL1 = value;
                    this.OnReactivePowerQIVL1Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIVL2
        {
            get
            {
                return this._reactivePowerQIVL2;
            }
            set
            {
                if ((this._reactivePowerQIVL2 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL2Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL2", e);
                    this._reactivePowerQIVL2 = value;
                    this.OnReactivePowerQIVL2Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIVL3
        {
            get
            {
                return this._reactivePowerQIVL3;
            }
            set
            {
                if ((this._reactivePowerQIVL3 != value))
                {
                    Nullable<double> old = this._reactivePowerQIVL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVL3Changing(e);
                    this.OnPropertyChanging("ReactivePowerQIVL3", e);
                    this._reactivePowerQIVL3 = value;
                    this.OnReactivePowerQIVL3Changed(e);
                    this.OnPropertyChanged("ReactivePowerQIVL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactivePowerQIVall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ReactivePowerQIVall
        {
            get
            {
                return this._reactivePowerQIVall;
            }
            set
            {
                if ((this._reactivePowerQIVall != value))
                {
                    Nullable<double> old = this._reactivePowerQIVall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePowerQIVallChanging(e);
                    this.OnPropertyChanging("ReactivePowerQIVall", e);
                    this._reactivePowerQIVall = value;
                    this.OnReactivePowerQIVallChanged(e);
                    this.OnPropertyChanged("ReactivePowerQIVall", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowerpL1
        {
            get
            {
                return this._apparentPowerpL1;
            }
            set
            {
                if ((this._apparentPowerpL1 != value))
                {
                    Nullable<double> old = this._apparentPowerpL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL1Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL1", e);
                    this._apparentPowerpL1 = value;
                    this.OnApparentPowerpL1Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowerpL2
        {
            get
            {
                return this._apparentPowerpL2;
            }
            set
            {
                if ((this._apparentPowerpL2 != value))
                {
                    Nullable<double> old = this._apparentPowerpL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL2Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL2", e);
                    this._apparentPowerpL2 = value;
                    this.OnApparentPowerpL2Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowerpL3
        {
            get
            {
                return this._apparentPowerpL3;
            }
            set
            {
                if ((this._apparentPowerpL3 != value))
                {
                    Nullable<double> old = this._apparentPowerpL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpL3Changing(e);
                    this.OnPropertyChanging("ApparentPowerpL3", e);
                    this._apparentPowerpL3 = value;
                    this.OnApparentPowerpL3Changed(e);
                    this.OnPropertyChanged("ApparentPowerpL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowerpAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowerpAll
        {
            get
            {
                return this._apparentPowerpAll;
            }
            set
            {
                if ((this._apparentPowerpAll != value))
                {
                    Nullable<double> old = this._apparentPowerpAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowerpAllChanging(e);
                    this.OnPropertyChanging("ApparentPowerpAll", e);
                    this._apparentPowerpAll = value;
                    this.OnApparentPowerpAllChanged(e);
                    this.OnPropertyChanged("ApparentPowerpAll", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowermL1
        {
            get
            {
                return this._apparentPowermL1;
            }
            set
            {
                if ((this._apparentPowermL1 != value))
                {
                    Nullable<double> old = this._apparentPowermL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL1Changing(e);
                    this.OnPropertyChanging("ApparentPowermL1", e);
                    this._apparentPowermL1 = value;
                    this.OnApparentPowermL1Changed(e);
                    this.OnPropertyChanged("ApparentPowermL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowermL2
        {
            get
            {
                return this._apparentPowermL2;
            }
            set
            {
                if ((this._apparentPowermL2 != value))
                {
                    Nullable<double> old = this._apparentPowermL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL2Changing(e);
                    this.OnPropertyChanging("ApparentPowermL2", e);
                    this._apparentPowermL2 = value;
                    this.OnApparentPowermL2Changed(e);
                    this.OnPropertyChanged("ApparentPowermL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowermL3
        {
            get
            {
                return this._apparentPowermL3;
            }
            set
            {
                if ((this._apparentPowermL3 != value))
                {
                    Nullable<double> old = this._apparentPowermL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermL3Changing(e);
                    this.OnPropertyChanging("ApparentPowermL3", e);
                    this._apparentPowermL3 = value;
                    this.OnApparentPowermL3Changed(e);
                    this.OnPropertyChanged("ApparentPowermL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ApparentPowermAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ApparentPowermAll
        {
            get
            {
                return this._apparentPowermAll;
            }
            set
            {
                if ((this._apparentPowermAll != value))
                {
                    Nullable<double> old = this._apparentPowermAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparentPowermAllChanging(e);
                    this.OnPropertyChanging("ApparentPowermAll", e);
                    this._apparentPowermAll = value;
                    this.OnApparentPowermAllChanged(e);
                    this.OnPropertyChanged("ApparentPowermAll", e);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> CurrentL1
        {
            get
            {
                return this._currentL1;
            }
            set
            {
                if ((this._currentL1 != value))
                {
                    Nullable<double> old = this._currentL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL1Changing(e);
                    this.OnPropertyChanging("CurrentL1", e);
                    this._currentL1 = value;
                    this.OnCurrentL1Changed(e);
                    this.OnPropertyChanged("CurrentL1", e);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> CurrentL2
        {
            get
            {
                return this._currentL2;
            }
            set
            {
                if ((this._currentL2 != value))
                {
                    Nullable<double> old = this._currentL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL2Changing(e);
                    this.OnPropertyChanging("CurrentL2", e);
                    this._currentL2 = value;
                    this.OnCurrentL2Changed(e);
                    this.OnPropertyChanged("CurrentL2", e);
                }
            }
        }
        
        /// <summary>
        /// The CurrentL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> CurrentL3
        {
            get
            {
                return this._currentL3;
            }
            set
            {
                if ((this._currentL3 != value))
                {
                    Nullable<double> old = this._currentL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentL3Changing(e);
                    this.OnPropertyChanging("CurrentL3", e);
                    this._currentL3 = value;
                    this.OnCurrentL3Changed(e);
                    this.OnPropertyChanged("CurrentL3", e);
                }
            }
        }
        
        /// <summary>
        /// The CurrentAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> CurrentAll
        {
            get
            {
                return this._currentAll;
            }
            set
            {
                if ((this._currentAll != value))
                {
                    Nullable<double> old = this._currentAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentAllChanging(e);
                    this.OnPropertyChanging("CurrentAll", e);
                    this._currentAll = value;
                    this.OnCurrentAllChanged(e);
                    this.OnPropertyChanged("CurrentAll", e);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> VoltageL1
        {
            get
            {
                return this._voltageL1;
            }
            set
            {
                if ((this._voltageL1 != value))
                {
                    Nullable<double> old = this._voltageL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL1Changing(e);
                    this.OnPropertyChanging("VoltageL1", e);
                    this._voltageL1 = value;
                    this.OnVoltageL1Changed(e);
                    this.OnPropertyChanged("VoltageL1", e);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> VoltageL2
        {
            get
            {
                return this._voltageL2;
            }
            set
            {
                if ((this._voltageL2 != value))
                {
                    Nullable<double> old = this._voltageL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL2Changing(e);
                    this.OnPropertyChanging("VoltageL2", e);
                    this._voltageL2 = value;
                    this.OnVoltageL2Changed(e);
                    this.OnPropertyChanged("VoltageL2", e);
                }
            }
        }
        
        /// <summary>
        /// The VoltageL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> VoltageL3
        {
            get
            {
                return this._voltageL3;
            }
            set
            {
                if ((this._voltageL3 != value))
                {
                    Nullable<double> old = this._voltageL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageL3Changing(e);
                    this.OnPropertyChanging("VoltageL3", e);
                    this._voltageL3 = value;
                    this.OnVoltageL3Changed(e);
                    this.OnPropertyChanged("VoltageL3", e);
                }
            }
        }
        
        /// <summary>
        /// The VoltageAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> VoltageAll
        {
            get
            {
                return this._voltageAll;
            }
            set
            {
                if ((this._voltageAll != value))
                {
                    Nullable<double> old = this._voltageAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageAllChanging(e);
                    this.OnPropertyChanging("VoltageAll", e);
                    this._voltageAll = value;
                    this.OnVoltageAllChanged(e);
                    this.OnPropertyChanged("VoltageAll", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> PowerFactorL1
        {
            get
            {
                return this._powerFactorL1;
            }
            set
            {
                if ((this._powerFactorL1 != value))
                {
                    Nullable<double> old = this._powerFactorL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL1Changing(e);
                    this.OnPropertyChanging("PowerFactorL1", e);
                    this._powerFactorL1 = value;
                    this.OnPowerFactorL1Changed(e);
                    this.OnPropertyChanged("PowerFactorL1", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> PowerFactorL2
        {
            get
            {
                return this._powerFactorL2;
            }
            set
            {
                if ((this._powerFactorL2 != value))
                {
                    Nullable<double> old = this._powerFactorL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL2Changing(e);
                    this.OnPropertyChanging("PowerFactorL2", e);
                    this._powerFactorL2 = value;
                    this.OnPowerFactorL2Changed(e);
                    this.OnPropertyChanged("PowerFactorL2", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> PowerFactorL3
        {
            get
            {
                return this._powerFactorL3;
            }
            set
            {
                if ((this._powerFactorL3 != value))
                {
                    Nullable<double> old = this._powerFactorL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorL3Changing(e);
                    this.OnPropertyChanging("PowerFactorL3", e);
                    this._powerFactorL3 = value;
                    this.OnPowerFactorL3Changed(e);
                    this.OnPropertyChanged("PowerFactorL3", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerFactorAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> PowerFactorAll
        {
            get
            {
                return this._powerFactorAll;
            }
            set
            {
                if ((this._powerFactorAll != value))
                {
                    Nullable<double> old = this._powerFactorAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorAllChanging(e);
                    this.OnPropertyChanging("PowerFactorAll", e);
                    this._powerFactorAll = value;
                    this.OnPowerFactorAllChanged(e);
                    this.OnPropertyChanged("PowerFactorAll", e);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> SupplyFrequencyL1
        {
            get
            {
                return this._supplyFrequencyL1;
            }
            set
            {
                if ((this._supplyFrequencyL1 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL1Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL1", e);
                    this._supplyFrequencyL1 = value;
                    this.OnSupplyFrequencyL1Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL1", e);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> SupplyFrequencyL2
        {
            get
            {
                return this._supplyFrequencyL2;
            }
            set
            {
                if ((this._supplyFrequencyL2 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL2Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL2", e);
                    this._supplyFrequencyL2 = value;
                    this.OnSupplyFrequencyL2Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL2", e);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> SupplyFrequencyL3
        {
            get
            {
                return this._supplyFrequencyL3;
            }
            set
            {
                if ((this._supplyFrequencyL3 != value))
                {
                    Nullable<double> old = this._supplyFrequencyL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyL3Changing(e);
                    this.OnPropertyChanging("SupplyFrequencyL3", e);
                    this._supplyFrequencyL3 = value;
                    this.OnSupplyFrequencyL3Changed(e);
                    this.OnPropertyChanged("SupplyFrequencyL3", e);
                }
            }
        }
        
        /// <summary>
        /// The SupplyFrequencyAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> SupplyFrequencyAll
        {
            get
            {
                return this._supplyFrequencyAll;
            }
            set
            {
                if ((this._supplyFrequencyAll != value))
                {
                    Nullable<double> old = this._supplyFrequencyAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSupplyFrequencyAllChanging(e);
                    this.OnPropertyChanging("SupplyFrequencyAll", e);
                    this._supplyFrequencyAll = value;
                    this.OnSupplyFrequencyAllChanged(e);
                    this.OnPropertyChanged("SupplyFrequencyAll", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsPL1
        {
            get
            {
                return this._activePowerAbsPL1;
            }
            set
            {
                if ((this._activePowerAbsPL1 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL1Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL1", e);
                    this._activePowerAbsPL1 = value;
                    this.OnActivePowerAbsPL1Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsPL2
        {
            get
            {
                return this._activePowerAbsPL2;
            }
            set
            {
                if ((this._activePowerAbsPL2 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL2Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL2", e);
                    this._activePowerAbsPL2 = value;
                    this.OnActivePowerAbsPL2Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsPL3
        {
            get
            {
                return this._activePowerAbsPL3;
            }
            set
            {
                if ((this._activePowerAbsPL3 != value))
                {
                    Nullable<double> old = this._activePowerAbsPL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPL3Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsPL3", e);
                    this._activePowerAbsPL3 = value;
                    this.OnActivePowerAbsPL3Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsPL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsPAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsPAll
        {
            get
            {
                return this._activePowerAbsPAll;
            }
            set
            {
                if ((this._activePowerAbsPAll != value))
                {
                    Nullable<double> old = this._activePowerAbsPAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsPAllChanging(e);
                    this.OnPropertyChanging("ActivePowerAbsPAll", e);
                    this._activePowerAbsPAll = value;
                    this.OnActivePowerAbsPAllChanged(e);
                    this.OnPropertyChanged("ActivePowerAbsPAll", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsML1
        {
            get
            {
                return this._activePowerAbsML1;
            }
            set
            {
                if ((this._activePowerAbsML1 != value))
                {
                    Nullable<double> old = this._activePowerAbsML1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML1Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML1", e);
                    this._activePowerAbsML1 = value;
                    this.OnActivePowerAbsML1Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsML2
        {
            get
            {
                return this._activePowerAbsML2;
            }
            set
            {
                if ((this._activePowerAbsML2 != value))
                {
                    Nullable<double> old = this._activePowerAbsML2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML2Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML2", e);
                    this._activePowerAbsML2 = value;
                    this.OnActivePowerAbsML2Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsML3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsML3
        {
            get
            {
                return this._activePowerAbsML3;
            }
            set
            {
                if ((this._activePowerAbsML3 != value))
                {
                    Nullable<double> old = this._activePowerAbsML3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsML3Changing(e);
                    this.OnPropertyChanging("ActivePowerAbsML3", e);
                    this._activePowerAbsML3 = value;
                    this.OnActivePowerAbsML3Changed(e);
                    this.OnPropertyChanged("ActivePowerAbsML3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerAbsMAll property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerAbsMAll
        {
            get
            {
                return this._activePowerAbsMAll;
            }
            set
            {
                if ((this._activePowerAbsMAll != value))
                {
                    Nullable<double> old = this._activePowerAbsMAll;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerAbsMAllChanging(e);
                    this.OnPropertyChanging("ActivePowerAbsMAll", e);
                    this._activePowerAbsMAll = value;
                    this.OnActivePowerAbsMAllChanged(e);
                    this.OnPropertyChanged("ActivePowerAbsMAll", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIL1
        {
            get
            {
                return this._activePowerQIL1;
            }
            set
            {
                if ((this._activePowerQIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL1", e);
                    this._activePowerQIL1 = value;
                    this.OnActivePowerQIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIL2
        {
            get
            {
                return this._activePowerQIL2;
            }
            set
            {
                if ((this._activePowerQIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL2", e);
                    this._activePowerQIL2 = value;
                    this.OnActivePowerQIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIL3
        {
            get
            {
                return this._activePowerQIL3;
            }
            set
            {
                if ((this._activePowerQIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIL3", e);
                    this._activePowerQIL3 = value;
                    this.OnActivePowerQIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIall
        {
            get
            {
                return this._activePowerQIall;
            }
            set
            {
                if ((this._activePowerQIall != value))
                {
                    Nullable<double> old = this._activePowerQIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIall", e);
                    this._activePowerQIall = value;
                    this.OnActivePowerQIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIL1
        {
            get
            {
                return this._activePowerQIIL1;
            }
            set
            {
                if ((this._activePowerQIIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL1", e);
                    this._activePowerQIIL1 = value;
                    this.OnActivePowerQIIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIL2
        {
            get
            {
                return this._activePowerQIIL2;
            }
            set
            {
                if ((this._activePowerQIIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL2", e);
                    this._activePowerQIIL2 = value;
                    this.OnActivePowerQIIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIL3
        {
            get
            {
                return this._activePowerQIIL3;
            }
            set
            {
                if ((this._activePowerQIIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIL3", e);
                    this._activePowerQIIL3 = value;
                    this.OnActivePowerQIIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIall
        {
            get
            {
                return this._activePowerQIIall;
            }
            set
            {
                if ((this._activePowerQIIall != value))
                {
                    Nullable<double> old = this._activePowerQIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIIall", e);
                    this._activePowerQIIall = value;
                    this.OnActivePowerQIIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIIL1
        {
            get
            {
                return this._activePowerQIIIL1;
            }
            set
            {
                if ((this._activePowerQIIIL1 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL1", e);
                    this._activePowerQIIIL1 = value;
                    this.OnActivePowerQIIIL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIIL2
        {
            get
            {
                return this._activePowerQIIIL2;
            }
            set
            {
                if ((this._activePowerQIIIL2 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL2", e);
                    this._activePowerQIIIL2 = value;
                    this.OnActivePowerQIIIL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIIL3
        {
            get
            {
                return this._activePowerQIIIL3;
            }
            set
            {
                if ((this._activePowerQIIIL3 != value))
                {
                    Nullable<double> old = this._activePowerQIIIL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIIIL3", e);
                    this._activePowerQIIIL3 = value;
                    this.OnActivePowerQIIIL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIIIL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIIIall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIIIall
        {
            get
            {
                return this._activePowerQIIIall;
            }
            set
            {
                if ((this._activePowerQIIIall != value))
                {
                    Nullable<double> old = this._activePowerQIIIall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIIIallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIIIall", e);
                    this._activePowerQIIIall = value;
                    this.OnActivePowerQIIIallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIIIall", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIVL1
        {
            get
            {
                return this._activePowerQIVL1;
            }
            set
            {
                if ((this._activePowerQIVL1 != value))
                {
                    Nullable<double> old = this._activePowerQIVL1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL1Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL1", e);
                    this._activePowerQIVL1 = value;
                    this.OnActivePowerQIVL1Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL1", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIVL2
        {
            get
            {
                return this._activePowerQIVL2;
            }
            set
            {
                if ((this._activePowerQIVL2 != value))
                {
                    Nullable<double> old = this._activePowerQIVL2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL2Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL2", e);
                    this._activePowerQIVL2 = value;
                    this.OnActivePowerQIVL2Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL2", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVL3 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIVL3
        {
            get
            {
                return this._activePowerQIVL3;
            }
            set
            {
                if ((this._activePowerQIVL3 != value))
                {
                    Nullable<double> old = this._activePowerQIVL3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVL3Changing(e);
                    this.OnPropertyChanging("ActivePowerQIVL3", e);
                    this._activePowerQIVL3 = value;
                    this.OnActivePowerQIVL3Changed(e);
                    this.OnPropertyChanged("ActivePowerQIVL3", e);
                }
            }
        }
        
        /// <summary>
        /// The ActivePowerQIVall property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActivePowerQIVall
        {
            get
            {
                return this._activePowerQIVall;
            }
            set
            {
                if ((this._activePowerQIVall != value))
                {
                    Nullable<double> old = this._activePowerQIVall;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerQIVallChanging(e);
                    this.OnPropertyChanging("ActivePowerQIVall", e);
                    this._activePowerQIVall = value;
                    this.OnActivePowerQIVallChanged(e);
                    this.OnPropertyChanged("ActivePowerQIVall", e);
                }
            }
        }
        
        /// <summary>
        /// The Angles property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Angles
        {
            get
            {
                return this._angles;
            }
            set
            {
                if ((this._angles != value))
                {
                    Nullable<double> old = this._angles;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnglesChanging(e);
                    this.OnPropertyChanging("Angles", e);
                    this._angles = value;
                    this.OnAnglesChanged(e);
                    this.OnPropertyChanged("Angles", e);
                }
            }
        }
        
        /// <summary>
        /// The Pulses property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Pulses
        {
            get
            {
                return this._pulses;
            }
            set
            {
                if ((this._pulses != value))
                {
                    Nullable<int> old = this._pulses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPulsesChanging(e);
                    this.OnPropertyChanging("Pulses", e);
                    this._pulses = value;
                    this.OnPulsesChanged(e);
                    this.OnPropertyChanged("Pulses", e);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squaredHours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ampere_squaredHours
        {
            get
            {
                return this._ampere_squaredHours;
            }
            set
            {
                if ((this._ampere_squaredHours != value))
                {
                    Nullable<double> old = this._ampere_squaredHours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squaredHoursChanging(e);
                    this.OnPropertyChanging("Ampere_squaredHours", e);
                    this._ampere_squaredHours = value;
                    this.OnAmpere_squaredHoursChanged(e);
                    this.OnPropertyChanged("Ampere_squaredHours", e);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squaredHours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Volt_squaredHours
        {
            get
            {
                return this._volt_squaredHours;
            }
            set
            {
                if ((this._volt_squaredHours != value))
                {
                    Nullable<double> old = this._volt_squaredHours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squaredHoursChanging(e);
                    this.OnPropertyChanging("Volt_squaredHours", e);
                    this._volt_squaredHours = value;
                    this.OnVolt_squaredHoursChanged(e);
                    this.OnPropertyChanged("Volt_squaredHours", e);
                }
            }
        }
        
        /// <summary>
        /// The NeutralCurrent property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> NeutralCurrent
        {
            get
            {
                return this._neutralCurrent;
            }
            set
            {
                if ((this._neutralCurrent != value))
                {
                    Nullable<double> old = this._neutralCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralCurrentChanging(e);
                    this.OnPropertyChanging("NeutralCurrent", e);
                    this._neutralCurrent = value;
                    this.OnNeutralCurrentChanged(e);
                    this.OnPropertyChanged("NeutralCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The NeutralVoltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> NeutralVoltage
        {
            get
            {
                return this._neutralVoltage;
            }
            set
            {
                if ((this._neutralVoltage != value))
                {
                    Nullable<double> old = this._neutralVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralVoltageChanging(e);
                    this.OnPropertyChanging("NeutralVoltage", e);
                    this._neutralVoltage = value;
                    this.OnNeutralVoltageChanged(e);
                    this.OnPropertyChanged("NeutralVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                            "ectricityValues")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActivePowerpL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerpall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerpL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerpL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowermL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowermall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowermall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerpall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerpall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerpallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowermL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowermall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowermall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowermallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIIIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIIIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ReactivePowerQIVall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePowerQIVall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowerpAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowerpAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowerpAllChanged;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL1Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL1Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL2Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL2Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL3Changing;
        
        /// <summary>
        /// Gets fired when the ApparentPowermL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermL3Changed;
        
        /// <summary>
        /// Gets fired before the ApparentPowermAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermAllChanging;
        
        /// <summary>
        /// Gets fired when the ApparentPowermAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApparentPowermAllChanged;
        
        /// <summary>
        /// Gets fired before the CurrentL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL1Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL1Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL2Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL2Changed;
        
        /// <summary>
        /// Gets fired before the CurrentL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL3Changing;
        
        /// <summary>
        /// Gets fired when the CurrentL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentL3Changed;
        
        /// <summary>
        /// Gets fired before the CurrentAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentAllChanging;
        
        /// <summary>
        /// Gets fired when the CurrentAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentAllChanged;
        
        /// <summary>
        /// Gets fired before the VoltageL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL1Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL1Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL2Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL2Changed;
        
        /// <summary>
        /// Gets fired before the VoltageL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL3Changing;
        
        /// <summary>
        /// Gets fired when the VoltageL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageL3Changed;
        
        /// <summary>
        /// Gets fired before the VoltageAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAllChanging;
        
        /// <summary>
        /// Gets fired when the VoltageAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAllChanged;
        
        /// <summary>
        /// Gets fired before the PowerFactorL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL1Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL1Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL2Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL2Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL3Changing;
        
        /// <summary>
        /// Gets fired when the PowerFactorL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorL3Changed;
        
        /// <summary>
        /// Gets fired before the PowerFactorAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorAllChanging;
        
        /// <summary>
        /// Gets fired when the PowerFactorAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorAllChanged;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL1Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL2Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changing;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyL3Changed;
        
        /// <summary>
        /// Gets fired before the SupplyFrequencyAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanging;
        
        /// <summary>
        /// Gets fired when the SupplyFrequencyAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SupplyFrequencyAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsPAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsPAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsPAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsML3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsML3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsML3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerAbsMAll property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerAbsMAll property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerAbsMAllChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIIIall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIIIall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIIIallChanged;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL1Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL2Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVL3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changing;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVL3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVL3Changed;
        
        /// <summary>
        /// Gets fired before the ActivePowerQIVall property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanging;
        
        /// <summary>
        /// Gets fired when the ActivePowerQIVall property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerQIVallChanged;
        
        /// <summary>
        /// Gets fired before the Angles property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnglesChanging;
        
        /// <summary>
        /// Gets fired when the Angles property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnglesChanged;
        
        /// <summary>
        /// Gets fired before the Pulses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PulsesChanging;
        
        /// <summary>
        /// Gets fired when the Pulses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PulsesChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squaredHours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squaredHours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squaredHours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squaredHours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squaredHoursChanged;
        
        /// <summary>
        /// Gets fired before the NeutralCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralCurrentChanging;
        
        /// <summary>
        /// Gets fired when the NeutralCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralCurrentChanged;
        
        /// <summary>
        /// Gets fired before the NeutralVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NeutralVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralVoltageChanged;
        
        /// <summary>
        /// Raises the ActivePowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowermallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowermallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowermallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerpallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerpallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerpallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowermallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowermallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowermallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIIIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePowerQIVallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePowerQIVallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePowerQIVallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowerpAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowerpAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowerpAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApparentPowermAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparentPowermAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApparentPowermAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SupplyFrequencyAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSupplyFrequencyAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SupplyFrequencyAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsPAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsPAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsPAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsML3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsML3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsML3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsMAllChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsMAllChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsMAllChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerAbsMAllChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerAbsMAllChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerAbsMAllChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIIIallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIIIallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIIIallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVL3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVL3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVL3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVallChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVallChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVallChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerQIVallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerQIVallChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerQIVallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnglesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnglesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnglesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnglesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnglesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnglesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PulsesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PulsesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PulsesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PulsesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredHoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredHoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredHoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squaredHoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squaredHoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squaredHoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredHoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredHoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredHoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squaredHoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squaredHoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squaredHoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEPOWERPL1"))
            {
                return this.ActivePowerpL1;
            }
            if ((attribute == "ACTIVEPOWERPALL"))
            {
                return this.ActivePowerpall;
            }
            if ((attribute == "ACTIVEPOWERPL2"))
            {
                return this.ActivePowerpL2;
            }
            if ((attribute == "ACTIVEPOWERPL3"))
            {
                return this.ActivePowerpL3;
            }
            if ((attribute == "ACTIVEPOWERML2"))
            {
                return this.ActivePowermL2;
            }
            if ((attribute == "ACTIVEPOWERML1"))
            {
                return this.ActivePowermL1;
            }
            if ((attribute == "ACTIVEPOWERML3"))
            {
                return this.ActivePowermL3;
            }
            if ((attribute == "ACTIVEPOWERMALL"))
            {
                return this.ActivePowermall;
            }
            if ((attribute == "REACTIVEPOWERPL1"))
            {
                return this.ReactivePowerpL1;
            }
            if ((attribute == "REACTIVEPOWERPL2"))
            {
                return this.ReactivePowerpL2;
            }
            if ((attribute == "REACTIVEPOWERPL3"))
            {
                return this.ReactivePowerpL3;
            }
            if ((attribute == "REACTIVEPOWERPALL"))
            {
                return this.ReactivePowerpall;
            }
            if ((attribute == "REACTIVEPOWERML1"))
            {
                return this.ReactivePowermL1;
            }
            if ((attribute == "REACTIVEPOWERML2"))
            {
                return this.ReactivePowermL2;
            }
            if ((attribute == "REACTIVEPOWERML3"))
            {
                return this.ReactivePowermL3;
            }
            if ((attribute == "REACTIVEPOWERMALL"))
            {
                return this.ReactivePowermall;
            }
            if ((attribute == "REACTIVEPOWERQIL1"))
            {
                return this.ReactivePowerQIL1;
            }
            if ((attribute == "REACTIVEPOWERQIL2"))
            {
                return this.ReactivePowerQIL2;
            }
            if ((attribute == "REACTIVEPOWERQIL3"))
            {
                return this.ReactivePowerQIL3;
            }
            if ((attribute == "REACTIVEPOWERQIALL"))
            {
                return this.ReactivePowerQIall;
            }
            if ((attribute == "REACTIVEPOWERQIIL1"))
            {
                return this.ReactivePowerQIIL1;
            }
            if ((attribute == "REACTIVEPOWERQIIL2"))
            {
                return this.ReactivePowerQIIL2;
            }
            if ((attribute == "REACTIVEPOWERQIIL3"))
            {
                return this.ReactivePowerQIIL3;
            }
            if ((attribute == "REACTIVEPOWERQIIALL"))
            {
                return this.ReactivePowerQIIall;
            }
            if ((attribute == "REACTIVEPOWERQIIIL1"))
            {
                return this.ReactivePowerQIIIL1;
            }
            if ((attribute == "REACTIVEPOWERQIIIL2"))
            {
                return this.ReactivePowerQIIIL2;
            }
            if ((attribute == "REACTIVEPOWERQIIIL3"))
            {
                return this.ReactivePowerQIIIL3;
            }
            if ((attribute == "REACTIVEPOWERQIIIALL"))
            {
                return this.ReactivePowerQIIIall;
            }
            if ((attribute == "REACTIVEPOWERQIVL1"))
            {
                return this.ReactivePowerQIVL1;
            }
            if ((attribute == "REACTIVEPOWERQIVL2"))
            {
                return this.ReactivePowerQIVL2;
            }
            if ((attribute == "REACTIVEPOWERQIVL3"))
            {
                return this.ReactivePowerQIVL3;
            }
            if ((attribute == "REACTIVEPOWERQIVALL"))
            {
                return this.ReactivePowerQIVall;
            }
            if ((attribute == "APPARENTPOWERPL1"))
            {
                return this.ApparentPowerpL1;
            }
            if ((attribute == "APPARENTPOWERPL2"))
            {
                return this.ApparentPowerpL2;
            }
            if ((attribute == "APPARENTPOWERPL3"))
            {
                return this.ApparentPowerpL3;
            }
            if ((attribute == "APPARENTPOWERPALL"))
            {
                return this.ApparentPowerpAll;
            }
            if ((attribute == "APPARENTPOWERML1"))
            {
                return this.ApparentPowermL1;
            }
            if ((attribute == "APPARENTPOWERML2"))
            {
                return this.ApparentPowermL2;
            }
            if ((attribute == "APPARENTPOWERML3"))
            {
                return this.ApparentPowermL3;
            }
            if ((attribute == "APPARENTPOWERMALL"))
            {
                return this.ApparentPowermAll;
            }
            if ((attribute == "CURRENTL1"))
            {
                return this.CurrentL1;
            }
            if ((attribute == "CURRENTL2"))
            {
                return this.CurrentL2;
            }
            if ((attribute == "CURRENTL3"))
            {
                return this.CurrentL3;
            }
            if ((attribute == "CURRENTALL"))
            {
                return this.CurrentAll;
            }
            if ((attribute == "VOLTAGEL1"))
            {
                return this.VoltageL1;
            }
            if ((attribute == "VOLTAGEL2"))
            {
                return this.VoltageL2;
            }
            if ((attribute == "VOLTAGEL3"))
            {
                return this.VoltageL3;
            }
            if ((attribute == "VOLTAGEALL"))
            {
                return this.VoltageAll;
            }
            if ((attribute == "POWERFACTORL1"))
            {
                return this.PowerFactorL1;
            }
            if ((attribute == "POWERFACTORL2"))
            {
                return this.PowerFactorL2;
            }
            if ((attribute == "POWERFACTORL3"))
            {
                return this.PowerFactorL3;
            }
            if ((attribute == "POWERFACTORALL"))
            {
                return this.PowerFactorAll;
            }
            if ((attribute == "SUPPLYFREQUENCYL1"))
            {
                return this.SupplyFrequencyL1;
            }
            if ((attribute == "SUPPLYFREQUENCYL2"))
            {
                return this.SupplyFrequencyL2;
            }
            if ((attribute == "SUPPLYFREQUENCYL3"))
            {
                return this.SupplyFrequencyL3;
            }
            if ((attribute == "SUPPLYFREQUENCYALL"))
            {
                return this.SupplyFrequencyAll;
            }
            if ((attribute == "ACTIVEPOWERABSPL1"))
            {
                return this.ActivePowerAbsPL1;
            }
            if ((attribute == "ACTIVEPOWERABSPL2"))
            {
                return this.ActivePowerAbsPL2;
            }
            if ((attribute == "ACTIVEPOWERABSPL3"))
            {
                return this.ActivePowerAbsPL3;
            }
            if ((attribute == "ACTIVEPOWERABSPALL"))
            {
                return this.ActivePowerAbsPAll;
            }
            if ((attribute == "ACTIVEPOWERABSML1"))
            {
                return this.ActivePowerAbsML1;
            }
            if ((attribute == "ACTIVEPOWERABSML2"))
            {
                return this.ActivePowerAbsML2;
            }
            if ((attribute == "ACTIVEPOWERABSML3"))
            {
                return this.ActivePowerAbsML3;
            }
            if ((attribute == "ACTIVEPOWERABSMALL"))
            {
                return this.ActivePowerAbsMAll;
            }
            if ((attribute == "ACTIVEPOWERQIL1"))
            {
                return this.ActivePowerQIL1;
            }
            if ((attribute == "ACTIVEPOWERQIL2"))
            {
                return this.ActivePowerQIL2;
            }
            if ((attribute == "ACTIVEPOWERQIL3"))
            {
                return this.ActivePowerQIL3;
            }
            if ((attribute == "ACTIVEPOWERQIALL"))
            {
                return this.ActivePowerQIall;
            }
            if ((attribute == "ACTIVEPOWERQIIL1"))
            {
                return this.ActivePowerQIIL1;
            }
            if ((attribute == "ACTIVEPOWERQIIL2"))
            {
                return this.ActivePowerQIIL2;
            }
            if ((attribute == "ACTIVEPOWERQIIL3"))
            {
                return this.ActivePowerQIIL3;
            }
            if ((attribute == "ACTIVEPOWERQIIALL"))
            {
                return this.ActivePowerQIIall;
            }
            if ((attribute == "ACTIVEPOWERQIIIL1"))
            {
                return this.ActivePowerQIIIL1;
            }
            if ((attribute == "ACTIVEPOWERQIIIL2"))
            {
                return this.ActivePowerQIIIL2;
            }
            if ((attribute == "ACTIVEPOWERQIIIL3"))
            {
                return this.ActivePowerQIIIL3;
            }
            if ((attribute == "ACTIVEPOWERQIIIALL"))
            {
                return this.ActivePowerQIIIall;
            }
            if ((attribute == "ACTIVEPOWERQIVL1"))
            {
                return this.ActivePowerQIVL1;
            }
            if ((attribute == "ACTIVEPOWERQIVL2"))
            {
                return this.ActivePowerQIVL2;
            }
            if ((attribute == "ACTIVEPOWERQIVL3"))
            {
                return this.ActivePowerQIVL3;
            }
            if ((attribute == "ACTIVEPOWERQIVALL"))
            {
                return this.ActivePowerQIVall;
            }
            if ((attribute == "ANGLES"))
            {
                return this.Angles;
            }
            if ((attribute == "PULSES"))
            {
                return this.Pulses;
            }
            if ((attribute == "AMPERE_SQUAREDHOURS"))
            {
                return this.Ampere_squaredHours;
            }
            if ((attribute == "VOLT_SQUAREDHOURS"))
            {
                return this.Volt_squaredHours;
            }
            if ((attribute == "NEUTRALCURRENT"))
            {
                return this.NeutralCurrent;
            }
            if ((attribute == "NEUTRALVOLTAGE"))
            {
                return this.NeutralVoltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEPOWERPL1"))
            {
                this.ActivePowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPALL"))
            {
                this.ActivePowerpall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPL2"))
            {
                this.ActivePowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERPL3"))
            {
                this.ActivePowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML2"))
            {
                this.ActivePowermL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML1"))
            {
                this.ActivePowermL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERML3"))
            {
                this.ActivePowermL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERMALL"))
            {
                this.ActivePowermall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL1"))
            {
                this.ReactivePowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL2"))
            {
                this.ReactivePowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPL3"))
            {
                this.ReactivePowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERPALL"))
            {
                this.ReactivePowerpall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML1"))
            {
                this.ReactivePowermL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML2"))
            {
                this.ReactivePowermL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERML3"))
            {
                this.ReactivePowermL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERMALL"))
            {
                this.ReactivePowermall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL1"))
            {
                this.ReactivePowerQIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL2"))
            {
                this.ReactivePowerQIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIL3"))
            {
                this.ReactivePowerQIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIALL"))
            {
                this.ReactivePowerQIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL1"))
            {
                this.ReactivePowerQIIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL2"))
            {
                this.ReactivePowerQIIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIL3"))
            {
                this.ReactivePowerQIIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIALL"))
            {
                this.ReactivePowerQIIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL1"))
            {
                this.ReactivePowerQIIIL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL2"))
            {
                this.ReactivePowerQIIIL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIL3"))
            {
                this.ReactivePowerQIIIL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIIIALL"))
            {
                this.ReactivePowerQIIIall = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL1"))
            {
                this.ReactivePowerQIVL1 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL2"))
            {
                this.ReactivePowerQIVL2 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVL3"))
            {
                this.ReactivePowerQIVL3 = ((double)(value));
                return;
            }
            if ((feature == "REACTIVEPOWERQIVALL"))
            {
                this.ReactivePowerQIVall = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL1"))
            {
                this.ApparentPowerpL1 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL2"))
            {
                this.ApparentPowerpL2 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPL3"))
            {
                this.ApparentPowerpL3 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERPALL"))
            {
                this.ApparentPowerpAll = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML1"))
            {
                this.ApparentPowermL1 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML2"))
            {
                this.ApparentPowermL2 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERML3"))
            {
                this.ApparentPowermL3 = ((double)(value));
                return;
            }
            if ((feature == "APPARENTPOWERMALL"))
            {
                this.ApparentPowermAll = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL1"))
            {
                this.CurrentL1 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL2"))
            {
                this.CurrentL2 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTL3"))
            {
                this.CurrentL3 = ((double)(value));
                return;
            }
            if ((feature == "CURRENTALL"))
            {
                this.CurrentAll = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL1"))
            {
                this.VoltageL1 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL2"))
            {
                this.VoltageL2 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEL3"))
            {
                this.VoltageL3 = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEALL"))
            {
                this.VoltageAll = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL1"))
            {
                this.PowerFactorL1 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL2"))
            {
                this.PowerFactorL2 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORL3"))
            {
                this.PowerFactorL3 = ((double)(value));
                return;
            }
            if ((feature == "POWERFACTORALL"))
            {
                this.PowerFactorAll = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL1"))
            {
                this.SupplyFrequencyL1 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL2"))
            {
                this.SupplyFrequencyL2 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYL3"))
            {
                this.SupplyFrequencyL3 = ((double)(value));
                return;
            }
            if ((feature == "SUPPLYFREQUENCYALL"))
            {
                this.SupplyFrequencyAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL1"))
            {
                this.ActivePowerAbsPL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL2"))
            {
                this.ActivePowerAbsPL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPL3"))
            {
                this.ActivePowerAbsPL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSPALL"))
            {
                this.ActivePowerAbsPAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML1"))
            {
                this.ActivePowerAbsML1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML2"))
            {
                this.ActivePowerAbsML2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSML3"))
            {
                this.ActivePowerAbsML3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERABSMALL"))
            {
                this.ActivePowerAbsMAll = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL1"))
            {
                this.ActivePowerQIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL2"))
            {
                this.ActivePowerQIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIL3"))
            {
                this.ActivePowerQIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIALL"))
            {
                this.ActivePowerQIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL1"))
            {
                this.ActivePowerQIIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL2"))
            {
                this.ActivePowerQIIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIL3"))
            {
                this.ActivePowerQIIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIALL"))
            {
                this.ActivePowerQIIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL1"))
            {
                this.ActivePowerQIIIL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL2"))
            {
                this.ActivePowerQIIIL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIL3"))
            {
                this.ActivePowerQIIIL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIIIALL"))
            {
                this.ActivePowerQIIIall = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL1"))
            {
                this.ActivePowerQIVL1 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL2"))
            {
                this.ActivePowerQIVL2 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVL3"))
            {
                this.ActivePowerQIVL3 = ((double)(value));
                return;
            }
            if ((feature == "ACTIVEPOWERQIVALL"))
            {
                this.ActivePowerQIVall = ((double)(value));
                return;
            }
            if ((feature == "ANGLES"))
            {
                this.Angles = ((double)(value));
                return;
            }
            if ((feature == "PULSES"))
            {
                this.Pulses = ((int)(value));
                return;
            }
            if ((feature == "AMPERE_SQUAREDHOURS"))
            {
                this.Ampere_squaredHours = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUAREDHOURS"))
            {
                this.Volt_squaredHours = ((double)(value));
                return;
            }
            if ((feature == "NEUTRALCURRENT"))
            {
                this.NeutralCurrent = ((double)(value));
                return;
            }
            if ((feature == "NEUTRALVOLTAGE"))
            {
                this.NeutralVoltage = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                        "ectricityValues")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL1 property
        /// </summary>
        private sealed class ActivePowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL1;
                }
                set
                {
                    this.ModelElement.ActivePowerpL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpall property
        /// </summary>
        private sealed class ActivePowerpallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpall;
                }
                set
                {
                    this.ModelElement.ActivePowerpall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL2 property
        /// </summary>
        private sealed class ActivePowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL2;
                }
                set
                {
                    this.ModelElement.ActivePowerpL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerpL3 property
        /// </summary>
        private sealed class ActivePowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerpL3;
                }
                set
                {
                    this.ModelElement.ActivePowerpL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerpL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL2 property
        /// </summary>
        private sealed class ActivePowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL2;
                }
                set
                {
                    this.ModelElement.ActivePowermL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL1 property
        /// </summary>
        private sealed class ActivePowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL1;
                }
                set
                {
                    this.ModelElement.ActivePowermL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermL3 property
        /// </summary>
        private sealed class ActivePowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermL3;
                }
                set
                {
                    this.ModelElement.ActivePowermL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowermall property
        /// </summary>
        private sealed class ActivePowermallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowermallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowermall;
                }
                set
                {
                    this.ModelElement.ActivePowermall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowermallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL1 property
        /// </summary>
        private sealed class ReactivePowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL2 property
        /// </summary>
        private sealed class ReactivePowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpL3 property
        /// </summary>
        private sealed class ReactivePowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerpL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerpall property
        /// </summary>
        private sealed class ReactivePowerpallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerpallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerpall;
                }
                set
                {
                    this.ModelElement.ReactivePowerpall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerpallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL1 property
        /// </summary>
        private sealed class ReactivePowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL1;
                }
                set
                {
                    this.ModelElement.ReactivePowermL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL2 property
        /// </summary>
        private sealed class ReactivePowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL2;
                }
                set
                {
                    this.ModelElement.ReactivePowermL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermL3 property
        /// </summary>
        private sealed class ReactivePowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermL3;
                }
                set
                {
                    this.ModelElement.ReactivePowermL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowermall property
        /// </summary>
        private sealed class ReactivePowermallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowermallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowermall;
                }
                set
                {
                    this.ModelElement.ReactivePowermall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowermallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL1 property
        /// </summary>
        private sealed class ReactivePowerQIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL2 property
        /// </summary>
        private sealed class ReactivePowerQIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIL3 property
        /// </summary>
        private sealed class ReactivePowerQIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIall property
        /// </summary>
        private sealed class ReactivePowerQIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL1 property
        /// </summary>
        private sealed class ReactivePowerQIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL2 property
        /// </summary>
        private sealed class ReactivePowerQIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIL3 property
        /// </summary>
        private sealed class ReactivePowerQIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIall property
        /// </summary>
        private sealed class ReactivePowerQIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL1 property
        /// </summary>
        private sealed class ReactivePowerQIIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL2 property
        /// </summary>
        private sealed class ReactivePowerQIIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIL3 property
        /// </summary>
        private sealed class ReactivePowerQIIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIIIall property
        /// </summary>
        private sealed class ReactivePowerQIIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIIIall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIIIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIIIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL1 property
        /// </summary>
        private sealed class ReactivePowerQIVL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL1;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL2 property
        /// </summary>
        private sealed class ReactivePowerQIVL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL2;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVL3 property
        /// </summary>
        private sealed class ReactivePowerQIVL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVL3;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactivePowerQIVall property
        /// </summary>
        private sealed class ReactivePowerQIVallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePowerQIVallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ReactivePowerQIVall;
                }
                set
                {
                    this.ModelElement.ReactivePowerQIVall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactivePowerQIVallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL1 property
        /// </summary>
        private sealed class ApparentPowerpL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL1;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL2 property
        /// </summary>
        private sealed class ApparentPowerpL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL2;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpL3 property
        /// </summary>
        private sealed class ApparentPowerpL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpL3;
                }
                set
                {
                    this.ModelElement.ApparentPowerpL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowerpAll property
        /// </summary>
        private sealed class ApparentPowerpAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowerpAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowerpAll;
                }
                set
                {
                    this.ModelElement.ApparentPowerpAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowerpAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL1 property
        /// </summary>
        private sealed class ApparentPowermL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL1;
                }
                set
                {
                    this.ModelElement.ApparentPowermL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL2 property
        /// </summary>
        private sealed class ApparentPowermL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL2;
                }
                set
                {
                    this.ModelElement.ApparentPowermL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermL3 property
        /// </summary>
        private sealed class ApparentPowermL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermL3;
                }
                set
                {
                    this.ModelElement.ApparentPowermL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ApparentPowermAll property
        /// </summary>
        private sealed class ApparentPowermAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApparentPowermAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ApparentPowermAll;
                }
                set
                {
                    this.ModelElement.ApparentPowermAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ApparentPowermAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL1 property
        /// </summary>
        private sealed class CurrentL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL1;
                }
                set
                {
                    this.ModelElement.CurrentL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL2 property
        /// </summary>
        private sealed class CurrentL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL2;
                }
                set
                {
                    this.ModelElement.CurrentL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentL3 property
        /// </summary>
        private sealed class CurrentL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentL3;
                }
                set
                {
                    this.ModelElement.CurrentL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CurrentAll property
        /// </summary>
        private sealed class CurrentAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.CurrentAll;
                }
                set
                {
                    this.ModelElement.CurrentAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL1 property
        /// </summary>
        private sealed class VoltageL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL1;
                }
                set
                {
                    this.ModelElement.VoltageL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL2 property
        /// </summary>
        private sealed class VoltageL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL2;
                }
                set
                {
                    this.ModelElement.VoltageL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageL3 property
        /// </summary>
        private sealed class VoltageL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageL3;
                }
                set
                {
                    this.ModelElement.VoltageL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageAll property
        /// </summary>
        private sealed class VoltageAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageAll;
                }
                set
                {
                    this.ModelElement.VoltageAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL1 property
        /// </summary>
        private sealed class PowerFactorL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL1;
                }
                set
                {
                    this.ModelElement.PowerFactorL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL2 property
        /// </summary>
        private sealed class PowerFactorL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL2;
                }
                set
                {
                    this.ModelElement.PowerFactorL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorL3 property
        /// </summary>
        private sealed class PowerFactorL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorL3;
                }
                set
                {
                    this.ModelElement.PowerFactorL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerFactorAll property
        /// </summary>
        private sealed class PowerFactorAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.PowerFactorAll;
                }
                set
                {
                    this.ModelElement.PowerFactorAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL1 property
        /// </summary>
        private sealed class SupplyFrequencyL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL1;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL2 property
        /// </summary>
        private sealed class SupplyFrequencyL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL2;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyL3 property
        /// </summary>
        private sealed class SupplyFrequencyL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyL3;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SupplyFrequencyAll property
        /// </summary>
        private sealed class SupplyFrequencyAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SupplyFrequencyAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.SupplyFrequencyAll;
                }
                set
                {
                    this.ModelElement.SupplyFrequencyAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SupplyFrequencyAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL1 property
        /// </summary>
        private sealed class ActivePowerAbsPL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL1;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL2 property
        /// </summary>
        private sealed class ActivePowerAbsPL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL2;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPL3 property
        /// </summary>
        private sealed class ActivePowerAbsPL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPL3;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsPAll property
        /// </summary>
        private sealed class ActivePowerAbsPAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsPAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsPAll;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsPAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsPAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML1 property
        /// </summary>
        private sealed class ActivePowerAbsML1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML1;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML2 property
        /// </summary>
        private sealed class ActivePowerAbsML2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML2;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsML3 property
        /// </summary>
        private sealed class ActivePowerAbsML3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsML3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsML3;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsML3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsML3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerAbsMAll property
        /// </summary>
        private sealed class ActivePowerAbsMAllProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerAbsMAllProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerAbsMAll;
                }
                set
                {
                    this.ModelElement.ActivePowerAbsMAll = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsMAllChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerAbsMAllChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL1 property
        /// </summary>
        private sealed class ActivePowerQIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL2 property
        /// </summary>
        private sealed class ActivePowerQIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIL3 property
        /// </summary>
        private sealed class ActivePowerQIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIall property
        /// </summary>
        private sealed class ActivePowerQIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL1 property
        /// </summary>
        private sealed class ActivePowerQIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL2 property
        /// </summary>
        private sealed class ActivePowerQIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIL3 property
        /// </summary>
        private sealed class ActivePowerQIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIall property
        /// </summary>
        private sealed class ActivePowerQIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL1 property
        /// </summary>
        private sealed class ActivePowerQIIIL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL2 property
        /// </summary>
        private sealed class ActivePowerQIIIL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIL3 property
        /// </summary>
        private sealed class ActivePowerQIIIL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIIIall property
        /// </summary>
        private sealed class ActivePowerQIIIallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIIIallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIIIall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIIIall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIIIallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL1 property
        /// </summary>
        private sealed class ActivePowerQIVL1Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL1Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL1;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL2 property
        /// </summary>
        private sealed class ActivePowerQIVL2Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL2Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL2;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVL3 property
        /// </summary>
        private sealed class ActivePowerQIVL3Proxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVL3Proxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVL3;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVL3 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL3Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVL3Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivePowerQIVall property
        /// </summary>
        private sealed class ActivePowerQIVallProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerQIVallProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActivePowerQIVall;
                }
                set
                {
                    this.ModelElement.ActivePowerQIVall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerQIVallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Angles property
        /// </summary>
        private sealed class AnglesProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnglesProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Angles;
                }
                set
                {
                    this.ModelElement.Angles = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnglesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnglesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pulses property
        /// </summary>
        private sealed class PulsesProxy : ModelPropertyChange<IElectricityValues, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PulsesProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Pulses;
                }
                set
                {
                    this.ModelElement.Pulses = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PulsesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PulsesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squaredHours property
        /// </summary>
        private sealed class Ampere_squaredHoursProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squaredHoursProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squaredHours;
                }
                set
                {
                    this.ModelElement.Ampere_squaredHours = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredHoursChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squaredHoursChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squaredHours property
        /// </summary>
        private sealed class Volt_squaredHoursProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squaredHoursProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squaredHours;
                }
                set
                {
                    this.ModelElement.Volt_squaredHours = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredHoursChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squaredHoursChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NeutralCurrent property
        /// </summary>
        private sealed class NeutralCurrentProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralCurrentProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.NeutralCurrent;
                }
                set
                {
                    this.ModelElement.NeutralCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NeutralVoltage property
        /// </summary>
        private sealed class NeutralVoltageProxy : ModelPropertyChange<IElectricityValues, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralVoltageProxy(IElectricityValues modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.NeutralVoltage;
                }
                set
                {
                    this.ModelElement.NeutralVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralVoltageChanged -= handler;
            }
        }
    }
}

