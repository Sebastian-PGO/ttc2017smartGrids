//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the InputPulseValuesOrConstants class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/In" +
        "putPulseValuesOrConstants")]
    public class InputPulseValuesOrConstants : Data, IInputPulseValuesOrConstants, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveEnergy property
        /// </summary>
        private Nullable<double> _activeEnergy;
        
        /// <summary>
        /// The backing field for the Reactive_energy property
        /// </summary>
        private Nullable<double> _reactive_energy;
        
        /// <summary>
        /// The backing field for the Apparent_energy property
        /// </summary>
        private Nullable<double> _apparent_energy;
        
        /// <summary>
        /// The backing field for the Volt_squared_hours property
        /// </summary>
        private Nullable<double> _volt_squared_hours;
        
        /// <summary>
        /// The backing field for the Ampere_squared_hours property
        /// </summary>
        private Nullable<double> _ampere_squared_hours;
        
        /// <summary>
        /// The backing field for the Unitless_quantities property
        /// </summary>
        private Nullable<double> _unitless_quantities;
        
        /// <summary>
        /// The backing field for the Active_energy_export property
        /// </summary>
        private Nullable<double> _active_energy_export;
        
        /// <summary>
        /// The backing field for the Reactive_energy_export property
        /// </summary>
        private Nullable<double> _reactive_energy_export;
        
        /// <summary>
        /// The backing field for the Apparent_energy_export property
        /// </summary>
        private Nullable<double> _apparent_energy_export;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ActiveEnergy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> ActiveEnergy
        {
            get
            {
                return this._activeEnergy;
            }
            set
            {
                if ((this._activeEnergy != value))
                {
                    Nullable<double> old = this._activeEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveEnergyChanging(e);
                    this.OnPropertyChanging("ActiveEnergy", e);
                    this._activeEnergy = value;
                    this.OnActiveEnergyChanged(e);
                    this.OnPropertyChanged("ActiveEnergy", e);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_energy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_energy
        {
            get
            {
                return this._reactive_energy;
            }
            set
            {
                if ((this._reactive_energy != value))
                {
                    Nullable<double> old = this._reactive_energy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_energyChanging(e);
                    this.OnPropertyChanging("Reactive_energy", e);
                    this._reactive_energy = value;
                    this.OnReactive_energyChanged(e);
                    this.OnPropertyChanged("Reactive_energy", e);
                }
            }
        }
        
        /// <summary>
        /// The Apparent_energy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Apparent_energy
        {
            get
            {
                return this._apparent_energy;
            }
            set
            {
                if ((this._apparent_energy != value))
                {
                    Nullable<double> old = this._apparent_energy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparent_energyChanging(e);
                    this.OnPropertyChanging("Apparent_energy", e);
                    this._apparent_energy = value;
                    this.OnApparent_energyChanged(e);
                    this.OnPropertyChanged("Apparent_energy", e);
                }
            }
        }
        
        /// <summary>
        /// The Volt_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Volt_squared_hours
        {
            get
            {
                return this._volt_squared_hours;
            }
            set
            {
                if ((this._volt_squared_hours != value))
                {
                    Nullable<double> old = this._volt_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolt_squared_hoursChanging(e);
                    this.OnPropertyChanging("Volt_squared_hours", e);
                    this._volt_squared_hours = value;
                    this.OnVolt_squared_hoursChanged(e);
                    this.OnPropertyChanged("Volt_squared_hours", e);
                }
            }
        }
        
        /// <summary>
        /// The Ampere_squared_hours property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Ampere_squared_hours
        {
            get
            {
                return this._ampere_squared_hours;
            }
            set
            {
                if ((this._ampere_squared_hours != value))
                {
                    Nullable<double> old = this._ampere_squared_hours;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpere_squared_hoursChanging(e);
                    this.OnPropertyChanging("Ampere_squared_hours", e);
                    this._ampere_squared_hours = value;
                    this.OnAmpere_squared_hoursChanged(e);
                    this.OnPropertyChanged("Ampere_squared_hours", e);
                }
            }
        }
        
        /// <summary>
        /// The Unitless_quantities property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Unitless_quantities
        {
            get
            {
                return this._unitless_quantities;
            }
            set
            {
                if ((this._unitless_quantities != value))
                {
                    Nullable<double> old = this._unitless_quantities;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitless_quantitiesChanging(e);
                    this.OnPropertyChanging("Unitless_quantities", e);
                    this._unitless_quantities = value;
                    this.OnUnitless_quantitiesChanged(e);
                    this.OnPropertyChanged("Unitless_quantities", e);
                }
            }
        }
        
        /// <summary>
        /// The Active_energy_export property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Active_energy_export
        {
            get
            {
                return this._active_energy_export;
            }
            set
            {
                if ((this._active_energy_export != value))
                {
                    Nullable<double> old = this._active_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActive_energy_exportChanging(e);
                    this.OnPropertyChanging("Active_energy_export", e);
                    this._active_energy_export = value;
                    this.OnActive_energy_exportChanged(e);
                    this.OnPropertyChanged("Active_energy_export", e);
                }
            }
        }
        
        /// <summary>
        /// The Reactive_energy_export property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Reactive_energy_export
        {
            get
            {
                return this._reactive_energy_export;
            }
            set
            {
                if ((this._reactive_energy_export != value))
                {
                    Nullable<double> old = this._reactive_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactive_energy_exportChanging(e);
                    this.OnPropertyChanging("Reactive_energy_export", e);
                    this._reactive_energy_export = value;
                    this.OnReactive_energy_exportChanged(e);
                    this.OnPropertyChanged("Reactive_energy_export", e);
                }
            }
        }
        
        /// <summary>
        /// The Apparent_energy_export property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Apparent_energy_export
        {
            get
            {
                return this._apparent_energy_export;
            }
            set
            {
                if ((this._apparent_energy_export != value))
                {
                    Nullable<double> old = this._apparent_energy_export;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApparent_energy_exportChanging(e);
                    this.OnPropertyChanging("Apparent_energy_export", e);
                    this._apparent_energy_export = value;
                    this.OnApparent_energy_exportChanged(e);
                    this.OnPropertyChanged("Apparent_energy_export", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/In" +
                            "putPulseValuesOrConstants")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActiveEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveEnergyChanging;
        
        /// <summary>
        /// Gets fired when the ActiveEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveEnergyChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_energyChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_energyChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Apparent_energyChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Apparent_energyChanged;
        
        /// <summary>
        /// Gets fired before the Volt_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Volt_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Volt_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Ampere_squared_hours property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanging;
        
        /// <summary>
        /// Gets fired when the Ampere_squared_hours property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Ampere_squared_hoursChanged;
        
        /// <summary>
        /// Gets fired before the Unitless_quantities property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanging;
        
        /// <summary>
        /// Gets fired when the Unitless_quantities property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Unitless_quantitiesChanged;
        
        /// <summary>
        /// Gets fired before the Active_energy_export property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Active_energy_export property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Active_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Reactive_energy_export property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Reactive_energy_export property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reactive_energy_exportChanged;
        
        /// <summary>
        /// Gets fired before the Apparent_energy_export property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanging;
        
        /// <summary>
        /// Gets fired when the Apparent_energy_export property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Apparent_energy_exportChanged;
        
        /// <summary>
        /// Raises the ActiveEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_energyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_energyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Apparent_energyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Apparent_energyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Volt_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolt_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Volt_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squared_hoursChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squared_hoursChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squared_hoursChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Ampere_squared_hoursChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpere_squared_hoursChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Ampere_squared_hoursChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Unitless_quantitiesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitless_quantitiesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Unitless_quantitiesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Unitless_quantitiesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitless_quantitiesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Unitless_quantitiesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Active_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActive_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Active_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reactive_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactive_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reactive_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energy_exportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energy_exportChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Apparent_energy_exportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Apparent_energy_exportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApparent_energy_exportChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Apparent_energy_exportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEENERGY"))
            {
                return this.ActiveEnergy;
            }
            if ((attribute == "REACTIVE_ENERGY"))
            {
                return this.Reactive_energy;
            }
            if ((attribute == "APPARENT_ENERGY"))
            {
                return this.Apparent_energy;
            }
            if ((attribute == "VOLT_SQUARED_HOURS"))
            {
                return this.Volt_squared_hours;
            }
            if ((attribute == "AMPERE_SQUARED_HOURS"))
            {
                return this.Ampere_squared_hours;
            }
            if ((attribute == "UNITLESS_QUANTITIES"))
            {
                return this.Unitless_quantities;
            }
            if ((attribute == "ACTIVE_ENERGY_EXPORT"))
            {
                return this.Active_energy_export;
            }
            if ((attribute == "REACTIVE_ENERGY_EXPORT"))
            {
                return this.Reactive_energy_export;
            }
            if ((attribute == "APPARENT_ENERGY_EXPORT"))
            {
                return this.Apparent_energy_export;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEENERGY"))
            {
                this.ActiveEnergy = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_ENERGY"))
            {
                this.Reactive_energy = ((double)(value));
                return;
            }
            if ((feature == "APPARENT_ENERGY"))
            {
                this.Apparent_energy = ((double)(value));
                return;
            }
            if ((feature == "VOLT_SQUARED_HOURS"))
            {
                this.Volt_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "AMPERE_SQUARED_HOURS"))
            {
                this.Ampere_squared_hours = ((double)(value));
                return;
            }
            if ((feature == "UNITLESS_QUANTITIES"))
            {
                this.Unitless_quantities = ((double)(value));
                return;
            }
            if ((feature == "ACTIVE_ENERGY_EXPORT"))
            {
                this.Active_energy_export = ((double)(value));
                return;
            }
            if ((feature == "REACTIVE_ENERGY_EXPORT"))
            {
                this.Reactive_energy_export = ((double)(value));
                return;
            }
            if ((feature == "APPARENT_ENERGY_EXPORT"))
            {
                this.Apparent_energy_export = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/In" +
                        "putPulseValuesOrConstants")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActiveEnergy property
        /// </summary>
        private sealed class ActiveEnergyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveEnergyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.ActiveEnergy;
                }
                set
                {
                    this.ModelElement.ActiveEnergy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveEnergyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActiveEnergyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_energy property
        /// </summary>
        private sealed class Reactive_energyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_energyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_energy;
                }
                set
                {
                    this.ModelElement.Reactive_energy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Reactive_energyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Reactive_energyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparent_energy property
        /// </summary>
        private sealed class Apparent_energyProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Apparent_energyProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparent_energy;
                }
                set
                {
                    this.ModelElement.Apparent_energy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Apparent_energyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Apparent_energyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Volt_squared_hours property
        /// </summary>
        private sealed class Volt_squared_hoursProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Volt_squared_hoursProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Volt_squared_hours;
                }
                set
                {
                    this.ModelElement.Volt_squared_hours = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squared_hoursChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Volt_squared_hoursChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ampere_squared_hours property
        /// </summary>
        private sealed class Ampere_squared_hoursProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Ampere_squared_hoursProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Ampere_squared_hours;
                }
                set
                {
                    this.ModelElement.Ampere_squared_hours = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squared_hoursChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Ampere_squared_hoursChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Unitless_quantities property
        /// </summary>
        private sealed class Unitless_quantitiesProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Unitless_quantitiesProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Unitless_quantities;
                }
                set
                {
                    this.ModelElement.Unitless_quantities = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Unitless_quantitiesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Unitless_quantitiesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Active_energy_export property
        /// </summary>
        private sealed class Active_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Active_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Active_energy_export;
                }
                set
                {
                    this.ModelElement.Active_energy_export = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Active_energy_exportChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Active_energy_exportChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reactive_energy_export property
        /// </summary>
        private sealed class Reactive_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reactive_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Reactive_energy_export;
                }
                set
                {
                    this.ModelElement.Reactive_energy_export = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Reactive_energy_exportChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Reactive_energy_exportChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Apparent_energy_export property
        /// </summary>
        private sealed class Apparent_energy_exportProxy : ModelPropertyChange<IInputPulseValuesOrConstants, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Apparent_energy_exportProxy(IInputPulseValuesOrConstants modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Apparent_energy_export;
                }
                set
                {
                    this.ModelElement.Apparent_energy_export = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Apparent_energy_exportChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Apparent_energy_exportChanged -= handler;
            }
        }
    }
}

