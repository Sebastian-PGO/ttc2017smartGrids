//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ReadingFactorAndCT_VTratio class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Re" +
        "adingFactorAndCT_VTratio")]
    public partial class ReadingFactorAndCT_VTratio : Data, IReadingFactorAndCT_VTratio, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Readingfactorforpower property
        /// </summary>
        private Nullable<double> _readingfactorforpower;
        
        private static Lazy<ITypedElement> _readingfactorforpowerAttribute = new Lazy<ITypedElement>(RetrieveReadingfactorforpowerAttribute);
        
        /// <summary>
        /// The backing field for the Readingfactorforenergy property
        /// </summary>
        private Nullable<double> _readingfactorforenergy;
        
        private static Lazy<ITypedElement> _readingfactorforenergyAttribute = new Lazy<ITypedElement>(RetrieveReadingfactorforenergyAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_currentzaehler property
        /// </summary>
        private Nullable<int> _transformerratio_currentzaehler;
        
        private static Lazy<ITypedElement> _transformerratio_currentzaehlerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_currentzaehlerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_voltagezaehler property
        /// </summary>
        private Nullable<int> _transformerratio_voltagezaehler;
        
        private static Lazy<ITypedElement> _transformerratio_voltagezaehlerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_voltagezaehlerAttribute);
        
        /// <summary>
        /// The backing field for the Overalltransformerratiozaehler property
        /// </summary>
        private Nullable<int> _overalltransformerratiozaehler;
        
        private static Lazy<ITypedElement> _overalltransformerratiozaehlerAttribute = new Lazy<ITypedElement>(RetrieveOveralltransformerratiozaehlerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_currentnenner property
        /// </summary>
        private Nullable<int> _transformerratio_currentnenner;
        
        private static Lazy<ITypedElement> _transformerratio_currentnennerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_currentnennerAttribute);
        
        /// <summary>
        /// The backing field for the Transformerratio_voltagenenner property
        /// </summary>
        private Nullable<int> _transformerratio_voltagenenner;
        
        private static Lazy<ITypedElement> _transformerratio_voltagenennerAttribute = new Lazy<ITypedElement>(RetrieveTransformerratio_voltagenennerAttribute);
        
        /// <summary>
        /// The backing field for the Overalltransformer_rationenner property
        /// </summary>
        private Nullable<int> _overalltransformer_rationenner;
        
        private static Lazy<ITypedElement> _overalltransformer_rationennerAttribute = new Lazy<ITypedElement>(RetrieveOveralltransformer_rationennerAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Readingfactorforpower property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Readingfactorforpower
        {
            get
            {
                return this._readingfactorforpower;
            }
            set
            {
                if ((this._readingfactorforpower != value))
                {
                    Nullable<double> old = this._readingfactorforpower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingfactorforpowerChanging(e);
                    this.OnPropertyChanging("Readingfactorforpower", e, _readingfactorforpowerAttribute);
                    this._readingfactorforpower = value;
                    this.OnReadingfactorforpowerChanged(e);
                    this.OnPropertyChanged("Readingfactorforpower", e, _readingfactorforpowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Readingfactorforenergy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Readingfactorforenergy
        {
            get
            {
                return this._readingfactorforenergy;
            }
            set
            {
                if ((this._readingfactorforenergy != value))
                {
                    Nullable<double> old = this._readingfactorforenergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingfactorforenergyChanging(e);
                    this.OnPropertyChanging("Readingfactorforenergy", e, _readingfactorforenergyAttribute);
                    this._readingfactorforenergy = value;
                    this.OnReadingfactorforenergyChanged(e);
                    this.OnPropertyChanged("Readingfactorforenergy", e, _readingfactorforenergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_currentzaehler property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Transformerratio_currentzaehler
        {
            get
            {
                return this._transformerratio_currentzaehler;
            }
            set
            {
                if ((this._transformerratio_currentzaehler != value))
                {
                    Nullable<int> old = this._transformerratio_currentzaehler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_currentzaehlerChanging(e);
                    this.OnPropertyChanging("Transformerratio_currentzaehler", e, _transformerratio_currentzaehlerAttribute);
                    this._transformerratio_currentzaehler = value;
                    this.OnTransformerratio_currentzaehlerChanged(e);
                    this.OnPropertyChanged("Transformerratio_currentzaehler", e, _transformerratio_currentzaehlerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_voltagezaehler property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Transformerratio_voltagezaehler
        {
            get
            {
                return this._transformerratio_voltagezaehler;
            }
            set
            {
                if ((this._transformerratio_voltagezaehler != value))
                {
                    Nullable<int> old = this._transformerratio_voltagezaehler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_voltagezaehlerChanging(e);
                    this.OnPropertyChanging("Transformerratio_voltagezaehler", e, _transformerratio_voltagezaehlerAttribute);
                    this._transformerratio_voltagezaehler = value;
                    this.OnTransformerratio_voltagezaehlerChanged(e);
                    this.OnPropertyChanged("Transformerratio_voltagezaehler", e, _transformerratio_voltagezaehlerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Overalltransformerratiozaehler property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Overalltransformerratiozaehler
        {
            get
            {
                return this._overalltransformerratiozaehler;
            }
            set
            {
                if ((this._overalltransformerratiozaehler != value))
                {
                    Nullable<int> old = this._overalltransformerratiozaehler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOveralltransformerratiozaehlerChanging(e);
                    this.OnPropertyChanging("Overalltransformerratiozaehler", e, _overalltransformerratiozaehlerAttribute);
                    this._overalltransformerratiozaehler = value;
                    this.OnOveralltransformerratiozaehlerChanged(e);
                    this.OnPropertyChanged("Overalltransformerratiozaehler", e, _overalltransformerratiozaehlerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_currentnenner property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Transformerratio_currentnenner
        {
            get
            {
                return this._transformerratio_currentnenner;
            }
            set
            {
                if ((this._transformerratio_currentnenner != value))
                {
                    Nullable<int> old = this._transformerratio_currentnenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_currentnennerChanging(e);
                    this.OnPropertyChanging("Transformerratio_currentnenner", e, _transformerratio_currentnennerAttribute);
                    this._transformerratio_currentnenner = value;
                    this.OnTransformerratio_currentnennerChanged(e);
                    this.OnPropertyChanged("Transformerratio_currentnenner", e, _transformerratio_currentnennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transformerratio_voltagenenner property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Transformerratio_voltagenenner
        {
            get
            {
                return this._transformerratio_voltagenenner;
            }
            set
            {
                if ((this._transformerratio_voltagenenner != value))
                {
                    Nullable<int> old = this._transformerratio_voltagenenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerratio_voltagenennerChanging(e);
                    this.OnPropertyChanging("Transformerratio_voltagenenner", e, _transformerratio_voltagenennerAttribute);
                    this._transformerratio_voltagenenner = value;
                    this.OnTransformerratio_voltagenennerChanged(e);
                    this.OnPropertyChanged("Transformerratio_voltagenenner", e, _transformerratio_voltagenennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Overalltransformer_rationenner property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Overalltransformer_rationenner
        {
            get
            {
                return this._overalltransformer_rationenner;
            }
            set
            {
                if ((this._overalltransformer_rationenner != value))
                {
                    Nullable<int> old = this._overalltransformer_rationenner;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOveralltransformer_rationennerChanging(e);
                    this.OnPropertyChanging("Overalltransformer_rationenner", e, _overalltransformer_rationennerAttribute);
                    this._overalltransformer_rationenner = value;
                    this.OnOveralltransformer_rationennerChanged(e);
                    this.OnPropertyChanged("Overalltransformer_rationenner", e, _overalltransformer_rationennerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Re" +
                            "adingFactorAndCT_VTratio")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Readingfactorforpower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanging;
        
        /// <summary>
        /// Gets fired when the Readingfactorforpower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingfactorforpowerChanged;
        
        /// <summary>
        /// Gets fired before the Readingfactorforenergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanging;
        
        /// <summary>
        /// Gets fired when the Readingfactorforenergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingfactorforenergyChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentzaehler property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_currentzaehlerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentzaehler property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_currentzaehlerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagezaehler property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_voltagezaehlerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagezaehler property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_voltagezaehlerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformerratiozaehler property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OveralltransformerratiozaehlerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformerratiozaehler property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OveralltransformerratiozaehlerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_currentnenner property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_currentnenner property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_currentnennerChanged;
        
        /// <summary>
        /// Gets fired before the Transformerratio_voltagenenner property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanging;
        
        /// <summary>
        /// Gets fired when the Transformerratio_voltagenenner property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Transformerratio_voltagenennerChanged;
        
        /// <summary>
        /// Gets fired before the Overalltransformer_rationenner property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanging;
        
        /// <summary>
        /// Gets fired when the Overalltransformer_rationenner property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Overalltransformer_rationennerChanged;
        
        private static ITypedElement RetrieveReadingfactorforpowerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Readingfactorforpower")));
        }
        
        /// <summary>
        /// Raises the ReadingfactorforpowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforpowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforpowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingfactorforpowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforpowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforpowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReadingfactorforenergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Readingfactorforenergy")));
        }
        
        /// <summary>
        /// Raises the ReadingfactorforenergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforenergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforenergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingfactorforenergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingfactorforenergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingfactorforenergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_currentzaehlerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_currentzaehler")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentzaehlerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentzaehlerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentzaehlerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentzaehlerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentzaehlerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentzaehlerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_voltagezaehlerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_voltagezaehler")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagezaehlerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagezaehlerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagezaehlerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagezaehlerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagezaehlerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagezaehlerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOveralltransformerratiozaehlerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Overalltransformerratiozaehler")));
        }
        
        /// <summary>
        /// Raises the OveralltransformerratiozaehlerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformerratiozaehlerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OveralltransformerratiozaehlerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OveralltransformerratiozaehlerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformerratiozaehlerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OveralltransformerratiozaehlerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_currentnennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_currentnenner")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentnennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentnennerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentnennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_currentnennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_currentnennerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_currentnennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerratio_voltagenennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Transformerratio_voltagenenner")));
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagenennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagenennerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagenennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Transformerratio_voltagenennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerratio_voltagenennerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Transformerratio_voltagenennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOveralltransformer_rationennerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingFactorAndCT_VTratio.ClassInstance)).Resolve("Overalltransformer_rationenner")));
        }
        
        /// <summary>
        /// Raises the Overalltransformer_rationennerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformer_rationennerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Overalltransformer_rationennerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Overalltransformer_rationennerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOveralltransformer_rationennerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Overalltransformer_rationennerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "READINGFACTORFORPOWER"))
            {
                return this.Readingfactorforpower;
            }
            if ((attribute == "READINGFACTORFORENERGY"))
            {
                return this.Readingfactorforenergy;
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTZAEHLER"))
            {
                return this.Transformerratio_currentzaehler;
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGEZAEHLER"))
            {
                return this.Transformerratio_voltagezaehler;
            }
            if ((attribute == "OVERALLTRANSFORMERRATIOZAEHLER"))
            {
                return this.Overalltransformerratiozaehler;
            }
            if ((attribute == "TRANSFORMERRATIO_CURRENTNENNER"))
            {
                return this.Transformerratio_currentnenner;
            }
            if ((attribute == "TRANSFORMERRATIO_VOLTAGENENNER"))
            {
                return this.Transformerratio_voltagenenner;
            }
            if ((attribute == "OVERALLTRANSFORMER_RATIONENNER"))
            {
                return this.Overalltransformer_rationenner;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "READINGFACTORFORPOWER"))
            {
                this.Readingfactorforpower = ((double)(value));
                return;
            }
            if ((feature == "READINGFACTORFORENERGY"))
            {
                this.Readingfactorforenergy = ((double)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_CURRENTZAEHLER"))
            {
                this.Transformerratio_currentzaehler = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_VOLTAGEZAEHLER"))
            {
                this.Transformerratio_voltagezaehler = ((int)(value));
                return;
            }
            if ((feature == "OVERALLTRANSFORMERRATIOZAEHLER"))
            {
                this.Overalltransformerratiozaehler = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_CURRENTNENNER"))
            {
                this.Transformerratio_currentnenner = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIO_VOLTAGENENNER"))
            {
                this.Transformerratio_voltagenenner = ((int)(value));
                return;
            }
            if ((feature == "OVERALLTRANSFORMER_RATIONENNER"))
            {
                this.Overalltransformer_rationenner = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Re" +
                        "adingFactorAndCT_VTratio")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Readingfactorforpower property
        /// </summary>
        private sealed class ReadingfactorforpowerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingfactorforpowerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Readingfactorforpower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Readingfactorforpower;
                }
                set
                {
                    this.ModelElement.Readingfactorforpower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Readingfactorforenergy property
        /// </summary>
        private sealed class ReadingfactorforenergyProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingfactorforenergyProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Readingfactorforenergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Readingfactorforenergy;
                }
                set
                {
                    this.ModelElement.Readingfactorforenergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_currentzaehler property
        /// </summary>
        private sealed class Transformerratio_currentzaehlerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_currentzaehlerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_currentzaehler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_currentzaehler;
                }
                set
                {
                    this.ModelElement.Transformerratio_currentzaehler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_voltagezaehler property
        /// </summary>
        private sealed class Transformerratio_voltagezaehlerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_voltagezaehlerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_voltagezaehler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_voltagezaehler;
                }
                set
                {
                    this.ModelElement.Transformerratio_voltagezaehler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Overalltransformerratiozaehler property
        /// </summary>
        private sealed class OveralltransformerratiozaehlerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OveralltransformerratiozaehlerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Overalltransformerratiozaehler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Overalltransformerratiozaehler;
                }
                set
                {
                    this.ModelElement.Overalltransformerratiozaehler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_currentnenner property
        /// </summary>
        private sealed class Transformerratio_currentnennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_currentnennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_currentnenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_currentnenner;
                }
                set
                {
                    this.ModelElement.Transformerratio_currentnenner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformerratio_voltagenenner property
        /// </summary>
        private sealed class Transformerratio_voltagenennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Transformerratio_voltagenennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Transformerratio_voltagenenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Transformerratio_voltagenenner;
                }
                set
                {
                    this.ModelElement.Transformerratio_voltagenenner = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Overalltransformer_rationenner property
        /// </summary>
        private sealed class Overalltransformer_rationennerProxy : ModelPropertyChange<IReadingFactorAndCT_VTratio, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Overalltransformer_rationennerProxy(IReadingFactorAndCT_VTratio modelElement) : 
                    base(modelElement, "Overalltransformer_rationenner")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Overalltransformer_rationenner;
                }
                set
                {
                    this.ModelElement.Overalltransformer_rationenner = value;
                }
            }
        }
    }
}

