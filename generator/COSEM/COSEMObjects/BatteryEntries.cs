//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the BatteryEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ba" +
        "tteryEntries")]
    public partial class BatteryEntries : Data, IBatteryEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Battery_use_time_counter property
        /// </summary>
        private Nullable<int> _battery_use_time_counter;
        
        private static Lazy<ITypedElement> _battery_use_time_counterAttribute = new Lazy<ITypedElement>(RetrieveBattery_use_time_counterAttribute);
        
        /// <summary>
        /// The backing field for the Battery_charge_display property
        /// </summary>
        private string _battery_charge_display;
        
        private static Lazy<ITypedElement> _battery_charge_displayAttribute = new Lazy<ITypedElement>(RetrieveBattery_charge_displayAttribute);
        
        /// <summary>
        /// The backing field for the Date_of_next_battery_change property
        /// </summary>
        private string _date_of_next_battery_change;
        
        private static Lazy<ITypedElement> _date_of_next_battery_changeAttribute = new Lazy<ITypedElement>(RetrieveDate_of_next_battery_changeAttribute);
        
        /// <summary>
        /// The backing field for the Battery_voltage property
        /// </summary>
        private Nullable<double> _battery_voltage;
        
        private static Lazy<ITypedElement> _battery_voltageAttribute = new Lazy<ITypedElement>(RetrieveBattery_voltageAttribute);
        
        /// <summary>
        /// The backing field for the Battery_initial_capacity property
        /// </summary>
        private Nullable<double> _battery_initial_capacity;
        
        private static Lazy<ITypedElement> _battery_initial_capacityAttribute = new Lazy<ITypedElement>(RetrieveBattery_initial_capacityAttribute);
        
        /// <summary>
        /// The backing field for the Battery_installation_date_and_time property
        /// </summary>
        private string _battery_installation_date_and_time;
        
        private static Lazy<ITypedElement> _battery_installation_date_and_timeAttribute = new Lazy<ITypedElement>(RetrieveBattery_installation_date_and_timeAttribute);
        
        /// <summary>
        /// The backing field for the Battery_estimated_remaining_use_time property
        /// </summary>
        private string _battery_estimated_remaining_use_time;
        
        private static Lazy<ITypedElement> _battery_estimated_remaining_use_timeAttribute = new Lazy<ITypedElement>(RetrieveBattery_estimated_remaining_use_timeAttribute);
        
        /// <summary>
        /// The backing field for the Aux_supply_use_time_counter property
        /// </summary>
        private Nullable<int> _aux_supply_use_time_counter;
        
        private static Lazy<ITypedElement> _aux_supply_use_time_counterAttribute = new Lazy<ITypedElement>(RetrieveAux_supply_use_time_counterAttribute);
        
        /// <summary>
        /// The backing field for the Aux_voltage property
        /// </summary>
        private Nullable<double> _aux_voltage;
        
        private static Lazy<ITypedElement> _aux_voltageAttribute = new Lazy<ITypedElement>(RetrieveAux_voltageAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Battery_use_time_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Battery_use_time_counter
        {
            get
            {
                return this._battery_use_time_counter;
            }
            set
            {
                if ((this._battery_use_time_counter != value))
                {
                    Nullable<int> old = this._battery_use_time_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_use_time_counterChanging(e);
                    this.OnPropertyChanging("Battery_use_time_counter", e, _battery_use_time_counterAttribute);
                    this._battery_use_time_counter = value;
                    this.OnBattery_use_time_counterChanged(e);
                    this.OnPropertyChanged("Battery_use_time_counter", e, _battery_use_time_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_charge_display property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Battery_charge_display
        {
            get
            {
                return this._battery_charge_display;
            }
            set
            {
                if ((this._battery_charge_display != value))
                {
                    string old = this._battery_charge_display;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_charge_displayChanging(e);
                    this.OnPropertyChanging("Battery_charge_display", e, _battery_charge_displayAttribute);
                    this._battery_charge_display = value;
                    this.OnBattery_charge_displayChanged(e);
                    this.OnPropertyChanged("Battery_charge_display", e, _battery_charge_displayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Date_of_next_battery_change property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Date_of_next_battery_change
        {
            get
            {
                return this._date_of_next_battery_change;
            }
            set
            {
                if ((this._date_of_next_battery_change != value))
                {
                    string old = this._date_of_next_battery_change;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDate_of_next_battery_changeChanging(e);
                    this.OnPropertyChanging("Date_of_next_battery_change", e, _date_of_next_battery_changeAttribute);
                    this._date_of_next_battery_change = value;
                    this.OnDate_of_next_battery_changeChanged(e);
                    this.OnPropertyChanged("Date_of_next_battery_change", e, _date_of_next_battery_changeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_voltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Battery_voltage
        {
            get
            {
                return this._battery_voltage;
            }
            set
            {
                if ((this._battery_voltage != value))
                {
                    Nullable<double> old = this._battery_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_voltageChanging(e);
                    this.OnPropertyChanging("Battery_voltage", e, _battery_voltageAttribute);
                    this._battery_voltage = value;
                    this.OnBattery_voltageChanged(e);
                    this.OnPropertyChanged("Battery_voltage", e, _battery_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_initial_capacity property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Battery_initial_capacity
        {
            get
            {
                return this._battery_initial_capacity;
            }
            set
            {
                if ((this._battery_initial_capacity != value))
                {
                    Nullable<double> old = this._battery_initial_capacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_initial_capacityChanging(e);
                    this.OnPropertyChanging("Battery_initial_capacity", e, _battery_initial_capacityAttribute);
                    this._battery_initial_capacity = value;
                    this.OnBattery_initial_capacityChanged(e);
                    this.OnPropertyChanged("Battery_initial_capacity", e, _battery_initial_capacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_installation_date_and_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Battery_installation_date_and_time
        {
            get
            {
                return this._battery_installation_date_and_time;
            }
            set
            {
                if ((this._battery_installation_date_and_time != value))
                {
                    string old = this._battery_installation_date_and_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_installation_date_and_timeChanging(e);
                    this.OnPropertyChanging("Battery_installation_date_and_time", e, _battery_installation_date_and_timeAttribute);
                    this._battery_installation_date_and_time = value;
                    this.OnBattery_installation_date_and_timeChanged(e);
                    this.OnPropertyChanged("Battery_installation_date_and_time", e, _battery_installation_date_and_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Battery_estimated_remaining_use_time property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Battery_estimated_remaining_use_time
        {
            get
            {
                return this._battery_estimated_remaining_use_time;
            }
            set
            {
                if ((this._battery_estimated_remaining_use_time != value))
                {
                    string old = this._battery_estimated_remaining_use_time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBattery_estimated_remaining_use_timeChanging(e);
                    this.OnPropertyChanging("Battery_estimated_remaining_use_time", e, _battery_estimated_remaining_use_timeAttribute);
                    this._battery_estimated_remaining_use_time = value;
                    this.OnBattery_estimated_remaining_use_timeChanged(e);
                    this.OnPropertyChanged("Battery_estimated_remaining_use_time", e, _battery_estimated_remaining_use_timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Aux_supply_use_time_counter property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Aux_supply_use_time_counter
        {
            get
            {
                return this._aux_supply_use_time_counter;
            }
            set
            {
                if ((this._aux_supply_use_time_counter != value))
                {
                    Nullable<int> old = this._aux_supply_use_time_counter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAux_supply_use_time_counterChanging(e);
                    this.OnPropertyChanging("Aux_supply_use_time_counter", e, _aux_supply_use_time_counterAttribute);
                    this._aux_supply_use_time_counter = value;
                    this.OnAux_supply_use_time_counterChanged(e);
                    this.OnPropertyChanged("Aux_supply_use_time_counter", e, _aux_supply_use_time_counterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Aux_voltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Aux_voltage
        {
            get
            {
                return this._aux_voltage;
            }
            set
            {
                if ((this._aux_voltage != value))
                {
                    Nullable<double> old = this._aux_voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAux_voltageChanging(e);
                    this.OnPropertyChanging("Aux_voltage", e, _aux_voltageAttribute);
                    this._aux_voltage = value;
                    this.OnAux_voltageChanged(e);
                    this.OnPropertyChanged("Aux_voltage", e, _aux_voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ba" +
                            "tteryEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Battery_use_time_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Battery_use_time_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Battery_charge_display property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_charge_displayChanging;
        
        /// <summary>
        /// Gets fired when the Battery_charge_display property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_charge_displayChanged;
        
        /// <summary>
        /// Gets fired before the Date_of_next_battery_change property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanging;
        
        /// <summary>
        /// Gets fired when the Date_of_next_battery_change property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Date_of_next_battery_changeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_voltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Battery_voltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_voltageChanged;
        
        /// <summary>
        /// Gets fired before the Battery_initial_capacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanging;
        
        /// <summary>
        /// Gets fired when the Battery_initial_capacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_initial_capacityChanged;
        
        /// <summary>
        /// Gets fired before the Battery_installation_date_and_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_installation_date_and_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_installation_date_and_timeChanged;
        
        /// <summary>
        /// Gets fired before the Battery_estimated_remaining_use_time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanging;
        
        /// <summary>
        /// Gets fired when the Battery_estimated_remaining_use_time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Battery_estimated_remaining_use_timeChanged;
        
        /// <summary>
        /// Gets fired before the Aux_supply_use_time_counter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanging;
        
        /// <summary>
        /// Gets fired when the Aux_supply_use_time_counter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Aux_supply_use_time_counterChanged;
        
        /// <summary>
        /// Gets fired before the Aux_voltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Aux_voltageChanging;
        
        /// <summary>
        /// Gets fired when the Aux_voltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Aux_voltageChanged;
        
        private static ITypedElement RetrieveBattery_use_time_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_use_time_counter")));
        }
        
        /// <summary>
        /// Raises the Battery_use_time_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_use_time_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_use_time_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_use_time_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_use_time_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_use_time_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_charge_displayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_charge_display")));
        }
        
        /// <summary>
        /// Raises the Battery_charge_displayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_charge_displayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_charge_displayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_charge_displayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_charge_displayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_charge_displayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDate_of_next_battery_changeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Date_of_next_battery_change")));
        }
        
        /// <summary>
        /// Raises the Date_of_next_battery_changeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDate_of_next_battery_changeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Date_of_next_battery_changeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Date_of_next_battery_changeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDate_of_next_battery_changeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Date_of_next_battery_changeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_voltage")));
        }
        
        /// <summary>
        /// Raises the Battery_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_initial_capacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_initial_capacity")));
        }
        
        /// <summary>
        /// Raises the Battery_initial_capacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_initial_capacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_initial_capacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_initial_capacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_initial_capacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_initial_capacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_installation_date_and_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_installation_date_and_time")));
        }
        
        /// <summary>
        /// Raises the Battery_installation_date_and_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_installation_date_and_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_installation_date_and_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_installation_date_and_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_installation_date_and_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_installation_date_and_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBattery_estimated_remaining_use_timeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Battery_estimated_remaining_use_time")));
        }
        
        /// <summary>
        /// Raises the Battery_estimated_remaining_use_timeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_estimated_remaining_use_timeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_estimated_remaining_use_timeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Battery_estimated_remaining_use_timeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBattery_estimated_remaining_use_timeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Battery_estimated_remaining_use_timeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAux_supply_use_time_counterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Aux_supply_use_time_counter")));
        }
        
        /// <summary>
        /// Raises the Aux_supply_use_time_counterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_supply_use_time_counterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Aux_supply_use_time_counterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Aux_supply_use_time_counterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_supply_use_time_counterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Aux_supply_use_time_counterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAux_voltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BatteryEntries.ClassInstance)).Resolve("Aux_voltage")));
        }
        
        /// <summary>
        /// Raises the Aux_voltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_voltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Aux_voltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Aux_voltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAux_voltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Aux_voltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BATTERY_USE_TIME_COUNTER"))
            {
                return this.Battery_use_time_counter;
            }
            if ((attribute == "BATTERY_CHARGE_DISPLAY"))
            {
                return this.Battery_charge_display;
            }
            if ((attribute == "DATE_OF_NEXT_BATTERY_CHANGE"))
            {
                return this.Date_of_next_battery_change;
            }
            if ((attribute == "BATTERY_VOLTAGE"))
            {
                return this.Battery_voltage;
            }
            if ((attribute == "BATTERY_INITIAL_CAPACITY"))
            {
                return this.Battery_initial_capacity;
            }
            if ((attribute == "BATTERY_INSTALLATION_DATE_AND_TIME"))
            {
                return this.Battery_installation_date_and_time;
            }
            if ((attribute == "BATTERY_ESTIMATED_REMAINING_USE_TIME"))
            {
                return this.Battery_estimated_remaining_use_time;
            }
            if ((attribute == "AUX_SUPPLY_USE_TIME_COUNTER"))
            {
                return this.Aux_supply_use_time_counter;
            }
            if ((attribute == "AUX_VOLTAGE"))
            {
                return this.Aux_voltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BATTERY_USE_TIME_COUNTER"))
            {
                this.Battery_use_time_counter = ((int)(value));
                return;
            }
            if ((feature == "BATTERY_CHARGE_DISPLAY"))
            {
                this.Battery_charge_display = ((string)(value));
                return;
            }
            if ((feature == "DATE_OF_NEXT_BATTERY_CHANGE"))
            {
                this.Date_of_next_battery_change = ((string)(value));
                return;
            }
            if ((feature == "BATTERY_VOLTAGE"))
            {
                this.Battery_voltage = ((double)(value));
                return;
            }
            if ((feature == "BATTERY_INITIAL_CAPACITY"))
            {
                this.Battery_initial_capacity = ((double)(value));
                return;
            }
            if ((feature == "BATTERY_INSTALLATION_DATE_AND_TIME"))
            {
                this.Battery_installation_date_and_time = ((string)(value));
                return;
            }
            if ((feature == "BATTERY_ESTIMATED_REMAINING_USE_TIME"))
            {
                this.Battery_estimated_remaining_use_time = ((string)(value));
                return;
            }
            if ((feature == "AUX_SUPPLY_USE_TIME_COUNTER"))
            {
                this.Aux_supply_use_time_counter = ((int)(value));
                return;
            }
            if ((feature == "AUX_VOLTAGE"))
            {
                this.Aux_voltage = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ba" +
                        "tteryEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_use_time_counter property
        /// </summary>
        private sealed class Battery_use_time_counterProxy : ModelPropertyChange<IBatteryEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_use_time_counterProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_use_time_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Battery_use_time_counter;
                }
                set
                {
                    this.ModelElement.Battery_use_time_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_charge_display property
        /// </summary>
        private sealed class Battery_charge_displayProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_charge_displayProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_charge_display")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_charge_display;
                }
                set
                {
                    this.ModelElement.Battery_charge_display = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Date_of_next_battery_change property
        /// </summary>
        private sealed class Date_of_next_battery_changeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Date_of_next_battery_changeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Date_of_next_battery_change")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Date_of_next_battery_change;
                }
                set
                {
                    this.ModelElement.Date_of_next_battery_change = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_voltage property
        /// </summary>
        private sealed class Battery_voltageProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_voltageProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Battery_voltage;
                }
                set
                {
                    this.ModelElement.Battery_voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_initial_capacity property
        /// </summary>
        private sealed class Battery_initial_capacityProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_initial_capacityProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_initial_capacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Battery_initial_capacity;
                }
                set
                {
                    this.ModelElement.Battery_initial_capacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_installation_date_and_time property
        /// </summary>
        private sealed class Battery_installation_date_and_timeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_installation_date_and_timeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_installation_date_and_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_installation_date_and_time;
                }
                set
                {
                    this.ModelElement.Battery_installation_date_and_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Battery_estimated_remaining_use_time property
        /// </summary>
        private sealed class Battery_estimated_remaining_use_timeProxy : ModelPropertyChange<IBatteryEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Battery_estimated_remaining_use_timeProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Battery_estimated_remaining_use_time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Battery_estimated_remaining_use_time;
                }
                set
                {
                    this.ModelElement.Battery_estimated_remaining_use_time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Aux_supply_use_time_counter property
        /// </summary>
        private sealed class Aux_supply_use_time_counterProxy : ModelPropertyChange<IBatteryEntries, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Aux_supply_use_time_counterProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Aux_supply_use_time_counter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Aux_supply_use_time_counter;
                }
                set
                {
                    this.ModelElement.Aux_supply_use_time_counter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Aux_voltage property
        /// </summary>
        private sealed class Aux_voltageProxy : ModelPropertyChange<IBatteryEntries, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Aux_voltageProxy(IBatteryEntries modelElement) : 
                    base(modelElement, "Aux_voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Aux_voltage;
                }
                set
                {
                    this.ModelElement.Aux_voltage = value;
                }
            }
        }
    }
}

