//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM;
using TTC2017.SmartGrids.COSEM.Datatypes;

namespace TTC2017.SmartGrids.COSEM.InterfaceClasses
{
    
    
    /// <summary>
    /// The default implementation of the Compactdata class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
        "s/Compactdata")]
    public partial class Compactdata : Base, ICompactdata, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Compact_buffer property
        /// </summary>
        private string _compact_buffer;
        
        private static Lazy<ITypedElement> _compact_bufferAttribute = new Lazy<ITypedElement>(RetrieveCompact_bufferAttribute);
        
        /// <summary>
        /// The backing field for the Template_id property
        /// </summary>
        private string _template_id;
        
        private static Lazy<ITypedElement> _template_idAttribute = new Lazy<ITypedElement>(RetrieveTemplate_idAttribute);
        
        /// <summary>
        /// The backing field for the Template_description property
        /// </summary>
        private string _template_description;
        
        private static Lazy<ITypedElement> _template_descriptionAttribute = new Lazy<ITypedElement>(RetrieveTemplate_descriptionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The compact_buffer property
        /// </summary>
        [XmlElementNameAttribute("compact_buffer")]
        [XmlAttributeAttribute(true)]
        public virtual string Compact_buffer
        {
            get
            {
                return this._compact_buffer;
            }
            set
            {
                if ((this._compact_buffer != value))
                {
                    string old = this._compact_buffer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompact_bufferChanging(e);
                    this.OnPropertyChanging("Compact_buffer", e, _compact_bufferAttribute);
                    this._compact_buffer = value;
                    this.OnCompact_bufferChanged(e);
                    this.OnPropertyChanged("Compact_buffer", e, _compact_bufferAttribute);
                }
            }
        }
        
        /// <summary>
        /// The template_id property
        /// </summary>
        [XmlElementNameAttribute("template_id")]
        [XmlAttributeAttribute(true)]
        public virtual string Template_id
        {
            get
            {
                return this._template_id;
            }
            set
            {
                if ((this._template_id != value))
                {
                    string old = this._template_id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTemplate_idChanging(e);
                    this.OnPropertyChanging("Template_id", e, _template_idAttribute);
                    this._template_id = value;
                    this.OnTemplate_idChanged(e);
                    this.OnPropertyChanged("Template_id", e, _template_idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The template_description property
        /// </summary>
        [XmlElementNameAttribute("template_description")]
        [XmlAttributeAttribute(true)]
        public virtual string Template_description
        {
            get
            {
                return this._template_description;
            }
            set
            {
                if ((this._template_description != value))
                {
                    string old = this._template_description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTemplate_descriptionChanging(e);
                    this.OnPropertyChanging("Template_description", e, _template_descriptionAttribute);
                    this._template_description = value;
                    this.OnTemplate_descriptionChanged(e);
                    this.OnPropertyChanged("Template_description", e, _template_descriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
                            "s/Compactdata")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Compact_buffer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compact_bufferChanging;
        
        /// <summary>
        /// Gets fired when the Compact_buffer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Compact_bufferChanged;
        
        /// <summary>
        /// Gets fired before the Template_id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Template_idChanging;
        
        /// <summary>
        /// Gets fired when the Template_id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Template_idChanged;
        
        /// <summary>
        /// Gets fired before the Template_description property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Template_descriptionChanging;
        
        /// <summary>
        /// Gets fired when the Template_description property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Template_descriptionChanged;
        
        private static ITypedElement RetrieveCompact_bufferAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Compactdata.ClassInstance)).Resolve("compact_buffer")));
        }
        
        /// <summary>
        /// Raises the Compact_bufferChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompact_bufferChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compact_bufferChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Compact_bufferChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompact_bufferChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Compact_bufferChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTemplate_idAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Compactdata.ClassInstance)).Resolve("template_id")));
        }
        
        /// <summary>
        /// Raises the Template_idChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_idChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Template_idChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Template_idChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_idChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Template_idChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTemplate_descriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Compactdata.ClassInstance)).Resolve("template_description")));
        }
        
        /// <summary>
        /// Raises the Template_descriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_descriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Template_descriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Template_descriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTemplate_descriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Template_descriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMPACT_BUFFER"))
            {
                return this.Compact_buffer;
            }
            if ((attribute == "TEMPLATE_ID"))
            {
                return this.Template_id;
            }
            if ((attribute == "TEMPLATE_DESCRIPTION"))
            {
                return this.Template_description;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMPACT_BUFFER"))
            {
                this.Compact_buffer = ((string)(value));
                return;
            }
            if ((feature == "TEMPLATE_ID"))
            {
                this.Template_id = ((string)(value));
                return;
            }
            if ((feature == "TEMPLATE_DESCRIPTION"))
            {
                this.Template_description = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
                        "s/Compactdata")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the compact_buffer property
        /// </summary>
        private sealed class Compact_bufferProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Compact_bufferProxy(ICompactdata modelElement) : 
                    base(modelElement, "compact_buffer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Compact_buffer;
                }
                set
                {
                    this.ModelElement.Compact_buffer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the template_id property
        /// </summary>
        private sealed class Template_idProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Template_idProxy(ICompactdata modelElement) : 
                    base(modelElement, "template_id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Template_id;
                }
                set
                {
                    this.ModelElement.Template_id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the template_description property
        /// </summary>
        private sealed class Template_descriptionProxy : ModelPropertyChange<ICompactdata, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Template_descriptionProxy(ICompactdata modelElement) : 
                    base(modelElement, "template_description")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Template_description;
                }
                set
                {
                    this.ModelElement.Template_description = value;
                }
            }
        }
    }
}

