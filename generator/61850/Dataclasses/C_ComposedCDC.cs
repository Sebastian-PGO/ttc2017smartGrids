//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the C_ComposedCDC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/C_ComposedCDC")]
    public class C_ComposedCDC : ModelElement, IC_ComposedCDC, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CdcNs property
        /// </summary>
        private string _cdcNs;
        
        /// <summary>
        /// The backing field for the CdcName property
        /// </summary>
        private string _cdcName;
        
        /// <summary>
        /// The backing field for the DataNs property
        /// </summary>
        private string _dataNs;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The cdcNs property
        /// </summary>
        [XmlElementNameAttribute("cdcNs")]
        [XmlAttributeAttribute(true)]
        public virtual string CdcNs
        {
            get
            {
                return this._cdcNs;
            }
            set
            {
                if ((this._cdcNs != value))
                {
                    string old = this._cdcNs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCdcNsChanging(e);
                    this.OnPropertyChanging("CdcNs", e);
                    this._cdcNs = value;
                    this.OnCdcNsChanged(e);
                    this.OnPropertyChanged("CdcNs", e);
                }
            }
        }
        
        /// <summary>
        /// The cdcName property
        /// </summary>
        [XmlElementNameAttribute("cdcName")]
        [XmlAttributeAttribute(true)]
        public virtual string CdcName
        {
            get
            {
                return this._cdcName;
            }
            set
            {
                if ((this._cdcName != value))
                {
                    string old = this._cdcName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCdcNameChanging(e);
                    this.OnPropertyChanging("CdcName", e);
                    this._cdcName = value;
                    this.OnCdcNameChanged(e);
                    this.OnPropertyChanged("CdcName", e);
                }
            }
        }
        
        /// <summary>
        /// The dataNs property
        /// </summary>
        [XmlElementNameAttribute("dataNs")]
        [XmlAttributeAttribute(true)]
        public virtual string DataNs
        {
            get
            {
                return this._dataNs;
            }
            set
            {
                if ((this._dataNs != value))
                {
                    string old = this._dataNs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDataNsChanging(e);
                    this.OnPropertyChanging("DataNs", e);
                    this._dataNs = value;
                    this.OnDataNsChanged(e);
                    this.OnPropertyChanged("DataNs", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/C_ComposedCDC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CdcNs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CdcNsChanging;
        
        /// <summary>
        /// Gets fired when the CdcNs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CdcNsChanged;
        
        /// <summary>
        /// Gets fired before the CdcName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CdcNameChanging;
        
        /// <summary>
        /// Gets fired when the CdcName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CdcNameChanged;
        
        /// <summary>
        /// Gets fired before the DataNs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DataNsChanging;
        
        /// <summary>
        /// Gets fired when the DataNs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DataNsChanged;
        
        /// <summary>
        /// Raises the CdcNsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCdcNsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CdcNsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CdcNsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCdcNsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CdcNsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CdcNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCdcNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CdcNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CdcNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCdcNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CdcNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DataNsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDataNsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DataNsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DataNsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDataNsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DataNsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CDCNS"))
            {
                return this.CdcNs;
            }
            if ((attribute == "CDCNAME"))
            {
                return this.CdcName;
            }
            if ((attribute == "DATANS"))
            {
                return this.DataNs;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CDCNS"))
            {
                this.CdcNs = ((string)(value));
                return;
            }
            if ((feature == "CDCNAME"))
            {
                this.CdcName = ((string)(value));
                return;
            }
            if ((feature == "DATANS"))
            {
                this.DataNs = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/C_ComposedCDC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cdcNs property
        /// </summary>
        private sealed class CdcNsProxy : ModelPropertyChange<IC_ComposedCDC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CdcNsProxy(IC_ComposedCDC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CdcNs;
                }
                set
                {
                    this.ModelElement.CdcNs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CdcNsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CdcNsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cdcName property
        /// </summary>
        private sealed class CdcNameProxy : ModelPropertyChange<IC_ComposedCDC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CdcNameProxy(IC_ComposedCDC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CdcName;
                }
                set
                {
                    this.ModelElement.CdcName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CdcNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CdcNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dataNs property
        /// </summary>
        private sealed class DataNsProxy : ModelPropertyChange<IC_ComposedCDC, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DataNsProxy(IC_ComposedCDC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DataNs;
                }
                set
                {
                    this.ModelElement.DataNs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DataNsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DataNsChanged -= handler;
            }
        }
    }
}

