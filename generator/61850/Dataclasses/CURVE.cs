//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the CURVE class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/CURVE")]
    public partial class CURVE : ModelElement, ICURVE, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SetParA property
        /// </summary>
        private Nullable<float> _setParA;
        
        private static Lazy<ITypedElement> _setParAAttribute = new Lazy<ITypedElement>(RetrieveSetParAAttribute);
        
        /// <summary>
        /// The backing field for the SetParB property
        /// </summary>
        private Nullable<float> _setParB;
        
        private static Lazy<ITypedElement> _setParBAttribute = new Lazy<ITypedElement>(RetrieveSetParBAttribute);
        
        /// <summary>
        /// The backing field for the SetParC property
        /// </summary>
        private Nullable<float> _setParC;
        
        private static Lazy<ITypedElement> _setParCAttribute = new Lazy<ITypedElement>(RetrieveSetParCAttribute);
        
        /// <summary>
        /// The backing field for the SetParD property
        /// </summary>
        private Nullable<float> _setParD;
        
        private static Lazy<ITypedElement> _setParDAttribute = new Lazy<ITypedElement>(RetrieveSetParDAttribute);
        
        /// <summary>
        /// The backing field for the SetParE property
        /// </summary>
        private Nullable<float> _setParE;
        
        private static Lazy<ITypedElement> _setParEAttribute = new Lazy<ITypedElement>(RetrieveSetParEAttribute);
        
        /// <summary>
        /// The backing field for the SetParF property
        /// </summary>
        private Nullable<float> _setParF;
        
        private static Lazy<ITypedElement> _setParFAttribute = new Lazy<ITypedElement>(RetrieveSetParFAttribute);
        
        /// <summary>
        /// The backing field for the _SetParA property
        /// </summary>
        private Nullable<float> @__setParA;
        
        private static Lazy<ITypedElement> @__setParAAttribute = new Lazy<ITypedElement>(Retrieve_SetParAAttribute);
        
        /// <summary>
        /// The backing field for the _SetParB property
        /// </summary>
        private Nullable<float> @__setParB;
        
        private static Lazy<ITypedElement> @__setParBAttribute = new Lazy<ITypedElement>(Retrieve_SetParBAttribute);
        
        /// <summary>
        /// The backing field for the _SetParC property
        /// </summary>
        private Nullable<float> @__setParC;
        
        private static Lazy<ITypedElement> @__setParCAttribute = new Lazy<ITypedElement>(Retrieve_SetParCAttribute);
        
        /// <summary>
        /// The backing field for the _SetParD property
        /// </summary>
        private Nullable<float> @__setParD;
        
        private static Lazy<ITypedElement> @__setParDAttribute = new Lazy<ITypedElement>(Retrieve_SetParDAttribute);
        
        /// <summary>
        /// The backing field for the _SetParE property
        /// </summary>
        private Nullable<float> @__setParE;
        
        private static Lazy<ITypedElement> @__setParEAttribute = new Lazy<ITypedElement>(Retrieve_SetParEAttribute);
        
        /// <summary>
        /// The backing field for the _SetParF property
        /// </summary>
        private Nullable<float> @__setParF;
        
        private static Lazy<ITypedElement> @__setParFAttribute = new Lazy<ITypedElement>(Retrieve_SetParFAttribute);
        
        /// <summary>
        /// The backing field for the __SetParA property
        /// </summary>
        private Nullable<float> ___setParA;
        
        private static Lazy<ITypedElement> ___setParAAttribute = new Lazy<ITypedElement>(Retrieve__SetParAAttribute);
        
        /// <summary>
        /// The backing field for the __SetParB property
        /// </summary>
        private Nullable<float> ___setParB;
        
        private static Lazy<ITypedElement> ___setParBAttribute = new Lazy<ITypedElement>(Retrieve__SetParBAttribute);
        
        /// <summary>
        /// The backing field for the __SetParC property
        /// </summary>
        private Nullable<float> ___setParC;
        
        private static Lazy<ITypedElement> ___setParCAttribute = new Lazy<ITypedElement>(Retrieve__SetParCAttribute);
        
        /// <summary>
        /// The backing field for the __SetParD property
        /// </summary>
        private Nullable<float> ___setParD;
        
        private static Lazy<ITypedElement> ___setParDAttribute = new Lazy<ITypedElement>(Retrieve__SetParDAttribute);
        
        /// <summary>
        /// The backing field for the __SetParE property
        /// </summary>
        private Nullable<float> ___setParE;
        
        private static Lazy<ITypedElement> ___setParEAttribute = new Lazy<ITypedElement>(Retrieve__SetParEAttribute);
        
        /// <summary>
        /// The backing field for the __SetParF property
        /// </summary>
        private Nullable<float> ___setParF;
        
        private static Lazy<ITypedElement> ___setParFAttribute = new Lazy<ITypedElement>(Retrieve__SetParFAttribute);
        
        private static Lazy<ITypedElement> _setCharactReference = new Lazy<ITypedElement>(RetrieveSetCharactReference);
        
        /// <summary>
        /// The backing field for the SetCharact property
        /// </summary>
        private ICurveChar _setCharact;
        
        private static Lazy<ITypedElement> @__setCharactReference = new Lazy<ITypedElement>(Retrieve_SetCharactReference);
        
        /// <summary>
        /// The backing field for the _SetCharact property
        /// </summary>
        private ICurveChar @__setCharact;
        
        private static Lazy<ITypedElement> ___setCharactReference = new Lazy<ITypedElement>(Retrieve__SetCharactReference);
        
        /// <summary>
        /// The backing field for the __SetCharact property
        /// </summary>
        private ICurveChar ___setCharact;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The setParA property
        /// </summary>
        [XmlElementNameAttribute("setParA")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParA
        {
            get
            {
                return this._setParA;
            }
            set
            {
                if ((this._setParA != value))
                {
                    Nullable<float> old = this._setParA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParAChanging(e);
                    this.OnPropertyChanging("SetParA", e, _setParAAttribute);
                    this._setParA = value;
                    this.OnSetParAChanged(e);
                    this.OnPropertyChanged("SetParA", e, _setParAAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setParB property
        /// </summary>
        [XmlElementNameAttribute("setParB")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParB
        {
            get
            {
                return this._setParB;
            }
            set
            {
                if ((this._setParB != value))
                {
                    Nullable<float> old = this._setParB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParBChanging(e);
                    this.OnPropertyChanging("SetParB", e, _setParBAttribute);
                    this._setParB = value;
                    this.OnSetParBChanged(e);
                    this.OnPropertyChanged("SetParB", e, _setParBAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setParC property
        /// </summary>
        [XmlElementNameAttribute("setParC")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParC
        {
            get
            {
                return this._setParC;
            }
            set
            {
                if ((this._setParC != value))
                {
                    Nullable<float> old = this._setParC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParCChanging(e);
                    this.OnPropertyChanging("SetParC", e, _setParCAttribute);
                    this._setParC = value;
                    this.OnSetParCChanged(e);
                    this.OnPropertyChanged("SetParC", e, _setParCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setParD property
        /// </summary>
        [XmlElementNameAttribute("setParD")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParD
        {
            get
            {
                return this._setParD;
            }
            set
            {
                if ((this._setParD != value))
                {
                    Nullable<float> old = this._setParD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParDChanging(e);
                    this.OnPropertyChanging("SetParD", e, _setParDAttribute);
                    this._setParD = value;
                    this.OnSetParDChanged(e);
                    this.OnPropertyChanged("SetParD", e, _setParDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setParE property
        /// </summary>
        [XmlElementNameAttribute("setParE")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParE
        {
            get
            {
                return this._setParE;
            }
            set
            {
                if ((this._setParE != value))
                {
                    Nullable<float> old = this._setParE;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParEChanging(e);
                    this.OnPropertyChanging("SetParE", e, _setParEAttribute);
                    this._setParE = value;
                    this.OnSetParEChanged(e);
                    this.OnPropertyChanged("SetParE", e, _setParEAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setParF property
        /// </summary>
        [XmlElementNameAttribute("setParF")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> SetParF
        {
            get
            {
                return this._setParF;
            }
            set
            {
                if ((this._setParF != value))
                {
                    Nullable<float> old = this._setParF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetParFChanging(e);
                    this.OnPropertyChanging("SetParF", e, _setParFAttribute);
                    this._setParF = value;
                    this.OnSetParFChanged(e);
                    this.OnPropertyChanged("SetParF", e, _setParFAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParA property
        /// </summary>
        [XmlElementNameAttribute("_setParA")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParA
        {
            get
            {
                return this.@__setParA;
            }
            set
            {
                if ((this.@__setParA != value))
                {
                    Nullable<float> old = this.@__setParA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParAChanging(e);
                    this.OnPropertyChanging("_SetParA", e, @__setParAAttribute);
                    this.@__setParA = value;
                    this.On_SetParAChanged(e);
                    this.OnPropertyChanged("_SetParA", e, @__setParAAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParB property
        /// </summary>
        [XmlElementNameAttribute("_setParB")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParB
        {
            get
            {
                return this.@__setParB;
            }
            set
            {
                if ((this.@__setParB != value))
                {
                    Nullable<float> old = this.@__setParB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParBChanging(e);
                    this.OnPropertyChanging("_SetParB", e, @__setParBAttribute);
                    this.@__setParB = value;
                    this.On_SetParBChanged(e);
                    this.OnPropertyChanged("_SetParB", e, @__setParBAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParC property
        /// </summary>
        [XmlElementNameAttribute("_setParC")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParC
        {
            get
            {
                return this.@__setParC;
            }
            set
            {
                if ((this.@__setParC != value))
                {
                    Nullable<float> old = this.@__setParC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParCChanging(e);
                    this.OnPropertyChanging("_SetParC", e, @__setParCAttribute);
                    this.@__setParC = value;
                    this.On_SetParCChanged(e);
                    this.OnPropertyChanged("_SetParC", e, @__setParCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParD property
        /// </summary>
        [XmlElementNameAttribute("_setParD")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParD
        {
            get
            {
                return this.@__setParD;
            }
            set
            {
                if ((this.@__setParD != value))
                {
                    Nullable<float> old = this.@__setParD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParDChanging(e);
                    this.OnPropertyChanging("_SetParD", e, @__setParDAttribute);
                    this.@__setParD = value;
                    this.On_SetParDChanged(e);
                    this.OnPropertyChanged("_SetParD", e, @__setParDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParE property
        /// </summary>
        [XmlElementNameAttribute("_setParE")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParE
        {
            get
            {
                return this.@__setParE;
            }
            set
            {
                if ((this.@__setParE != value))
                {
                    Nullable<float> old = this.@__setParE;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParEChanging(e);
                    this.OnPropertyChanging("_SetParE", e, @__setParEAttribute);
                    this.@__setParE = value;
                    this.On_SetParEChanged(e);
                    this.OnPropertyChanged("_SetParE", e, @__setParEAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _setParF property
        /// </summary>
        [XmlElementNameAttribute("_setParF")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> _SetParF
        {
            get
            {
                return this.@__setParF;
            }
            set
            {
                if ((this.@__setParF != value))
                {
                    Nullable<float> old = this.@__setParF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetParFChanging(e);
                    this.OnPropertyChanging("_SetParF", e, @__setParFAttribute);
                    this.@__setParF = value;
                    this.On_SetParFChanged(e);
                    this.OnPropertyChanged("_SetParF", e, @__setParFAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParA property
        /// </summary>
        [XmlElementNameAttribute("__setParA")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParA
        {
            get
            {
                return this.___setParA;
            }
            set
            {
                if ((this.___setParA != value))
                {
                    Nullable<float> old = this.___setParA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParAChanging(e);
                    this.OnPropertyChanging("__SetParA", e, ___setParAAttribute);
                    this.___setParA = value;
                    this.On__SetParAChanged(e);
                    this.OnPropertyChanged("__SetParA", e, ___setParAAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParB property
        /// </summary>
        [XmlElementNameAttribute("__setParB")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParB
        {
            get
            {
                return this.___setParB;
            }
            set
            {
                if ((this.___setParB != value))
                {
                    Nullable<float> old = this.___setParB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParBChanging(e);
                    this.OnPropertyChanging("__SetParB", e, ___setParBAttribute);
                    this.___setParB = value;
                    this.On__SetParBChanged(e);
                    this.OnPropertyChanged("__SetParB", e, ___setParBAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParC property
        /// </summary>
        [XmlElementNameAttribute("__setParC")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParC
        {
            get
            {
                return this.___setParC;
            }
            set
            {
                if ((this.___setParC != value))
                {
                    Nullable<float> old = this.___setParC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParCChanging(e);
                    this.OnPropertyChanging("__SetParC", e, ___setParCAttribute);
                    this.___setParC = value;
                    this.On__SetParCChanged(e);
                    this.OnPropertyChanged("__SetParC", e, ___setParCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParD property
        /// </summary>
        [XmlElementNameAttribute("__setParD")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParD
        {
            get
            {
                return this.___setParD;
            }
            set
            {
                if ((this.___setParD != value))
                {
                    Nullable<float> old = this.___setParD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParDChanging(e);
                    this.OnPropertyChanging("__SetParD", e, ___setParDAttribute);
                    this.___setParD = value;
                    this.On__SetParDChanged(e);
                    this.OnPropertyChanged("__SetParD", e, ___setParDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParE property
        /// </summary>
        [XmlElementNameAttribute("__setParE")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParE
        {
            get
            {
                return this.___setParE;
            }
            set
            {
                if ((this.___setParE != value))
                {
                    Nullable<float> old = this.___setParE;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParEChanging(e);
                    this.OnPropertyChanging("__SetParE", e, ___setParEAttribute);
                    this.___setParE = value;
                    this.On__SetParEChanged(e);
                    this.OnPropertyChanged("__SetParE", e, ___setParEAttribute);
                }
            }
        }
        
        /// <summary>
        /// The __setParF property
        /// </summary>
        [XmlElementNameAttribute("__setParF")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> @__SetParF
        {
            get
            {
                return this.___setParF;
            }
            set
            {
                if ((this.___setParF != value))
                {
                    Nullable<float> old = this.___setParF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetParFChanging(e);
                    this.OnPropertyChanging("__SetParF", e, ___setParFAttribute);
                    this.___setParF = value;
                    this.On__SetParFChanged(e);
                    this.OnPropertyChanged("__SetParF", e, ___setParFAttribute);
                }
            }
        }
        
        /// <summary>
        /// The setCharact property
        /// </summary>
        [XmlElementNameAttribute("setCharact")]
        [XmlAttributeAttribute(true)]
        public virtual ICurveChar SetCharact
        {
            get
            {
                return this._setCharact;
            }
            set
            {
                if ((this._setCharact != value))
                {
                    ICurveChar old = this._setCharact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetCharactChanging(e);
                    this.OnPropertyChanging("SetCharact", e, _setCharactReference);
                    this._setCharact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetCharact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetCharact;
                    }
                    this.OnSetCharactChanged(e);
                    this.OnPropertyChanged("SetCharact", e, _setCharactReference);
                }
            }
        }
        
        /// <summary>
        /// The _setCharact property
        /// </summary>
        [XmlElementNameAttribute("_setCharact")]
        [XmlAttributeAttribute(true)]
        public virtual ICurveChar _SetCharact
        {
            get
            {
                return this.@__setCharact;
            }
            set
            {
                if ((this.@__setCharact != value))
                {
                    ICurveChar old = this.@__setCharact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetCharactChanging(e);
                    this.OnPropertyChanging("_SetCharact", e, @__setCharactReference);
                    this.@__setCharact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnReset_SetCharact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnReset_SetCharact;
                    }
                    this.On_SetCharactChanged(e);
                    this.OnPropertyChanged("_SetCharact", e, @__setCharactReference);
                }
            }
        }
        
        /// <summary>
        /// The __setCharact property
        /// </summary>
        [XmlElementNameAttribute("__setCharact")]
        [XmlAttributeAttribute(true)]
        public virtual ICurveChar @__SetCharact
        {
            get
            {
                return this.___setCharact;
            }
            set
            {
                if ((this.___setCharact != value))
                {
                    ICurveChar old = this.___setCharact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetCharactChanging(e);
                    this.OnPropertyChanging("__SetCharact", e, ___setCharactReference);
                    this.___setCharact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnReset__SetCharact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnReset__SetCharact;
                    }
                    this.On__SetCharactChanged(e);
                    this.OnPropertyChanged("__SetCharact", e, ___setCharactReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CURVEReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/CURVE")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SetParA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParAChanging;
        
        /// <summary>
        /// Gets fired when the SetParA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParAChanged;
        
        /// <summary>
        /// Gets fired before the SetParB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParBChanging;
        
        /// <summary>
        /// Gets fired when the SetParB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParBChanged;
        
        /// <summary>
        /// Gets fired before the SetParC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParCChanging;
        
        /// <summary>
        /// Gets fired when the SetParC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParCChanged;
        
        /// <summary>
        /// Gets fired before the SetParD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParDChanging;
        
        /// <summary>
        /// Gets fired when the SetParD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParDChanged;
        
        /// <summary>
        /// Gets fired before the SetParE property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParEChanging;
        
        /// <summary>
        /// Gets fired when the SetParE property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParEChanged;
        
        /// <summary>
        /// Gets fired before the SetParF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParFChanging;
        
        /// <summary>
        /// Gets fired when the SetParF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetParFChanged;
        
        /// <summary>
        /// Gets fired before the _SetParA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParAChanging;
        
        /// <summary>
        /// Gets fired when the _SetParA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParAChanged;
        
        /// <summary>
        /// Gets fired before the _SetParB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParBChanging;
        
        /// <summary>
        /// Gets fired when the _SetParB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParBChanged;
        
        /// <summary>
        /// Gets fired before the _SetParC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParCChanging;
        
        /// <summary>
        /// Gets fired when the _SetParC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParCChanged;
        
        /// <summary>
        /// Gets fired before the _SetParD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParDChanging;
        
        /// <summary>
        /// Gets fired when the _SetParD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParDChanged;
        
        /// <summary>
        /// Gets fired before the _SetParE property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParEChanging;
        
        /// <summary>
        /// Gets fired when the _SetParE property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParEChanged;
        
        /// <summary>
        /// Gets fired before the _SetParF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParFChanging;
        
        /// <summary>
        /// Gets fired when the _SetParF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetParFChanged;
        
        /// <summary>
        /// Gets fired before the __SetParA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParAChanging;
        
        /// <summary>
        /// Gets fired when the __SetParA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParAChanged;
        
        /// <summary>
        /// Gets fired before the __SetParB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParBChanging;
        
        /// <summary>
        /// Gets fired when the __SetParB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParBChanged;
        
        /// <summary>
        /// Gets fired before the __SetParC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParCChanging;
        
        /// <summary>
        /// Gets fired when the __SetParC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParCChanged;
        
        /// <summary>
        /// Gets fired before the __SetParD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParDChanging;
        
        /// <summary>
        /// Gets fired when the __SetParD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParDChanged;
        
        /// <summary>
        /// Gets fired before the __SetParE property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParEChanging;
        
        /// <summary>
        /// Gets fired when the __SetParE property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParEChanged;
        
        /// <summary>
        /// Gets fired before the __SetParF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParFChanging;
        
        /// <summary>
        /// Gets fired when the __SetParF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetParFChanged;
        
        /// <summary>
        /// Gets fired before the SetCharact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetCharactChanging;
        
        /// <summary>
        /// Gets fired when the SetCharact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetCharactChanged;
        
        /// <summary>
        /// Gets fired before the _SetCharact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetCharactChanging;
        
        /// <summary>
        /// Gets fired when the _SetCharact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetCharactChanged;
        
        /// <summary>
        /// Gets fired before the __SetCharact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetCharactChanging;
        
        /// <summary>
        /// Gets fired when the __SetCharact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetCharactChanged;
        
        private static ITypedElement RetrieveSetParAAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParA")));
        }
        
        /// <summary>
        /// Raises the SetParAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetParBAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParB")));
        }
        
        /// <summary>
        /// Raises the SetParBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetParCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParC")));
        }
        
        /// <summary>
        /// Raises the SetParCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetParDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParD")));
        }
        
        /// <summary>
        /// Raises the SetParDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetParEAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParE")));
        }
        
        /// <summary>
        /// Raises the SetParEChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParEChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParEChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParEChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParEChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParEChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetParFAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setParF")));
        }
        
        /// <summary>
        /// Raises the SetParFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetParFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetParFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetParFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParAAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParA")));
        }
        
        /// <summary>
        /// Raises the _SetParAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParBAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParB")));
        }
        
        /// <summary>
        /// Raises the _SetParBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParC")));
        }
        
        /// <summary>
        /// Raises the _SetParCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParD")));
        }
        
        /// <summary>
        /// Raises the _SetParDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParEAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParE")));
        }
        
        /// <summary>
        /// Raises the _SetParEChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParEChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParEChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParEChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParEChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParEChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_SetParFAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setParF")));
        }
        
        /// <summary>
        /// Raises the _SetParFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetParFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetParFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetParFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParAAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParA")));
        }
        
        /// <summary>
        /// Raises the __SetParAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParBAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParB")));
        }
        
        /// <summary>
        /// Raises the __SetParBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParC")));
        }
        
        /// <summary>
        /// Raises the __SetParCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParD")));
        }
        
        /// <summary>
        /// Raises the __SetParDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParEAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParE")));
        }
        
        /// <summary>
        /// Raises the __SetParEChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParEChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParEChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParEChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParEChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParEChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve__SetParFAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setParF")));
        }
        
        /// <summary>
        /// Raises the __SetParFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetParFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetParFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetParFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSetCharactReference()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("setCharact")));
        }
        
        /// <summary>
        /// Raises the SetCharactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetCharactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetCharactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetCharactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetCharactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetCharactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetCharact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetCharact(object sender, System.EventArgs eventArgs)
        {
            this.SetCharact = null;
        }
        
        private static ITypedElement Retrieve_SetCharactReference()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("_setCharact")));
        }
        
        /// <summary>
        /// Raises the _SetCharactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetCharactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetCharactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetCharactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetCharactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetCharactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the _SetCharact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnReset_SetCharact(object sender, System.EventArgs eventArgs)
        {
            this._SetCharact = null;
        }
        
        private static ITypedElement Retrieve__SetCharactReference()
        {
            return ((ITypedElement)(((ModelElement)(CURVE.ClassInstance)).Resolve("__setCharact")));
        }
        
        /// <summary>
        /// Raises the __SetCharactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetCharactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetCharactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetCharactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetCharactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetCharactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the __SetCharact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnReset__SetCharact(object sender, System.EventArgs eventArgs)
        {
            this.@__SetCharact = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SETPARA"))
            {
                return this.SetParA;
            }
            if ((attribute == "SETPARB"))
            {
                return this.SetParB;
            }
            if ((attribute == "SETPARC"))
            {
                return this.SetParC;
            }
            if ((attribute == "SETPARD"))
            {
                return this.SetParD;
            }
            if ((attribute == "SETPARE"))
            {
                return this.SetParE;
            }
            if ((attribute == "SETPARF"))
            {
                return this.SetParF;
            }
            if ((attribute == "_SETPARA"))
            {
                return this._SetParA;
            }
            if ((attribute == "_SETPARB"))
            {
                return this._SetParB;
            }
            if ((attribute == "_SETPARC"))
            {
                return this._SetParC;
            }
            if ((attribute == "_SETPARD"))
            {
                return this._SetParD;
            }
            if ((attribute == "_SETPARE"))
            {
                return this._SetParE;
            }
            if ((attribute == "_SETPARF"))
            {
                return this._SetParF;
            }
            if ((attribute == "__SETPARA"))
            {
                return this.@__SetParA;
            }
            if ((attribute == "__SETPARB"))
            {
                return this.@__SetParB;
            }
            if ((attribute == "__SETPARC"))
            {
                return this.@__SetParC;
            }
            if ((attribute == "__SETPARD"))
            {
                return this.@__SetParD;
            }
            if ((attribute == "__SETPARE"))
            {
                return this.@__SetParE;
            }
            if ((attribute == "__SETPARF"))
            {
                return this.@__SetParF;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SETCHARACT"))
            {
                this.SetCharact = ((ICurveChar)(value));
                return;
            }
            if ((feature == "_SETCHARACT"))
            {
                this._SetCharact = ((ICurveChar)(value));
                return;
            }
            if ((feature == "__SETCHARACT"))
            {
                this.@__SetCharact = ((ICurveChar)(value));
                return;
            }
            if ((feature == "SETPARA"))
            {
                this.SetParA = ((float)(value));
                return;
            }
            if ((feature == "SETPARB"))
            {
                this.SetParB = ((float)(value));
                return;
            }
            if ((feature == "SETPARC"))
            {
                this.SetParC = ((float)(value));
                return;
            }
            if ((feature == "SETPARD"))
            {
                this.SetParD = ((float)(value));
                return;
            }
            if ((feature == "SETPARE"))
            {
                this.SetParE = ((float)(value));
                return;
            }
            if ((feature == "SETPARF"))
            {
                this.SetParF = ((float)(value));
                return;
            }
            if ((feature == "_SETPARA"))
            {
                this._SetParA = ((float)(value));
                return;
            }
            if ((feature == "_SETPARB"))
            {
                this._SetParB = ((float)(value));
                return;
            }
            if ((feature == "_SETPARC"))
            {
                this._SetParC = ((float)(value));
                return;
            }
            if ((feature == "_SETPARD"))
            {
                this._SetParD = ((float)(value));
                return;
            }
            if ((feature == "_SETPARE"))
            {
                this._SetParE = ((float)(value));
                return;
            }
            if ((feature == "_SETPARF"))
            {
                this._SetParF = ((float)(value));
                return;
            }
            if ((feature == "__SETPARA"))
            {
                this.@__SetParA = ((float)(value));
                return;
            }
            if ((feature == "__SETPARB"))
            {
                this.@__SetParB = ((float)(value));
                return;
            }
            if ((feature == "__SETPARC"))
            {
                this.@__SetParC = ((float)(value));
                return;
            }
            if ((feature == "__SETPARD"))
            {
                this.@__SetParD = ((float)(value));
                return;
            }
            if ((feature == "__SETPARE"))
            {
                this.@__SetParE = ((float)(value));
                return;
            }
            if ((feature == "__SETPARF"))
            {
                this.@__SetParF = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SetCharact"))
            {
                return new SetCharactProxy(this);
            }
            if ((attribute == "_SetCharact"))
            {
                return new _SetCharactProxy(this);
            }
            if ((attribute == "__SetCharact"))
            {
                return new @__SetCharactProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SetCharact"))
            {
                return new SetCharactProxy(this);
            }
            if ((reference == "_SetCharact"))
            {
                return new _SetCharactProxy(this);
            }
            if ((reference == "__SetCharact"))
            {
                return new @__SetCharactProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/CURVE")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CURVE class
        /// </summary>
        public class CURVEReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CURVE _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CURVEReferencedElementsCollection(CURVE parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SetCharact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent._SetCharact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.@__SetCharact != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SetCharactChanged += this.PropagateValueChanges;
                this._parent._SetCharactChanged += this.PropagateValueChanges;
                this._parent.@__SetCharactChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SetCharactChanged -= this.PropagateValueChanges;
                this._parent._SetCharactChanged -= this.PropagateValueChanges;
                this._parent.@__SetCharactChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SetCharact == null))
                {
                    ICurveChar setCharactCasted = item.As<ICurveChar>();
                    if ((setCharactCasted != null))
                    {
                        this._parent.SetCharact = setCharactCasted;
                        return;
                    }
                }
                if ((this._parent._SetCharact == null))
                {
                    ICurveChar _setCharactCasted = item.As<ICurveChar>();
                    if ((_setCharactCasted != null))
                    {
                        this._parent._SetCharact = _setCharactCasted;
                        return;
                    }
                }
                if ((this._parent.@__SetCharact == null))
                {
                    ICurveChar @__setCharactCasted = item.As<ICurveChar>();
                    if ((@__setCharactCasted != null))
                    {
                        this._parent.@__SetCharact = @__setCharactCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SetCharact = null;
                this._parent._SetCharact = null;
                this._parent.@__SetCharact = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SetCharact))
                {
                    return true;
                }
                if ((item == this._parent._SetCharact))
                {
                    return true;
                }
                if ((item == this._parent.@__SetCharact))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SetCharact != null))
                {
                    array[arrayIndex] = this._parent.SetCharact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent._SetCharact != null))
                {
                    array[arrayIndex] = this._parent._SetCharact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.@__SetCharact != null))
                {
                    array[arrayIndex] = this._parent.@__SetCharact;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SetCharact == item))
                {
                    this._parent.SetCharact = null;
                    return true;
                }
                if ((this._parent._SetCharact == item))
                {
                    this._parent._SetCharact = null;
                    return true;
                }
                if ((this._parent.@__SetCharact == item))
                {
                    this._parent.@__SetCharact = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SetCharact).Concat(this._parent._SetCharact).Concat(this._parent.@__SetCharact).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParA property
        /// </summary>
        private sealed class SetParAProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParAProxy(ICURVE modelElement) : 
                    base(modelElement, "setParA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParA;
                }
                set
                {
                    this.ModelElement.SetParA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParB property
        /// </summary>
        private sealed class SetParBProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParBProxy(ICURVE modelElement) : 
                    base(modelElement, "setParB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParB;
                }
                set
                {
                    this.ModelElement.SetParB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParC property
        /// </summary>
        private sealed class SetParCProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParCProxy(ICURVE modelElement) : 
                    base(modelElement, "setParC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParC;
                }
                set
                {
                    this.ModelElement.SetParC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParD property
        /// </summary>
        private sealed class SetParDProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParDProxy(ICURVE modelElement) : 
                    base(modelElement, "setParD")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParD;
                }
                set
                {
                    this.ModelElement.SetParD = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParE property
        /// </summary>
        private sealed class SetParEProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParEProxy(ICURVE modelElement) : 
                    base(modelElement, "setParE")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParE;
                }
                set
                {
                    this.ModelElement.SetParE = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setParF property
        /// </summary>
        private sealed class SetParFProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetParFProxy(ICURVE modelElement) : 
                    base(modelElement, "setParF")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.SetParF;
                }
                set
                {
                    this.ModelElement.SetParF = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParA property
        /// </summary>
        private sealed class _SetParAProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParAProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParA;
                }
                set
                {
                    this.ModelElement._SetParA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParB property
        /// </summary>
        private sealed class _SetParBProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParBProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParB;
                }
                set
                {
                    this.ModelElement._SetParB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParC property
        /// </summary>
        private sealed class _SetParCProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParCProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParC;
                }
                set
                {
                    this.ModelElement._SetParC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParD property
        /// </summary>
        private sealed class _SetParDProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParDProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParD")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParD;
                }
                set
                {
                    this.ModelElement._SetParD = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParE property
        /// </summary>
        private sealed class _SetParEProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParEProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParE")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParE;
                }
                set
                {
                    this.ModelElement._SetParE = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setParF property
        /// </summary>
        private sealed class _SetParFProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetParFProxy(ICURVE modelElement) : 
                    base(modelElement, "_setParF")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement._SetParF;
                }
                set
                {
                    this.ModelElement._SetParF = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParA property
        /// </summary>
        private sealed class @__SetParAProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParAProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParA;
                }
                set
                {
                    this.ModelElement.@__SetParA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParB property
        /// </summary>
        private sealed class @__SetParBProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParBProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParB")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParB;
                }
                set
                {
                    this.ModelElement.@__SetParB = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParC property
        /// </summary>
        private sealed class @__SetParCProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParCProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParC;
                }
                set
                {
                    this.ModelElement.@__SetParC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParD property
        /// </summary>
        private sealed class @__SetParDProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParDProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParD")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParD;
                }
                set
                {
                    this.ModelElement.@__SetParD = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParE property
        /// </summary>
        private sealed class @__SetParEProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParEProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParE")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParE;
                }
                set
                {
                    this.ModelElement.@__SetParE = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setParF property
        /// </summary>
        private sealed class @__SetParFProxy : ModelPropertyChange<ICURVE, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetParFProxy(ICURVE modelElement) : 
                    base(modelElement, "__setParF")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.@__SetParF;
                }
                set
                {
                    this.ModelElement.@__SetParF = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setCharact property
        /// </summary>
        private sealed class SetCharactProxy : ModelPropertyChange<ICURVE, ICurveChar>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetCharactProxy(ICURVE modelElement) : 
                    base(modelElement, "setCharact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurveChar Value
            {
                get
                {
                    return this.ModelElement.SetCharact;
                }
                set
                {
                    this.ModelElement.SetCharact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setCharact property
        /// </summary>
        private sealed class _SetCharactProxy : ModelPropertyChange<ICURVE, ICurveChar>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetCharactProxy(ICURVE modelElement) : 
                    base(modelElement, "_setCharact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurveChar Value
            {
                get
                {
                    return this.ModelElement._SetCharact;
                }
                set
                {
                    this.ModelElement._SetCharact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setCharact property
        /// </summary>
        private sealed class @__SetCharactProxy : ModelPropertyChange<ICURVE, ICurveChar>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetCharactProxy(ICURVE modelElement) : 
                    base(modelElement, "__setCharact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurveChar Value
            {
                get
                {
                    return this.ModelElement.@__SetCharact;
                }
                set
                {
                    this.ModelElement.@__SetCharact = value;
                }
            }
        }
    }
}

