//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the AnalogueValue class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/AnalogueValue")]
    public class AnalogueValue : ModelElement, IAnalogueValue, IModelElement
    {
        
        /// <summary>
        /// The backing field for the I property
        /// </summary>
        private Nullable<int> _i;
        
        /// <summary>
        /// The backing field for the F property
        /// </summary>
        private Nullable<float> _f;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The i property
        /// </summary>
        [XmlElementNameAttribute("i")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> I
        {
            get
            {
                return this._i;
            }
            set
            {
                if ((this._i != value))
                {
                    Nullable<int> old = this._i;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIChanging(e);
                    this.OnPropertyChanging("I", e);
                    this._i = value;
                    this.OnIChanged(e);
                    this.OnPropertyChanged("I", e);
                }
            }
        }
        
        /// <summary>
        /// The f property
        /// </summary>
        [XmlElementNameAttribute("f")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> F
        {
            get
            {
                return this._f;
            }
            set
            {
                if ((this._f != value))
                {
                    Nullable<float> old = this._f;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFChanging(e);
                    this.OnPropertyChanging("F", e);
                    this._f = value;
                    this.OnFChanged(e);
                    this.OnPropertyChanged("F", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/AnalogueValue")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the I property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IChanging;
        
        /// <summary>
        /// Gets fired when the I property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IChanged;
        
        /// <summary>
        /// Gets fired before the F property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FChanging;
        
        /// <summary>
        /// Gets fired when the F property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FChanged;
        
        /// <summary>
        /// Raises the IChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "I"))
            {
                return this.I;
            }
            if ((attribute == "F"))
            {
                return this.F;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "I"))
            {
                this.I = ((int)(value));
                return;
            }
            if ((feature == "F"))
            {
                this.F = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/AnalogueValue")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the i property
        /// </summary>
        private sealed class IProxy : ModelPropertyChange<IAnalogueValue, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IProxy(IAnalogueValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.I;
                }
                set
                {
                    this.ModelElement.I = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the f property
        /// </summary>
        private sealed class FProxy : ModelPropertyChange<IAnalogueValue, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FProxy(IAnalogueValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.F;
                }
                set
                {
                    this.ModelElement.F = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FChanged -= handler;
            }
        }
    }
}

