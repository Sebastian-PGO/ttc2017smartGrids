//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the DEL class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/DEL")]
    public class DEL : ModelElement, IDEL, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PhsAB property
        /// </summary>
        private ICMV _phsAB;
        
        /// <summary>
        /// The backing field for the PhsBC property
        /// </summary>
        private ICMV _phsBC;
        
        /// <summary>
        /// The backing field for the PhsCA property
        /// </summary>
        private ICMV _phsCA;
        
        /// <summary>
        /// The backing field for the AngRef property
        /// </summary>
        private IAngleReference _angRef;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The phsAB property
        /// </summary>
        [XmlElementNameAttribute("phsAB")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsAB
        {
            get
            {
                return this._phsAB;
            }
            set
            {
                if ((this._phsAB != value))
                {
                    ICMV old = this._phsAB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsABChanging(e);
                    this.OnPropertyChanging("PhsAB", e);
                    this._phsAB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsAB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsAB;
                    }
                    this.OnPhsABChanged(e);
                    this.OnPropertyChanged("PhsAB", e);
                }
            }
        }
        
        /// <summary>
        /// The phsBC property
        /// </summary>
        [XmlElementNameAttribute("phsBC")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsBC
        {
            get
            {
                return this._phsBC;
            }
            set
            {
                if ((this._phsBC != value))
                {
                    ICMV old = this._phsBC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsBCChanging(e);
                    this.OnPropertyChanging("PhsBC", e);
                    this._phsBC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsBC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsBC;
                    }
                    this.OnPhsBCChanged(e);
                    this.OnPropertyChanged("PhsBC", e);
                }
            }
        }
        
        /// <summary>
        /// The phsCA property
        /// </summary>
        [XmlElementNameAttribute("phsCA")]
        [XmlAttributeAttribute(true)]
        public virtual ICMV PhsCA
        {
            get
            {
                return this._phsCA;
            }
            set
            {
                if ((this._phsCA != value))
                {
                    ICMV old = this._phsCA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsCAChanging(e);
                    this.OnPropertyChanging("PhsCA", e);
                    this._phsCA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhsCA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhsCA;
                    }
                    this.OnPhsCAChanged(e);
                    this.OnPropertyChanged("PhsCA", e);
                }
            }
        }
        
        /// <summary>
        /// The angRef property
        /// </summary>
        [XmlElementNameAttribute("angRef")]
        [XmlAttributeAttribute(true)]
        public virtual IAngleReference AngRef
        {
            get
            {
                return this._angRef;
            }
            set
            {
                if ((this._angRef != value))
                {
                    IAngleReference old = this._angRef;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngRefChanging(e);
                    this.OnPropertyChanging("AngRef", e);
                    this._angRef = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngRef;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngRef;
                    }
                    this.OnAngRefChanged(e);
                    this.OnPropertyChanged("AngRef", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DELReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/DEL")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PhsAB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsABChanging;
        
        /// <summary>
        /// Gets fired when the PhsAB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsABChanged;
        
        /// <summary>
        /// Gets fired before the PhsBC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBCChanging;
        
        /// <summary>
        /// Gets fired when the PhsBC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBCChanged;
        
        /// <summary>
        /// Gets fired before the PhsCA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCAChanging;
        
        /// <summary>
        /// Gets fired when the PhsCA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCAChanged;
        
        /// <summary>
        /// Gets fired before the AngRef property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanging;
        
        /// <summary>
        /// Gets fired when the AngRef property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanged;
        
        /// <summary>
        /// Raises the PhsABChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsABChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsABChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsABChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsABChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsABChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsAB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsAB(object sender, System.EventArgs eventArgs)
        {
            this.PhsAB = null;
        }
        
        /// <summary>
        /// Raises the PhsBCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsBCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsBC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsBC(object sender, System.EventArgs eventArgs)
        {
            this.PhsBC = null;
        }
        
        /// <summary>
        /// Raises the PhsCAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsCAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhsCA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhsCA(object sender, System.EventArgs eventArgs)
        {
            this.PhsCA = null;
        }
        
        /// <summary>
        /// Raises the AngRefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngRefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngRef property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngRef(object sender, System.EventArgs eventArgs)
        {
            this.AngRef = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PHSAB"))
            {
                this.PhsAB = ((ICMV)(value));
                return;
            }
            if ((feature == "PHSBC"))
            {
                this.PhsBC = ((ICMV)(value));
                return;
            }
            if ((feature == "PHSCA"))
            {
                this.PhsCA = ((ICMV)(value));
                return;
            }
            if ((feature == "ANGREF"))
            {
                this.AngRef = ((IAngleReference)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PhsAB"))
            {
                return new PhsABProxy(this);
            }
            if ((attribute == "PhsBC"))
            {
                return new PhsBCProxy(this);
            }
            if ((attribute == "PhsCA"))
            {
                return new PhsCAProxy(this);
            }
            if ((attribute == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PhsAB"))
            {
                return new PhsABProxy(this);
            }
            if ((reference == "PhsBC"))
            {
                return new PhsBCProxy(this);
            }
            if ((reference == "PhsCA"))
            {
                return new PhsCAProxy(this);
            }
            if ((reference == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/DEL")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DEL class
        /// </summary>
        public class DELReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DEL _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DELReferencedElementsCollection(DEL parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PhsAB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhsBC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhsCA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngRef != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PhsABChanged += this.PropagateValueChanges;
                this._parent.PhsBCChanged += this.PropagateValueChanges;
                this._parent.PhsCAChanged += this.PropagateValueChanges;
                this._parent.AngRefChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PhsABChanged -= this.PropagateValueChanges;
                this._parent.PhsBCChanged -= this.PropagateValueChanges;
                this._parent.PhsCAChanged -= this.PropagateValueChanges;
                this._parent.AngRefChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PhsAB == null))
                {
                    ICMV phsABCasted = item.As<ICMV>();
                    if ((phsABCasted != null))
                    {
                        this._parent.PhsAB = phsABCasted;
                        return;
                    }
                }
                if ((this._parent.PhsBC == null))
                {
                    ICMV phsBCCasted = item.As<ICMV>();
                    if ((phsBCCasted != null))
                    {
                        this._parent.PhsBC = phsBCCasted;
                        return;
                    }
                }
                if ((this._parent.PhsCA == null))
                {
                    ICMV phsCACasted = item.As<ICMV>();
                    if ((phsCACasted != null))
                    {
                        this._parent.PhsCA = phsCACasted;
                        return;
                    }
                }
                if ((this._parent.AngRef == null))
                {
                    IAngleReference angRefCasted = item.As<IAngleReference>();
                    if ((angRefCasted != null))
                    {
                        this._parent.AngRef = angRefCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PhsAB = null;
                this._parent.PhsBC = null;
                this._parent.PhsCA = null;
                this._parent.AngRef = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PhsAB))
                {
                    return true;
                }
                if ((item == this._parent.PhsBC))
                {
                    return true;
                }
                if ((item == this._parent.PhsCA))
                {
                    return true;
                }
                if ((item == this._parent.AngRef))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PhsAB != null))
                {
                    array[arrayIndex] = this._parent.PhsAB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhsBC != null))
                {
                    array[arrayIndex] = this._parent.PhsBC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhsCA != null))
                {
                    array[arrayIndex] = this._parent.PhsCA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngRef != null))
                {
                    array[arrayIndex] = this._parent.AngRef;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PhsAB == item))
                {
                    this._parent.PhsAB = null;
                    return true;
                }
                if ((this._parent.PhsBC == item))
                {
                    this._parent.PhsBC = null;
                    return true;
                }
                if ((this._parent.PhsCA == item))
                {
                    this._parent.PhsCA = null;
                    return true;
                }
                if ((this._parent.AngRef == item))
                {
                    this._parent.AngRef = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PhsAB).Concat(this._parent.PhsBC).Concat(this._parent.PhsCA).Concat(this._parent.AngRef).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsAB property
        /// </summary>
        private sealed class PhsABProxy : ModelPropertyChange<IDEL, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsABProxy(IDEL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsAB;
                }
                set
                {
                    this.ModelElement.PhsAB = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsABChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsABChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsBC property
        /// </summary>
        private sealed class PhsBCProxy : ModelPropertyChange<IDEL, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsBCProxy(IDEL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsBC;
                }
                set
                {
                    this.ModelElement.PhsBC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsBCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsBCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsCA property
        /// </summary>
        private sealed class PhsCAProxy : ModelPropertyChange<IDEL, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsCAProxy(IDEL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.PhsCA;
                }
                set
                {
                    this.ModelElement.PhsCA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsCAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsCAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the angRef property
        /// </summary>
        private sealed class AngRefProxy : ModelPropertyChange<IDEL, IAngleReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngRefProxy(IDEL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAngleReference Value
            {
                get
                {
                    return this.ModelElement.AngRef;
                }
                set
                {
                    this.ModelElement.AngRef = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngRefChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngRefChanged -= handler;
            }
        }
    }
}

