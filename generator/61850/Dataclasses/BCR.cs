//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the BCR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/BCR")]
    public partial class BCR : ModelElement, IBCR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActVal property
        /// </summary>
        private Nullable<int> _actVal;
        
        private static Lazy<ITypedElement> _actValAttribute = new Lazy<ITypedElement>(RetrieveActValAttribute);
        
        /// <summary>
        /// The backing field for the FrVal property
        /// </summary>
        private Nullable<int> _frVal;
        
        private static Lazy<ITypedElement> _frValAttribute = new Lazy<ITypedElement>(RetrieveFrValAttribute);
        
        /// <summary>
        /// The backing field for the PulsQty property
        /// </summary>
        private Nullable<float> _pulsQty;
        
        private static Lazy<ITypedElement> _pulsQtyAttribute = new Lazy<ITypedElement>(RetrievePulsQtyAttribute);
        
        /// <summary>
        /// The backing field for the FrEna property
        /// </summary>
        private Nullable<bool> _frEna;
        
        private static Lazy<ITypedElement> _frEnaAttribute = new Lazy<ITypedElement>(RetrieveFrEnaAttribute);
        
        /// <summary>
        /// The backing field for the FrPd property
        /// </summary>
        private Nullable<int> _frPd;
        
        private static Lazy<ITypedElement> _frPdAttribute = new Lazy<ITypedElement>(RetrieveFrPdAttribute);
        
        /// <summary>
        /// The backing field for the FrRs property
        /// </summary>
        private Nullable<bool> _frRs;
        
        private static Lazy<ITypedElement> _frRsAttribute = new Lazy<ITypedElement>(RetrieveFrRsAttribute);
        
        private static Lazy<ITypedElement> _frTmReference = new Lazy<ITypedElement>(RetrieveFrTmReference);
        
        /// <summary>
        /// The backing field for the FrTm property
        /// </summary>
        private ITimeStamp _frTm;
        
        private static Lazy<ITypedElement> _qReference = new Lazy<ITypedElement>(RetrieveQReference);
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        private static Lazy<ITypedElement> _unitsReference = new Lazy<ITypedElement>(RetrieveUnitsReference);
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        private static Lazy<ITypedElement> _strTmReference = new Lazy<ITypedElement>(RetrieveStrTmReference);
        
        /// <summary>
        /// The backing field for the StrTm property
        /// </summary>
        private ITimeStamp _strTm;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The actVal property
        /// </summary>
        [XmlElementNameAttribute("actVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> ActVal
        {
            get
            {
                return this._actVal;
            }
            set
            {
                if ((this._actVal != value))
                {
                    Nullable<int> old = this._actVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActValChanging(e);
                    this.OnPropertyChanging("ActVal", e, _actValAttribute);
                    this._actVal = value;
                    this.OnActValChanged(e);
                    this.OnPropertyChanged("ActVal", e, _actValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frVal property
        /// </summary>
        [XmlElementNameAttribute("frVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FrVal
        {
            get
            {
                return this._frVal;
            }
            set
            {
                if ((this._frVal != value))
                {
                    Nullable<int> old = this._frVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrValChanging(e);
                    this.OnPropertyChanging("FrVal", e, _frValAttribute);
                    this._frVal = value;
                    this.OnFrValChanged(e);
                    this.OnPropertyChanged("FrVal", e, _frValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pulsQty property
        /// </summary>
        [XmlElementNameAttribute("pulsQty")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<float> PulsQty
        {
            get
            {
                return this._pulsQty;
            }
            set
            {
                if ((this._pulsQty != value))
                {
                    Nullable<float> old = this._pulsQty;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPulsQtyChanging(e);
                    this.OnPropertyChanging("PulsQty", e, _pulsQtyAttribute);
                    this._pulsQty = value;
                    this.OnPulsQtyChanged(e);
                    this.OnPropertyChanged("PulsQty", e, _pulsQtyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frEna property
        /// </summary>
        [XmlElementNameAttribute("frEna")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> FrEna
        {
            get
            {
                return this._frEna;
            }
            set
            {
                if ((this._frEna != value))
                {
                    Nullable<bool> old = this._frEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrEnaChanging(e);
                    this.OnPropertyChanging("FrEna", e, _frEnaAttribute);
                    this._frEna = value;
                    this.OnFrEnaChanged(e);
                    this.OnPropertyChanged("FrEna", e, _frEnaAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frPd property
        /// </summary>
        [XmlElementNameAttribute("frPd")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FrPd
        {
            get
            {
                return this._frPd;
            }
            set
            {
                if ((this._frPd != value))
                {
                    Nullable<int> old = this._frPd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrPdChanging(e);
                    this.OnPropertyChanging("FrPd", e, _frPdAttribute);
                    this._frPd = value;
                    this.OnFrPdChanged(e);
                    this.OnPropertyChanged("FrPd", e, _frPdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frRs property
        /// </summary>
        [XmlElementNameAttribute("frRs")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> FrRs
        {
            get
            {
                return this._frRs;
            }
            set
            {
                if ((this._frRs != value))
                {
                    Nullable<bool> old = this._frRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrRsChanging(e);
                    this.OnPropertyChanging("FrRs", e, _frRsAttribute);
                    this._frRs = value;
                    this.OnFrRsChanged(e);
                    this.OnPropertyChanged("FrRs", e, _frRsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frTm property
        /// </summary>
        [XmlElementNameAttribute("frTm")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp FrTm
        {
            get
            {
                return this._frTm;
            }
            set
            {
                if ((this._frTm != value))
                {
                    ITimeStamp old = this._frTm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrTmChanging(e);
                    this.OnPropertyChanging("FrTm", e, _frTmReference);
                    this._frTm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFrTm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFrTm;
                    }
                    this.OnFrTmChanged(e);
                    this.OnPropertyChanged("FrTm", e, _frTmReference);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e, _qReference);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e, _qReference);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e, _unitsReference);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e, _unitsReference);
                }
            }
        }
        
        /// <summary>
        /// The strTm property
        /// </summary>
        [XmlElementNameAttribute("strTm")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp StrTm
        {
            get
            {
                return this._strTm;
            }
            set
            {
                if ((this._strTm != value))
                {
                    ITimeStamp old = this._strTm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrTmChanging(e);
                    this.OnPropertyChanging("StrTm", e, _strTmReference);
                    this._strTm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrTm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrTm;
                    }
                    this.OnStrTmChanged(e);
                    this.OnPropertyChanged("StrTm", e, _strTmReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BCRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/BCR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActValChanging;
        
        /// <summary>
        /// Gets fired when the ActVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActValChanged;
        
        /// <summary>
        /// Gets fired before the FrVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrValChanging;
        
        /// <summary>
        /// Gets fired when the FrVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrValChanged;
        
        /// <summary>
        /// Gets fired before the PulsQty property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PulsQtyChanging;
        
        /// <summary>
        /// Gets fired when the PulsQty property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PulsQtyChanged;
        
        /// <summary>
        /// Gets fired before the FrEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrEnaChanging;
        
        /// <summary>
        /// Gets fired when the FrEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrEnaChanged;
        
        /// <summary>
        /// Gets fired before the FrPd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrPdChanging;
        
        /// <summary>
        /// Gets fired when the FrPd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrPdChanged;
        
        /// <summary>
        /// Gets fired before the FrRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrRsChanging;
        
        /// <summary>
        /// Gets fired when the FrRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrRsChanged;
        
        /// <summary>
        /// Gets fired before the FrTm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrTmChanging;
        
        /// <summary>
        /// Gets fired when the FrTm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrTmChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the StrTm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrTmChanging;
        
        /// <summary>
        /// Gets fired when the StrTm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrTmChanged;
        
        private static ITypedElement RetrieveActValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("actVal")));
        }
        
        /// <summary>
        /// Raises the ActValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("frVal")));
        }
        
        /// <summary>
        /// Raises the FrValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePulsQtyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("pulsQty")));
        }
        
        /// <summary>
        /// Raises the PulsQtyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsQtyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PulsQtyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PulsQtyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPulsQtyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PulsQtyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrEnaAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("frEna")));
        }
        
        /// <summary>
        /// Raises the FrEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrPdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("frPd")));
        }
        
        /// <summary>
        /// Raises the FrPdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrPdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrPdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrPdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrPdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrPdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrRsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("frRs")));
        }
        
        /// <summary>
        /// Raises the FrRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrTmReference()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("frTm")));
        }
        
        /// <summary>
        /// Raises the FrTmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrTmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrTmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrTmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrTmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrTmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FrTm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFrTm(object sender, System.EventArgs eventArgs)
        {
            this.FrTm = null;
        }
        
        private static ITypedElement RetrieveQReference()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("q")));
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        private static ITypedElement RetrieveUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("units")));
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        private static ITypedElement RetrieveStrTmReference()
        {
            return ((ITypedElement)(((ModelElement)(BCR.ClassInstance)).Resolve("strTm")));
        }
        
        /// <summary>
        /// Raises the StrTmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrTmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrTmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrTmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrTmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrTmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrTm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrTm(object sender, System.EventArgs eventArgs)
        {
            this.StrTm = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTVAL"))
            {
                return this.ActVal;
            }
            if ((attribute == "FRVAL"))
            {
                return this.FrVal;
            }
            if ((attribute == "PULSQTY"))
            {
                return this.PulsQty;
            }
            if ((attribute == "FRENA"))
            {
                return this.FrEna;
            }
            if ((attribute == "FRPD"))
            {
                return this.FrPd;
            }
            if ((attribute == "FRRS"))
            {
                return this.FrRs;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FRTM"))
            {
                this.FrTm = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "STRTM"))
            {
                this.StrTm = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "ACTVAL"))
            {
                this.ActVal = ((int)(value));
                return;
            }
            if ((feature == "FRVAL"))
            {
                this.FrVal = ((int)(value));
                return;
            }
            if ((feature == "PULSQTY"))
            {
                this.PulsQty = ((float)(value));
                return;
            }
            if ((feature == "FRENA"))
            {
                this.FrEna = ((bool)(value));
                return;
            }
            if ((feature == "FRPD"))
            {
                this.FrPd = ((int)(value));
                return;
            }
            if ((feature == "FRRS"))
            {
                this.FrRs = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FrTm"))
            {
                return new FrTmProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "StrTm"))
            {
                return new StrTmProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FrTm"))
            {
                return new FrTmProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "StrTm"))
            {
                return new StrTmProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/BCR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BCR class
        /// </summary>
        public class BCRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BCR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BCRReferencedElementsCollection(BCR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FrTm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrTm != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FrTmChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.StrTmChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FrTmChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.StrTmChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FrTm == null))
                {
                    ITimeStamp frTmCasted = item.As<ITimeStamp>();
                    if ((frTmCasted != null))
                    {
                        this._parent.FrTm = frTmCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.StrTm == null))
                {
                    ITimeStamp strTmCasted = item.As<ITimeStamp>();
                    if ((strTmCasted != null))
                    {
                        this._parent.StrTm = strTmCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FrTm = null;
                this._parent.Q = null;
                this._parent.Units = null;
                this._parent.StrTm = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FrTm))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.StrTm))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FrTm != null))
                {
                    array[arrayIndex] = this._parent.FrTm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrTm != null))
                {
                    array[arrayIndex] = this._parent.StrTm;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FrTm == item))
                {
                    this._parent.FrTm = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.StrTm == item))
                {
                    this._parent.StrTm = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FrTm).Concat(this._parent.Q).Concat(this._parent.Units).Concat(this._parent.StrTm).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actVal property
        /// </summary>
        private sealed class ActValProxy : ModelPropertyChange<IBCR, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActValProxy(IBCR modelElement) : 
                    base(modelElement, "actVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.ActVal;
                }
                set
                {
                    this.ModelElement.ActVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frVal property
        /// </summary>
        private sealed class FrValProxy : ModelPropertyChange<IBCR, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrValProxy(IBCR modelElement) : 
                    base(modelElement, "frVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FrVal;
                }
                set
                {
                    this.ModelElement.FrVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pulsQty property
        /// </summary>
        private sealed class PulsQtyProxy : ModelPropertyChange<IBCR, Nullable<float>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PulsQtyProxy(IBCR modelElement) : 
                    base(modelElement, "pulsQty")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<float> Value
            {
                get
                {
                    return this.ModelElement.PulsQty;
                }
                set
                {
                    this.ModelElement.PulsQty = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frEna property
        /// </summary>
        private sealed class FrEnaProxy : ModelPropertyChange<IBCR, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrEnaProxy(IBCR modelElement) : 
                    base(modelElement, "frEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.FrEna;
                }
                set
                {
                    this.ModelElement.FrEna = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frPd property
        /// </summary>
        private sealed class FrPdProxy : ModelPropertyChange<IBCR, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrPdProxy(IBCR modelElement) : 
                    base(modelElement, "frPd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FrPd;
                }
                set
                {
                    this.ModelElement.FrPd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frRs property
        /// </summary>
        private sealed class FrRsProxy : ModelPropertyChange<IBCR, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrRsProxy(IBCR modelElement) : 
                    base(modelElement, "frRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.FrRs;
                }
                set
                {
                    this.ModelElement.FrRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frTm property
        /// </summary>
        private sealed class FrTmProxy : ModelPropertyChange<IBCR, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrTmProxy(IBCR modelElement) : 
                    base(modelElement, "frTm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.FrTm;
                }
                set
                {
                    this.ModelElement.FrTm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<IBCR, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(IBCR modelElement) : 
                    base(modelElement, "q")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<IBCR, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(IBCR modelElement) : 
                    base(modelElement, "units")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the strTm property
        /// </summary>
        private sealed class StrTmProxy : ModelPropertyChange<IBCR, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrTmProxy(IBCR modelElement) : 
                    base(modelElement, "strTm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.StrTm;
                }
                set
                {
                    this.ModelElement.StrTm = value;
                }
            }
        }
    }
}

