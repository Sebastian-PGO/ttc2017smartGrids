//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The public interface for HYWE
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HYWE))]
    [XmlDefaultImplementationTypeAttribute(typeof(HYWE))]
    public interface IHYWE : IModelElement
    {
        
        /// <summary>
        /// The numHar property
        /// </summary>
        Nullable<int> NumHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The numCyc property
        /// </summary>
        Nullable<int> NumCyc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The evalTm property
        /// </summary>
        Nullable<int> EvalTm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The smpRate property
        /// </summary>
        Nullable<int> SmpRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        Nullable<float> Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rmsCyc property
        /// </summary>
        Nullable<int> RmsCyc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        IQuality Q
        {
            get;
            set;
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        ITimeStamp T
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsAHar property
        /// </summary>
        IVectorArray PhsAHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsBHar property
        /// </summary>
        IVectorArray PhsBHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phsCHar property
        /// </summary>
        IVectorArray PhsCHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The neutHar property
        /// </summary>
        IVectorArray NeutHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The netHar property
        /// </summary>
        IVectorArray NetHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The resHar property
        /// </summary>
        IVectorArray ResHar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        IUnits Units
        {
            get;
            set;
        }
        
        /// <summary>
        /// The angRef property
        /// </summary>
        IAngleReference AngRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hvRef property
        /// </summary>
        IMagReference HvRef
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the NumHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumHarChanging;
        
        /// <summary>
        /// Gets fired when the NumHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumHarChanged;
        
        /// <summary>
        /// Gets fired before the NumCyc property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanging;
        
        /// <summary>
        /// Gets fired when the NumCyc property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanged;
        
        /// <summary>
        /// Gets fired before the EvalTm property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvalTmChanging;
        
        /// <summary>
        /// Gets fired when the EvalTm property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvalTmChanged;
        
        /// <summary>
        /// Gets fired before the SmpRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SmpRateChanging;
        
        /// <summary>
        /// Gets fired when the SmpRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SmpRateChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the RmsCyc property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RmsCycChanging;
        
        /// <summary>
        /// Gets fired when the RmsCyc property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RmsCycChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the PhsAHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsAHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsAHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsAHarChanged;
        
        /// <summary>
        /// Gets fired before the PhsBHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsBHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsBHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsBHarChanged;
        
        /// <summary>
        /// Gets fired before the PhsCHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsCHarChanging;
        
        /// <summary>
        /// Gets fired when the PhsCHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhsCHarChanged;
        
        /// <summary>
        /// Gets fired before the NeutHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutHarChanging;
        
        /// <summary>
        /// Gets fired when the NeutHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutHarChanged;
        
        /// <summary>
        /// Gets fired before the NetHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NetHarChanging;
        
        /// <summary>
        /// Gets fired when the NetHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NetHarChanged;
        
        /// <summary>
        /// Gets fired before the ResHar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ResHarChanging;
        
        /// <summary>
        /// Gets fired when the ResHar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ResHarChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the AngRef property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngRefChanging;
        
        /// <summary>
        /// Gets fired when the AngRef property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngRefChanged;
        
        /// <summary>
        /// Gets fired before the HvRef property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HvRefChanging;
        
        /// <summary>
        /// Gets fired when the HvRef property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HvRefChanged;
    }
}

