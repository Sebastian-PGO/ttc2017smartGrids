//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the CMV class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/CMV")]
    public class CMV : ModelElement, ICMV, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SubEna property
        /// </summary>
        private Nullable<bool> _subEna;
        
        /// <summary>
        /// The backing field for the SubID property
        /// </summary>
        private string _subID;
        
        /// <summary>
        /// The backing field for the Db property
        /// </summary>
        private Nullable<int> _db;
        
        /// <summary>
        /// The backing field for the ZeroDb property
        /// </summary>
        private Nullable<int> _zeroDb;
        
        /// <summary>
        /// The backing field for the SmpRate property
        /// </summary>
        private Nullable<int> _smpRate;
        
        /// <summary>
        /// The backing field for the InstCVal property
        /// </summary>
        private IVector _instCVal;
        
        /// <summary>
        /// The backing field for the CVal property
        /// </summary>
        private IVector _cVal;
        
        /// <summary>
        /// The backing field for the Range property
        /// </summary>
        private IRange _range;
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        /// <summary>
        /// The backing field for the T property
        /// </summary>
        private ITimeStamp _t;
        
        /// <summary>
        /// The backing field for the SubCVal property
        /// </summary>
        private IVector _subCVal;
        
        /// <summary>
        /// The backing field for the SubQ property
        /// </summary>
        private IQuality _subQ;
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        /// <summary>
        /// The backing field for the RangeC property
        /// </summary>
        private IRangeConfig _rangeC;
        
        /// <summary>
        /// The backing field for the MagSVC property
        /// </summary>
        private IScaledValueConfig _magSVC;
        
        /// <summary>
        /// The backing field for the AngSVC property
        /// </summary>
        private IScaledValueConfig _angSVC;
        
        /// <summary>
        /// The backing field for the AngRef property
        /// </summary>
        private ICMVAngleReference _angRef;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The subEna property
        /// </summary>
        [XmlElementNameAttribute("subEna")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> SubEna
        {
            get
            {
                return this._subEna;
            }
            set
            {
                if ((this._subEna != value))
                {
                    Nullable<bool> old = this._subEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubEnaChanging(e);
                    this.OnPropertyChanging("SubEna", e);
                    this._subEna = value;
                    this.OnSubEnaChanged(e);
                    this.OnPropertyChanged("SubEna", e);
                }
            }
        }
        
        /// <summary>
        /// The subID property
        /// </summary>
        [XmlElementNameAttribute("subID")]
        [XmlAttributeAttribute(true)]
        public virtual string SubID
        {
            get
            {
                return this._subID;
            }
            set
            {
                if ((this._subID != value))
                {
                    string old = this._subID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubIDChanging(e);
                    this.OnPropertyChanging("SubID", e);
                    this._subID = value;
                    this.OnSubIDChanged(e);
                    this.OnPropertyChanged("SubID", e);
                }
            }
        }
        
        /// <summary>
        /// The db property
        /// </summary>
        [XmlElementNameAttribute("db")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Db
        {
            get
            {
                return this._db;
            }
            set
            {
                if ((this._db != value))
                {
                    Nullable<int> old = this._db;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDbChanging(e);
                    this.OnPropertyChanging("Db", e);
                    this._db = value;
                    this.OnDbChanged(e);
                    this.OnPropertyChanged("Db", e);
                }
            }
        }
        
        /// <summary>
        /// The zeroDb property
        /// </summary>
        [XmlElementNameAttribute("zeroDb")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> ZeroDb
        {
            get
            {
                return this._zeroDb;
            }
            set
            {
                if ((this._zeroDb != value))
                {
                    Nullable<int> old = this._zeroDb;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZeroDbChanging(e);
                    this.OnPropertyChanging("ZeroDb", e);
                    this._zeroDb = value;
                    this.OnZeroDbChanged(e);
                    this.OnPropertyChanged("ZeroDb", e);
                }
            }
        }
        
        /// <summary>
        /// The smpRate property
        /// </summary>
        [XmlElementNameAttribute("smpRate")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> SmpRate
        {
            get
            {
                return this._smpRate;
            }
            set
            {
                if ((this._smpRate != value))
                {
                    Nullable<int> old = this._smpRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSmpRateChanging(e);
                    this.OnPropertyChanging("SmpRate", e);
                    this._smpRate = value;
                    this.OnSmpRateChanged(e);
                    this.OnPropertyChanged("SmpRate", e);
                }
            }
        }
        
        /// <summary>
        /// The instCVal property
        /// </summary>
        [XmlElementNameAttribute("instCVal")]
        [XmlAttributeAttribute(true)]
        public virtual IVector InstCVal
        {
            get
            {
                return this._instCVal;
            }
            set
            {
                if ((this._instCVal != value))
                {
                    IVector old = this._instCVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstCValChanging(e);
                    this.OnPropertyChanging("InstCVal", e);
                    this._instCVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstCVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstCVal;
                    }
                    this.OnInstCValChanged(e);
                    this.OnPropertyChanged("InstCVal", e);
                }
            }
        }
        
        /// <summary>
        /// The cVal property
        /// </summary>
        [XmlElementNameAttribute("cVal")]
        [XmlAttributeAttribute(true)]
        public virtual IVector CVal
        {
            get
            {
                return this._cVal;
            }
            set
            {
                if ((this._cVal != value))
                {
                    IVector old = this._cVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCValChanging(e);
                    this.OnPropertyChanging("CVal", e);
                    this._cVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCVal;
                    }
                    this.OnCValChanged(e);
                    this.OnPropertyChanged("CVal", e);
                }
            }
        }
        
        /// <summary>
        /// The range property
        /// </summary>
        [XmlElementNameAttribute("range")]
        [XmlAttributeAttribute(true)]
        public virtual IRange Range
        {
            get
            {
                return this._range;
            }
            set
            {
                if ((this._range != value))
                {
                    IRange old = this._range;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRangeChanging(e);
                    this.OnPropertyChanging("Range", e);
                    this._range = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRange;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRange;
                    }
                    this.OnRangeChanged(e);
                    this.OnPropertyChanged("Range", e);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e);
                }
            }
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        [XmlElementNameAttribute("t")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp T
        {
            get
            {
                return this._t;
            }
            set
            {
                if ((this._t != value))
                {
                    ITimeStamp old = this._t;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTChanging(e);
                    this.OnPropertyChanging("T", e);
                    this._t = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetT;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetT;
                    }
                    this.OnTChanged(e);
                    this.OnPropertyChanged("T", e);
                }
            }
        }
        
        /// <summary>
        /// The subCVal property
        /// </summary>
        [XmlElementNameAttribute("subCVal")]
        [XmlAttributeAttribute(true)]
        public virtual IVector SubCVal
        {
            get
            {
                return this._subCVal;
            }
            set
            {
                if ((this._subCVal != value))
                {
                    IVector old = this._subCVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubCValChanging(e);
                    this.OnPropertyChanging("SubCVal", e);
                    this._subCVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubCVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubCVal;
                    }
                    this.OnSubCValChanged(e);
                    this.OnPropertyChanged("SubCVal", e);
                }
            }
        }
        
        /// <summary>
        /// The subQ property
        /// </summary>
        [XmlElementNameAttribute("subQ")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality SubQ
        {
            get
            {
                return this._subQ;
            }
            set
            {
                if ((this._subQ != value))
                {
                    IQuality old = this._subQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubQChanging(e);
                    this.OnPropertyChanging("SubQ", e);
                    this._subQ = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubQ;
                    }
                    this.OnSubQChanged(e);
                    this.OnPropertyChanged("SubQ", e);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e);
                }
            }
        }
        
        /// <summary>
        /// The rangeC property
        /// </summary>
        [XmlElementNameAttribute("rangeC")]
        [XmlAttributeAttribute(true)]
        public virtual IRangeConfig RangeC
        {
            get
            {
                return this._rangeC;
            }
            set
            {
                if ((this._rangeC != value))
                {
                    IRangeConfig old = this._rangeC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRangeCChanging(e);
                    this.OnPropertyChanging("RangeC", e);
                    this._rangeC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRangeC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRangeC;
                    }
                    this.OnRangeCChanged(e);
                    this.OnPropertyChanged("RangeC", e);
                }
            }
        }
        
        /// <summary>
        /// The magSVC property
        /// </summary>
        [XmlElementNameAttribute("magSVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig MagSVC
        {
            get
            {
                return this._magSVC;
            }
            set
            {
                if ((this._magSVC != value))
                {
                    IScaledValueConfig old = this._magSVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMagSVCChanging(e);
                    this.OnPropertyChanging("MagSVC", e);
                    this._magSVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMagSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMagSVC;
                    }
                    this.OnMagSVCChanged(e);
                    this.OnPropertyChanged("MagSVC", e);
                }
            }
        }
        
        /// <summary>
        /// The angSVC property
        /// </summary>
        [XmlElementNameAttribute("angSVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig AngSVC
        {
            get
            {
                return this._angSVC;
            }
            set
            {
                if ((this._angSVC != value))
                {
                    IScaledValueConfig old = this._angSVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngSVCChanging(e);
                    this.OnPropertyChanging("AngSVC", e);
                    this._angSVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngSVC;
                    }
                    this.OnAngSVCChanged(e);
                    this.OnPropertyChanged("AngSVC", e);
                }
            }
        }
        
        /// <summary>
        /// The angRef property
        /// </summary>
        [XmlElementNameAttribute("angRef")]
        [XmlAttributeAttribute(true)]
        public virtual ICMVAngleReference AngRef
        {
            get
            {
                return this._angRef;
            }
            set
            {
                if ((this._angRef != value))
                {
                    ICMVAngleReference old = this._angRef;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngRefChanging(e);
                    this.OnPropertyChanging("AngRef", e);
                    this._angRef = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngRef;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngRef;
                    }
                    this.OnAngRefChanged(e);
                    this.OnPropertyChanged("AngRef", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CMVReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/CMV")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SubEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanging;
        
        /// <summary>
        /// Gets fired when the SubEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanged;
        
        /// <summary>
        /// Gets fired before the SubID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanging;
        
        /// <summary>
        /// Gets fired when the SubID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanged;
        
        /// <summary>
        /// Gets fired before the Db property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DbChanging;
        
        /// <summary>
        /// Gets fired when the Db property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DbChanged;
        
        /// <summary>
        /// Gets fired before the ZeroDb property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroDbChanging;
        
        /// <summary>
        /// Gets fired when the ZeroDb property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroDbChanged;
        
        /// <summary>
        /// Gets fired before the SmpRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SmpRateChanging;
        
        /// <summary>
        /// Gets fired when the SmpRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SmpRateChanged;
        
        /// <summary>
        /// Gets fired before the InstCVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstCValChanging;
        
        /// <summary>
        /// Gets fired when the InstCVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstCValChanged;
        
        /// <summary>
        /// Gets fired before the CVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CValChanging;
        
        /// <summary>
        /// Gets fired when the CVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CValChanged;
        
        /// <summary>
        /// Gets fired before the Range property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeChanging;
        
        /// <summary>
        /// Gets fired when the Range property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the SubCVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubCValChanging;
        
        /// <summary>
        /// Gets fired when the SubCVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubCValChanged;
        
        /// <summary>
        /// Gets fired before the SubQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanging;
        
        /// <summary>
        /// Gets fired when the SubQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the RangeC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeCChanging;
        
        /// <summary>
        /// Gets fired when the RangeC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeCChanged;
        
        /// <summary>
        /// Gets fired before the MagSVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MagSVCChanging;
        
        /// <summary>
        /// Gets fired when the MagSVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MagSVCChanged;
        
        /// <summary>
        /// Gets fired before the AngSVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngSVCChanging;
        
        /// <summary>
        /// Gets fired when the AngSVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngSVCChanged;
        
        /// <summary>
        /// Gets fired before the AngRef property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanging;
        
        /// <summary>
        /// Gets fired when the AngRef property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngRefChanged;
        
        /// <summary>
        /// Raises the SubEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DbChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDbChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DbChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DbChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDbChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DbChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZeroDbChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroDbChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroDbChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZeroDbChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroDbChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroDbChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SmpRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSmpRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SmpRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SmpRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSmpRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SmpRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstCValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstCValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstCValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstCValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstCValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstCValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstCVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstCVal(object sender, System.EventArgs eventArgs)
        {
            this.InstCVal = null;
        }
        
        /// <summary>
        /// Raises the CValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCVal(object sender, System.EventArgs eventArgs)
        {
            this.CVal = null;
        }
        
        /// <summary>
        /// Raises the RangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Range property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRange(object sender, System.EventArgs eventArgs)
        {
            this.Range = null;
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        /// <summary>
        /// Raises the TChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the T property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetT(object sender, System.EventArgs eventArgs)
        {
            this.T = null;
        }
        
        /// <summary>
        /// Raises the SubCValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubCValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubCValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubCValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubCValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubCValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubCVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubCVal(object sender, System.EventArgs eventArgs)
        {
            this.SubCVal = null;
        }
        
        /// <summary>
        /// Raises the SubQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubQ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubQ(object sender, System.EventArgs eventArgs)
        {
            this.SubQ = null;
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        /// <summary>
        /// Raises the RangeCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RangeCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RangeC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRangeC(object sender, System.EventArgs eventArgs)
        {
            this.RangeC = null;
        }
        
        /// <summary>
        /// Raises the MagSVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMagSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MagSVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MagSVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMagSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MagSVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MagSVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMagSVC(object sender, System.EventArgs eventArgs)
        {
            this.MagSVC = null;
        }
        
        /// <summary>
        /// Raises the AngSVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngSVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngSVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngSVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngSVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngSVC(object sender, System.EventArgs eventArgs)
        {
            this.AngSVC = null;
        }
        
        /// <summary>
        /// Raises the AngRefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngRefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngRefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngRefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngRef property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngRef(object sender, System.EventArgs eventArgs)
        {
            this.AngRef = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUBENA"))
            {
                return this.SubEna;
            }
            if ((attribute == "SUBID"))
            {
                return this.SubID;
            }
            if ((attribute == "DB"))
            {
                return this.Db;
            }
            if ((attribute == "ZERODB"))
            {
                return this.ZeroDb;
            }
            if ((attribute == "SMPRATE"))
            {
                return this.SmpRate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTCVAL"))
            {
                this.InstCVal = ((IVector)(value));
                return;
            }
            if ((feature == "CVAL"))
            {
                this.CVal = ((IVector)(value));
                return;
            }
            if ((feature == "RANGE"))
            {
                this.Range = ((IRange)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "T"))
            {
                this.T = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "SUBCVAL"))
            {
                this.SubCVal = ((IVector)(value));
                return;
            }
            if ((feature == "SUBQ"))
            {
                this.SubQ = ((IQuality)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "RANGEC"))
            {
                this.RangeC = ((IRangeConfig)(value));
                return;
            }
            if ((feature == "MAGSVC"))
            {
                this.MagSVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "ANGSVC"))
            {
                this.AngSVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "ANGREF"))
            {
                this.AngRef = ((ICMVAngleReference)(value));
                return;
            }
            if ((feature == "SUBENA"))
            {
                this.SubEna = ((bool)(value));
                return;
            }
            if ((feature == "SUBID"))
            {
                this.SubID = ((string)(value));
                return;
            }
            if ((feature == "DB"))
            {
                this.Db = ((int)(value));
                return;
            }
            if ((feature == "ZERODB"))
            {
                this.ZeroDb = ((int)(value));
                return;
            }
            if ((feature == "SMPRATE"))
            {
                this.SmpRate = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "InstCVal"))
            {
                return new InstCValProxy(this);
            }
            if ((attribute == "CVal"))
            {
                return new CValProxy(this);
            }
            if ((attribute == "Range"))
            {
                return new RangeProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "T"))
            {
                return new TProxy(this);
            }
            if ((attribute == "SubCVal"))
            {
                return new SubCValProxy(this);
            }
            if ((attribute == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "RangeC"))
            {
                return new RangeCProxy(this);
            }
            if ((attribute == "MagSVC"))
            {
                return new MagSVCProxy(this);
            }
            if ((attribute == "AngSVC"))
            {
                return new AngSVCProxy(this);
            }
            if ((attribute == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "InstCVal"))
            {
                return new InstCValProxy(this);
            }
            if ((reference == "CVal"))
            {
                return new CValProxy(this);
            }
            if ((reference == "Range"))
            {
                return new RangeProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "T"))
            {
                return new TProxy(this);
            }
            if ((reference == "SubCVal"))
            {
                return new SubCValProxy(this);
            }
            if ((reference == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "RangeC"))
            {
                return new RangeCProxy(this);
            }
            if ((reference == "MagSVC"))
            {
                return new MagSVCProxy(this);
            }
            if ((reference == "AngSVC"))
            {
                return new AngSVCProxy(this);
            }
            if ((reference == "AngRef"))
            {
                return new AngRefProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/CMV")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CMV class
        /// </summary>
        public class CMVReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CMV _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CMVReferencedElementsCollection(CMV parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InstCVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Range != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.T != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubCVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubQ != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RangeC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MagSVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngSVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngRef != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InstCValChanged += this.PropagateValueChanges;
                this._parent.CValChanged += this.PropagateValueChanges;
                this._parent.RangeChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.TChanged += this.PropagateValueChanges;
                this._parent.SubCValChanged += this.PropagateValueChanges;
                this._parent.SubQChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.RangeCChanged += this.PropagateValueChanges;
                this._parent.MagSVCChanged += this.PropagateValueChanges;
                this._parent.AngSVCChanged += this.PropagateValueChanges;
                this._parent.AngRefChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InstCValChanged -= this.PropagateValueChanges;
                this._parent.CValChanged -= this.PropagateValueChanges;
                this._parent.RangeChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.TChanged -= this.PropagateValueChanges;
                this._parent.SubCValChanged -= this.PropagateValueChanges;
                this._parent.SubQChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.RangeCChanged -= this.PropagateValueChanges;
                this._parent.MagSVCChanged -= this.PropagateValueChanges;
                this._parent.AngSVCChanged -= this.PropagateValueChanges;
                this._parent.AngRefChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InstCVal == null))
                {
                    IVector instCValCasted = item.As<IVector>();
                    if ((instCValCasted != null))
                    {
                        this._parent.InstCVal = instCValCasted;
                        return;
                    }
                }
                if ((this._parent.CVal == null))
                {
                    IVector cValCasted = item.As<IVector>();
                    if ((cValCasted != null))
                    {
                        this._parent.CVal = cValCasted;
                        return;
                    }
                }
                if ((this._parent.Range == null))
                {
                    IRange rangeCasted = item.As<IRange>();
                    if ((rangeCasted != null))
                    {
                        this._parent.Range = rangeCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.T == null))
                {
                    ITimeStamp tCasted = item.As<ITimeStamp>();
                    if ((tCasted != null))
                    {
                        this._parent.T = tCasted;
                        return;
                    }
                }
                if ((this._parent.SubCVal == null))
                {
                    IVector subCValCasted = item.As<IVector>();
                    if ((subCValCasted != null))
                    {
                        this._parent.SubCVal = subCValCasted;
                        return;
                    }
                }
                if ((this._parent.SubQ == null))
                {
                    IQuality subQCasted = item.As<IQuality>();
                    if ((subQCasted != null))
                    {
                        this._parent.SubQ = subQCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.RangeC == null))
                {
                    IRangeConfig rangeCCasted = item.As<IRangeConfig>();
                    if ((rangeCCasted != null))
                    {
                        this._parent.RangeC = rangeCCasted;
                        return;
                    }
                }
                if ((this._parent.MagSVC == null))
                {
                    IScaledValueConfig magSVCCasted = item.As<IScaledValueConfig>();
                    if ((magSVCCasted != null))
                    {
                        this._parent.MagSVC = magSVCCasted;
                        return;
                    }
                }
                if ((this._parent.AngSVC == null))
                {
                    IScaledValueConfig angSVCCasted = item.As<IScaledValueConfig>();
                    if ((angSVCCasted != null))
                    {
                        this._parent.AngSVC = angSVCCasted;
                        return;
                    }
                }
                if ((this._parent.AngRef == null))
                {
                    ICMVAngleReference angRefCasted = item.As<ICMVAngleReference>();
                    if ((angRefCasted != null))
                    {
                        this._parent.AngRef = angRefCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InstCVal = null;
                this._parent.CVal = null;
                this._parent.Range = null;
                this._parent.Q = null;
                this._parent.T = null;
                this._parent.SubCVal = null;
                this._parent.SubQ = null;
                this._parent.Units = null;
                this._parent.RangeC = null;
                this._parent.MagSVC = null;
                this._parent.AngSVC = null;
                this._parent.AngRef = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InstCVal))
                {
                    return true;
                }
                if ((item == this._parent.CVal))
                {
                    return true;
                }
                if ((item == this._parent.Range))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.T))
                {
                    return true;
                }
                if ((item == this._parent.SubCVal))
                {
                    return true;
                }
                if ((item == this._parent.SubQ))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.RangeC))
                {
                    return true;
                }
                if ((item == this._parent.MagSVC))
                {
                    return true;
                }
                if ((item == this._parent.AngSVC))
                {
                    return true;
                }
                if ((item == this._parent.AngRef))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InstCVal != null))
                {
                    array[arrayIndex] = this._parent.InstCVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CVal != null))
                {
                    array[arrayIndex] = this._parent.CVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Range != null))
                {
                    array[arrayIndex] = this._parent.Range;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.T != null))
                {
                    array[arrayIndex] = this._parent.T;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubCVal != null))
                {
                    array[arrayIndex] = this._parent.SubCVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubQ != null))
                {
                    array[arrayIndex] = this._parent.SubQ;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RangeC != null))
                {
                    array[arrayIndex] = this._parent.RangeC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MagSVC != null))
                {
                    array[arrayIndex] = this._parent.MagSVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngSVC != null))
                {
                    array[arrayIndex] = this._parent.AngSVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngRef != null))
                {
                    array[arrayIndex] = this._parent.AngRef;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InstCVal == item))
                {
                    this._parent.InstCVal = null;
                    return true;
                }
                if ((this._parent.CVal == item))
                {
                    this._parent.CVal = null;
                    return true;
                }
                if ((this._parent.Range == item))
                {
                    this._parent.Range = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.T == item))
                {
                    this._parent.T = null;
                    return true;
                }
                if ((this._parent.SubCVal == item))
                {
                    this._parent.SubCVal = null;
                    return true;
                }
                if ((this._parent.SubQ == item))
                {
                    this._parent.SubQ = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.RangeC == item))
                {
                    this._parent.RangeC = null;
                    return true;
                }
                if ((this._parent.MagSVC == item))
                {
                    this._parent.MagSVC = null;
                    return true;
                }
                if ((this._parent.AngSVC == item))
                {
                    this._parent.AngSVC = null;
                    return true;
                }
                if ((this._parent.AngRef == item))
                {
                    this._parent.AngRef = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InstCVal).Concat(this._parent.CVal).Concat(this._parent.Range).Concat(this._parent.Q).Concat(this._parent.T).Concat(this._parent.SubCVal).Concat(this._parent.SubQ).Concat(this._parent.Units).Concat(this._parent.RangeC).Concat(this._parent.MagSVC).Concat(this._parent.AngSVC).Concat(this._parent.AngRef).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subEna property
        /// </summary>
        private sealed class SubEnaProxy : ModelPropertyChange<ICMV, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubEnaProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.SubEna;
                }
                set
                {
                    this.ModelElement.SubEna = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubEnaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubEnaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subID property
        /// </summary>
        private sealed class SubIDProxy : ModelPropertyChange<ICMV, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubIDProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SubID;
                }
                set
                {
                    this.ModelElement.SubID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the db property
        /// </summary>
        private sealed class DbProxy : ModelPropertyChange<ICMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DbProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Db;
                }
                set
                {
                    this.ModelElement.Db = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DbChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DbChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the zeroDb property
        /// </summary>
        private sealed class ZeroDbProxy : ModelPropertyChange<ICMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZeroDbProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.ZeroDb;
                }
                set
                {
                    this.ModelElement.ZeroDb = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZeroDbChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZeroDbChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the smpRate property
        /// </summary>
        private sealed class SmpRateProxy : ModelPropertyChange<ICMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SmpRateProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.SmpRate;
                }
                set
                {
                    this.ModelElement.SmpRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SmpRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SmpRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instCVal property
        /// </summary>
        private sealed class InstCValProxy : ModelPropertyChange<ICMV, IVector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstCValProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVector Value
            {
                get
                {
                    return this.ModelElement.InstCVal;
                }
                set
                {
                    this.ModelElement.InstCVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstCValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstCValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cVal property
        /// </summary>
        private sealed class CValProxy : ModelPropertyChange<ICMV, IVector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CValProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVector Value
            {
                get
                {
                    return this.ModelElement.CVal;
                }
                set
                {
                    this.ModelElement.CVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the range property
        /// </summary>
        private sealed class RangeProxy : ModelPropertyChange<ICMV, IRange>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RangeProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRange Value
            {
                get
                {
                    return this.ModelElement.Range;
                }
                set
                {
                    this.ModelElement.Range = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<ICMV, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the t property
        /// </summary>
        private sealed class TProxy : ModelPropertyChange<ICMV, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.T;
                }
                set
                {
                    this.ModelElement.T = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subCVal property
        /// </summary>
        private sealed class SubCValProxy : ModelPropertyChange<ICMV, IVector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubCValProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVector Value
            {
                get
                {
                    return this.ModelElement.SubCVal;
                }
                set
                {
                    this.ModelElement.SubCVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubCValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubCValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subQ property
        /// </summary>
        private sealed class SubQProxy : ModelPropertyChange<ICMV, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubQProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.SubQ;
                }
                set
                {
                    this.ModelElement.SubQ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubQChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubQChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<ICMV, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rangeC property
        /// </summary>
        private sealed class RangeCProxy : ModelPropertyChange<ICMV, IRangeConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RangeCProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRangeConfig Value
            {
                get
                {
                    return this.ModelElement.RangeC;
                }
                set
                {
                    this.ModelElement.RangeC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the magSVC property
        /// </summary>
        private sealed class MagSVCProxy : ModelPropertyChange<ICMV, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MagSVCProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.MagSVC;
                }
                set
                {
                    this.ModelElement.MagSVC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MagSVCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MagSVCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the angSVC property
        /// </summary>
        private sealed class AngSVCProxy : ModelPropertyChange<ICMV, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngSVCProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.AngSVC;
                }
                set
                {
                    this.ModelElement.AngSVC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngSVCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngSVCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the angRef property
        /// </summary>
        private sealed class AngRefProxy : ModelPropertyChange<ICMV, ICMVAngleReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngRefProxy(ICMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMVAngleReference Value
            {
                get
                {
                    return this.ModelElement.AngRef;
                }
                set
                {
                    this.ModelElement.AngRef = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngRefChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngRefChanged -= handler;
            }
        }
    }
}

