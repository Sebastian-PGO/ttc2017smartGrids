//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the MV class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/MV")]
    public class MV : ModelElement, IMV, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SubEna property
        /// </summary>
        private Nullable<bool> _subEna;
        
        /// <summary>
        /// The backing field for the SubID property
        /// </summary>
        private string _subID;
        
        /// <summary>
        /// The backing field for the Db property
        /// </summary>
        private Nullable<int> _db;
        
        /// <summary>
        /// The backing field for the ZeroDb property
        /// </summary>
        private Nullable<int> _zeroDb;
        
        /// <summary>
        /// The backing field for the SmpRate property
        /// </summary>
        private Nullable<int> _smpRate;
        
        /// <summary>
        /// The backing field for the InstMag property
        /// </summary>
        private IAnalogueValue _instMag;
        
        /// <summary>
        /// The backing field for the Mag property
        /// </summary>
        private IAnalogueValue _mag;
        
        /// <summary>
        /// The backing field for the Range property
        /// </summary>
        private IRange _range;
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        /// <summary>
        /// The backing field for the T property
        /// </summary>
        private ITimeStamp _t;
        
        /// <summary>
        /// The backing field for the SubMag property
        /// </summary>
        private IAnalogueValue _subMag;
        
        /// <summary>
        /// The backing field for the SubQ property
        /// </summary>
        private IQuality _subQ;
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        /// <summary>
        /// The backing field for the SVC property
        /// </summary>
        private IScaledValueConfig _sVC;
        
        /// <summary>
        /// The backing field for the RangeC property
        /// </summary>
        private IRangeConfig _rangeC;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The subEna property
        /// </summary>
        [XmlElementNameAttribute("subEna")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> SubEna
        {
            get
            {
                return this._subEna;
            }
            set
            {
                if ((this._subEna != value))
                {
                    Nullable<bool> old = this._subEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubEnaChanging(e);
                    this.OnPropertyChanging("SubEna", e);
                    this._subEna = value;
                    this.OnSubEnaChanged(e);
                    this.OnPropertyChanged("SubEna", e);
                }
            }
        }
        
        /// <summary>
        /// The subID property
        /// </summary>
        [XmlElementNameAttribute("subID")]
        [XmlAttributeAttribute(true)]
        public virtual string SubID
        {
            get
            {
                return this._subID;
            }
            set
            {
                if ((this._subID != value))
                {
                    string old = this._subID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubIDChanging(e);
                    this.OnPropertyChanging("SubID", e);
                    this._subID = value;
                    this.OnSubIDChanged(e);
                    this.OnPropertyChanged("SubID", e);
                }
            }
        }
        
        /// <summary>
        /// The db property
        /// </summary>
        [XmlElementNameAttribute("db")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Db
        {
            get
            {
                return this._db;
            }
            set
            {
                if ((this._db != value))
                {
                    Nullable<int> old = this._db;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDbChanging(e);
                    this.OnPropertyChanging("Db", e);
                    this._db = value;
                    this.OnDbChanged(e);
                    this.OnPropertyChanged("Db", e);
                }
            }
        }
        
        /// <summary>
        /// The zeroDb property
        /// </summary>
        [XmlElementNameAttribute("zeroDb")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> ZeroDb
        {
            get
            {
                return this._zeroDb;
            }
            set
            {
                if ((this._zeroDb != value))
                {
                    Nullable<int> old = this._zeroDb;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZeroDbChanging(e);
                    this.OnPropertyChanging("ZeroDb", e);
                    this._zeroDb = value;
                    this.OnZeroDbChanged(e);
                    this.OnPropertyChanged("ZeroDb", e);
                }
            }
        }
        
        /// <summary>
        /// The smpRate property
        /// </summary>
        [XmlElementNameAttribute("smpRate")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> SmpRate
        {
            get
            {
                return this._smpRate;
            }
            set
            {
                if ((this._smpRate != value))
                {
                    Nullable<int> old = this._smpRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSmpRateChanging(e);
                    this.OnPropertyChanging("SmpRate", e);
                    this._smpRate = value;
                    this.OnSmpRateChanged(e);
                    this.OnPropertyChanged("SmpRate", e);
                }
            }
        }
        
        /// <summary>
        /// The instMag property
        /// </summary>
        [XmlElementNameAttribute("instMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue InstMag
        {
            get
            {
                return this._instMag;
            }
            set
            {
                if ((this._instMag != value))
                {
                    IAnalogueValue old = this._instMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstMagChanging(e);
                    this.OnPropertyChanging("InstMag", e);
                    this._instMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstMag;
                    }
                    this.OnInstMagChanged(e);
                    this.OnPropertyChanged("InstMag", e);
                }
            }
        }
        
        /// <summary>
        /// The mag property
        /// </summary>
        [XmlElementNameAttribute("mag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue Mag
        {
            get
            {
                return this._mag;
            }
            set
            {
                if ((this._mag != value))
                {
                    IAnalogueValue old = this._mag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMagChanging(e);
                    this.OnPropertyChanging("Mag", e);
                    this._mag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMag;
                    }
                    this.OnMagChanged(e);
                    this.OnPropertyChanged("Mag", e);
                }
            }
        }
        
        /// <summary>
        /// The range property
        /// </summary>
        [XmlElementNameAttribute("range")]
        [XmlAttributeAttribute(true)]
        public virtual IRange Range
        {
            get
            {
                return this._range;
            }
            set
            {
                if ((this._range != value))
                {
                    IRange old = this._range;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRangeChanging(e);
                    this.OnPropertyChanging("Range", e);
                    this._range = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRange;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRange;
                    }
                    this.OnRangeChanged(e);
                    this.OnPropertyChanged("Range", e);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e);
                }
            }
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        [XmlElementNameAttribute("t")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp T
        {
            get
            {
                return this._t;
            }
            set
            {
                if ((this._t != value))
                {
                    ITimeStamp old = this._t;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTChanging(e);
                    this.OnPropertyChanging("T", e);
                    this._t = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetT;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetT;
                    }
                    this.OnTChanged(e);
                    this.OnPropertyChanged("T", e);
                }
            }
        }
        
        /// <summary>
        /// The subMag property
        /// </summary>
        [XmlElementNameAttribute("subMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue SubMag
        {
            get
            {
                return this._subMag;
            }
            set
            {
                if ((this._subMag != value))
                {
                    IAnalogueValue old = this._subMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubMagChanging(e);
                    this.OnPropertyChanging("SubMag", e);
                    this._subMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubMag;
                    }
                    this.OnSubMagChanged(e);
                    this.OnPropertyChanged("SubMag", e);
                }
            }
        }
        
        /// <summary>
        /// The subQ property
        /// </summary>
        [XmlElementNameAttribute("subQ")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality SubQ
        {
            get
            {
                return this._subQ;
            }
            set
            {
                if ((this._subQ != value))
                {
                    IQuality old = this._subQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubQChanging(e);
                    this.OnPropertyChanging("SubQ", e);
                    this._subQ = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubQ;
                    }
                    this.OnSubQChanged(e);
                    this.OnPropertyChanged("SubQ", e);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e);
                }
            }
        }
        
        /// <summary>
        /// The sVC property
        /// </summary>
        [XmlElementNameAttribute("sVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig SVC
        {
            get
            {
                return this._sVC;
            }
            set
            {
                if ((this._sVC != value))
                {
                    IScaledValueConfig old = this._sVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSVCChanging(e);
                    this.OnPropertyChanging("SVC", e);
                    this._sVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSVC;
                    }
                    this.OnSVCChanged(e);
                    this.OnPropertyChanged("SVC", e);
                }
            }
        }
        
        /// <summary>
        /// The rangeC property
        /// </summary>
        [XmlElementNameAttribute("rangeC")]
        [XmlAttributeAttribute(true)]
        public virtual IRangeConfig RangeC
        {
            get
            {
                return this._rangeC;
            }
            set
            {
                if ((this._rangeC != value))
                {
                    IRangeConfig old = this._rangeC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRangeCChanging(e);
                    this.OnPropertyChanging("RangeC", e);
                    this._rangeC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRangeC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRangeC;
                    }
                    this.OnRangeCChanged(e);
                    this.OnPropertyChanged("RangeC", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MVReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/MV")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SubEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanging;
        
        /// <summary>
        /// Gets fired when the SubEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanged;
        
        /// <summary>
        /// Gets fired before the SubID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanging;
        
        /// <summary>
        /// Gets fired when the SubID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanged;
        
        /// <summary>
        /// Gets fired before the Db property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DbChanging;
        
        /// <summary>
        /// Gets fired when the Db property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DbChanged;
        
        /// <summary>
        /// Gets fired before the ZeroDb property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroDbChanging;
        
        /// <summary>
        /// Gets fired when the ZeroDb property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZeroDbChanged;
        
        /// <summary>
        /// Gets fired before the SmpRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SmpRateChanging;
        
        /// <summary>
        /// Gets fired when the SmpRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SmpRateChanged;
        
        /// <summary>
        /// Gets fired before the InstMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstMagChanging;
        
        /// <summary>
        /// Gets fired when the InstMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstMagChanged;
        
        /// <summary>
        /// Gets fired before the Mag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MagChanging;
        
        /// <summary>
        /// Gets fired when the Mag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MagChanged;
        
        /// <summary>
        /// Gets fired before the Range property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeChanging;
        
        /// <summary>
        /// Gets fired when the Range property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the SubMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubMagChanging;
        
        /// <summary>
        /// Gets fired when the SubMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubMagChanged;
        
        /// <summary>
        /// Gets fired before the SubQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanging;
        
        /// <summary>
        /// Gets fired when the SubQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the SVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanging;
        
        /// <summary>
        /// Gets fired when the SVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanged;
        
        /// <summary>
        /// Gets fired before the RangeC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeCChanging;
        
        /// <summary>
        /// Gets fired when the RangeC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RangeCChanged;
        
        /// <summary>
        /// Raises the SubEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DbChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDbChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DbChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DbChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDbChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DbChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZeroDbChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroDbChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroDbChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZeroDbChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZeroDbChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZeroDbChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SmpRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSmpRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SmpRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SmpRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSmpRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SmpRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstMag(object sender, System.EventArgs eventArgs)
        {
            this.InstMag = null;
        }
        
        /// <summary>
        /// Raises the MagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Mag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMag(object sender, System.EventArgs eventArgs)
        {
            this.Mag = null;
        }
        
        /// <summary>
        /// Raises the RangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Range property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRange(object sender, System.EventArgs eventArgs)
        {
            this.Range = null;
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        /// <summary>
        /// Raises the TChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the T property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetT(object sender, System.EventArgs eventArgs)
        {
            this.T = null;
        }
        
        /// <summary>
        /// Raises the SubMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubMag(object sender, System.EventArgs eventArgs)
        {
            this.SubMag = null;
        }
        
        /// <summary>
        /// Raises the SubQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubQ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubQ(object sender, System.EventArgs eventArgs)
        {
            this.SubQ = null;
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        /// <summary>
        /// Raises the SVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSVC(object sender, System.EventArgs eventArgs)
        {
            this.SVC = null;
        }
        
        /// <summary>
        /// Raises the RangeCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RangeCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRangeCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RangeCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RangeC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRangeC(object sender, System.EventArgs eventArgs)
        {
            this.RangeC = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUBENA"))
            {
                return this.SubEna;
            }
            if ((attribute == "SUBID"))
            {
                return this.SubID;
            }
            if ((attribute == "DB"))
            {
                return this.Db;
            }
            if ((attribute == "ZERODB"))
            {
                return this.ZeroDb;
            }
            if ((attribute == "SMPRATE"))
            {
                return this.SmpRate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTMAG"))
            {
                this.InstMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MAG"))
            {
                this.Mag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "RANGE"))
            {
                this.Range = ((IRange)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "T"))
            {
                this.T = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "SUBMAG"))
            {
                this.SubMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "SUBQ"))
            {
                this.SubQ = ((IQuality)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "SVC"))
            {
                this.SVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "RANGEC"))
            {
                this.RangeC = ((IRangeConfig)(value));
                return;
            }
            if ((feature == "SUBENA"))
            {
                this.SubEna = ((bool)(value));
                return;
            }
            if ((feature == "SUBID"))
            {
                this.SubID = ((string)(value));
                return;
            }
            if ((feature == "DB"))
            {
                this.Db = ((int)(value));
                return;
            }
            if ((feature == "ZERODB"))
            {
                this.ZeroDb = ((int)(value));
                return;
            }
            if ((feature == "SMPRATE"))
            {
                this.SmpRate = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "InstMag"))
            {
                return new InstMagProxy(this);
            }
            if ((attribute == "Mag"))
            {
                return new MagProxy(this);
            }
            if ((attribute == "Range"))
            {
                return new RangeProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "T"))
            {
                return new TProxy(this);
            }
            if ((attribute == "SubMag"))
            {
                return new SubMagProxy(this);
            }
            if ((attribute == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((attribute == "RangeC"))
            {
                return new RangeCProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "InstMag"))
            {
                return new InstMagProxy(this);
            }
            if ((reference == "Mag"))
            {
                return new MagProxy(this);
            }
            if ((reference == "Range"))
            {
                return new RangeProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "T"))
            {
                return new TProxy(this);
            }
            if ((reference == "SubMag"))
            {
                return new SubMagProxy(this);
            }
            if ((reference == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((reference == "RangeC"))
            {
                return new RangeCProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/MV")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MV class
        /// </summary>
        public class MVReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MV _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MVReferencedElementsCollection(MV parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InstMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Range != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.T != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubQ != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RangeC != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InstMagChanged += this.PropagateValueChanges;
                this._parent.MagChanged += this.PropagateValueChanges;
                this._parent.RangeChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.TChanged += this.PropagateValueChanges;
                this._parent.SubMagChanged += this.PropagateValueChanges;
                this._parent.SubQChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.SVCChanged += this.PropagateValueChanges;
                this._parent.RangeCChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InstMagChanged -= this.PropagateValueChanges;
                this._parent.MagChanged -= this.PropagateValueChanges;
                this._parent.RangeChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.TChanged -= this.PropagateValueChanges;
                this._parent.SubMagChanged -= this.PropagateValueChanges;
                this._parent.SubQChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.SVCChanged -= this.PropagateValueChanges;
                this._parent.RangeCChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InstMag == null))
                {
                    IAnalogueValue instMagCasted = item.As<IAnalogueValue>();
                    if ((instMagCasted != null))
                    {
                        this._parent.InstMag = instMagCasted;
                        return;
                    }
                }
                if ((this._parent.Mag == null))
                {
                    IAnalogueValue magCasted = item.As<IAnalogueValue>();
                    if ((magCasted != null))
                    {
                        this._parent.Mag = magCasted;
                        return;
                    }
                }
                if ((this._parent.Range == null))
                {
                    IRange rangeCasted = item.As<IRange>();
                    if ((rangeCasted != null))
                    {
                        this._parent.Range = rangeCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.T == null))
                {
                    ITimeStamp tCasted = item.As<ITimeStamp>();
                    if ((tCasted != null))
                    {
                        this._parent.T = tCasted;
                        return;
                    }
                }
                if ((this._parent.SubMag == null))
                {
                    IAnalogueValue subMagCasted = item.As<IAnalogueValue>();
                    if ((subMagCasted != null))
                    {
                        this._parent.SubMag = subMagCasted;
                        return;
                    }
                }
                if ((this._parent.SubQ == null))
                {
                    IQuality subQCasted = item.As<IQuality>();
                    if ((subQCasted != null))
                    {
                        this._parent.SubQ = subQCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.SVC == null))
                {
                    IScaledValueConfig sVCCasted = item.As<IScaledValueConfig>();
                    if ((sVCCasted != null))
                    {
                        this._parent.SVC = sVCCasted;
                        return;
                    }
                }
                if ((this._parent.RangeC == null))
                {
                    IRangeConfig rangeCCasted = item.As<IRangeConfig>();
                    if ((rangeCCasted != null))
                    {
                        this._parent.RangeC = rangeCCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InstMag = null;
                this._parent.Mag = null;
                this._parent.Range = null;
                this._parent.Q = null;
                this._parent.T = null;
                this._parent.SubMag = null;
                this._parent.SubQ = null;
                this._parent.Units = null;
                this._parent.SVC = null;
                this._parent.RangeC = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InstMag))
                {
                    return true;
                }
                if ((item == this._parent.Mag))
                {
                    return true;
                }
                if ((item == this._parent.Range))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.T))
                {
                    return true;
                }
                if ((item == this._parent.SubMag))
                {
                    return true;
                }
                if ((item == this._parent.SubQ))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.SVC))
                {
                    return true;
                }
                if ((item == this._parent.RangeC))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InstMag != null))
                {
                    array[arrayIndex] = this._parent.InstMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mag != null))
                {
                    array[arrayIndex] = this._parent.Mag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Range != null))
                {
                    array[arrayIndex] = this._parent.Range;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.T != null))
                {
                    array[arrayIndex] = this._parent.T;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubMag != null))
                {
                    array[arrayIndex] = this._parent.SubMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubQ != null))
                {
                    array[arrayIndex] = this._parent.SubQ;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SVC != null))
                {
                    array[arrayIndex] = this._parent.SVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RangeC != null))
                {
                    array[arrayIndex] = this._parent.RangeC;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InstMag == item))
                {
                    this._parent.InstMag = null;
                    return true;
                }
                if ((this._parent.Mag == item))
                {
                    this._parent.Mag = null;
                    return true;
                }
                if ((this._parent.Range == item))
                {
                    this._parent.Range = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.T == item))
                {
                    this._parent.T = null;
                    return true;
                }
                if ((this._parent.SubMag == item))
                {
                    this._parent.SubMag = null;
                    return true;
                }
                if ((this._parent.SubQ == item))
                {
                    this._parent.SubQ = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.SVC == item))
                {
                    this._parent.SVC = null;
                    return true;
                }
                if ((this._parent.RangeC == item))
                {
                    this._parent.RangeC = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InstMag).Concat(this._parent.Mag).Concat(this._parent.Range).Concat(this._parent.Q).Concat(this._parent.T).Concat(this._parent.SubMag).Concat(this._parent.SubQ).Concat(this._parent.Units).Concat(this._parent.SVC).Concat(this._parent.RangeC).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subEna property
        /// </summary>
        private sealed class SubEnaProxy : ModelPropertyChange<IMV, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubEnaProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.SubEna;
                }
                set
                {
                    this.ModelElement.SubEna = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubEnaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubEnaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subID property
        /// </summary>
        private sealed class SubIDProxy : ModelPropertyChange<IMV, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubIDProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SubID;
                }
                set
                {
                    this.ModelElement.SubID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the db property
        /// </summary>
        private sealed class DbProxy : ModelPropertyChange<IMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DbProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Db;
                }
                set
                {
                    this.ModelElement.Db = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DbChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DbChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the zeroDb property
        /// </summary>
        private sealed class ZeroDbProxy : ModelPropertyChange<IMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZeroDbProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.ZeroDb;
                }
                set
                {
                    this.ModelElement.ZeroDb = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZeroDbChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZeroDbChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the smpRate property
        /// </summary>
        private sealed class SmpRateProxy : ModelPropertyChange<IMV, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SmpRateProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.SmpRate;
                }
                set
                {
                    this.ModelElement.SmpRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SmpRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SmpRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instMag property
        /// </summary>
        private sealed class InstMagProxy : ModelPropertyChange<IMV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstMagProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.InstMag;
                }
                set
                {
                    this.ModelElement.InstMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mag property
        /// </summary>
        private sealed class MagProxy : ModelPropertyChange<IMV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MagProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.Mag;
                }
                set
                {
                    this.ModelElement.Mag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the range property
        /// </summary>
        private sealed class RangeProxy : ModelPropertyChange<IMV, IRange>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RangeProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRange Value
            {
                get
                {
                    return this.ModelElement.Range;
                }
                set
                {
                    this.ModelElement.Range = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<IMV, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the t property
        /// </summary>
        private sealed class TProxy : ModelPropertyChange<IMV, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.T;
                }
                set
                {
                    this.ModelElement.T = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subMag property
        /// </summary>
        private sealed class SubMagProxy : ModelPropertyChange<IMV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubMagProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.SubMag;
                }
                set
                {
                    this.ModelElement.SubMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subQ property
        /// </summary>
        private sealed class SubQProxy : ModelPropertyChange<IMV, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubQProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.SubQ;
                }
                set
                {
                    this.ModelElement.SubQ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubQChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubQChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<IMV, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sVC property
        /// </summary>
        private sealed class SVCProxy : ModelPropertyChange<IMV, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SVCProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.SVC;
                }
                set
                {
                    this.ModelElement.SVC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rangeC property
        /// </summary>
        private sealed class RangeCProxy : ModelPropertyChange<IMV, IRangeConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RangeCProxy(IMV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRangeConfig Value
            {
                get
                {
                    return this.ModelElement.RangeC;
                }
                set
                {
                    this.ModelElement.RangeC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RangeCChanged -= handler;
            }
        }
    }
}

