//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ACD class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ACD")]
    public class ACD : ModelElement, IACD, IModelElement
    {
        
        /// <summary>
        /// The backing field for the General property
        /// </summary>
        private Nullable<bool> _general;
        
        /// <summary>
        /// The backing field for the PhsA property
        /// </summary>
        private Nullable<bool> _phsA;
        
        /// <summary>
        /// The backing field for the PhsB property
        /// </summary>
        private Nullable<bool> _phsB;
        
        /// <summary>
        /// The backing field for the PhsC property
        /// </summary>
        private Nullable<bool> _phsC;
        
        /// <summary>
        /// The backing field for the Neut property
        /// </summary>
        private Nullable<bool> _neut;
        
        /// <summary>
        /// The backing field for the DirGeneral property
        /// </summary>
        private IFaultDirection _dirGeneral;
        
        /// <summary>
        /// The backing field for the DirPhsA property
        /// </summary>
        private IDirectionPhase _dirPhsA;
        
        /// <summary>
        /// The backing field for the DirPhsB property
        /// </summary>
        private IDirectionPhase _dirPhsB;
        
        /// <summary>
        /// The backing field for the DirPhsC property
        /// </summary>
        private IDirectionPhase _dirPhsC;
        
        /// <summary>
        /// The backing field for the DirNeut property
        /// </summary>
        private IDirectionPhase _dirNeut;
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The general property
        /// </summary>
        [XmlElementNameAttribute("general")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> General
        {
            get
            {
                return this._general;
            }
            set
            {
                if ((this._general != value))
                {
                    Nullable<bool> old = this._general;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneralChanging(e);
                    this.OnPropertyChanging("General", e);
                    this._general = value;
                    this.OnGeneralChanged(e);
                    this.OnPropertyChanged("General", e);
                }
            }
        }
        
        /// <summary>
        /// The phsA property
        /// </summary>
        [XmlElementNameAttribute("phsA")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> PhsA
        {
            get
            {
                return this._phsA;
            }
            set
            {
                if ((this._phsA != value))
                {
                    Nullable<bool> old = this._phsA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsAChanging(e);
                    this.OnPropertyChanging("PhsA", e);
                    this._phsA = value;
                    this.OnPhsAChanged(e);
                    this.OnPropertyChanged("PhsA", e);
                }
            }
        }
        
        /// <summary>
        /// The phsB property
        /// </summary>
        [XmlElementNameAttribute("phsB")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> PhsB
        {
            get
            {
                return this._phsB;
            }
            set
            {
                if ((this._phsB != value))
                {
                    Nullable<bool> old = this._phsB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsBChanging(e);
                    this.OnPropertyChanging("PhsB", e);
                    this._phsB = value;
                    this.OnPhsBChanged(e);
                    this.OnPropertyChanged("PhsB", e);
                }
            }
        }
        
        /// <summary>
        /// The phsC property
        /// </summary>
        [XmlElementNameAttribute("phsC")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> PhsC
        {
            get
            {
                return this._phsC;
            }
            set
            {
                if ((this._phsC != value))
                {
                    Nullable<bool> old = this._phsC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhsCChanging(e);
                    this.OnPropertyChanging("PhsC", e);
                    this._phsC = value;
                    this.OnPhsCChanged(e);
                    this.OnPropertyChanged("PhsC", e);
                }
            }
        }
        
        /// <summary>
        /// The neut property
        /// </summary>
        [XmlElementNameAttribute("neut")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Neut
        {
            get
            {
                return this._neut;
            }
            set
            {
                if ((this._neut != value))
                {
                    Nullable<bool> old = this._neut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutChanging(e);
                    this.OnPropertyChanging("Neut", e);
                    this._neut = value;
                    this.OnNeutChanged(e);
                    this.OnPropertyChanged("Neut", e);
                }
            }
        }
        
        /// <summary>
        /// The dirGeneral property
        /// </summary>
        [XmlElementNameAttribute("dirGeneral")]
        [XmlAttributeAttribute(true)]
        public virtual IFaultDirection DirGeneral
        {
            get
            {
                return this._dirGeneral;
            }
            set
            {
                if ((this._dirGeneral != value))
                {
                    IFaultDirection old = this._dirGeneral;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirGeneralChanging(e);
                    this.OnPropertyChanging("DirGeneral", e);
                    this._dirGeneral = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirGeneral;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirGeneral;
                    }
                    this.OnDirGeneralChanged(e);
                    this.OnPropertyChanged("DirGeneral", e);
                }
            }
        }
        
        /// <summary>
        /// The dirPhsA property
        /// </summary>
        [XmlElementNameAttribute("dirPhsA")]
        [XmlAttributeAttribute(true)]
        public virtual IDirectionPhase DirPhsA
        {
            get
            {
                return this._dirPhsA;
            }
            set
            {
                if ((this._dirPhsA != value))
                {
                    IDirectionPhase old = this._dirPhsA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirPhsAChanging(e);
                    this.OnPropertyChanging("DirPhsA", e);
                    this._dirPhsA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirPhsA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirPhsA;
                    }
                    this.OnDirPhsAChanged(e);
                    this.OnPropertyChanged("DirPhsA", e);
                }
            }
        }
        
        /// <summary>
        /// The dirPhsB property
        /// </summary>
        [XmlElementNameAttribute("dirPhsB")]
        [XmlAttributeAttribute(true)]
        public virtual IDirectionPhase DirPhsB
        {
            get
            {
                return this._dirPhsB;
            }
            set
            {
                if ((this._dirPhsB != value))
                {
                    IDirectionPhase old = this._dirPhsB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirPhsBChanging(e);
                    this.OnPropertyChanging("DirPhsB", e);
                    this._dirPhsB = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirPhsB;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirPhsB;
                    }
                    this.OnDirPhsBChanged(e);
                    this.OnPropertyChanged("DirPhsB", e);
                }
            }
        }
        
        /// <summary>
        /// The dirPhsC property
        /// </summary>
        [XmlElementNameAttribute("dirPhsC")]
        [XmlAttributeAttribute(true)]
        public virtual IDirectionPhase DirPhsC
        {
            get
            {
                return this._dirPhsC;
            }
            set
            {
                if ((this._dirPhsC != value))
                {
                    IDirectionPhase old = this._dirPhsC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirPhsCChanging(e);
                    this.OnPropertyChanging("DirPhsC", e);
                    this._dirPhsC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirPhsC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirPhsC;
                    }
                    this.OnDirPhsCChanged(e);
                    this.OnPropertyChanged("DirPhsC", e);
                }
            }
        }
        
        /// <summary>
        /// The dirNeut property
        /// </summary>
        [XmlElementNameAttribute("dirNeut")]
        [XmlAttributeAttribute(true)]
        public virtual IDirectionPhase DirNeut
        {
            get
            {
                return this._dirNeut;
            }
            set
            {
                if ((this._dirNeut != value))
                {
                    IDirectionPhase old = this._dirNeut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirNeutChanging(e);
                    this.OnPropertyChanging("DirNeut", e);
                    this._dirNeut = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirNeut;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirNeut;
                    }
                    this.OnDirNeutChanged(e);
                    this.OnPropertyChanged("DirNeut", e);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ACDReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ACD")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the General property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneralChanging;
        
        /// <summary>
        /// Gets fired when the General property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneralChanged;
        
        /// <summary>
        /// Gets fired before the PhsA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsAChanging;
        
        /// <summary>
        /// Gets fired when the PhsA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsAChanged;
        
        /// <summary>
        /// Gets fired before the PhsB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBChanging;
        
        /// <summary>
        /// Gets fired when the PhsB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsBChanged;
        
        /// <summary>
        /// Gets fired before the PhsC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCChanging;
        
        /// <summary>
        /// Gets fired when the PhsC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhsCChanged;
        
        /// <summary>
        /// Gets fired before the Neut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutChanging;
        
        /// <summary>
        /// Gets fired when the Neut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutChanged;
        
        /// <summary>
        /// Gets fired before the DirGeneral property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirGeneralChanging;
        
        /// <summary>
        /// Gets fired when the DirGeneral property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirGeneralChanged;
        
        /// <summary>
        /// Gets fired before the DirPhsA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsAChanging;
        
        /// <summary>
        /// Gets fired when the DirPhsA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsAChanged;
        
        /// <summary>
        /// Gets fired before the DirPhsB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsBChanging;
        
        /// <summary>
        /// Gets fired when the DirPhsB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsBChanged;
        
        /// <summary>
        /// Gets fired before the DirPhsC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsCChanging;
        
        /// <summary>
        /// Gets fired when the DirPhsC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirPhsCChanged;
        
        /// <summary>
        /// Gets fired before the DirNeut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirNeutChanging;
        
        /// <summary>
        /// Gets fired when the DirNeut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirNeutChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Raises the GeneralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneralChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhsCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhsCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhsCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirGeneralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirGeneralChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirGeneralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirGeneralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirGeneralChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirGeneralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirGeneral property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirGeneral(object sender, System.EventArgs eventArgs)
        {
            this.DirGeneral = null;
        }
        
        /// <summary>
        /// Raises the DirPhsAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirPhsAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirPhsA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirPhsA(object sender, System.EventArgs eventArgs)
        {
            this.DirPhsA = null;
        }
        
        /// <summary>
        /// Raises the DirPhsBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirPhsBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirPhsB property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirPhsB(object sender, System.EventArgs eventArgs)
        {
            this.DirPhsB = null;
        }
        
        /// <summary>
        /// Raises the DirPhsCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirPhsCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirPhsCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirPhsCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirPhsC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirPhsC(object sender, System.EventArgs eventArgs)
        {
            this.DirPhsC = null;
        }
        
        /// <summary>
        /// Raises the DirNeutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirNeutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirNeutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirNeutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirNeutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirNeutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirNeut property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirNeut(object sender, System.EventArgs eventArgs)
        {
            this.DirNeut = null;
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GENERAL"))
            {
                return this.General;
            }
            if ((attribute == "PHSA"))
            {
                return this.PhsA;
            }
            if ((attribute == "PHSB"))
            {
                return this.PhsB;
            }
            if ((attribute == "PHSC"))
            {
                return this.PhsC;
            }
            if ((attribute == "NEUT"))
            {
                return this.Neut;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DIRGENERAL"))
            {
                this.DirGeneral = ((IFaultDirection)(value));
                return;
            }
            if ((feature == "DIRPHSA"))
            {
                this.DirPhsA = ((IDirectionPhase)(value));
                return;
            }
            if ((feature == "DIRPHSB"))
            {
                this.DirPhsB = ((IDirectionPhase)(value));
                return;
            }
            if ((feature == "DIRPHSC"))
            {
                this.DirPhsC = ((IDirectionPhase)(value));
                return;
            }
            if ((feature == "DIRNEUT"))
            {
                this.DirNeut = ((IDirectionPhase)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "GENERAL"))
            {
                this.General = ((bool)(value));
                return;
            }
            if ((feature == "PHSA"))
            {
                this.PhsA = ((bool)(value));
                return;
            }
            if ((feature == "PHSB"))
            {
                this.PhsB = ((bool)(value));
                return;
            }
            if ((feature == "PHSC"))
            {
                this.PhsC = ((bool)(value));
                return;
            }
            if ((feature == "NEUT"))
            {
                this.Neut = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DirGeneral"))
            {
                return new DirGeneralProxy(this);
            }
            if ((attribute == "DirPhsA"))
            {
                return new DirPhsAProxy(this);
            }
            if ((attribute == "DirPhsB"))
            {
                return new DirPhsBProxy(this);
            }
            if ((attribute == "DirPhsC"))
            {
                return new DirPhsCProxy(this);
            }
            if ((attribute == "DirNeut"))
            {
                return new DirNeutProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DirGeneral"))
            {
                return new DirGeneralProxy(this);
            }
            if ((reference == "DirPhsA"))
            {
                return new DirPhsAProxy(this);
            }
            if ((reference == "DirPhsB"))
            {
                return new DirPhsBProxy(this);
            }
            if ((reference == "DirPhsC"))
            {
                return new DirPhsCProxy(this);
            }
            if ((reference == "DirNeut"))
            {
                return new DirNeutProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ACD")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ACD class
        /// </summary>
        public class ACDReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ACD _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ACDReferencedElementsCollection(ACD parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DirGeneral != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirPhsA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirPhsB != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirPhsC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirNeut != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DirGeneralChanged += this.PropagateValueChanges;
                this._parent.DirPhsAChanged += this.PropagateValueChanges;
                this._parent.DirPhsBChanged += this.PropagateValueChanges;
                this._parent.DirPhsCChanged += this.PropagateValueChanges;
                this._parent.DirNeutChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DirGeneralChanged -= this.PropagateValueChanges;
                this._parent.DirPhsAChanged -= this.PropagateValueChanges;
                this._parent.DirPhsBChanged -= this.PropagateValueChanges;
                this._parent.DirPhsCChanged -= this.PropagateValueChanges;
                this._parent.DirNeutChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DirGeneral == null))
                {
                    IFaultDirection dirGeneralCasted = item.As<IFaultDirection>();
                    if ((dirGeneralCasted != null))
                    {
                        this._parent.DirGeneral = dirGeneralCasted;
                        return;
                    }
                }
                if ((this._parent.DirPhsA == null))
                {
                    IDirectionPhase dirPhsACasted = item.As<IDirectionPhase>();
                    if ((dirPhsACasted != null))
                    {
                        this._parent.DirPhsA = dirPhsACasted;
                        return;
                    }
                }
                if ((this._parent.DirPhsB == null))
                {
                    IDirectionPhase dirPhsBCasted = item.As<IDirectionPhase>();
                    if ((dirPhsBCasted != null))
                    {
                        this._parent.DirPhsB = dirPhsBCasted;
                        return;
                    }
                }
                if ((this._parent.DirPhsC == null))
                {
                    IDirectionPhase dirPhsCCasted = item.As<IDirectionPhase>();
                    if ((dirPhsCCasted != null))
                    {
                        this._parent.DirPhsC = dirPhsCCasted;
                        return;
                    }
                }
                if ((this._parent.DirNeut == null))
                {
                    IDirectionPhase dirNeutCasted = item.As<IDirectionPhase>();
                    if ((dirNeutCasted != null))
                    {
                        this._parent.DirNeut = dirNeutCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DirGeneral = null;
                this._parent.DirPhsA = null;
                this._parent.DirPhsB = null;
                this._parent.DirPhsC = null;
                this._parent.DirNeut = null;
                this._parent.Q = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DirGeneral))
                {
                    return true;
                }
                if ((item == this._parent.DirPhsA))
                {
                    return true;
                }
                if ((item == this._parent.DirPhsB))
                {
                    return true;
                }
                if ((item == this._parent.DirPhsC))
                {
                    return true;
                }
                if ((item == this._parent.DirNeut))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DirGeneral != null))
                {
                    array[arrayIndex] = this._parent.DirGeneral;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirPhsA != null))
                {
                    array[arrayIndex] = this._parent.DirPhsA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirPhsB != null))
                {
                    array[arrayIndex] = this._parent.DirPhsB;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirPhsC != null))
                {
                    array[arrayIndex] = this._parent.DirPhsC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirNeut != null))
                {
                    array[arrayIndex] = this._parent.DirNeut;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DirGeneral == item))
                {
                    this._parent.DirGeneral = null;
                    return true;
                }
                if ((this._parent.DirPhsA == item))
                {
                    this._parent.DirPhsA = null;
                    return true;
                }
                if ((this._parent.DirPhsB == item))
                {
                    this._parent.DirPhsB = null;
                    return true;
                }
                if ((this._parent.DirPhsC == item))
                {
                    this._parent.DirPhsC = null;
                    return true;
                }
                if ((this._parent.DirNeut == item))
                {
                    this._parent.DirNeut = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DirGeneral).Concat(this._parent.DirPhsA).Concat(this._parent.DirPhsB).Concat(this._parent.DirPhsC).Concat(this._parent.DirNeut).Concat(this._parent.Q).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the general property
        /// </summary>
        private sealed class GeneralProxy : ModelPropertyChange<IACD, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneralProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.General;
                }
                set
                {
                    this.ModelElement.General = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GeneralChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GeneralChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsA property
        /// </summary>
        private sealed class PhsAProxy : ModelPropertyChange<IACD, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsAProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.PhsA;
                }
                set
                {
                    this.ModelElement.PhsA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsB property
        /// </summary>
        private sealed class PhsBProxy : ModelPropertyChange<IACD, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsBProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.PhsB;
                }
                set
                {
                    this.ModelElement.PhsB = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsBChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsBChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phsC property
        /// </summary>
        private sealed class PhsCProxy : ModelPropertyChange<IACD, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhsCProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.PhsC;
                }
                set
                {
                    this.ModelElement.PhsC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhsCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neut property
        /// </summary>
        private sealed class NeutProxy : ModelPropertyChange<IACD, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Neut;
                }
                set
                {
                    this.ModelElement.Neut = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dirGeneral property
        /// </summary>
        private sealed class DirGeneralProxy : ModelPropertyChange<IACD, IFaultDirection>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirGeneralProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFaultDirection Value
            {
                get
                {
                    return this.ModelElement.DirGeneral;
                }
                set
                {
                    this.ModelElement.DirGeneral = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirGeneralChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirGeneralChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dirPhsA property
        /// </summary>
        private sealed class DirPhsAProxy : ModelPropertyChange<IACD, IDirectionPhase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirPhsAProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDirectionPhase Value
            {
                get
                {
                    return this.ModelElement.DirPhsA;
                }
                set
                {
                    this.ModelElement.DirPhsA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dirPhsB property
        /// </summary>
        private sealed class DirPhsBProxy : ModelPropertyChange<IACD, IDirectionPhase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirPhsBProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDirectionPhase Value
            {
                get
                {
                    return this.ModelElement.DirPhsB;
                }
                set
                {
                    this.ModelElement.DirPhsB = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsBChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsBChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dirPhsC property
        /// </summary>
        private sealed class DirPhsCProxy : ModelPropertyChange<IACD, IDirectionPhase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirPhsCProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDirectionPhase Value
            {
                get
                {
                    return this.ModelElement.DirPhsC;
                }
                set
                {
                    this.ModelElement.DirPhsC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirPhsCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dirNeut property
        /// </summary>
        private sealed class DirNeutProxy : ModelPropertyChange<IACD, IDirectionPhase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirNeutProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDirectionPhase Value
            {
                get
                {
                    return this.ModelElement.DirNeut;
                }
                set
                {
                    this.ModelElement.DirNeut = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirNeutChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirNeutChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<IACD, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(IACD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged -= handler;
            }
        }
    }
}

