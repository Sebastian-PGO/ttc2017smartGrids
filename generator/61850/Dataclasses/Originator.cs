//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the Originator class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/Originator")]
    public partial class Originator : ModelElement, IOriginator, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Orident property
        /// </summary>
        private string _orident;
        
        private static Lazy<ITypedElement> _oridentAttribute = new Lazy<ITypedElement>(RetrieveOridentAttribute);
        
        private static Lazy<ITypedElement> _orCatReference = new Lazy<ITypedElement>(RetrieveOrCatReference);
        
        /// <summary>
        /// The backing field for the OrCat property
        /// </summary>
        private IOriginatorCategory _orCat;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The orident property
        /// </summary>
        [XmlElementNameAttribute("orident")]
        [XmlAttributeAttribute(true)]
        public virtual string Orident
        {
            get
            {
                return this._orident;
            }
            set
            {
                if ((this._orident != value))
                {
                    string old = this._orident;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOridentChanging(e);
                    this.OnPropertyChanging("Orident", e, _oridentAttribute);
                    this._orident = value;
                    this.OnOridentChanged(e);
                    this.OnPropertyChanged("Orident", e, _oridentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The orCat property
        /// </summary>
        [XmlElementNameAttribute("orCat")]
        [XmlAttributeAttribute(true)]
        public virtual IOriginatorCategory OrCat
        {
            get
            {
                return this._orCat;
            }
            set
            {
                if ((this._orCat != value))
                {
                    IOriginatorCategory old = this._orCat;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrCatChanging(e);
                    this.OnPropertyChanging("OrCat", e, _orCatReference);
                    this._orCat = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOrCat;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOrCat;
                    }
                    this.OnOrCatChanged(e);
                    this.OnPropertyChanged("OrCat", e, _orCatReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OriginatorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/Originator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Orident property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OridentChanging;
        
        /// <summary>
        /// Gets fired when the Orident property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OridentChanged;
        
        /// <summary>
        /// Gets fired before the OrCat property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrCatChanging;
        
        /// <summary>
        /// Gets fired when the OrCat property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrCatChanged;
        
        private static ITypedElement RetrieveOridentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Originator.ClassInstance)).Resolve("orident")));
        }
        
        /// <summary>
        /// Raises the OridentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOridentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OridentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OridentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOridentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OridentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOrCatReference()
        {
            return ((ITypedElement)(((ModelElement)(Originator.ClassInstance)).Resolve("orCat")));
        }
        
        /// <summary>
        /// Raises the OrCatChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrCatChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrCatChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrCatChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrCatChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrCatChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OrCat property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrCat(object sender, System.EventArgs eventArgs)
        {
            this.OrCat = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ORIDENT"))
            {
                return this.Orident;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ORCAT"))
            {
                this.OrCat = ((IOriginatorCategory)(value));
                return;
            }
            if ((feature == "ORIDENT"))
            {
                this.Orident = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OrCat"))
            {
                return new OrCatProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OrCat"))
            {
                return new OrCatProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/Originator")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Originator class
        /// </summary>
        public class OriginatorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Originator _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OriginatorReferencedElementsCollection(Originator parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OrCat != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OrCatChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OrCatChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OrCat == null))
                {
                    IOriginatorCategory orCatCasted = item.As<IOriginatorCategory>();
                    if ((orCatCasted != null))
                    {
                        this._parent.OrCat = orCatCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OrCat = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OrCat))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OrCat != null))
                {
                    array[arrayIndex] = this._parent.OrCat;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OrCat == item))
                {
                    this._parent.OrCat = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OrCat).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the orident property
        /// </summary>
        private sealed class OridentProxy : ModelPropertyChange<IOriginator, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OridentProxy(IOriginator modelElement) : 
                    base(modelElement, "orident")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Orident;
                }
                set
                {
                    this.ModelElement.Orident = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the orCat property
        /// </summary>
        private sealed class OrCatProxy : ModelPropertyChange<IOriginator, IOriginatorCategory>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrCatProxy(IOriginator modelElement) : 
                    base(modelElement, "orCat")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOriginatorCategory Value
            {
                get
                {
                    return this.ModelElement.OrCat;
                }
                set
                {
                    this.ModelElement.OrCat = value;
                }
            }
        }
    }
}

