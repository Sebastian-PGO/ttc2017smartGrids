//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the LPL class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/LPL")]
    public class LPL : ModelElement, ILPL, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Vendor property
        /// </summary>
        private string _vendor;
        
        /// <summary>
        /// The backing field for the SwRev property
        /// </summary>
        private string _swRev;
        
        /// <summary>
        /// The backing field for the D property
        /// </summary>
        private string _d;
        
        /// <summary>
        /// The backing field for the DU property
        /// </summary>
        private string _dU;
        
        /// <summary>
        /// The backing field for the ConfigRev property
        /// </summary>
        private string _configRev;
        
        /// <summary>
        /// The backing field for the IdNs property
        /// </summary>
        private string _idNs;
        
        /// <summary>
        /// The backing field for the LnNs property
        /// </summary>
        private string _lnNs;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The vendor property
        /// </summary>
        [XmlElementNameAttribute("vendor")]
        [XmlAttributeAttribute(true)]
        public virtual string Vendor
        {
            get
            {
                return this._vendor;
            }
            set
            {
                if ((this._vendor != value))
                {
                    string old = this._vendor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendorChanging(e);
                    this.OnPropertyChanging("Vendor", e);
                    this._vendor = value;
                    this.OnVendorChanged(e);
                    this.OnPropertyChanged("Vendor", e);
                }
            }
        }
        
        /// <summary>
        /// The swRev property
        /// </summary>
        [XmlElementNameAttribute("swRev")]
        [XmlAttributeAttribute(true)]
        public virtual string SwRev
        {
            get
            {
                return this._swRev;
            }
            set
            {
                if ((this._swRev != value))
                {
                    string old = this._swRev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwRevChanging(e);
                    this.OnPropertyChanging("SwRev", e);
                    this._swRev = value;
                    this.OnSwRevChanged(e);
                    this.OnPropertyChanged("SwRev", e);
                }
            }
        }
        
        /// <summary>
        /// The d property
        /// </summary>
        [XmlElementNameAttribute("d")]
        [XmlAttributeAttribute(true)]
        public virtual string D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    string old = this._d;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDChanging(e);
                    this.OnPropertyChanging("D", e);
                    this._d = value;
                    this.OnDChanged(e);
                    this.OnPropertyChanged("D", e);
                }
            }
        }
        
        /// <summary>
        /// The dU property
        /// </summary>
        [XmlElementNameAttribute("dU")]
        [XmlAttributeAttribute(true)]
        public virtual string DU
        {
            get
            {
                return this._dU;
            }
            set
            {
                if ((this._dU != value))
                {
                    string old = this._dU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDUChanging(e);
                    this.OnPropertyChanging("DU", e);
                    this._dU = value;
                    this.OnDUChanged(e);
                    this.OnPropertyChanged("DU", e);
                }
            }
        }
        
        /// <summary>
        /// The configRev property
        /// </summary>
        [XmlElementNameAttribute("configRev")]
        [XmlAttributeAttribute(true)]
        public virtual string ConfigRev
        {
            get
            {
                return this._configRev;
            }
            set
            {
                if ((this._configRev != value))
                {
                    string old = this._configRev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConfigRevChanging(e);
                    this.OnPropertyChanging("ConfigRev", e);
                    this._configRev = value;
                    this.OnConfigRevChanged(e);
                    this.OnPropertyChanged("ConfigRev", e);
                }
            }
        }
        
        /// <summary>
        /// The IdNs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string IdNs
        {
            get
            {
                return this._idNs;
            }
            set
            {
                if ((this._idNs != value))
                {
                    string old = this._idNs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdNsChanging(e);
                    this.OnPropertyChanging("IdNs", e);
                    this._idNs = value;
                    this.OnIdNsChanged(e);
                    this.OnPropertyChanged("IdNs", e);
                }
            }
        }
        
        /// <summary>
        /// The lnNs property
        /// </summary>
        [XmlElementNameAttribute("lnNs")]
        [XmlAttributeAttribute(true)]
        public virtual string LnNs
        {
            get
            {
                return this._lnNs;
            }
            set
            {
                if ((this._lnNs != value))
                {
                    string old = this._lnNs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLnNsChanging(e);
                    this.OnPropertyChanging("LnNs", e);
                    this._lnNs = value;
                    this.OnLnNsChanged(e);
                    this.OnPropertyChanged("LnNs", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/LPL")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Vendor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanging;
        
        /// <summary>
        /// Gets fired when the Vendor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanged;
        
        /// <summary>
        /// Gets fired before the SwRev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwRevChanging;
        
        /// <summary>
        /// Gets fired when the SwRev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwRevChanged;
        
        /// <summary>
        /// Gets fired before the D property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanging;
        
        /// <summary>
        /// Gets fired when the D property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanged;
        
        /// <summary>
        /// Gets fired before the DU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanging;
        
        /// <summary>
        /// Gets fired when the DU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanged;
        
        /// <summary>
        /// Gets fired before the ConfigRev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigRevChanging;
        
        /// <summary>
        /// Gets fired when the ConfigRev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigRevChanged;
        
        /// <summary>
        /// Gets fired before the IdNs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdNsChanging;
        
        /// <summary>
        /// Gets fired when the IdNs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdNsChanged;
        
        /// <summary>
        /// Gets fired before the LnNs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LnNsChanging;
        
        /// <summary>
        /// Gets fired when the LnNs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LnNsChanged;
        
        /// <summary>
        /// Raises the VendorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwRevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwRevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwRevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwRevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwRevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwRevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConfigRevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigRevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigRevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConfigRevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigRevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigRevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdNsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdNsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdNsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdNsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdNsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdNsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LnNsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLnNsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LnNsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LnNsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLnNsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LnNsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VENDOR"))
            {
                return this.Vendor;
            }
            if ((attribute == "SWREV"))
            {
                return this.SwRev;
            }
            if ((attribute == "D"))
            {
                return this.D;
            }
            if ((attribute == "DU"))
            {
                return this.DU;
            }
            if ((attribute == "CONFIGREV"))
            {
                return this.ConfigRev;
            }
            if ((attribute == "IDNS"))
            {
                return this.IdNs;
            }
            if ((attribute == "LNNS"))
            {
                return this.LnNs;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VENDOR"))
            {
                this.Vendor = ((string)(value));
                return;
            }
            if ((feature == "SWREV"))
            {
                this.SwRev = ((string)(value));
                return;
            }
            if ((feature == "D"))
            {
                this.D = ((string)(value));
                return;
            }
            if ((feature == "DU"))
            {
                this.DU = ((string)(value));
                return;
            }
            if ((feature == "CONFIGREV"))
            {
                this.ConfigRev = ((string)(value));
                return;
            }
            if ((feature == "IDNS"))
            {
                this.IdNs = ((string)(value));
                return;
            }
            if ((feature == "LNNS"))
            {
                this.LnNs = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/LPL")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vendor property
        /// </summary>
        private sealed class VendorProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendorProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Vendor;
                }
                set
                {
                    this.ModelElement.Vendor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the swRev property
        /// </summary>
        private sealed class SwRevProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwRevProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SwRev;
                }
                set
                {
                    this.ModelElement.SwRev = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwRevChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwRevChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the d property
        /// </summary>
        private sealed class DProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.D;
                }
                set
                {
                    this.ModelElement.D = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dU property
        /// </summary>
        private sealed class DUProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DUProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DU;
                }
                set
                {
                    this.ModelElement.DU = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DUChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DUChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the configRev property
        /// </summary>
        private sealed class ConfigRevProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConfigRevProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ConfigRev;
                }
                set
                {
                    this.ModelElement.ConfigRev = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConfigRevChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConfigRevChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdNs property
        /// </summary>
        private sealed class IdNsProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdNsProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IdNs;
                }
                set
                {
                    this.ModelElement.IdNs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdNsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdNsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lnNs property
        /// </summary>
        private sealed class LnNsProxy : ModelPropertyChange<ILPL, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LnNsProxy(ILPL modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LnNs;
                }
                set
                {
                    this.ModelElement.LnNs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LnNsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LnNsChanged -= handler;
            }
        }
    }
}

