//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ING class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ING")]
    public partial class ING : ModelElement, IING, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SetVal property
        /// </summary>
        private Nullable<int> _setVal;
        
        private static Lazy<ITypedElement> _setValAttribute = new Lazy<ITypedElement>(RetrieveSetValAttribute);
        
        /// <summary>
        /// The backing field for the MinVal property
        /// </summary>
        private Nullable<int> _minVal;
        
        private static Lazy<ITypedElement> _minValAttribute = new Lazy<ITypedElement>(RetrieveMinValAttribute);
        
        /// <summary>
        /// The backing field for the MaxVal property
        /// </summary>
        private Nullable<int> _maxVal;
        
        private static Lazy<ITypedElement> _maxValAttribute = new Lazy<ITypedElement>(RetrieveMaxValAttribute);
        
        /// <summary>
        /// The backing field for the StepSize property
        /// </summary>
        private Nullable<int> _stepSize;
        
        private static Lazy<ITypedElement> _stepSizeAttribute = new Lazy<ITypedElement>(RetrieveStepSizeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The setVal property
        /// </summary>
        [XmlElementNameAttribute("setVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> SetVal
        {
            get
            {
                return this._setVal;
            }
            set
            {
                if ((this._setVal != value))
                {
                    Nullable<int> old = this._setVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetValChanging(e);
                    this.OnPropertyChanging("SetVal", e, _setValAttribute);
                    this._setVal = value;
                    this.OnSetValChanged(e);
                    this.OnPropertyChanged("SetVal", e, _setValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minVal property
        /// </summary>
        [XmlElementNameAttribute("minVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> MinVal
        {
            get
            {
                return this._minVal;
            }
            set
            {
                if ((this._minVal != value))
                {
                    Nullable<int> old = this._minVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValChanging(e);
                    this.OnPropertyChanging("MinVal", e, _minValAttribute);
                    this._minVal = value;
                    this.OnMinValChanged(e);
                    this.OnPropertyChanged("MinVal", e, _minValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxVal property
        /// </summary>
        [XmlElementNameAttribute("maxVal")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> MaxVal
        {
            get
            {
                return this._maxVal;
            }
            set
            {
                if ((this._maxVal != value))
                {
                    Nullable<int> old = this._maxVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValChanging(e);
                    this.OnPropertyChanging("MaxVal", e, _maxValAttribute);
                    this._maxVal = value;
                    this.OnMaxValChanged(e);
                    this.OnPropertyChanged("MaxVal", e, _maxValAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stepSize property
        /// </summary>
        [XmlElementNameAttribute("stepSize")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> StepSize
        {
            get
            {
                return this._stepSize;
            }
            set
            {
                if ((this._stepSize != value))
                {
                    Nullable<int> old = this._stepSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepSizeChanging(e);
                    this.OnPropertyChanging("StepSize", e, _stepSizeAttribute);
                    this._stepSize = value;
                    this.OnStepSizeChanged(e);
                    this.OnPropertyChanged("StepSize", e, _stepSizeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ING")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SetVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetValChanging;
        
        /// <summary>
        /// Gets fired when the SetVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetValChanged;
        
        /// <summary>
        /// Gets fired before the MinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanging;
        
        /// <summary>
        /// Gets fired when the MinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanged;
        
        /// <summary>
        /// Gets fired before the MaxVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanging;
        
        /// <summary>
        /// Gets fired when the MaxVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanged;
        
        /// <summary>
        /// Gets fired before the StepSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanging;
        
        /// <summary>
        /// Gets fired when the StepSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanged;
        
        private static ITypedElement RetrieveSetValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ING.ClassInstance)).Resolve("setVal")));
        }
        
        /// <summary>
        /// Raises the SetValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ING.ClassInstance)).Resolve("minVal")));
        }
        
        /// <summary>
        /// Raises the MinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxValAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ING.ClassInstance)).Resolve("maxVal")));
        }
        
        /// <summary>
        /// Raises the MaxValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStepSizeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ING.ClassInstance)).Resolve("stepSize")));
        }
        
        /// <summary>
        /// Raises the StepSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SETVAL"))
            {
                return this.SetVal;
            }
            if ((attribute == "MINVAL"))
            {
                return this.MinVal;
            }
            if ((attribute == "MAXVAL"))
            {
                return this.MaxVal;
            }
            if ((attribute == "STEPSIZE"))
            {
                return this.StepSize;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SETVAL"))
            {
                this.SetVal = ((int)(value));
                return;
            }
            if ((feature == "MINVAL"))
            {
                this.MinVal = ((int)(value));
                return;
            }
            if ((feature == "MAXVAL"))
            {
                this.MaxVal = ((int)(value));
                return;
            }
            if ((feature == "STEPSIZE"))
            {
                this.StepSize = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ING")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setVal property
        /// </summary>
        private sealed class SetValProxy : ModelPropertyChange<IING, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetValProxy(IING modelElement) : 
                    base(modelElement, "setVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.SetVal;
                }
                set
                {
                    this.ModelElement.SetVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minVal property
        /// </summary>
        private sealed class MinValProxy : ModelPropertyChange<IING, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValProxy(IING modelElement) : 
                    base(modelElement, "minVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.MinVal;
                }
                set
                {
                    this.ModelElement.MinVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxVal property
        /// </summary>
        private sealed class MaxValProxy : ModelPropertyChange<IING, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValProxy(IING modelElement) : 
                    base(modelElement, "maxVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.MaxVal;
                }
                set
                {
                    this.ModelElement.MaxVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepSize property
        /// </summary>
        private sealed class StepSizeProxy : ModelPropertyChange<IING, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepSizeProxy(IING modelElement) : 
                    base(modelElement, "stepSize")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.StepSize;
                }
                set
                {
                    this.ModelElement.StepSize = value;
                }
            }
        }
    }
}

