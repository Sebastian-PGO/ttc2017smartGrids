//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ASG class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ASG")]
    public class ASG : ModelElement, IASG, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SetMag property
        /// </summary>
        private IAnalogueValue _setMag;
        
        /// <summary>
        /// The backing field for the _SetMag property
        /// </summary>
        private IAnalogueValue @__setMag;
        
        /// <summary>
        /// The backing field for the __SetMag property
        /// </summary>
        private IAnalogueValue ___setMag;
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        /// <summary>
        /// The backing field for the SVC property
        /// </summary>
        private IScaledValueConfig _sVC;
        
        /// <summary>
        /// The backing field for the MinVal property
        /// </summary>
        private IAnalogueValue _minVal;
        
        /// <summary>
        /// The backing field for the MaxVal property
        /// </summary>
        private IAnalogueValue _maxVal;
        
        /// <summary>
        /// The backing field for the StepSize property
        /// </summary>
        private IAnalogueValue _stepSize;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The setMag property
        /// </summary>
        [XmlElementNameAttribute("setMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue SetMag
        {
            get
            {
                return this._setMag;
            }
            set
            {
                if ((this._setMag != value))
                {
                    IAnalogueValue old = this._setMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetMagChanging(e);
                    this.OnPropertyChanging("SetMag", e);
                    this._setMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetMag;
                    }
                    this.OnSetMagChanged(e);
                    this.OnPropertyChanged("SetMag", e);
                }
            }
        }
        
        /// <summary>
        /// The _setMag property
        /// </summary>
        [XmlElementNameAttribute("_setMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue _SetMag
        {
            get
            {
                return this.@__setMag;
            }
            set
            {
                if ((this.@__setMag != value))
                {
                    IAnalogueValue old = this.@__setMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_SetMagChanging(e);
                    this.OnPropertyChanging("_SetMag", e);
                    this.@__setMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnReset_SetMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnReset_SetMag;
                    }
                    this.On_SetMagChanged(e);
                    this.OnPropertyChanged("_SetMag", e);
                }
            }
        }
        
        /// <summary>
        /// The __setMag property
        /// </summary>
        [XmlElementNameAttribute("__setMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue @__SetMag
        {
            get
            {
                return this.___setMag;
            }
            set
            {
                if ((this.___setMag != value))
                {
                    IAnalogueValue old = this.___setMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On__SetMagChanging(e);
                    this.OnPropertyChanging("__SetMag", e);
                    this.___setMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnReset__SetMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnReset__SetMag;
                    }
                    this.On__SetMagChanged(e);
                    this.OnPropertyChanged("__SetMag", e);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e);
                }
            }
        }
        
        /// <summary>
        /// The sVC property
        /// </summary>
        [XmlElementNameAttribute("sVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig SVC
        {
            get
            {
                return this._sVC;
            }
            set
            {
                if ((this._sVC != value))
                {
                    IScaledValueConfig old = this._sVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSVCChanging(e);
                    this.OnPropertyChanging("SVC", e);
                    this._sVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSVC;
                    }
                    this.OnSVCChanged(e);
                    this.OnPropertyChanged("SVC", e);
                }
            }
        }
        
        /// <summary>
        /// The minVal property
        /// </summary>
        [XmlElementNameAttribute("minVal")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue MinVal
        {
            get
            {
                return this._minVal;
            }
            set
            {
                if ((this._minVal != value))
                {
                    IAnalogueValue old = this._minVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValChanging(e);
                    this.OnPropertyChanging("MinVal", e);
                    this._minVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinVal;
                    }
                    this.OnMinValChanged(e);
                    this.OnPropertyChanged("MinVal", e);
                }
            }
        }
        
        /// <summary>
        /// The maxVal property
        /// </summary>
        [XmlElementNameAttribute("maxVal")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue MaxVal
        {
            get
            {
                return this._maxVal;
            }
            set
            {
                if ((this._maxVal != value))
                {
                    IAnalogueValue old = this._maxVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValChanging(e);
                    this.OnPropertyChanging("MaxVal", e);
                    this._maxVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxVal;
                    }
                    this.OnMaxValChanged(e);
                    this.OnPropertyChanged("MaxVal", e);
                }
            }
        }
        
        /// <summary>
        /// The stepSize property
        /// </summary>
        [XmlElementNameAttribute("stepSize")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue StepSize
        {
            get
            {
                return this._stepSize;
            }
            set
            {
                if ((this._stepSize != value))
                {
                    IAnalogueValue old = this._stepSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepSizeChanging(e);
                    this.OnPropertyChanging("StepSize", e);
                    this._stepSize = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStepSize;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStepSize;
                    }
                    this.OnStepSizeChanged(e);
                    this.OnPropertyChanged("StepSize", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ASGReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ASG")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SetMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetMagChanging;
        
        /// <summary>
        /// Gets fired when the SetMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetMagChanged;
        
        /// <summary>
        /// Gets fired before the _SetMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetMagChanging;
        
        /// <summary>
        /// Gets fired when the _SetMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _SetMagChanged;
        
        /// <summary>
        /// Gets fired before the __SetMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetMagChanging;
        
        /// <summary>
        /// Gets fired when the __SetMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> @__SetMagChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the SVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanging;
        
        /// <summary>
        /// Gets fired when the SVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanged;
        
        /// <summary>
        /// Gets fired before the MinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanging;
        
        /// <summary>
        /// Gets fired when the MinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValChanged;
        
        /// <summary>
        /// Gets fired before the MaxVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanging;
        
        /// <summary>
        /// Gets fired when the MaxVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValChanged;
        
        /// <summary>
        /// Gets fired before the StepSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanging;
        
        /// <summary>
        /// Gets fired when the StepSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepSizeChanged;
        
        /// <summary>
        /// Raises the SetMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetMag(object sender, System.EventArgs eventArgs)
        {
            this.SetMag = null;
        }
        
        /// <summary>
        /// Raises the _SetMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _SetMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_SetMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._SetMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the _SetMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnReset_SetMag(object sender, System.EventArgs eventArgs)
        {
            this._SetMag = null;
        }
        
        /// <summary>
        /// Raises the __SetMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the __SetMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On__SetMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.@__SetMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the __SetMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnReset__SetMag(object sender, System.EventArgs eventArgs)
        {
            this.@__SetMag = null;
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        /// <summary>
        /// Raises the SVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSVC(object sender, System.EventArgs eventArgs)
        {
            this.SVC = null;
        }
        
        /// <summary>
        /// Raises the MinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinVal(object sender, System.EventArgs eventArgs)
        {
            this.MinVal = null;
        }
        
        /// <summary>
        /// Raises the MaxValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxVal(object sender, System.EventArgs eventArgs)
        {
            this.MaxVal = null;
        }
        
        /// <summary>
        /// Raises the StepSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StepSize property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStepSize(object sender, System.EventArgs eventArgs)
        {
            this.StepSize = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SETMAG"))
            {
                this.SetMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "_SETMAG"))
            {
                this._SetMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "__SETMAG"))
            {
                this.@__SetMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "SVC"))
            {
                this.SVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "MINVAL"))
            {
                this.MinVal = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MAXVAL"))
            {
                this.MaxVal = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "STEPSIZE"))
            {
                this.StepSize = ((IAnalogueValue)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SetMag"))
            {
                return new SetMagProxy(this);
            }
            if ((attribute == "_SetMag"))
            {
                return new _SetMagProxy(this);
            }
            if ((attribute == "__SetMag"))
            {
                return new @__SetMagProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((attribute == "MinVal"))
            {
                return new MinValProxy(this);
            }
            if ((attribute == "MaxVal"))
            {
                return new MaxValProxy(this);
            }
            if ((attribute == "StepSize"))
            {
                return new StepSizeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SetMag"))
            {
                return new SetMagProxy(this);
            }
            if ((reference == "_SetMag"))
            {
                return new _SetMagProxy(this);
            }
            if ((reference == "__SetMag"))
            {
                return new @__SetMagProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((reference == "MinVal"))
            {
                return new MinValProxy(this);
            }
            if ((reference == "MaxVal"))
            {
                return new MaxValProxy(this);
            }
            if ((reference == "StepSize"))
            {
                return new StepSizeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ASG")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ASG class
        /// </summary>
        public class ASGReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ASG _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ASGReferencedElementsCollection(ASG parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SetMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent._SetMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.@__SetMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StepSize != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SetMagChanged += this.PropagateValueChanges;
                this._parent._SetMagChanged += this.PropagateValueChanges;
                this._parent.@__SetMagChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.SVCChanged += this.PropagateValueChanges;
                this._parent.MinValChanged += this.PropagateValueChanges;
                this._parent.MaxValChanged += this.PropagateValueChanges;
                this._parent.StepSizeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SetMagChanged -= this.PropagateValueChanges;
                this._parent._SetMagChanged -= this.PropagateValueChanges;
                this._parent.@__SetMagChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.SVCChanged -= this.PropagateValueChanges;
                this._parent.MinValChanged -= this.PropagateValueChanges;
                this._parent.MaxValChanged -= this.PropagateValueChanges;
                this._parent.StepSizeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SetMag == null))
                {
                    IAnalogueValue setMagCasted = item.As<IAnalogueValue>();
                    if ((setMagCasted != null))
                    {
                        this._parent.SetMag = setMagCasted;
                        return;
                    }
                }
                if ((this._parent._SetMag == null))
                {
                    IAnalogueValue _setMagCasted = item.As<IAnalogueValue>();
                    if ((_setMagCasted != null))
                    {
                        this._parent._SetMag = _setMagCasted;
                        return;
                    }
                }
                if ((this._parent.@__SetMag == null))
                {
                    IAnalogueValue @__setMagCasted = item.As<IAnalogueValue>();
                    if ((@__setMagCasted != null))
                    {
                        this._parent.@__SetMag = @__setMagCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.SVC == null))
                {
                    IScaledValueConfig sVCCasted = item.As<IScaledValueConfig>();
                    if ((sVCCasted != null))
                    {
                        this._parent.SVC = sVCCasted;
                        return;
                    }
                }
                if ((this._parent.MinVal == null))
                {
                    IAnalogueValue minValCasted = item.As<IAnalogueValue>();
                    if ((minValCasted != null))
                    {
                        this._parent.MinVal = minValCasted;
                        return;
                    }
                }
                if ((this._parent.MaxVal == null))
                {
                    IAnalogueValue maxValCasted = item.As<IAnalogueValue>();
                    if ((maxValCasted != null))
                    {
                        this._parent.MaxVal = maxValCasted;
                        return;
                    }
                }
                if ((this._parent.StepSize == null))
                {
                    IAnalogueValue stepSizeCasted = item.As<IAnalogueValue>();
                    if ((stepSizeCasted != null))
                    {
                        this._parent.StepSize = stepSizeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SetMag = null;
                this._parent._SetMag = null;
                this._parent.@__SetMag = null;
                this._parent.Units = null;
                this._parent.SVC = null;
                this._parent.MinVal = null;
                this._parent.MaxVal = null;
                this._parent.StepSize = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SetMag))
                {
                    return true;
                }
                if ((item == this._parent._SetMag))
                {
                    return true;
                }
                if ((item == this._parent.@__SetMag))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.SVC))
                {
                    return true;
                }
                if ((item == this._parent.MinVal))
                {
                    return true;
                }
                if ((item == this._parent.MaxVal))
                {
                    return true;
                }
                if ((item == this._parent.StepSize))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SetMag != null))
                {
                    array[arrayIndex] = this._parent.SetMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent._SetMag != null))
                {
                    array[arrayIndex] = this._parent._SetMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.@__SetMag != null))
                {
                    array[arrayIndex] = this._parent.@__SetMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SVC != null))
                {
                    array[arrayIndex] = this._parent.SVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinVal != null))
                {
                    array[arrayIndex] = this._parent.MinVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxVal != null))
                {
                    array[arrayIndex] = this._parent.MaxVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StepSize != null))
                {
                    array[arrayIndex] = this._parent.StepSize;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SetMag == item))
                {
                    this._parent.SetMag = null;
                    return true;
                }
                if ((this._parent._SetMag == item))
                {
                    this._parent._SetMag = null;
                    return true;
                }
                if ((this._parent.@__SetMag == item))
                {
                    this._parent.@__SetMag = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.SVC == item))
                {
                    this._parent.SVC = null;
                    return true;
                }
                if ((this._parent.MinVal == item))
                {
                    this._parent.MinVal = null;
                    return true;
                }
                if ((this._parent.MaxVal == item))
                {
                    this._parent.MaxVal = null;
                    return true;
                }
                if ((this._parent.StepSize == item))
                {
                    this._parent.StepSize = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SetMag).Concat(this._parent._SetMag).Concat(this._parent.@__SetMag).Concat(this._parent.Units).Concat(this._parent.SVC).Concat(this._parent.MinVal).Concat(this._parent.MaxVal).Concat(this._parent.StepSize).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setMag property
        /// </summary>
        private sealed class SetMagProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetMagProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.SetMag;
                }
                set
                {
                    this.ModelElement.SetMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _setMag property
        /// </summary>
        private sealed class _SetMagProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _SetMagProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement._SetMag;
                }
                set
                {
                    this.ModelElement._SetMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement._SetMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement._SetMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the __setMag property
        /// </summary>
        private sealed class @__SetMagProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public @__SetMagProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.@__SetMag;
                }
                set
                {
                    this.ModelElement.@__SetMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.@__SetMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.@__SetMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<IASG, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sVC property
        /// </summary>
        private sealed class SVCProxy : ModelPropertyChange<IASG, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SVCProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.SVC;
                }
                set
                {
                    this.ModelElement.SVC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minVal property
        /// </summary>
        private sealed class MinValProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.MinVal;
                }
                set
                {
                    this.ModelElement.MinVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxVal property
        /// </summary>
        private sealed class MaxValProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.MaxVal;
                }
                set
                {
                    this.ModelElement.MaxVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepSize property
        /// </summary>
        private sealed class StepSizeProxy : ModelPropertyChange<IASG, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepSizeProxy(IASG modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.StepSize;
                }
                set
                {
                    this.ModelElement.StepSize = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepSizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepSizeChanged -= handler;
            }
        }
    }
}

