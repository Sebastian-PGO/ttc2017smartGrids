//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the CSD class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/CSD")]
    public class CSD : ModelElement, ICSD, IModelElement
    {
        
        /// <summary>
        /// The backing field for the XD property
        /// </summary>
        private string _xD;
        
        /// <summary>
        /// The backing field for the YD property
        /// </summary>
        private string _yD;
        
        /// <summary>
        /// The backing field for the NumPts property
        /// </summary>
        private Nullable<int> _numPts;
        
        /// <summary>
        /// The backing field for the D property
        /// </summary>
        private string _d;
        
        /// <summary>
        /// The backing field for the DU property
        /// </summary>
        private string _dU;
        
        /// <summary>
        /// The backing field for the XUnit property
        /// </summary>
        private IUnits _xUnit;
        
        /// <summary>
        /// The backing field for the YUnit property
        /// </summary>
        private IUnits _yUnit;
        
        /// <summary>
        /// The backing field for the CrvPts property
        /// </summary>
        private IPointArray _crvPts;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The xD property
        /// </summary>
        [XmlElementNameAttribute("xD")]
        [XmlAttributeAttribute(true)]
        public virtual string XD
        {
            get
            {
                return this._xD;
            }
            set
            {
                if ((this._xD != value))
                {
                    string old = this._xD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDChanging(e);
                    this.OnPropertyChanging("XD", e);
                    this._xD = value;
                    this.OnXDChanged(e);
                    this.OnPropertyChanged("XD", e);
                }
            }
        }
        
        /// <summary>
        /// The yD property
        /// </summary>
        [XmlElementNameAttribute("yD")]
        [XmlAttributeAttribute(true)]
        public virtual string YD
        {
            get
            {
                return this._yD;
            }
            set
            {
                if ((this._yD != value))
                {
                    string old = this._yD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYDChanging(e);
                    this.OnPropertyChanging("YD", e);
                    this._yD = value;
                    this.OnYDChanged(e);
                    this.OnPropertyChanged("YD", e);
                }
            }
        }
        
        /// <summary>
        /// The numPts property
        /// </summary>
        [XmlElementNameAttribute("numPts")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> NumPts
        {
            get
            {
                return this._numPts;
            }
            set
            {
                if ((this._numPts != value))
                {
                    Nullable<int> old = this._numPts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumPtsChanging(e);
                    this.OnPropertyChanging("NumPts", e);
                    this._numPts = value;
                    this.OnNumPtsChanged(e);
                    this.OnPropertyChanged("NumPts", e);
                }
            }
        }
        
        /// <summary>
        /// The d property
        /// </summary>
        [XmlElementNameAttribute("d")]
        [XmlAttributeAttribute(true)]
        public virtual string D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    string old = this._d;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDChanging(e);
                    this.OnPropertyChanging("D", e);
                    this._d = value;
                    this.OnDChanged(e);
                    this.OnPropertyChanged("D", e);
                }
            }
        }
        
        /// <summary>
        /// The dU property
        /// </summary>
        [XmlElementNameAttribute("dU")]
        [XmlAttributeAttribute(true)]
        public virtual string DU
        {
            get
            {
                return this._dU;
            }
            set
            {
                if ((this._dU != value))
                {
                    string old = this._dU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDUChanging(e);
                    this.OnPropertyChanging("DU", e);
                    this._dU = value;
                    this.OnDUChanged(e);
                    this.OnPropertyChanged("DU", e);
                }
            }
        }
        
        /// <summary>
        /// The xUnit property
        /// </summary>
        [XmlElementNameAttribute("xUnit")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits XUnit
        {
            get
            {
                return this._xUnit;
            }
            set
            {
                if ((this._xUnit != value))
                {
                    IUnits old = this._xUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXUnitChanging(e);
                    this.OnPropertyChanging("XUnit", e);
                    this._xUnit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetXUnit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetXUnit;
                    }
                    this.OnXUnitChanged(e);
                    this.OnPropertyChanged("XUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The yUnit property
        /// </summary>
        [XmlElementNameAttribute("yUnit")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits YUnit
        {
            get
            {
                return this._yUnit;
            }
            set
            {
                if ((this._yUnit != value))
                {
                    IUnits old = this._yUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYUnitChanging(e);
                    this.OnPropertyChanging("YUnit", e);
                    this._yUnit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetYUnit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetYUnit;
                    }
                    this.OnYUnitChanged(e);
                    this.OnPropertyChanged("YUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The crvPts property
        /// </summary>
        [XmlElementNameAttribute("crvPts")]
        [XmlAttributeAttribute(true)]
        public virtual IPointArray CrvPts
        {
            get
            {
                return this._crvPts;
            }
            set
            {
                if ((this._crvPts != value))
                {
                    IPointArray old = this._crvPts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCrvPtsChanging(e);
                    this.OnPropertyChanging("CrvPts", e);
                    this._crvPts = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCrvPts;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCrvPts;
                    }
                    this.OnCrvPtsChanged(e);
                    this.OnPropertyChanged("CrvPts", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CSDReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/CSD")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the XD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDChanging;
        
        /// <summary>
        /// Gets fired when the XD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDChanged;
        
        /// <summary>
        /// Gets fired before the YD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YDChanging;
        
        /// <summary>
        /// Gets fired when the YD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YDChanged;
        
        /// <summary>
        /// Gets fired before the NumPts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumPtsChanging;
        
        /// <summary>
        /// Gets fired when the NumPts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumPtsChanged;
        
        /// <summary>
        /// Gets fired before the D property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanging;
        
        /// <summary>
        /// Gets fired when the D property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanged;
        
        /// <summary>
        /// Gets fired before the DU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanging;
        
        /// <summary>
        /// Gets fired when the DU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanged;
        
        /// <summary>
        /// Gets fired before the XUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XUnitChanging;
        
        /// <summary>
        /// Gets fired when the XUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XUnitChanged;
        
        /// <summary>
        /// Gets fired before the YUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YUnitChanging;
        
        /// <summary>
        /// Gets fired when the YUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YUnitChanged;
        
        /// <summary>
        /// Gets fired before the CrvPts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrvPtsChanging;
        
        /// <summary>
        /// Gets fired when the CrvPts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrvPtsChanged;
        
        /// <summary>
        /// Raises the XDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumPtsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumPtsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumPtsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumPtsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumPtsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumPtsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the XUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetXUnit(object sender, System.EventArgs eventArgs)
        {
            this.XUnit = null;
        }
        
        /// <summary>
        /// Raises the YUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the YUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetYUnit(object sender, System.EventArgs eventArgs)
        {
            this.YUnit = null;
        }
        
        /// <summary>
        /// Raises the CrvPtsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrvPtsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrvPtsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CrvPtsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrvPtsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrvPtsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CrvPts property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCrvPts(object sender, System.EventArgs eventArgs)
        {
            this.CrvPts = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "XD"))
            {
                return this.XD;
            }
            if ((attribute == "YD"))
            {
                return this.YD;
            }
            if ((attribute == "NUMPTS"))
            {
                return this.NumPts;
            }
            if ((attribute == "D"))
            {
                return this.D;
            }
            if ((attribute == "DU"))
            {
                return this.DU;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "XUNIT"))
            {
                this.XUnit = ((IUnits)(value));
                return;
            }
            if ((feature == "YUNIT"))
            {
                this.YUnit = ((IUnits)(value));
                return;
            }
            if ((feature == "CRVPTS"))
            {
                this.CrvPts = ((IPointArray)(value));
                return;
            }
            if ((feature == "XD"))
            {
                this.XD = ((string)(value));
                return;
            }
            if ((feature == "YD"))
            {
                this.YD = ((string)(value));
                return;
            }
            if ((feature == "NUMPTS"))
            {
                this.NumPts = ((int)(value));
                return;
            }
            if ((feature == "D"))
            {
                this.D = ((string)(value));
                return;
            }
            if ((feature == "DU"))
            {
                this.DU = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "XUnit"))
            {
                return new XUnitProxy(this);
            }
            if ((attribute == "YUnit"))
            {
                return new YUnitProxy(this);
            }
            if ((attribute == "CrvPts"))
            {
                return new CrvPtsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "XUnit"))
            {
                return new XUnitProxy(this);
            }
            if ((reference == "YUnit"))
            {
                return new YUnitProxy(this);
            }
            if ((reference == "CrvPts"))
            {
                return new CrvPtsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/CSD")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CSD class
        /// </summary>
        public class CSDReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CSD _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CSDReferencedElementsCollection(CSD parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.XUnit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.YUnit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CrvPts != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.XUnitChanged += this.PropagateValueChanges;
                this._parent.YUnitChanged += this.PropagateValueChanges;
                this._parent.CrvPtsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.XUnitChanged -= this.PropagateValueChanges;
                this._parent.YUnitChanged -= this.PropagateValueChanges;
                this._parent.CrvPtsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.XUnit == null))
                {
                    IUnits xUnitCasted = item.As<IUnits>();
                    if ((xUnitCasted != null))
                    {
                        this._parent.XUnit = xUnitCasted;
                        return;
                    }
                }
                if ((this._parent.YUnit == null))
                {
                    IUnits yUnitCasted = item.As<IUnits>();
                    if ((yUnitCasted != null))
                    {
                        this._parent.YUnit = yUnitCasted;
                        return;
                    }
                }
                if ((this._parent.CrvPts == null))
                {
                    IPointArray crvPtsCasted = item.As<IPointArray>();
                    if ((crvPtsCasted != null))
                    {
                        this._parent.CrvPts = crvPtsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.XUnit = null;
                this._parent.YUnit = null;
                this._parent.CrvPts = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.XUnit))
                {
                    return true;
                }
                if ((item == this._parent.YUnit))
                {
                    return true;
                }
                if ((item == this._parent.CrvPts))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.XUnit != null))
                {
                    array[arrayIndex] = this._parent.XUnit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.YUnit != null))
                {
                    array[arrayIndex] = this._parent.YUnit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CrvPts != null))
                {
                    array[arrayIndex] = this._parent.CrvPts;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.XUnit == item))
                {
                    this._parent.XUnit = null;
                    return true;
                }
                if ((this._parent.YUnit == item))
                {
                    this._parent.YUnit = null;
                    return true;
                }
                if ((this._parent.CrvPts == item))
                {
                    this._parent.CrvPts = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.XUnit).Concat(this._parent.YUnit).Concat(this._parent.CrvPts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xD property
        /// </summary>
        private sealed class XDProxy : ModelPropertyChange<ICSD, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.XD;
                }
                set
                {
                    this.ModelElement.XD = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the yD property
        /// </summary>
        private sealed class YDProxy : ModelPropertyChange<ICSD, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YDProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.YD;
                }
                set
                {
                    this.ModelElement.YD = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numPts property
        /// </summary>
        private sealed class NumPtsProxy : ModelPropertyChange<ICSD, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumPtsProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.NumPts;
                }
                set
                {
                    this.ModelElement.NumPts = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumPtsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumPtsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the d property
        /// </summary>
        private sealed class DProxy : ModelPropertyChange<ICSD, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.D;
                }
                set
                {
                    this.ModelElement.D = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dU property
        /// </summary>
        private sealed class DUProxy : ModelPropertyChange<ICSD, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DUProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DU;
                }
                set
                {
                    this.ModelElement.DU = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DUChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DUChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xUnit property
        /// </summary>
        private sealed class XUnitProxy : ModelPropertyChange<ICSD, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XUnitProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.XUnit;
                }
                set
                {
                    this.ModelElement.XUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XUnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the yUnit property
        /// </summary>
        private sealed class YUnitProxy : ModelPropertyChange<ICSD, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YUnitProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.YUnit;
                }
                set
                {
                    this.ModelElement.YUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YUnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the crvPts property
        /// </summary>
        private sealed class CrvPtsProxy : ModelPropertyChange<ICSD, IPointArray>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CrvPtsProxy(ICSD modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPointArray Value
            {
                get
                {
                    return this.ModelElement.CrvPts;
                }
                set
                {
                    this.ModelElement.CrvPts = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CrvPtsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CrvPtsChanged -= handler;
            }
        }
    }
}

