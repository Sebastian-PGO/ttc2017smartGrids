//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the P_TimeStamp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/P_TimeStamp")]
    public class P_TimeStamp : ModelElement, IP_TimeStamp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SecondSinceEpoch property
        /// </summary>
        private Nullable<int> _secondSinceEpoch;
        
        /// <summary>
        /// The backing field for the FractionOfSecond property
        /// </summary>
        private Nullable<int> _fractionOfSecond;
        
        /// <summary>
        /// The backing field for the TimeQuality property
        /// </summary>
        private ITimeQuality _timeQuality;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The secondSinceEpoch property
        /// </summary>
        [XmlElementNameAttribute("secondSinceEpoch")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> SecondSinceEpoch
        {
            get
            {
                return this._secondSinceEpoch;
            }
            set
            {
                if ((this._secondSinceEpoch != value))
                {
                    Nullable<int> old = this._secondSinceEpoch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecondSinceEpochChanging(e);
                    this.OnPropertyChanging("SecondSinceEpoch", e);
                    this._secondSinceEpoch = value;
                    this.OnSecondSinceEpochChanged(e);
                    this.OnPropertyChanged("SecondSinceEpoch", e);
                }
            }
        }
        
        /// <summary>
        /// The fractionOfSecond property
        /// </summary>
        [XmlElementNameAttribute("fractionOfSecond")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> FractionOfSecond
        {
            get
            {
                return this._fractionOfSecond;
            }
            set
            {
                if ((this._fractionOfSecond != value))
                {
                    Nullable<int> old = this._fractionOfSecond;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFractionOfSecondChanging(e);
                    this.OnPropertyChanging("FractionOfSecond", e);
                    this._fractionOfSecond = value;
                    this.OnFractionOfSecondChanged(e);
                    this.OnPropertyChanged("FractionOfSecond", e);
                }
            }
        }
        
        /// <summary>
        /// The timeQuality property
        /// </summary>
        [XmlElementNameAttribute("timeQuality")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeQuality TimeQuality
        {
            get
            {
                return this._timeQuality;
            }
            set
            {
                if ((this._timeQuality != value))
                {
                    ITimeQuality old = this._timeQuality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeQualityChanging(e);
                    this.OnPropertyChanging("TimeQuality", e);
                    this._timeQuality = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTimeQuality;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTimeQuality;
                    }
                    this.OnTimeQualityChanged(e);
                    this.OnPropertyChanged("TimeQuality", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new P_TimeStampReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/P_TimeStamp")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SecondSinceEpoch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondSinceEpochChanging;
        
        /// <summary>
        /// Gets fired when the SecondSinceEpoch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondSinceEpochChanged;
        
        /// <summary>
        /// Gets fired before the FractionOfSecond property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FractionOfSecondChanging;
        
        /// <summary>
        /// Gets fired when the FractionOfSecond property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FractionOfSecondChanged;
        
        /// <summary>
        /// Gets fired before the TimeQuality property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeQualityChanging;
        
        /// <summary>
        /// Gets fired when the TimeQuality property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeQualityChanged;
        
        /// <summary>
        /// Raises the SecondSinceEpochChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondSinceEpochChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondSinceEpochChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecondSinceEpochChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondSinceEpochChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondSinceEpochChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FractionOfSecondChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFractionOfSecondChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FractionOfSecondChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FractionOfSecondChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFractionOfSecondChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FractionOfSecondChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeQualityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeQualityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeQualityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeQualityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeQualityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeQualityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimeQuality property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimeQuality(object sender, System.EventArgs eventArgs)
        {
            this.TimeQuality = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SECONDSINCEEPOCH"))
            {
                return this.SecondSinceEpoch;
            }
            if ((attribute == "FRACTIONOFSECOND"))
            {
                return this.FractionOfSecond;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIMEQUALITY"))
            {
                this.TimeQuality = ((ITimeQuality)(value));
                return;
            }
            if ((feature == "SECONDSINCEEPOCH"))
            {
                this.SecondSinceEpoch = ((int)(value));
                return;
            }
            if ((feature == "FRACTIONOFSECOND"))
            {
                this.FractionOfSecond = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TimeQuality"))
            {
                return new TimeQualityProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TimeQuality"))
            {
                return new TimeQualityProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/P_TimeStamp")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the P_TimeStamp class
        /// </summary>
        public class P_TimeStampReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private P_TimeStamp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public P_TimeStampReferencedElementsCollection(P_TimeStamp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TimeQuality != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TimeQualityChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TimeQualityChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TimeQuality == null))
                {
                    ITimeQuality timeQualityCasted = item.As<ITimeQuality>();
                    if ((timeQualityCasted != null))
                    {
                        this._parent.TimeQuality = timeQualityCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TimeQuality = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TimeQuality))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TimeQuality != null))
                {
                    array[arrayIndex] = this._parent.TimeQuality;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TimeQuality == item))
                {
                    this._parent.TimeQuality = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TimeQuality).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the secondSinceEpoch property
        /// </summary>
        private sealed class SecondSinceEpochProxy : ModelPropertyChange<IP_TimeStamp, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecondSinceEpochProxy(IP_TimeStamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.SecondSinceEpoch;
                }
                set
                {
                    this.ModelElement.SecondSinceEpoch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SecondSinceEpochChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SecondSinceEpochChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fractionOfSecond property
        /// </summary>
        private sealed class FractionOfSecondProxy : ModelPropertyChange<IP_TimeStamp, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FractionOfSecondProxy(IP_TimeStamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.FractionOfSecond;
                }
                set
                {
                    this.ModelElement.FractionOfSecond = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FractionOfSecondChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FractionOfSecondChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeQuality property
        /// </summary>
        private sealed class TimeQualityProxy : ModelPropertyChange<IP_TimeStamp, ITimeQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeQualityProxy(IP_TimeStamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeQuality Value
            {
                get
                {
                    return this.ModelElement.TimeQuality;
                }
                set
                {
                    this.ModelElement.TimeQuality = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeQualityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeQualityChanged -= handler;
            }
        }
    }
}

