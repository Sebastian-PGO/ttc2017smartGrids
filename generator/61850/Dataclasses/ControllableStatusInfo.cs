//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the ControllableStatusInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/ControllableStatusInfo")]
    public partial class ControllableStatusInfo : ModelElement, IControllableStatusInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CtlNum property
        /// </summary>
        private Nullable<int> _ctlNum;
        
        private static Lazy<ITypedElement> _ctlNumAttribute = new Lazy<ITypedElement>(RetrieveCtlNumAttribute);
        
        /// <summary>
        /// The backing field for the _CtlNum property
        /// </summary>
        private Nullable<int> @__ctlNum;
        
        private static Lazy<ITypedElement> @__ctlNumAttribute = new Lazy<ITypedElement>(Retrieve_CtlNumAttribute);
        
        /// <summary>
        /// The backing field for the StSeld property
        /// </summary>
        private Nullable<bool> _stSeld;
        
        private static Lazy<ITypedElement> _stSeldAttribute = new Lazy<ITypedElement>(RetrieveStSeldAttribute);
        
        /// <summary>
        /// The backing field for the SubEna property
        /// </summary>
        private Nullable<bool> _subEna;
        
        private static Lazy<ITypedElement> _subEnaAttribute = new Lazy<ITypedElement>(RetrieveSubEnaAttribute);
        
        /// <summary>
        /// The backing field for the SubID property
        /// </summary>
        private string _subID;
        
        private static Lazy<ITypedElement> _subIDAttribute = new Lazy<ITypedElement>(RetrieveSubIDAttribute);
        
        /// <summary>
        /// The backing field for the SboTimeout property
        /// </summary>
        private Nullable<int> _sboTimeout;
        
        private static Lazy<ITypedElement> _sboTimeoutAttribute = new Lazy<ITypedElement>(RetrieveSboTimeoutAttribute);
        
        /// <summary>
        /// The backing field for the D property
        /// </summary>
        private string _d;
        
        private static Lazy<ITypedElement> _dAttribute = new Lazy<ITypedElement>(RetrieveDAttribute);
        
        /// <summary>
        /// The backing field for the DU property
        /// </summary>
        private string _dU;
        
        private static Lazy<ITypedElement> _dUAttribute = new Lazy<ITypedElement>(RetrieveDUAttribute);
        
        private static Lazy<ITypedElement> _operTmReference = new Lazy<ITypedElement>(RetrieveOperTmReference);
        
        /// <summary>
        /// The backing field for the OperTm property
        /// </summary>
        private ITimeStamp _operTm;
        
        private static Lazy<ITypedElement> _originReference = new Lazy<ITypedElement>(RetrieveOriginReference);
        
        /// <summary>
        /// The backing field for the Origin property
        /// </summary>
        private IOriginator _origin;
        
        private static Lazy<ITypedElement> @__originReference = new Lazy<ITypedElement>(Retrieve_OriginReference);
        
        /// <summary>
        /// The backing field for the _Origin property
        /// </summary>
        private IOriginator @__origin;
        
        private static Lazy<ITypedElement> _subQReference = new Lazy<ITypedElement>(RetrieveSubQReference);
        
        /// <summary>
        /// The backing field for the SubQ property
        /// </summary>
        private IQuality _subQ;
        
        private static Lazy<ITypedElement> _ctlModelReference = new Lazy<ITypedElement>(RetrieveCtlModelReference);
        
        /// <summary>
        /// The backing field for the CtlModel property
        /// </summary>
        private ICtlModels _ctlModel;
        
        private static Lazy<ITypedElement> _sboClassReference = new Lazy<ITypedElement>(RetrieveSboClassReference);
        
        /// <summary>
        /// The backing field for the SboClass property
        /// </summary>
        private ISboClasses _sboClass;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ctlNum property
        /// </summary>
        [XmlElementNameAttribute("ctlNum")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> CtlNum
        {
            get
            {
                return this._ctlNum;
            }
            set
            {
                if ((this._ctlNum != value))
                {
                    Nullable<int> old = this._ctlNum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlNumChanging(e);
                    this.OnPropertyChanging("CtlNum", e, _ctlNumAttribute);
                    this._ctlNum = value;
                    this.OnCtlNumChanged(e);
                    this.OnPropertyChanged("CtlNum", e, _ctlNumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The _ctlNum property
        /// </summary>
        [XmlElementNameAttribute("_ctlNum")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> _CtlNum
        {
            get
            {
                return this.@__ctlNum;
            }
            set
            {
                if ((this.@__ctlNum != value))
                {
                    Nullable<int> old = this.@__ctlNum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_CtlNumChanging(e);
                    this.OnPropertyChanging("_CtlNum", e, @__ctlNumAttribute);
                    this.@__ctlNum = value;
                    this.On_CtlNumChanged(e);
                    this.OnPropertyChanged("_CtlNum", e, @__ctlNumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stSeld property
        /// </summary>
        [XmlElementNameAttribute("stSeld")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> StSeld
        {
            get
            {
                return this._stSeld;
            }
            set
            {
                if ((this._stSeld != value))
                {
                    Nullable<bool> old = this._stSeld;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStSeldChanging(e);
                    this.OnPropertyChanging("StSeld", e, _stSeldAttribute);
                    this._stSeld = value;
                    this.OnStSeldChanged(e);
                    this.OnPropertyChanged("StSeld", e, _stSeldAttribute);
                }
            }
        }
        
        /// <summary>
        /// The subEna property
        /// </summary>
        [XmlElementNameAttribute("subEna")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> SubEna
        {
            get
            {
                return this._subEna;
            }
            set
            {
                if ((this._subEna != value))
                {
                    Nullable<bool> old = this._subEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubEnaChanging(e);
                    this.OnPropertyChanging("SubEna", e, _subEnaAttribute);
                    this._subEna = value;
                    this.OnSubEnaChanged(e);
                    this.OnPropertyChanged("SubEna", e, _subEnaAttribute);
                }
            }
        }
        
        /// <summary>
        /// The subID property
        /// </summary>
        [XmlElementNameAttribute("subID")]
        [XmlAttributeAttribute(true)]
        public virtual string SubID
        {
            get
            {
                return this._subID;
            }
            set
            {
                if ((this._subID != value))
                {
                    string old = this._subID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubIDChanging(e);
                    this.OnPropertyChanging("SubID", e, _subIDAttribute);
                    this._subID = value;
                    this.OnSubIDChanged(e);
                    this.OnPropertyChanged("SubID", e, _subIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sboTimeout property
        /// </summary>
        [XmlElementNameAttribute("sboTimeout")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> SboTimeout
        {
            get
            {
                return this._sboTimeout;
            }
            set
            {
                if ((this._sboTimeout != value))
                {
                    Nullable<int> old = this._sboTimeout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSboTimeoutChanging(e);
                    this.OnPropertyChanging("SboTimeout", e, _sboTimeoutAttribute);
                    this._sboTimeout = value;
                    this.OnSboTimeoutChanged(e);
                    this.OnPropertyChanged("SboTimeout", e, _sboTimeoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The d property
        /// </summary>
        [XmlElementNameAttribute("d")]
        [XmlAttributeAttribute(true)]
        public virtual string D
        {
            get
            {
                return this._d;
            }
            set
            {
                if ((this._d != value))
                {
                    string old = this._d;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDChanging(e);
                    this.OnPropertyChanging("D", e, _dAttribute);
                    this._d = value;
                    this.OnDChanged(e);
                    this.OnPropertyChanged("D", e, _dAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dU property
        /// </summary>
        [XmlElementNameAttribute("dU")]
        [XmlAttributeAttribute(true)]
        public virtual string DU
        {
            get
            {
                return this._dU;
            }
            set
            {
                if ((this._dU != value))
                {
                    string old = this._dU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDUChanging(e);
                    this.OnPropertyChanging("DU", e, _dUAttribute);
                    this._dU = value;
                    this.OnDUChanged(e);
                    this.OnPropertyChanged("DU", e, _dUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The operTm property
        /// </summary>
        [XmlElementNameAttribute("operTm")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp OperTm
        {
            get
            {
                return this._operTm;
            }
            set
            {
                if ((this._operTm != value))
                {
                    ITimeStamp old = this._operTm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperTmChanging(e);
                    this.OnPropertyChanging("OperTm", e, _operTmReference);
                    this._operTm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperTm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperTm;
                    }
                    this.OnOperTmChanged(e);
                    this.OnPropertyChanged("OperTm", e, _operTmReference);
                }
            }
        }
        
        /// <summary>
        /// The origin property
        /// </summary>
        [XmlElementNameAttribute("origin")]
        [XmlAttributeAttribute(true)]
        public virtual IOriginator Origin
        {
            get
            {
                return this._origin;
            }
            set
            {
                if ((this._origin != value))
                {
                    IOriginator old = this._origin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOriginChanging(e);
                    this.OnPropertyChanging("Origin", e, _originReference);
                    this._origin = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOrigin;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOrigin;
                    }
                    this.OnOriginChanged(e);
                    this.OnPropertyChanged("Origin", e, _originReference);
                }
            }
        }
        
        /// <summary>
        /// The _origin property
        /// </summary>
        [XmlElementNameAttribute("_origin")]
        [XmlAttributeAttribute(true)]
        public virtual IOriginator _Origin
        {
            get
            {
                return this.@__origin;
            }
            set
            {
                if ((this.@__origin != value))
                {
                    IOriginator old = this.@__origin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.On_OriginChanging(e);
                    this.OnPropertyChanging("_Origin", e, @__originReference);
                    this.@__origin = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnReset_Origin;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnReset_Origin;
                    }
                    this.On_OriginChanged(e);
                    this.OnPropertyChanged("_Origin", e, @__originReference);
                }
            }
        }
        
        /// <summary>
        /// The subQ property
        /// </summary>
        [XmlElementNameAttribute("subQ")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality SubQ
        {
            get
            {
                return this._subQ;
            }
            set
            {
                if ((this._subQ != value))
                {
                    IQuality old = this._subQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubQChanging(e);
                    this.OnPropertyChanging("SubQ", e, _subQReference);
                    this._subQ = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSubQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSubQ;
                    }
                    this.OnSubQChanged(e);
                    this.OnPropertyChanged("SubQ", e, _subQReference);
                }
            }
        }
        
        /// <summary>
        /// The ctlModel property
        /// </summary>
        [XmlElementNameAttribute("ctlModel")]
        [XmlAttributeAttribute(true)]
        public virtual ICtlModels CtlModel
        {
            get
            {
                return this._ctlModel;
            }
            set
            {
                if ((this._ctlModel != value))
                {
                    ICtlModels old = this._ctlModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlModelChanging(e);
                    this.OnPropertyChanging("CtlModel", e, _ctlModelReference);
                    this._ctlModel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCtlModel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCtlModel;
                    }
                    this.OnCtlModelChanged(e);
                    this.OnPropertyChanged("CtlModel", e, _ctlModelReference);
                }
            }
        }
        
        /// <summary>
        /// The sboClass property
        /// </summary>
        [XmlElementNameAttribute("sboClass")]
        [XmlAttributeAttribute(true)]
        public virtual ISboClasses SboClass
        {
            get
            {
                return this._sboClass;
            }
            set
            {
                if ((this._sboClass != value))
                {
                    ISboClasses old = this._sboClass;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSboClassChanging(e);
                    this.OnPropertyChanging("SboClass", e, _sboClassReference);
                    this._sboClass = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSboClass;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSboClass;
                    }
                    this.OnSboClassChanged(e);
                    this.OnPropertyChanged("SboClass", e, _sboClassReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ControllableStatusInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/ControllableStatusInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CtlNum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlNumChanging;
        
        /// <summary>
        /// Gets fired when the CtlNum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlNumChanged;
        
        /// <summary>
        /// Gets fired before the _CtlNum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _CtlNumChanging;
        
        /// <summary>
        /// Gets fired when the _CtlNum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _CtlNumChanged;
        
        /// <summary>
        /// Gets fired before the StSeld property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StSeldChanging;
        
        /// <summary>
        /// Gets fired when the StSeld property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StSeldChanged;
        
        /// <summary>
        /// Gets fired before the SubEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanging;
        
        /// <summary>
        /// Gets fired when the SubEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubEnaChanged;
        
        /// <summary>
        /// Gets fired before the SubID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanging;
        
        /// <summary>
        /// Gets fired when the SubID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIDChanged;
        
        /// <summary>
        /// Gets fired before the SboTimeout property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SboTimeoutChanging;
        
        /// <summary>
        /// Gets fired when the SboTimeout property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SboTimeoutChanged;
        
        /// <summary>
        /// Gets fired before the D property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanging;
        
        /// <summary>
        /// Gets fired when the D property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DChanged;
        
        /// <summary>
        /// Gets fired before the DU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanging;
        
        /// <summary>
        /// Gets fired when the DU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DUChanged;
        
        /// <summary>
        /// Gets fired before the OperTm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperTmChanging;
        
        /// <summary>
        /// Gets fired when the OperTm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperTmChanged;
        
        /// <summary>
        /// Gets fired before the Origin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OriginChanging;
        
        /// <summary>
        /// Gets fired when the Origin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OriginChanged;
        
        /// <summary>
        /// Gets fired before the _Origin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _OriginChanging;
        
        /// <summary>
        /// Gets fired when the _Origin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> _OriginChanged;
        
        /// <summary>
        /// Gets fired before the SubQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanging;
        
        /// <summary>
        /// Gets fired when the SubQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubQChanged;
        
        /// <summary>
        /// Gets fired before the CtlModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlModelChanging;
        
        /// <summary>
        /// Gets fired when the CtlModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlModelChanged;
        
        /// <summary>
        /// Gets fired before the SboClass property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SboClassChanging;
        
        /// <summary>
        /// Gets fired when the SboClass property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SboClassChanged;
        
        private static ITypedElement RetrieveCtlNumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("ctlNum")));
        }
        
        /// <summary>
        /// Raises the CtlNumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlNumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlNumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlNumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlNumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlNumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement Retrieve_CtlNumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("_ctlNum")));
        }
        
        /// <summary>
        /// Raises the _CtlNumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_CtlNumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._CtlNumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _CtlNumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_CtlNumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._CtlNumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStSeldAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("stSeld")));
        }
        
        /// <summary>
        /// Raises the StSeldChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStSeldChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StSeldChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StSeldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStSeldChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StSeldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubEnaAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("subEna")));
        }
        
        /// <summary>
        /// Raises the SubEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("subID")));
        }
        
        /// <summary>
        /// Raises the SubIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSboTimeoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("sboTimeout")));
        }
        
        /// <summary>
        /// Raises the SboTimeoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSboTimeoutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SboTimeoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SboTimeoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSboTimeoutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SboTimeoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("d")));
        }
        
        /// <summary>
        /// Raises the DChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("dU")));
        }
        
        /// <summary>
        /// Raises the DUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperTmReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("operTm")));
        }
        
        /// <summary>
        /// Raises the OperTmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperTmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperTmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperTmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperTmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperTmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperTm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperTm(object sender, System.EventArgs eventArgs)
        {
            this.OperTm = null;
        }
        
        private static ITypedElement RetrieveOriginReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("origin")));
        }
        
        /// <summary>
        /// Raises the OriginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOriginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OriginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OriginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOriginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OriginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Origin property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrigin(object sender, System.EventArgs eventArgs)
        {
            this.Origin = null;
        }
        
        private static ITypedElement Retrieve_OriginReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("_origin")));
        }
        
        /// <summary>
        /// Raises the _OriginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_OriginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._OriginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the _OriginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void On_OriginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this._OriginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the _Origin property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnReset_Origin(object sender, System.EventArgs eventArgs)
        {
            this._Origin = null;
        }
        
        private static ITypedElement RetrieveSubQReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("subQ")));
        }
        
        /// <summary>
        /// Raises the SubQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubQ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubQ(object sender, System.EventArgs eventArgs)
        {
            this.SubQ = null;
        }
        
        private static ITypedElement RetrieveCtlModelReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("ctlModel")));
        }
        
        /// <summary>
        /// Raises the CtlModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CtlModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCtlModel(object sender, System.EventArgs eventArgs)
        {
            this.CtlModel = null;
        }
        
        private static ITypedElement RetrieveSboClassReference()
        {
            return ((ITypedElement)(((ModelElement)(ControllableStatusInfo.ClassInstance)).Resolve("sboClass")));
        }
        
        /// <summary>
        /// Raises the SboClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSboClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SboClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SboClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSboClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SboClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SboClass property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSboClass(object sender, System.EventArgs eventArgs)
        {
            this.SboClass = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CTLNUM"))
            {
                return this.CtlNum;
            }
            if ((attribute == "_CTLNUM"))
            {
                return this._CtlNum;
            }
            if ((attribute == "STSELD"))
            {
                return this.StSeld;
            }
            if ((attribute == "SUBENA"))
            {
                return this.SubEna;
            }
            if ((attribute == "SUBID"))
            {
                return this.SubID;
            }
            if ((attribute == "SBOTIMEOUT"))
            {
                return this.SboTimeout;
            }
            if ((attribute == "D"))
            {
                return this.D;
            }
            if ((attribute == "DU"))
            {
                return this.DU;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERTM"))
            {
                this.OperTm = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "ORIGIN"))
            {
                this.Origin = ((IOriginator)(value));
                return;
            }
            if ((feature == "_ORIGIN"))
            {
                this._Origin = ((IOriginator)(value));
                return;
            }
            if ((feature == "SUBQ"))
            {
                this.SubQ = ((IQuality)(value));
                return;
            }
            if ((feature == "CTLMODEL"))
            {
                this.CtlModel = ((ICtlModels)(value));
                return;
            }
            if ((feature == "SBOCLASS"))
            {
                this.SboClass = ((ISboClasses)(value));
                return;
            }
            if ((feature == "CTLNUM"))
            {
                this.CtlNum = ((int)(value));
                return;
            }
            if ((feature == "_CTLNUM"))
            {
                this._CtlNum = ((int)(value));
                return;
            }
            if ((feature == "STSELD"))
            {
                this.StSeld = ((bool)(value));
                return;
            }
            if ((feature == "SUBENA"))
            {
                this.SubEna = ((bool)(value));
                return;
            }
            if ((feature == "SUBID"))
            {
                this.SubID = ((string)(value));
                return;
            }
            if ((feature == "SBOTIMEOUT"))
            {
                this.SboTimeout = ((int)(value));
                return;
            }
            if ((feature == "D"))
            {
                this.D = ((string)(value));
                return;
            }
            if ((feature == "DU"))
            {
                this.DU = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OperTm"))
            {
                return new OperTmProxy(this);
            }
            if ((attribute == "Origin"))
            {
                return new OriginProxy(this);
            }
            if ((attribute == "_Origin"))
            {
                return new _OriginProxy(this);
            }
            if ((attribute == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((attribute == "CtlModel"))
            {
                return new CtlModelProxy(this);
            }
            if ((attribute == "SboClass"))
            {
                return new SboClassProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OperTm"))
            {
                return new OperTmProxy(this);
            }
            if ((reference == "Origin"))
            {
                return new OriginProxy(this);
            }
            if ((reference == "_Origin"))
            {
                return new _OriginProxy(this);
            }
            if ((reference == "SubQ"))
            {
                return new SubQProxy(this);
            }
            if ((reference == "CtlModel"))
            {
                return new CtlModelProxy(this);
            }
            if ((reference == "SboClass"))
            {
                return new SboClassProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/ControllableStatusInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ControllableStatusInfo class
        /// </summary>
        public class ControllableStatusInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ControllableStatusInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ControllableStatusInfoReferencedElementsCollection(ControllableStatusInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OperTm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Origin != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent._Origin != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubQ != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CtlModel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SboClass != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperTmChanged += this.PropagateValueChanges;
                this._parent.OriginChanged += this.PropagateValueChanges;
                this._parent._OriginChanged += this.PropagateValueChanges;
                this._parent.SubQChanged += this.PropagateValueChanges;
                this._parent.CtlModelChanged += this.PropagateValueChanges;
                this._parent.SboClassChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperTmChanged -= this.PropagateValueChanges;
                this._parent.OriginChanged -= this.PropagateValueChanges;
                this._parent._OriginChanged -= this.PropagateValueChanges;
                this._parent.SubQChanged -= this.PropagateValueChanges;
                this._parent.CtlModelChanged -= this.PropagateValueChanges;
                this._parent.SboClassChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OperTm == null))
                {
                    ITimeStamp operTmCasted = item.As<ITimeStamp>();
                    if ((operTmCasted != null))
                    {
                        this._parent.OperTm = operTmCasted;
                        return;
                    }
                }
                if ((this._parent.Origin == null))
                {
                    IOriginator originCasted = item.As<IOriginator>();
                    if ((originCasted != null))
                    {
                        this._parent.Origin = originCasted;
                        return;
                    }
                }
                if ((this._parent._Origin == null))
                {
                    IOriginator _originCasted = item.As<IOriginator>();
                    if ((_originCasted != null))
                    {
                        this._parent._Origin = _originCasted;
                        return;
                    }
                }
                if ((this._parent.SubQ == null))
                {
                    IQuality subQCasted = item.As<IQuality>();
                    if ((subQCasted != null))
                    {
                        this._parent.SubQ = subQCasted;
                        return;
                    }
                }
                if ((this._parent.CtlModel == null))
                {
                    ICtlModels ctlModelCasted = item.As<ICtlModels>();
                    if ((ctlModelCasted != null))
                    {
                        this._parent.CtlModel = ctlModelCasted;
                        return;
                    }
                }
                if ((this._parent.SboClass == null))
                {
                    ISboClasses sboClassCasted = item.As<ISboClasses>();
                    if ((sboClassCasted != null))
                    {
                        this._parent.SboClass = sboClassCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperTm = null;
                this._parent.Origin = null;
                this._parent._Origin = null;
                this._parent.SubQ = null;
                this._parent.CtlModel = null;
                this._parent.SboClass = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OperTm))
                {
                    return true;
                }
                if ((item == this._parent.Origin))
                {
                    return true;
                }
                if ((item == this._parent._Origin))
                {
                    return true;
                }
                if ((item == this._parent.SubQ))
                {
                    return true;
                }
                if ((item == this._parent.CtlModel))
                {
                    return true;
                }
                if ((item == this._parent.SboClass))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OperTm != null))
                {
                    array[arrayIndex] = this._parent.OperTm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Origin != null))
                {
                    array[arrayIndex] = this._parent.Origin;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent._Origin != null))
                {
                    array[arrayIndex] = this._parent._Origin;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubQ != null))
                {
                    array[arrayIndex] = this._parent.SubQ;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CtlModel != null))
                {
                    array[arrayIndex] = this._parent.CtlModel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SboClass != null))
                {
                    array[arrayIndex] = this._parent.SboClass;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OperTm == item))
                {
                    this._parent.OperTm = null;
                    return true;
                }
                if ((this._parent.Origin == item))
                {
                    this._parent.Origin = null;
                    return true;
                }
                if ((this._parent._Origin == item))
                {
                    this._parent._Origin = null;
                    return true;
                }
                if ((this._parent.SubQ == item))
                {
                    this._parent.SubQ = null;
                    return true;
                }
                if ((this._parent.CtlModel == item))
                {
                    this._parent.CtlModel = null;
                    return true;
                }
                if ((this._parent.SboClass == item))
                {
                    this._parent.SboClass = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperTm).Concat(this._parent.Origin).Concat(this._parent._Origin).Concat(this._parent.SubQ).Concat(this._parent.CtlModel).Concat(this._parent.SboClass).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctlNum property
        /// </summary>
        private sealed class CtlNumProxy : ModelPropertyChange<IControllableStatusInfo, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlNumProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "ctlNum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.CtlNum;
                }
                set
                {
                    this.ModelElement.CtlNum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _ctlNum property
        /// </summary>
        private sealed class _CtlNumProxy : ModelPropertyChange<IControllableStatusInfo, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _CtlNumProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "_ctlNum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement._CtlNum;
                }
                set
                {
                    this.ModelElement._CtlNum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stSeld property
        /// </summary>
        private sealed class StSeldProxy : ModelPropertyChange<IControllableStatusInfo, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StSeldProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "stSeld")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.StSeld;
                }
                set
                {
                    this.ModelElement.StSeld = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subEna property
        /// </summary>
        private sealed class SubEnaProxy : ModelPropertyChange<IControllableStatusInfo, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubEnaProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "subEna")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.SubEna;
                }
                set
                {
                    this.ModelElement.SubEna = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subID property
        /// </summary>
        private sealed class SubIDProxy : ModelPropertyChange<IControllableStatusInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubIDProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "subID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SubID;
                }
                set
                {
                    this.ModelElement.SubID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sboTimeout property
        /// </summary>
        private sealed class SboTimeoutProxy : ModelPropertyChange<IControllableStatusInfo, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SboTimeoutProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "sboTimeout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.SboTimeout;
                }
                set
                {
                    this.ModelElement.SboTimeout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the d property
        /// </summary>
        private sealed class DProxy : ModelPropertyChange<IControllableStatusInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "d")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.D;
                }
                set
                {
                    this.ModelElement.D = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dU property
        /// </summary>
        private sealed class DUProxy : ModelPropertyChange<IControllableStatusInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DUProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "dU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DU;
                }
                set
                {
                    this.ModelElement.DU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operTm property
        /// </summary>
        private sealed class OperTmProxy : ModelPropertyChange<IControllableStatusInfo, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperTmProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "operTm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.OperTm;
                }
                set
                {
                    this.ModelElement.OperTm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the origin property
        /// </summary>
        private sealed class OriginProxy : ModelPropertyChange<IControllableStatusInfo, IOriginator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OriginProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "origin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOriginator Value
            {
                get
                {
                    return this.ModelElement.Origin;
                }
                set
                {
                    this.ModelElement.Origin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the _origin property
        /// </summary>
        private sealed class _OriginProxy : ModelPropertyChange<IControllableStatusInfo, IOriginator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public _OriginProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "_origin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOriginator Value
            {
                get
                {
                    return this.ModelElement._Origin;
                }
                set
                {
                    this.ModelElement._Origin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subQ property
        /// </summary>
        private sealed class SubQProxy : ModelPropertyChange<IControllableStatusInfo, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubQProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "subQ")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.SubQ;
                }
                set
                {
                    this.ModelElement.SubQ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctlModel property
        /// </summary>
        private sealed class CtlModelProxy : ModelPropertyChange<IControllableStatusInfo, ICtlModels>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlModelProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "ctlModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICtlModels Value
            {
                get
                {
                    return this.ModelElement.CtlModel;
                }
                set
                {
                    this.ModelElement.CtlModel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sboClass property
        /// </summary>
        private sealed class SboClassProxy : ModelPropertyChange<IControllableStatusInfo, ISboClasses>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SboClassProxy(IControllableStatusInfo modelElement) : 
                    base(modelElement, "sboClass")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISboClasses Value
            {
                get
                {
                    return this.ModelElement.SboClass;
                }
                set
                {
                    this.ModelElement.SboClass = value;
                }
            }
        }
    }
}

