//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the SAV class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/SAV")]
    public class SAV : ModelElement, ISAV, IModelElement
    {
        
        /// <summary>
        /// The backing field for the InstMag property
        /// </summary>
        private IAnalogueValue _instMag;
        
        /// <summary>
        /// The backing field for the Q property
        /// </summary>
        private IQuality _q;
        
        /// <summary>
        /// The backing field for the T property
        /// </summary>
        private ITimeStamp _t;
        
        /// <summary>
        /// The backing field for the Units property
        /// </summary>
        private IUnits _units;
        
        /// <summary>
        /// The backing field for the SVC property
        /// </summary>
        private IScaledValueConfig _sVC;
        
        /// <summary>
        /// The backing field for the Min property
        /// </summary>
        private IAnalogueValue _min;
        
        /// <summary>
        /// The backing field for the Max property
        /// </summary>
        private IAnalogueValue _max;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The instMag property
        /// </summary>
        [XmlElementNameAttribute("instMag")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue InstMag
        {
            get
            {
                return this._instMag;
            }
            set
            {
                if ((this._instMag != value))
                {
                    IAnalogueValue old = this._instMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstMagChanging(e);
                    this.OnPropertyChanging("InstMag", e);
                    this._instMag = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstMag;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstMag;
                    }
                    this.OnInstMagChanged(e);
                    this.OnPropertyChanged("InstMag", e);
                }
            }
        }
        
        /// <summary>
        /// The q property
        /// </summary>
        [XmlElementNameAttribute("q")]
        [XmlAttributeAttribute(true)]
        public virtual IQuality Q
        {
            get
            {
                return this._q;
            }
            set
            {
                if ((this._q != value))
                {
                    IQuality old = this._q;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQChanging(e);
                    this.OnPropertyChanging("Q", e);
                    this._q = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetQ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetQ;
                    }
                    this.OnQChanged(e);
                    this.OnPropertyChanged("Q", e);
                }
            }
        }
        
        /// <summary>
        /// The t property
        /// </summary>
        [XmlElementNameAttribute("t")]
        [XmlAttributeAttribute(true)]
        public virtual ITimeStamp T
        {
            get
            {
                return this._t;
            }
            set
            {
                if ((this._t != value))
                {
                    ITimeStamp old = this._t;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTChanging(e);
                    this.OnPropertyChanging("T", e);
                    this._t = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetT;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetT;
                    }
                    this.OnTChanged(e);
                    this.OnPropertyChanged("T", e);
                }
            }
        }
        
        /// <summary>
        /// The units property
        /// </summary>
        [XmlElementNameAttribute("units")]
        [XmlAttributeAttribute(true)]
        public virtual IUnits Units
        {
            get
            {
                return this._units;
            }
            set
            {
                if ((this._units != value))
                {
                    IUnits old = this._units;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitsChanging(e);
                    this.OnPropertyChanging("Units", e);
                    this._units = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnits;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnits;
                    }
                    this.OnUnitsChanged(e);
                    this.OnPropertyChanged("Units", e);
                }
            }
        }
        
        /// <summary>
        /// The sVC property
        /// </summary>
        [XmlElementNameAttribute("sVC")]
        [XmlAttributeAttribute(true)]
        public virtual IScaledValueConfig SVC
        {
            get
            {
                return this._sVC;
            }
            set
            {
                if ((this._sVC != value))
                {
                    IScaledValueConfig old = this._sVC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSVCChanging(e);
                    this.OnPropertyChanging("SVC", e);
                    this._sVC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSVC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSVC;
                    }
                    this.OnSVCChanged(e);
                    this.OnPropertyChanged("SVC", e);
                }
            }
        }
        
        /// <summary>
        /// The min property
        /// </summary>
        [XmlElementNameAttribute("min")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue Min
        {
            get
            {
                return this._min;
            }
            set
            {
                if ((this._min != value))
                {
                    IAnalogueValue old = this._min;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinChanging(e);
                    this.OnPropertyChanging("Min", e);
                    this._min = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMin;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMin;
                    }
                    this.OnMinChanged(e);
                    this.OnPropertyChanged("Min", e);
                }
            }
        }
        
        /// <summary>
        /// The max property
        /// </summary>
        [XmlElementNameAttribute("max")]
        [XmlAttributeAttribute(true)]
        public virtual IAnalogueValue Max
        {
            get
            {
                return this._max;
            }
            set
            {
                if ((this._max != value))
                {
                    IAnalogueValue old = this._max;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxChanging(e);
                    this.OnPropertyChanging("Max", e);
                    this._max = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMax;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMax;
                    }
                    this.OnMaxChanged(e);
                    this.OnPropertyChanged("Max", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SAVReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/SAV")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InstMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstMagChanging;
        
        /// <summary>
        /// Gets fired when the InstMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstMagChanged;
        
        /// <summary>
        /// Gets fired before the Q property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanging;
        
        /// <summary>
        /// Gets fired when the Q property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QChanged;
        
        /// <summary>
        /// Gets fired before the T property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanging;
        
        /// <summary>
        /// Gets fired when the T property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TChanged;
        
        /// <summary>
        /// Gets fired before the Units property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanging;
        
        /// <summary>
        /// Gets fired when the Units property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitsChanged;
        
        /// <summary>
        /// Gets fired before the SVC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanging;
        
        /// <summary>
        /// Gets fired when the SVC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SVCChanged;
        
        /// <summary>
        /// Gets fired before the Min property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinChanging;
        
        /// <summary>
        /// Gets fired when the Min property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinChanged;
        
        /// <summary>
        /// Gets fired before the Max property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxChanging;
        
        /// <summary>
        /// Gets fired when the Max property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxChanged;
        
        /// <summary>
        /// Raises the InstMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstMag property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstMag(object sender, System.EventArgs eventArgs)
        {
            this.InstMag = null;
        }
        
        /// <summary>
        /// Raises the QChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Q property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetQ(object sender, System.EventArgs eventArgs)
        {
            this.Q = null;
        }
        
        /// <summary>
        /// Raises the TChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the T property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetT(object sender, System.EventArgs eventArgs)
        {
            this.T = null;
        }
        
        /// <summary>
        /// Raises the UnitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Units property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnits(object sender, System.EventArgs eventArgs)
        {
            this.Units = null;
        }
        
        /// <summary>
        /// Raises the SVCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SVCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSVCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SVCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SVC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSVC(object sender, System.EventArgs eventArgs)
        {
            this.SVC = null;
        }
        
        /// <summary>
        /// Raises the MinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Min property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMin(object sender, System.EventArgs eventArgs)
        {
            this.Min = null;
        }
        
        /// <summary>
        /// Raises the MaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Max property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMax(object sender, System.EventArgs eventArgs)
        {
            this.Max = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTMAG"))
            {
                this.InstMag = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "Q"))
            {
                this.Q = ((IQuality)(value));
                return;
            }
            if ((feature == "T"))
            {
                this.T = ((ITimeStamp)(value));
                return;
            }
            if ((feature == "UNITS"))
            {
                this.Units = ((IUnits)(value));
                return;
            }
            if ((feature == "SVC"))
            {
                this.SVC = ((IScaledValueConfig)(value));
                return;
            }
            if ((feature == "MIN"))
            {
                this.Min = ((IAnalogueValue)(value));
                return;
            }
            if ((feature == "MAX"))
            {
                this.Max = ((IAnalogueValue)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "InstMag"))
            {
                return new InstMagProxy(this);
            }
            if ((attribute == "Q"))
            {
                return new QProxy(this);
            }
            if ((attribute == "T"))
            {
                return new TProxy(this);
            }
            if ((attribute == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((attribute == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((attribute == "Min"))
            {
                return new MinProxy(this);
            }
            if ((attribute == "Max"))
            {
                return new MaxProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "InstMag"))
            {
                return new InstMagProxy(this);
            }
            if ((reference == "Q"))
            {
                return new QProxy(this);
            }
            if ((reference == "T"))
            {
                return new TProxy(this);
            }
            if ((reference == "Units"))
            {
                return new UnitsProxy(this);
            }
            if ((reference == "SVC"))
            {
                return new SVCProxy(this);
            }
            if ((reference == "Min"))
            {
                return new MinProxy(this);
            }
            if ((reference == "Max"))
            {
                return new MaxProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/SAV")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SAV class
        /// </summary>
        public class SAVReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SAV _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SAVReferencedElementsCollection(SAV parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InstMag != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Q != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.T != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Units != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SVC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Min != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Max != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InstMagChanged += this.PropagateValueChanges;
                this._parent.QChanged += this.PropagateValueChanges;
                this._parent.TChanged += this.PropagateValueChanges;
                this._parent.UnitsChanged += this.PropagateValueChanges;
                this._parent.SVCChanged += this.PropagateValueChanges;
                this._parent.MinChanged += this.PropagateValueChanges;
                this._parent.MaxChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InstMagChanged -= this.PropagateValueChanges;
                this._parent.QChanged -= this.PropagateValueChanges;
                this._parent.TChanged -= this.PropagateValueChanges;
                this._parent.UnitsChanged -= this.PropagateValueChanges;
                this._parent.SVCChanged -= this.PropagateValueChanges;
                this._parent.MinChanged -= this.PropagateValueChanges;
                this._parent.MaxChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InstMag == null))
                {
                    IAnalogueValue instMagCasted = item.As<IAnalogueValue>();
                    if ((instMagCasted != null))
                    {
                        this._parent.InstMag = instMagCasted;
                        return;
                    }
                }
                if ((this._parent.Q == null))
                {
                    IQuality qCasted = item.As<IQuality>();
                    if ((qCasted != null))
                    {
                        this._parent.Q = qCasted;
                        return;
                    }
                }
                if ((this._parent.T == null))
                {
                    ITimeStamp tCasted = item.As<ITimeStamp>();
                    if ((tCasted != null))
                    {
                        this._parent.T = tCasted;
                        return;
                    }
                }
                if ((this._parent.Units == null))
                {
                    IUnits unitsCasted = item.As<IUnits>();
                    if ((unitsCasted != null))
                    {
                        this._parent.Units = unitsCasted;
                        return;
                    }
                }
                if ((this._parent.SVC == null))
                {
                    IScaledValueConfig sVCCasted = item.As<IScaledValueConfig>();
                    if ((sVCCasted != null))
                    {
                        this._parent.SVC = sVCCasted;
                        return;
                    }
                }
                if ((this._parent.Min == null))
                {
                    IAnalogueValue minCasted = item.As<IAnalogueValue>();
                    if ((minCasted != null))
                    {
                        this._parent.Min = minCasted;
                        return;
                    }
                }
                if ((this._parent.Max == null))
                {
                    IAnalogueValue maxCasted = item.As<IAnalogueValue>();
                    if ((maxCasted != null))
                    {
                        this._parent.Max = maxCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InstMag = null;
                this._parent.Q = null;
                this._parent.T = null;
                this._parent.Units = null;
                this._parent.SVC = null;
                this._parent.Min = null;
                this._parent.Max = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InstMag))
                {
                    return true;
                }
                if ((item == this._parent.Q))
                {
                    return true;
                }
                if ((item == this._parent.T))
                {
                    return true;
                }
                if ((item == this._parent.Units))
                {
                    return true;
                }
                if ((item == this._parent.SVC))
                {
                    return true;
                }
                if ((item == this._parent.Min))
                {
                    return true;
                }
                if ((item == this._parent.Max))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InstMag != null))
                {
                    array[arrayIndex] = this._parent.InstMag;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Q != null))
                {
                    array[arrayIndex] = this._parent.Q;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.T != null))
                {
                    array[arrayIndex] = this._parent.T;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Units != null))
                {
                    array[arrayIndex] = this._parent.Units;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SVC != null))
                {
                    array[arrayIndex] = this._parent.SVC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Min != null))
                {
                    array[arrayIndex] = this._parent.Min;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Max != null))
                {
                    array[arrayIndex] = this._parent.Max;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InstMag == item))
                {
                    this._parent.InstMag = null;
                    return true;
                }
                if ((this._parent.Q == item))
                {
                    this._parent.Q = null;
                    return true;
                }
                if ((this._parent.T == item))
                {
                    this._parent.T = null;
                    return true;
                }
                if ((this._parent.Units == item))
                {
                    this._parent.Units = null;
                    return true;
                }
                if ((this._parent.SVC == item))
                {
                    this._parent.SVC = null;
                    return true;
                }
                if ((this._parent.Min == item))
                {
                    this._parent.Min = null;
                    return true;
                }
                if ((this._parent.Max == item))
                {
                    this._parent.Max = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InstMag).Concat(this._parent.Q).Concat(this._parent.T).Concat(this._parent.Units).Concat(this._parent.SVC).Concat(this._parent.Min).Concat(this._parent.Max).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instMag property
        /// </summary>
        private sealed class InstMagProxy : ModelPropertyChange<ISAV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstMagProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.InstMag;
                }
                set
                {
                    this.ModelElement.InstMag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstMagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstMagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the q property
        /// </summary>
        private sealed class QProxy : ModelPropertyChange<ISAV, IQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IQuality Value
            {
                get
                {
                    return this.ModelElement.Q;
                }
                set
                {
                    this.ModelElement.Q = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the t property
        /// </summary>
        private sealed class TProxy : ModelPropertyChange<ISAV, ITimeStamp>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeStamp Value
            {
                get
                {
                    return this.ModelElement.T;
                }
                set
                {
                    this.ModelElement.T = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the units property
        /// </summary>
        private sealed class UnitsProxy : ModelPropertyChange<ISAV, IUnits>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitsProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnits Value
            {
                get
                {
                    return this.ModelElement.Units;
                }
                set
                {
                    this.ModelElement.Units = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sVC property
        /// </summary>
        private sealed class SVCProxy : ModelPropertyChange<ISAV, IScaledValueConfig>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SVCProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScaledValueConfig Value
            {
                get
                {
                    return this.ModelElement.SVC;
                }
                set
                {
                    this.ModelElement.SVC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SVCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the min property
        /// </summary>
        private sealed class MinProxy : ModelPropertyChange<ISAV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.Min;
                }
                set
                {
                    this.ModelElement.Min = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the max property
        /// </summary>
        private sealed class MaxProxy : ModelPropertyChange<ISAV, IAnalogueValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxProxy(ISAV modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalogueValue Value
            {
                get
                {
                    return this.ModelElement.Max;
                }
                set
                {
                    this.ModelElement.Max = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxChanged -= handler;
            }
        }
    }
}

