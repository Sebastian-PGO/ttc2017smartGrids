//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;

namespace TTC2017.SmartGrids.SubstationStandard.Dataclasses
{
    
    
    /// <summary>
    /// The default implementation of the DetailQual class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/dataclasses")]
    [XmlNamespacePrefixAttribute("data")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
        "taclasses/DetailQual")]
    public class DetailQual : ModelElement, IDetailQual, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Overflow property
        /// </summary>
        private Nullable<bool> _overflow;
        
        /// <summary>
        /// The backing field for the OutOfRange property
        /// </summary>
        private Nullable<bool> _outOfRange;
        
        /// <summary>
        /// The backing field for the BadReference property
        /// </summary>
        private Nullable<bool> _badReference;
        
        /// <summary>
        /// The backing field for the Oscillatory property
        /// </summary>
        private Nullable<bool> _oscillatory;
        
        /// <summary>
        /// The backing field for the Failure property
        /// </summary>
        private Nullable<bool> _failure;
        
        /// <summary>
        /// The backing field for the OldData property
        /// </summary>
        private Nullable<bool> _oldData;
        
        /// <summary>
        /// The backing field for the Inconsistent property
        /// </summary>
        private Nullable<bool> _inconsistent;
        
        /// <summary>
        /// The backing field for the Inaccurate property
        /// </summary>
        private Nullable<bool> _inaccurate;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The overflow property
        /// </summary>
        [XmlElementNameAttribute("overflow")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Overflow
        {
            get
            {
                return this._overflow;
            }
            set
            {
                if ((this._overflow != value))
                {
                    Nullable<bool> old = this._overflow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverflowChanging(e);
                    this.OnPropertyChanging("Overflow", e);
                    this._overflow = value;
                    this.OnOverflowChanged(e);
                    this.OnPropertyChanged("Overflow", e);
                }
            }
        }
        
        /// <summary>
        /// The outOfRange property
        /// </summary>
        [XmlElementNameAttribute("outOfRange")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> OutOfRange
        {
            get
            {
                return this._outOfRange;
            }
            set
            {
                if ((this._outOfRange != value))
                {
                    Nullable<bool> old = this._outOfRange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutOfRangeChanging(e);
                    this.OnPropertyChanging("OutOfRange", e);
                    this._outOfRange = value;
                    this.OnOutOfRangeChanged(e);
                    this.OnPropertyChanged("OutOfRange", e);
                }
            }
        }
        
        /// <summary>
        /// The badReference property
        /// </summary>
        [XmlElementNameAttribute("badReference")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> BadReference
        {
            get
            {
                return this._badReference;
            }
            set
            {
                if ((this._badReference != value))
                {
                    Nullable<bool> old = this._badReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBadReferenceChanging(e);
                    this.OnPropertyChanging("BadReference", e);
                    this._badReference = value;
                    this.OnBadReferenceChanged(e);
                    this.OnPropertyChanged("BadReference", e);
                }
            }
        }
        
        /// <summary>
        /// The oscillatory property
        /// </summary>
        [XmlElementNameAttribute("oscillatory")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Oscillatory
        {
            get
            {
                return this._oscillatory;
            }
            set
            {
                if ((this._oscillatory != value))
                {
                    Nullable<bool> old = this._oscillatory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOscillatoryChanging(e);
                    this.OnPropertyChanging("Oscillatory", e);
                    this._oscillatory = value;
                    this.OnOscillatoryChanged(e);
                    this.OnPropertyChanged("Oscillatory", e);
                }
            }
        }
        
        /// <summary>
        /// The failure property
        /// </summary>
        [XmlElementNameAttribute("failure")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Failure
        {
            get
            {
                return this._failure;
            }
            set
            {
                if ((this._failure != value))
                {
                    Nullable<bool> old = this._failure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailureChanging(e);
                    this.OnPropertyChanging("Failure", e);
                    this._failure = value;
                    this.OnFailureChanged(e);
                    this.OnPropertyChanged("Failure", e);
                }
            }
        }
        
        /// <summary>
        /// The oldData property
        /// </summary>
        [XmlElementNameAttribute("oldData")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> OldData
        {
            get
            {
                return this._oldData;
            }
            set
            {
                if ((this._oldData != value))
                {
                    Nullable<bool> old = this._oldData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOldDataChanging(e);
                    this.OnPropertyChanging("OldData", e);
                    this._oldData = value;
                    this.OnOldDataChanged(e);
                    this.OnPropertyChanged("OldData", e);
                }
            }
        }
        
        /// <summary>
        /// The inconsistent property
        /// </summary>
        [XmlElementNameAttribute("inconsistent")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Inconsistent
        {
            get
            {
                return this._inconsistent;
            }
            set
            {
                if ((this._inconsistent != value))
                {
                    Nullable<bool> old = this._inconsistent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInconsistentChanging(e);
                    this.OnPropertyChanging("Inconsistent", e);
                    this._inconsistent = value;
                    this.OnInconsistentChanged(e);
                    this.OnPropertyChanged("Inconsistent", e);
                }
            }
        }
        
        /// <summary>
        /// The inaccurate property
        /// </summary>
        [XmlElementNameAttribute("inaccurate")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Inaccurate
        {
            get
            {
                return this._inaccurate;
            }
            set
            {
                if ((this._inaccurate != value))
                {
                    Nullable<bool> old = this._inaccurate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInaccurateChanging(e);
                    this.OnPropertyChanging("Inaccurate", e);
                    this._inaccurate = value;
                    this.OnInaccurateChanged(e);
                    this.OnPropertyChanged("Inaccurate", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                            "taclasses/DetailQual")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Overflow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverflowChanging;
        
        /// <summary>
        /// Gets fired when the Overflow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverflowChanged;
        
        /// <summary>
        /// Gets fired before the OutOfRange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanging;
        
        /// <summary>
        /// Gets fired when the OutOfRange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanged;
        
        /// <summary>
        /// Gets fired before the BadReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BadReferenceChanging;
        
        /// <summary>
        /// Gets fired when the BadReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BadReferenceChanged;
        
        /// <summary>
        /// Gets fired before the Oscillatory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OscillatoryChanging;
        
        /// <summary>
        /// Gets fired when the Oscillatory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OscillatoryChanged;
        
        /// <summary>
        /// Gets fired before the Failure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanging;
        
        /// <summary>
        /// Gets fired when the Failure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanged;
        
        /// <summary>
        /// Gets fired before the OldData property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldDataChanging;
        
        /// <summary>
        /// Gets fired when the OldData property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldDataChanged;
        
        /// <summary>
        /// Gets fired before the Inconsistent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InconsistentChanging;
        
        /// <summary>
        /// Gets fired when the Inconsistent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InconsistentChanged;
        
        /// <summary>
        /// Gets fired before the Inaccurate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InaccurateChanging;
        
        /// <summary>
        /// Gets fired when the Inaccurate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InaccurateChanged;
        
        /// <summary>
        /// Raises the OverflowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverflowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverflowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverflowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverflowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverflowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutOfRangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfRangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfRangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutOfRangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfRangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfRangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BadReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBadReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BadReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BadReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBadReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BadReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OscillatoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOscillatoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OscillatoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OscillatoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOscillatoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OscillatoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OldDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OldDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InconsistentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInconsistentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InconsistentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InconsistentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInconsistentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InconsistentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InaccurateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInaccurateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InaccurateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InaccurateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInaccurateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InaccurateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OVERFLOW"))
            {
                return this.Overflow;
            }
            if ((attribute == "OUTOFRANGE"))
            {
                return this.OutOfRange;
            }
            if ((attribute == "BADREFERENCE"))
            {
                return this.BadReference;
            }
            if ((attribute == "OSCILLATORY"))
            {
                return this.Oscillatory;
            }
            if ((attribute == "FAILURE"))
            {
                return this.Failure;
            }
            if ((attribute == "OLDDATA"))
            {
                return this.OldData;
            }
            if ((attribute == "INCONSISTENT"))
            {
                return this.Inconsistent;
            }
            if ((attribute == "INACCURATE"))
            {
                return this.Inaccurate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OVERFLOW"))
            {
                this.Overflow = ((bool)(value));
                return;
            }
            if ((feature == "OUTOFRANGE"))
            {
                this.OutOfRange = ((bool)(value));
                return;
            }
            if ((feature == "BADREFERENCE"))
            {
                this.BadReference = ((bool)(value));
                return;
            }
            if ((feature == "OSCILLATORY"))
            {
                this.Oscillatory = ((bool)(value));
                return;
            }
            if ((feature == "FAILURE"))
            {
                this.Failure = ((bool)(value));
                return;
            }
            if ((feature == "OLDDATA"))
            {
                this.OldData = ((bool)(value));
                return;
            }
            if ((feature == "INCONSISTENT"))
            {
                this.Inconsistent = ((bool)(value));
                return;
            }
            if ((feature == "INACCURATE"))
            {
                this.Inaccurate = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//Da" +
                        "taclasses/DetailQual")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overflow property
        /// </summary>
        private sealed class OverflowProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverflowProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Overflow;
                }
                set
                {
                    this.ModelElement.Overflow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverflowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverflowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outOfRange property
        /// </summary>
        private sealed class OutOfRangeProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutOfRangeProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.OutOfRange;
                }
                set
                {
                    this.ModelElement.OutOfRange = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutOfRangeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutOfRangeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the badReference property
        /// </summary>
        private sealed class BadReferenceProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BadReferenceProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.BadReference;
                }
                set
                {
                    this.ModelElement.BadReference = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BadReferenceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BadReferenceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oscillatory property
        /// </summary>
        private sealed class OscillatoryProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OscillatoryProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Oscillatory;
                }
                set
                {
                    this.ModelElement.Oscillatory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OscillatoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OscillatoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failure property
        /// </summary>
        private sealed class FailureProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailureProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Failure;
                }
                set
                {
                    this.ModelElement.Failure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oldData property
        /// </summary>
        private sealed class OldDataProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OldDataProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.OldData;
                }
                set
                {
                    this.ModelElement.OldData = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OldDataChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OldDataChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inconsistent property
        /// </summary>
        private sealed class InconsistentProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InconsistentProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Inconsistent;
                }
                set
                {
                    this.ModelElement.Inconsistent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InconsistentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InconsistentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inaccurate property
        /// </summary>
        private sealed class InaccurateProxy : ModelPropertyChange<IDetailQual, Nullable<bool>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InaccurateProxy(IDetailQual modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<bool> Value
            {
                get
                {
                    return this.ModelElement.Inaccurate;
                }
                set
                {
                    this.ModelElement.Inaccurate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InaccurateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InaccurateChanged -= handler;
            }
        }
    }
}

