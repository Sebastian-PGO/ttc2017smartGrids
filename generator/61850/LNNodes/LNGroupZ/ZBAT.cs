//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ
{
    
    
    /// <summary>
    /// The default implementation of the ZBAT class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pZ")]
    [XmlNamespacePrefixAttribute("groupz")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupZ/ZBAT")]
    public class ZBAT : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ.GroupZ, IZBAT, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OpTmh property
        /// </summary>
        private IMV _opTmh;
        
        /// <summary>
        /// The backing field for the Vol property
        /// </summary>
        private IMV _vol;
        
        /// <summary>
        /// The backing field for the VolChgRte property
        /// </summary>
        private IMV _volChgRte;
        
        /// <summary>
        /// The backing field for the Amp property
        /// </summary>
        private IMV _amp;
        
        /// <summary>
        /// The backing field for the BatTest property
        /// </summary>
        private ISPC _batTest;
        
        /// <summary>
        /// The backing field for the TestRsl property
        /// </summary>
        private ISPC _testRsl;
        
        /// <summary>
        /// The backing field for the BatHi property
        /// </summary>
        private ISPC _batHi;
        
        /// <summary>
        /// The backing field for the BatLo property
        /// </summary>
        private ISPC _batLo;
        
        /// <summary>
        /// The backing field for the LoBatVal property
        /// </summary>
        private IASG _loBatVal;
        
        /// <summary>
        /// The backing field for the HiBatVal property
        /// </summary>
        private IASG _hiBatVal;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV OpTmh
        {
            get
            {
                return this._opTmh;
            }
            set
            {
                if ((this._opTmh != value))
                {
                    IMV old = this._opTmh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpTmhChanging(e);
                    this.OnPropertyChanging("OpTmh", e);
                    this._opTmh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpTmh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpTmh;
                    }
                    this.OnOpTmhChanged(e);
                    this.OnPropertyChanged("OpTmh", e);
                }
            }
        }
        
        /// <summary>
        /// The Vol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Vol
        {
            get
            {
                return this._vol;
            }
            set
            {
                if ((this._vol != value))
                {
                    IMV old = this._vol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolChanging(e);
                    this.OnPropertyChanging("Vol", e);
                    this._vol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVol;
                    }
                    this.OnVolChanged(e);
                    this.OnPropertyChanged("Vol", e);
                }
            }
        }
        
        /// <summary>
        /// The VolChgRte property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV VolChgRte
        {
            get
            {
                return this._volChgRte;
            }
            set
            {
                if ((this._volChgRte != value))
                {
                    IMV old = this._volChgRte;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVolChgRteChanging(e);
                    this.OnPropertyChanging("VolChgRte", e);
                    this._volChgRte = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVolChgRte;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVolChgRte;
                    }
                    this.OnVolChgRteChanged(e);
                    this.OnPropertyChanged("VolChgRte", e);
                }
            }
        }
        
        /// <summary>
        /// The Amp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Amp
        {
            get
            {
                return this._amp;
            }
            set
            {
                if ((this._amp != value))
                {
                    IMV old = this._amp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpChanging(e);
                    this.OnPropertyChanging("Amp", e);
                    this._amp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAmp;
                    }
                    this.OnAmpChanged(e);
                    this.OnPropertyChanged("Amp", e);
                }
            }
        }
        
        /// <summary>
        /// The BatTest property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BatTest
        {
            get
            {
                return this._batTest;
            }
            set
            {
                if ((this._batTest != value))
                {
                    ISPC old = this._batTest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBatTestChanging(e);
                    this.OnPropertyChanging("BatTest", e);
                    this._batTest = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBatTest;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBatTest;
                    }
                    this.OnBatTestChanged(e);
                    this.OnPropertyChanged("BatTest", e);
                }
            }
        }
        
        /// <summary>
        /// The TestRsl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC TestRsl
        {
            get
            {
                return this._testRsl;
            }
            set
            {
                if ((this._testRsl != value))
                {
                    ISPC old = this._testRsl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTestRslChanging(e);
                    this.OnPropertyChanging("TestRsl", e);
                    this._testRsl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTestRsl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTestRsl;
                    }
                    this.OnTestRslChanged(e);
                    this.OnPropertyChanged("TestRsl", e);
                }
            }
        }
        
        /// <summary>
        /// The BatHi property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BatHi
        {
            get
            {
                return this._batHi;
            }
            set
            {
                if ((this._batHi != value))
                {
                    ISPC old = this._batHi;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBatHiChanging(e);
                    this.OnPropertyChanging("BatHi", e);
                    this._batHi = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBatHi;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBatHi;
                    }
                    this.OnBatHiChanged(e);
                    this.OnPropertyChanged("BatHi", e);
                }
            }
        }
        
        /// <summary>
        /// The BatLo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BatLo
        {
            get
            {
                return this._batLo;
            }
            set
            {
                if ((this._batLo != value))
                {
                    ISPC old = this._batLo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBatLoChanging(e);
                    this.OnPropertyChanging("BatLo", e);
                    this._batLo = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBatLo;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBatLo;
                    }
                    this.OnBatLoChanged(e);
                    this.OnPropertyChanged("BatLo", e);
                }
            }
        }
        
        /// <summary>
        /// The LoBatVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LoBatVal
        {
            get
            {
                return this._loBatVal;
            }
            set
            {
                if ((this._loBatVal != value))
                {
                    IASG old = this._loBatVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoBatValChanging(e);
                    this.OnPropertyChanging("LoBatVal", e);
                    this._loBatVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoBatVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoBatVal;
                    }
                    this.OnLoBatValChanged(e);
                    this.OnPropertyChanged("LoBatVal", e);
                }
            }
        }
        
        /// <summary>
        /// The HiBatVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HiBatVal
        {
            get
            {
                return this._hiBatVal;
            }
            set
            {
                if ((this._hiBatVal != value))
                {
                    IASG old = this._hiBatVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiBatValChanging(e);
                    this.OnPropertyChanging("HiBatVal", e);
                    this._hiBatVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiBatVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiBatVal;
                    }
                    this.OnHiBatValChanged(e);
                    this.OnPropertyChanged("HiBatVal", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ZBATReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupZ/ZBAT")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the Vol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChanging;
        
        /// <summary>
        /// Gets fired when the Vol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChanged;
        
        /// <summary>
        /// Gets fired before the VolChgRte property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChgRteChanging;
        
        /// <summary>
        /// Gets fired when the VolChgRte property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VolChgRteChanged;
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the BatTest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatTestChanging;
        
        /// <summary>
        /// Gets fired when the BatTest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatTestChanged;
        
        /// <summary>
        /// Gets fired before the TestRsl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestRslChanging;
        
        /// <summary>
        /// Gets fired when the TestRsl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestRslChanged;
        
        /// <summary>
        /// Gets fired before the BatHi property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatHiChanging;
        
        /// <summary>
        /// Gets fired when the BatHi property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatHiChanged;
        
        /// <summary>
        /// Gets fired before the BatLo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatLoChanging;
        
        /// <summary>
        /// Gets fired when the BatLo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BatLoChanged;
        
        /// <summary>
        /// Gets fired before the LoBatVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoBatValChanging;
        
        /// <summary>
        /// Gets fired when the LoBatVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoBatValChanged;
        
        /// <summary>
        /// Gets fired before the HiBatVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiBatValChanging;
        
        /// <summary>
        /// Gets fired when the HiBatVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiBatValChanged;
        
        /// <summary>
        /// Raises the OpTmhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpTmh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpTmh(object sender, System.EventArgs eventArgs)
        {
            this.OpTmh = null;
        }
        
        /// <summary>
        /// Raises the VolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Vol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVol(object sender, System.EventArgs eventArgs)
        {
            this.Vol = null;
        }
        
        /// <summary>
        /// Raises the VolChgRteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChgRteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChgRteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolChgRteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolChgRteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VolChgRteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VolChgRte property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVolChgRte(object sender, System.EventArgs eventArgs)
        {
            this.VolChgRte = null;
        }
        
        /// <summary>
        /// Raises the AmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Amp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAmp(object sender, System.EventArgs eventArgs)
        {
            this.Amp = null;
        }
        
        /// <summary>
        /// Raises the BatTestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatTestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BatTestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatTestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BatTest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBatTest(object sender, System.EventArgs eventArgs)
        {
            this.BatTest = null;
        }
        
        /// <summary>
        /// Raises the TestRslChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestRslChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestRslChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TestRslChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestRslChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestRslChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TestRsl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTestRsl(object sender, System.EventArgs eventArgs)
        {
            this.TestRsl = null;
        }
        
        /// <summary>
        /// Raises the BatHiChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatHiChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatHiChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BatHiChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatHiChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatHiChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BatHi property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBatHi(object sender, System.EventArgs eventArgs)
        {
            this.BatHi = null;
        }
        
        /// <summary>
        /// Raises the BatLoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatLoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatLoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BatLoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBatLoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BatLoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BatLo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBatLo(object sender, System.EventArgs eventArgs)
        {
            this.BatLo = null;
        }
        
        /// <summary>
        /// Raises the LoBatValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoBatValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoBatValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoBatValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoBatValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoBatValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoBatVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoBatVal(object sender, System.EventArgs eventArgs)
        {
            this.LoBatVal = null;
        }
        
        /// <summary>
        /// Raises the HiBatValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiBatValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiBatValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiBatValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiBatValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiBatValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiBatVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiBatVal(object sender, System.EventArgs eventArgs)
        {
            this.HiBatVal = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPTMH"))
            {
                this.OpTmh = ((IMV)(value));
                return;
            }
            if ((feature == "VOL"))
            {
                this.Vol = ((IMV)(value));
                return;
            }
            if ((feature == "VOLCHGRTE"))
            {
                this.VolChgRte = ((IMV)(value));
                return;
            }
            if ((feature == "AMP"))
            {
                this.Amp = ((IMV)(value));
                return;
            }
            if ((feature == "BATTEST"))
            {
                this.BatTest = ((ISPC)(value));
                return;
            }
            if ((feature == "TESTRSL"))
            {
                this.TestRsl = ((ISPC)(value));
                return;
            }
            if ((feature == "BATHI"))
            {
                this.BatHi = ((ISPC)(value));
                return;
            }
            if ((feature == "BATLO"))
            {
                this.BatLo = ((ISPC)(value));
                return;
            }
            if ((feature == "LOBATVAL"))
            {
                this.LoBatVal = ((IASG)(value));
                return;
            }
            if ((feature == "HIBATVAL"))
            {
                this.HiBatVal = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((attribute == "Vol"))
            {
                return new VolProxy(this);
            }
            if ((attribute == "VolChgRte"))
            {
                return new VolChgRteProxy(this);
            }
            if ((attribute == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((attribute == "BatTest"))
            {
                return new BatTestProxy(this);
            }
            if ((attribute == "TestRsl"))
            {
                return new TestRslProxy(this);
            }
            if ((attribute == "BatHi"))
            {
                return new BatHiProxy(this);
            }
            if ((attribute == "BatLo"))
            {
                return new BatLoProxy(this);
            }
            if ((attribute == "LoBatVal"))
            {
                return new LoBatValProxy(this);
            }
            if ((attribute == "HiBatVal"))
            {
                return new HiBatValProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((reference == "Vol"))
            {
                return new VolProxy(this);
            }
            if ((reference == "VolChgRte"))
            {
                return new VolChgRteProxy(this);
            }
            if ((reference == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((reference == "BatTest"))
            {
                return new BatTestProxy(this);
            }
            if ((reference == "TestRsl"))
            {
                return new TestRslProxy(this);
            }
            if ((reference == "BatHi"))
            {
                return new BatHiProxy(this);
            }
            if ((reference == "BatLo"))
            {
                return new BatLoProxy(this);
            }
            if ((reference == "LoBatVal"))
            {
                return new LoBatValProxy(this);
            }
            if ((reference == "HiBatVal"))
            {
                return new HiBatValProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupZ/ZBAT")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ZBAT class
        /// </summary>
        public class ZBATReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ZBAT _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ZBATReferencedElementsCollection(ZBAT parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpTmh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Vol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VolChgRte != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Amp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BatTest != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TestRsl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BatHi != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BatLo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoBatVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiBatVal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpTmhChanged += this.PropagateValueChanges;
                this._parent.VolChanged += this.PropagateValueChanges;
                this._parent.VolChgRteChanged += this.PropagateValueChanges;
                this._parent.AmpChanged += this.PropagateValueChanges;
                this._parent.BatTestChanged += this.PropagateValueChanges;
                this._parent.TestRslChanged += this.PropagateValueChanges;
                this._parent.BatHiChanged += this.PropagateValueChanges;
                this._parent.BatLoChanged += this.PropagateValueChanges;
                this._parent.LoBatValChanged += this.PropagateValueChanges;
                this._parent.HiBatValChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpTmhChanged -= this.PropagateValueChanges;
                this._parent.VolChanged -= this.PropagateValueChanges;
                this._parent.VolChgRteChanged -= this.PropagateValueChanges;
                this._parent.AmpChanged -= this.PropagateValueChanges;
                this._parent.BatTestChanged -= this.PropagateValueChanges;
                this._parent.TestRslChanged -= this.PropagateValueChanges;
                this._parent.BatHiChanged -= this.PropagateValueChanges;
                this._parent.BatLoChanged -= this.PropagateValueChanges;
                this._parent.LoBatValChanged -= this.PropagateValueChanges;
                this._parent.HiBatValChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpTmh == null))
                {
                    IMV opTmhCasted = item.As<IMV>();
                    if ((opTmhCasted != null))
                    {
                        this._parent.OpTmh = opTmhCasted;
                        return;
                    }
                }
                if ((this._parent.Vol == null))
                {
                    IMV volCasted = item.As<IMV>();
                    if ((volCasted != null))
                    {
                        this._parent.Vol = volCasted;
                        return;
                    }
                }
                if ((this._parent.VolChgRte == null))
                {
                    IMV volChgRteCasted = item.As<IMV>();
                    if ((volChgRteCasted != null))
                    {
                        this._parent.VolChgRte = volChgRteCasted;
                        return;
                    }
                }
                if ((this._parent.Amp == null))
                {
                    IMV ampCasted = item.As<IMV>();
                    if ((ampCasted != null))
                    {
                        this._parent.Amp = ampCasted;
                        return;
                    }
                }
                if ((this._parent.BatTest == null))
                {
                    ISPC batTestCasted = item.As<ISPC>();
                    if ((batTestCasted != null))
                    {
                        this._parent.BatTest = batTestCasted;
                        return;
                    }
                }
                if ((this._parent.TestRsl == null))
                {
                    ISPC testRslCasted = item.As<ISPC>();
                    if ((testRslCasted != null))
                    {
                        this._parent.TestRsl = testRslCasted;
                        return;
                    }
                }
                if ((this._parent.BatHi == null))
                {
                    ISPC batHiCasted = item.As<ISPC>();
                    if ((batHiCasted != null))
                    {
                        this._parent.BatHi = batHiCasted;
                        return;
                    }
                }
                if ((this._parent.BatLo == null))
                {
                    ISPC batLoCasted = item.As<ISPC>();
                    if ((batLoCasted != null))
                    {
                        this._parent.BatLo = batLoCasted;
                        return;
                    }
                }
                if ((this._parent.LoBatVal == null))
                {
                    IASG loBatValCasted = item.As<IASG>();
                    if ((loBatValCasted != null))
                    {
                        this._parent.LoBatVal = loBatValCasted;
                        return;
                    }
                }
                if ((this._parent.HiBatVal == null))
                {
                    IASG hiBatValCasted = item.As<IASG>();
                    if ((hiBatValCasted != null))
                    {
                        this._parent.HiBatVal = hiBatValCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpTmh = null;
                this._parent.Vol = null;
                this._parent.VolChgRte = null;
                this._parent.Amp = null;
                this._parent.BatTest = null;
                this._parent.TestRsl = null;
                this._parent.BatHi = null;
                this._parent.BatLo = null;
                this._parent.LoBatVal = null;
                this._parent.HiBatVal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpTmh))
                {
                    return true;
                }
                if ((item == this._parent.Vol))
                {
                    return true;
                }
                if ((item == this._parent.VolChgRte))
                {
                    return true;
                }
                if ((item == this._parent.Amp))
                {
                    return true;
                }
                if ((item == this._parent.BatTest))
                {
                    return true;
                }
                if ((item == this._parent.TestRsl))
                {
                    return true;
                }
                if ((item == this._parent.BatHi))
                {
                    return true;
                }
                if ((item == this._parent.BatLo))
                {
                    return true;
                }
                if ((item == this._parent.LoBatVal))
                {
                    return true;
                }
                if ((item == this._parent.HiBatVal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpTmh != null))
                {
                    array[arrayIndex] = this._parent.OpTmh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Vol != null))
                {
                    array[arrayIndex] = this._parent.Vol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VolChgRte != null))
                {
                    array[arrayIndex] = this._parent.VolChgRte;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Amp != null))
                {
                    array[arrayIndex] = this._parent.Amp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BatTest != null))
                {
                    array[arrayIndex] = this._parent.BatTest;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TestRsl != null))
                {
                    array[arrayIndex] = this._parent.TestRsl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BatHi != null))
                {
                    array[arrayIndex] = this._parent.BatHi;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BatLo != null))
                {
                    array[arrayIndex] = this._parent.BatLo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoBatVal != null))
                {
                    array[arrayIndex] = this._parent.LoBatVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiBatVal != null))
                {
                    array[arrayIndex] = this._parent.HiBatVal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpTmh == item))
                {
                    this._parent.OpTmh = null;
                    return true;
                }
                if ((this._parent.Vol == item))
                {
                    this._parent.Vol = null;
                    return true;
                }
                if ((this._parent.VolChgRte == item))
                {
                    this._parent.VolChgRte = null;
                    return true;
                }
                if ((this._parent.Amp == item))
                {
                    this._parent.Amp = null;
                    return true;
                }
                if ((this._parent.BatTest == item))
                {
                    this._parent.BatTest = null;
                    return true;
                }
                if ((this._parent.TestRsl == item))
                {
                    this._parent.TestRsl = null;
                    return true;
                }
                if ((this._parent.BatHi == item))
                {
                    this._parent.BatHi = null;
                    return true;
                }
                if ((this._parent.BatLo == item))
                {
                    this._parent.BatLo = null;
                    return true;
                }
                if ((this._parent.LoBatVal == item))
                {
                    this._parent.LoBatVal = null;
                    return true;
                }
                if ((this._parent.HiBatVal == item))
                {
                    this._parent.HiBatVal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpTmh).Concat(this._parent.Vol).Concat(this._parent.VolChgRte).Concat(this._parent.Amp).Concat(this._parent.BatTest).Concat(this._parent.TestRsl).Concat(this._parent.BatHi).Concat(this._parent.BatLo).Concat(this._parent.LoBatVal).Concat(this._parent.HiBatVal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpTmh property
        /// </summary>
        private sealed class OpTmhProxy : ModelPropertyChange<IZBAT, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpTmhProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.OpTmh;
                }
                set
                {
                    this.ModelElement.OpTmh = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Vol property
        /// </summary>
        private sealed class VolProxy : ModelPropertyChange<IZBAT, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Vol;
                }
                set
                {
                    this.ModelElement.Vol = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VolChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VolChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VolChgRte property
        /// </summary>
        private sealed class VolChgRteProxy : ModelPropertyChange<IZBAT, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VolChgRteProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.VolChgRte;
                }
                set
                {
                    this.ModelElement.VolChgRte = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VolChgRteChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VolChgRteChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Amp property
        /// </summary>
        private sealed class AmpProxy : ModelPropertyChange<IZBAT, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmpProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Amp;
                }
                set
                {
                    this.ModelElement.Amp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AmpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AmpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BatTest property
        /// </summary>
        private sealed class BatTestProxy : ModelPropertyChange<IZBAT, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BatTestProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BatTest;
                }
                set
                {
                    this.ModelElement.BatTest = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatTestChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatTestChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TestRsl property
        /// </summary>
        private sealed class TestRslProxy : ModelPropertyChange<IZBAT, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TestRslProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.TestRsl;
                }
                set
                {
                    this.ModelElement.TestRsl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TestRslChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TestRslChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BatHi property
        /// </summary>
        private sealed class BatHiProxy : ModelPropertyChange<IZBAT, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BatHiProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BatHi;
                }
                set
                {
                    this.ModelElement.BatHi = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatHiChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatHiChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BatLo property
        /// </summary>
        private sealed class BatLoProxy : ModelPropertyChange<IZBAT, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BatLoProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BatLo;
                }
                set
                {
                    this.ModelElement.BatLo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatLoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BatLoChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoBatVal property
        /// </summary>
        private sealed class LoBatValProxy : ModelPropertyChange<IZBAT, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoBatValProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LoBatVal;
                }
                set
                {
                    this.ModelElement.LoBatVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoBatValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoBatValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiBatVal property
        /// </summary>
        private sealed class HiBatValProxy : ModelPropertyChange<IZBAT, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiBatValProxy(IZBAT modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HiBatVal;
                }
                set
                {
                    this.ModelElement.HiBatVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiBatValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiBatValChanged -= handler;
            }
        }
    }
}

