//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ
{
    
    
    /// <summary>
    /// The default implementation of the ZGEN class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pZ")]
    [XmlNamespacePrefixAttribute("groupz")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupZ/ZGEN")]
    public class ZGEN : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ.GroupZ, IZGEN, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GnSt property
        /// </summary>
        private Nullable<GeneratorStateKind> _gnSt;
        
        /// <summary>
        /// The backing field for the OpTmh property
        /// </summary>
        private IINS _opTmh;
        
        /// <summary>
        /// The backing field for the GnCtl property
        /// </summary>
        private IDPC _gnCtl;
        
        /// <summary>
        /// The backing field for the DExt property
        /// </summary>
        private ISPC _dExt;
        
        /// <summary>
        /// The backing field for the AuxSCO property
        /// </summary>
        private ISPC _auxSCO;
        
        /// <summary>
        /// The backing field for the StopVlv property
        /// </summary>
        private ISPC _stopVlv;
        
        /// <summary>
        /// The backing field for the ReactPwrR property
        /// </summary>
        private ISPC _reactPwrR;
        
        /// <summary>
        /// The backing field for the ReactPwrL property
        /// </summary>
        private ISPC _reactPwrL;
        
        /// <summary>
        /// The backing field for the GnSpd property
        /// </summary>
        private IMV _gnSpd;
        
        /// <summary>
        /// The backing field for the OANL property
        /// </summary>
        private ISPS _oANL;
        
        /// <summary>
        /// The backing field for the ClkRot property
        /// </summary>
        private ISPS _clkRot;
        
        /// <summary>
        /// The backing field for the CntClkRot property
        /// </summary>
        private ISPS _cntClkRot;
        
        /// <summary>
        /// The backing field for the OpUnExt property
        /// </summary>
        private ISPS _opUnExt;
        
        /// <summary>
        /// The backing field for the OpOvExt property
        /// </summary>
        private ISPS _opOvExt;
        
        /// <summary>
        /// The backing field for the LosOil property
        /// </summary>
        private ISPS _losOil;
        
        /// <summary>
        /// The backing field for the LosVac property
        /// </summary>
        private ISPS _losVac;
        
        /// <summary>
        /// The backing field for the PresAlm property
        /// </summary>
        private ISPS _presAlm;
        
        /// <summary>
        /// The backing field for the DmdPwr property
        /// </summary>
        private IASG _dmdPwr;
        
        /// <summary>
        /// The backing field for the PwrRtg property
        /// </summary>
        private IASG _pwrRtg;
        
        /// <summary>
        /// The backing field for the VRtg property
        /// </summary>
        private IASG _vRtg;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The GnSt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<GeneratorStateKind> GnSt
        {
            get
            {
                return this._gnSt;
            }
            set
            {
                if ((this._gnSt != value))
                {
                    Nullable<GeneratorStateKind> old = this._gnSt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGnStChanging(e);
                    this.OnPropertyChanging("GnSt", e);
                    this._gnSt = value;
                    this.OnGnStChanged(e);
                    this.OnPropertyChanged("GnSt", e);
                }
            }
        }
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpTmh
        {
            get
            {
                return this._opTmh;
            }
            set
            {
                if ((this._opTmh != value))
                {
                    IINS old = this._opTmh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpTmhChanging(e);
                    this.OnPropertyChanging("OpTmh", e);
                    this._opTmh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpTmh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpTmh;
                    }
                    this.OnOpTmhChanged(e);
                    this.OnPropertyChanged("OpTmh", e);
                }
            }
        }
        
        /// <summary>
        /// The GnCtl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC GnCtl
        {
            get
            {
                return this._gnCtl;
            }
            set
            {
                if ((this._gnCtl != value))
                {
                    IDPC old = this._gnCtl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGnCtlChanging(e);
                    this.OnPropertyChanging("GnCtl", e);
                    this._gnCtl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGnCtl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGnCtl;
                    }
                    this.OnGnCtlChanged(e);
                    this.OnPropertyChanged("GnCtl", e);
                }
            }
        }
        
        /// <summary>
        /// The DExt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC DExt
        {
            get
            {
                return this._dExt;
            }
            set
            {
                if ((this._dExt != value))
                {
                    ISPC old = this._dExt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDExtChanging(e);
                    this.OnPropertyChanging("DExt", e);
                    this._dExt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDExt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDExt;
                    }
                    this.OnDExtChanged(e);
                    this.OnPropertyChanged("DExt", e);
                }
            }
        }
        
        /// <summary>
        /// The AuxSCO property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC AuxSCO
        {
            get
            {
                return this._auxSCO;
            }
            set
            {
                if ((this._auxSCO != value))
                {
                    ISPC old = this._auxSCO;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxSCOChanging(e);
                    this.OnPropertyChanging("AuxSCO", e);
                    this._auxSCO = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAuxSCO;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAuxSCO;
                    }
                    this.OnAuxSCOChanged(e);
                    this.OnPropertyChanged("AuxSCO", e);
                }
            }
        }
        
        /// <summary>
        /// The StopVlv property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC StopVlv
        {
            get
            {
                return this._stopVlv;
            }
            set
            {
                if ((this._stopVlv != value))
                {
                    ISPC old = this._stopVlv;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStopVlvChanging(e);
                    this.OnPropertyChanging("StopVlv", e);
                    this._stopVlv = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStopVlv;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStopVlv;
                    }
                    this.OnStopVlvChanged(e);
                    this.OnPropertyChanged("StopVlv", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactPwrR property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC ReactPwrR
        {
            get
            {
                return this._reactPwrR;
            }
            set
            {
                if ((this._reactPwrR != value))
                {
                    ISPC old = this._reactPwrR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactPwrRChanging(e);
                    this.OnPropertyChanging("ReactPwrR", e);
                    this._reactPwrR = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReactPwrR;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReactPwrR;
                    }
                    this.OnReactPwrRChanged(e);
                    this.OnPropertyChanged("ReactPwrR", e);
                }
            }
        }
        
        /// <summary>
        /// The ReactPwrL property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC ReactPwrL
        {
            get
            {
                return this._reactPwrL;
            }
            set
            {
                if ((this._reactPwrL != value))
                {
                    ISPC old = this._reactPwrL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactPwrLChanging(e);
                    this.OnPropertyChanging("ReactPwrL", e);
                    this._reactPwrL = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReactPwrL;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReactPwrL;
                    }
                    this.OnReactPwrLChanged(e);
                    this.OnPropertyChanged("ReactPwrL", e);
                }
            }
        }
        
        /// <summary>
        /// The GnSpd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV GnSpd
        {
            get
            {
                return this._gnSpd;
            }
            set
            {
                if ((this._gnSpd != value))
                {
                    IMV old = this._gnSpd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGnSpdChanging(e);
                    this.OnPropertyChanging("GnSpd", e);
                    this._gnSpd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGnSpd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGnSpd;
                    }
                    this.OnGnSpdChanged(e);
                    this.OnPropertyChanged("GnSpd", e);
                }
            }
        }
        
        /// <summary>
        /// The OANL property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OANL
        {
            get
            {
                return this._oANL;
            }
            set
            {
                if ((this._oANL != value))
                {
                    ISPS old = this._oANL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOANLChanging(e);
                    this.OnPropertyChanging("OANL", e);
                    this._oANL = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOANL;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOANL;
                    }
                    this.OnOANLChanged(e);
                    this.OnPropertyChanged("OANL", e);
                }
            }
        }
        
        /// <summary>
        /// The ClkRot property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS ClkRot
        {
            get
            {
                return this._clkRot;
            }
            set
            {
                if ((this._clkRot != value))
                {
                    ISPS old = this._clkRot;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClkRotChanging(e);
                    this.OnPropertyChanging("ClkRot", e);
                    this._clkRot = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetClkRot;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetClkRot;
                    }
                    this.OnClkRotChanged(e);
                    this.OnPropertyChanged("ClkRot", e);
                }
            }
        }
        
        /// <summary>
        /// The CntClkRot property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS CntClkRot
        {
            get
            {
                return this._cntClkRot;
            }
            set
            {
                if ((this._cntClkRot != value))
                {
                    ISPS old = this._cntClkRot;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCntClkRotChanging(e);
                    this.OnPropertyChanging("CntClkRot", e);
                    this._cntClkRot = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCntClkRot;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCntClkRot;
                    }
                    this.OnCntClkRotChanged(e);
                    this.OnPropertyChanged("CntClkRot", e);
                }
            }
        }
        
        /// <summary>
        /// The OpUnExt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OpUnExt
        {
            get
            {
                return this._opUnExt;
            }
            set
            {
                if ((this._opUnExt != value))
                {
                    ISPS old = this._opUnExt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpUnExtChanging(e);
                    this.OnPropertyChanging("OpUnExt", e);
                    this._opUnExt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpUnExt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpUnExt;
                    }
                    this.OnOpUnExtChanged(e);
                    this.OnPropertyChanged("OpUnExt", e);
                }
            }
        }
        
        /// <summary>
        /// The OpOvExt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OpOvExt
        {
            get
            {
                return this._opOvExt;
            }
            set
            {
                if ((this._opOvExt != value))
                {
                    ISPS old = this._opOvExt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpOvExtChanging(e);
                    this.OnPropertyChanging("OpOvExt", e);
                    this._opOvExt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpOvExt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpOvExt;
                    }
                    this.OnOpOvExtChanged(e);
                    this.OnPropertyChanged("OpOvExt", e);
                }
            }
        }
        
        /// <summary>
        /// The LosOil property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS LosOil
        {
            get
            {
                return this._losOil;
            }
            set
            {
                if ((this._losOil != value))
                {
                    ISPS old = this._losOil;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLosOilChanging(e);
                    this.OnPropertyChanging("LosOil", e);
                    this._losOil = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLosOil;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLosOil;
                    }
                    this.OnLosOilChanged(e);
                    this.OnPropertyChanged("LosOil", e);
                }
            }
        }
        
        /// <summary>
        /// The LosVac property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS LosVac
        {
            get
            {
                return this._losVac;
            }
            set
            {
                if ((this._losVac != value))
                {
                    ISPS old = this._losVac;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLosVacChanging(e);
                    this.OnPropertyChanging("LosVac", e);
                    this._losVac = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLosVac;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLosVac;
                    }
                    this.OnLosVacChanged(e);
                    this.OnPropertyChanged("LosVac", e);
                }
            }
        }
        
        /// <summary>
        /// The PresAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS PresAlm
        {
            get
            {
                return this._presAlm;
            }
            set
            {
                if ((this._presAlm != value))
                {
                    ISPS old = this._presAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPresAlmChanging(e);
                    this.OnPropertyChanging("PresAlm", e);
                    this._presAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPresAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPresAlm;
                    }
                    this.OnPresAlmChanged(e);
                    this.OnPropertyChanged("PresAlm", e);
                }
            }
        }
        
        /// <summary>
        /// The DmdPwr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DmdPwr
        {
            get
            {
                return this._dmdPwr;
            }
            set
            {
                if ((this._dmdPwr != value))
                {
                    IASG old = this._dmdPwr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDmdPwrChanging(e);
                    this.OnPropertyChanging("DmdPwr", e);
                    this._dmdPwr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDmdPwr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDmdPwr;
                    }
                    this.OnDmdPwrChanged(e);
                    this.OnPropertyChanged("DmdPwr", e);
                }
            }
        }
        
        /// <summary>
        /// The PwrRtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PwrRtg
        {
            get
            {
                return this._pwrRtg;
            }
            set
            {
                if ((this._pwrRtg != value))
                {
                    IASG old = this._pwrRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPwrRtgChanging(e);
                    this.OnPropertyChanging("PwrRtg", e);
                    this._pwrRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPwrRtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPwrRtg;
                    }
                    this.OnPwrRtgChanged(e);
                    this.OnPropertyChanged("PwrRtg", e);
                }
            }
        }
        
        /// <summary>
        /// The VRtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG VRtg
        {
            get
            {
                return this._vRtg;
            }
            set
            {
                if ((this._vRtg != value))
                {
                    IASG old = this._vRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVRtgChanging(e);
                    this.OnPropertyChanging("VRtg", e);
                    this._vRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVRtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVRtg;
                    }
                    this.OnVRtgChanged(e);
                    this.OnPropertyChanged("VRtg", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ZGENReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupZ/ZGEN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GnSt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnStChanging;
        
        /// <summary>
        /// Gets fired when the GnSt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnStChanged;
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the GnCtl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnCtlChanging;
        
        /// <summary>
        /// Gets fired when the GnCtl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnCtlChanged;
        
        /// <summary>
        /// Gets fired before the DExt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DExtChanging;
        
        /// <summary>
        /// Gets fired when the DExt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DExtChanged;
        
        /// <summary>
        /// Gets fired before the AuxSCO property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxSCOChanging;
        
        /// <summary>
        /// Gets fired when the AuxSCO property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxSCOChanged;
        
        /// <summary>
        /// Gets fired before the StopVlv property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StopVlvChanging;
        
        /// <summary>
        /// Gets fired when the StopVlv property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StopVlvChanged;
        
        /// <summary>
        /// Gets fired before the ReactPwrR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactPwrRChanging;
        
        /// <summary>
        /// Gets fired when the ReactPwrR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactPwrRChanged;
        
        /// <summary>
        /// Gets fired before the ReactPwrL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactPwrLChanging;
        
        /// <summary>
        /// Gets fired when the ReactPwrL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactPwrLChanged;
        
        /// <summary>
        /// Gets fired before the GnSpd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnSpdChanging;
        
        /// <summary>
        /// Gets fired when the GnSpd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GnSpdChanged;
        
        /// <summary>
        /// Gets fired before the OANL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OANLChanging;
        
        /// <summary>
        /// Gets fired when the OANL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OANLChanged;
        
        /// <summary>
        /// Gets fired before the ClkRot property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClkRotChanging;
        
        /// <summary>
        /// Gets fired when the ClkRot property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClkRotChanged;
        
        /// <summary>
        /// Gets fired before the CntClkRot property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CntClkRotChanging;
        
        /// <summary>
        /// Gets fired when the CntClkRot property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CntClkRotChanged;
        
        /// <summary>
        /// Gets fired before the OpUnExt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpUnExtChanging;
        
        /// <summary>
        /// Gets fired when the OpUnExt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpUnExtChanged;
        
        /// <summary>
        /// Gets fired before the OpOvExt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvExtChanging;
        
        /// <summary>
        /// Gets fired when the OpOvExt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpOvExtChanged;
        
        /// <summary>
        /// Gets fired before the LosOil property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosOilChanging;
        
        /// <summary>
        /// Gets fired when the LosOil property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosOilChanged;
        
        /// <summary>
        /// Gets fired before the LosVac property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosVacChanging;
        
        /// <summary>
        /// Gets fired when the LosVac property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LosVacChanged;
        
        /// <summary>
        /// Gets fired before the PresAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PresAlmChanging;
        
        /// <summary>
        /// Gets fired when the PresAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PresAlmChanged;
        
        /// <summary>
        /// Gets fired before the DmdPwr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdPwrChanging;
        
        /// <summary>
        /// Gets fired when the DmdPwr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DmdPwrChanged;
        
        /// <summary>
        /// Gets fired before the PwrRtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrRtgChanging;
        
        /// <summary>
        /// Gets fired when the PwrRtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PwrRtgChanged;
        
        /// <summary>
        /// Gets fired before the VRtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRtgChanging;
        
        /// <summary>
        /// Gets fired when the VRtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRtgChanged;
        
        /// <summary>
        /// Raises the GnStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GnStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpTmh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpTmh(object sender, System.EventArgs eventArgs)
        {
            this.OpTmh = null;
        }
        
        /// <summary>
        /// Raises the GnCtlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnCtlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnCtlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GnCtlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnCtlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnCtlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GnCtl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGnCtl(object sender, System.EventArgs eventArgs)
        {
            this.GnCtl = null;
        }
        
        /// <summary>
        /// Raises the DExtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDExtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DExtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DExtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDExtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DExtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DExt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDExt(object sender, System.EventArgs eventArgs)
        {
            this.DExt = null;
        }
        
        /// <summary>
        /// Raises the AuxSCOChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxSCOChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxSCOChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxSCOChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxSCOChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxSCOChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AuxSCO property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAuxSCO(object sender, System.EventArgs eventArgs)
        {
            this.AuxSCO = null;
        }
        
        /// <summary>
        /// Raises the StopVlvChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStopVlvChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StopVlvChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StopVlvChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStopVlvChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StopVlvChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StopVlv property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStopVlv(object sender, System.EventArgs eventArgs)
        {
            this.StopVlv = null;
        }
        
        /// <summary>
        /// Raises the ReactPwrRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactPwrRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactPwrRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactPwrRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactPwrRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactPwrRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReactPwrR property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReactPwrR(object sender, System.EventArgs eventArgs)
        {
            this.ReactPwrR = null;
        }
        
        /// <summary>
        /// Raises the ReactPwrLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactPwrLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactPwrLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactPwrLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactPwrLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactPwrLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReactPwrL property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReactPwrL(object sender, System.EventArgs eventArgs)
        {
            this.ReactPwrL = null;
        }
        
        /// <summary>
        /// Raises the GnSpdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnSpdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnSpdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GnSpdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGnSpdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GnSpdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GnSpd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGnSpd(object sender, System.EventArgs eventArgs)
        {
            this.GnSpd = null;
        }
        
        /// <summary>
        /// Raises the OANLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOANLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OANLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OANLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOANLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OANLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OANL property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOANL(object sender, System.EventArgs eventArgs)
        {
            this.OANL = null;
        }
        
        /// <summary>
        /// Raises the ClkRotChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClkRotChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClkRotChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClkRotChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClkRotChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClkRotChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ClkRot property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClkRot(object sender, System.EventArgs eventArgs)
        {
            this.ClkRot = null;
        }
        
        /// <summary>
        /// Raises the CntClkRotChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCntClkRotChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CntClkRotChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CntClkRotChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCntClkRotChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CntClkRotChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CntClkRot property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCntClkRot(object sender, System.EventArgs eventArgs)
        {
            this.CntClkRot = null;
        }
        
        /// <summary>
        /// Raises the OpUnExtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpUnExtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpUnExtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpUnExtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpUnExtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpUnExtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpUnExt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpUnExt(object sender, System.EventArgs eventArgs)
        {
            this.OpUnExt = null;
        }
        
        /// <summary>
        /// Raises the OpOvExtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvExtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvExtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpOvExtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpOvExtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpOvExtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpOvExt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpOvExt(object sender, System.EventArgs eventArgs)
        {
            this.OpOvExt = null;
        }
        
        /// <summary>
        /// Raises the LosOilChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosOilChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosOilChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LosOilChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosOilChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosOilChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LosOil property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLosOil(object sender, System.EventArgs eventArgs)
        {
            this.LosOil = null;
        }
        
        /// <summary>
        /// Raises the LosVacChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosVacChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosVacChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LosVacChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLosVacChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LosVacChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LosVac property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLosVac(object sender, System.EventArgs eventArgs)
        {
            this.LosVac = null;
        }
        
        /// <summary>
        /// Raises the PresAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PresAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PresAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PresAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PresAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPresAlm(object sender, System.EventArgs eventArgs)
        {
            this.PresAlm = null;
        }
        
        /// <summary>
        /// Raises the DmdPwrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdPwrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdPwrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DmdPwrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDmdPwrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DmdPwrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DmdPwr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDmdPwr(object sender, System.EventArgs eventArgs)
        {
            this.DmdPwr = null;
        }
        
        /// <summary>
        /// Raises the PwrRtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrRtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrRtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PwrRtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPwrRtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PwrRtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PwrRtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPwrRtg(object sender, System.EventArgs eventArgs)
        {
            this.PwrRtg = null;
        }
        
        /// <summary>
        /// Raises the VRtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VRtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VRtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVRtg(object sender, System.EventArgs eventArgs)
        {
            this.VRtg = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GNST"))
            {
                return this.GnSt;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPTMH"))
            {
                this.OpTmh = ((IINS)(value));
                return;
            }
            if ((feature == "GNCTL"))
            {
                this.GnCtl = ((IDPC)(value));
                return;
            }
            if ((feature == "DEXT"))
            {
                this.DExt = ((ISPC)(value));
                return;
            }
            if ((feature == "AUXSCO"))
            {
                this.AuxSCO = ((ISPC)(value));
                return;
            }
            if ((feature == "STOPVLV"))
            {
                this.StopVlv = ((ISPC)(value));
                return;
            }
            if ((feature == "REACTPWRR"))
            {
                this.ReactPwrR = ((ISPC)(value));
                return;
            }
            if ((feature == "REACTPWRL"))
            {
                this.ReactPwrL = ((ISPC)(value));
                return;
            }
            if ((feature == "GNSPD"))
            {
                this.GnSpd = ((IMV)(value));
                return;
            }
            if ((feature == "OANL"))
            {
                this.OANL = ((ISPS)(value));
                return;
            }
            if ((feature == "CLKROT"))
            {
                this.ClkRot = ((ISPS)(value));
                return;
            }
            if ((feature == "CNTCLKROT"))
            {
                this.CntClkRot = ((ISPS)(value));
                return;
            }
            if ((feature == "OPUNEXT"))
            {
                this.OpUnExt = ((ISPS)(value));
                return;
            }
            if ((feature == "OPOVEXT"))
            {
                this.OpOvExt = ((ISPS)(value));
                return;
            }
            if ((feature == "LOSOIL"))
            {
                this.LosOil = ((ISPS)(value));
                return;
            }
            if ((feature == "LOSVAC"))
            {
                this.LosVac = ((ISPS)(value));
                return;
            }
            if ((feature == "PRESALM"))
            {
                this.PresAlm = ((ISPS)(value));
                return;
            }
            if ((feature == "DMDPWR"))
            {
                this.DmdPwr = ((IASG)(value));
                return;
            }
            if ((feature == "PWRRTG"))
            {
                this.PwrRtg = ((IASG)(value));
                return;
            }
            if ((feature == "VRTG"))
            {
                this.VRtg = ((IASG)(value));
                return;
            }
            if ((feature == "GNST"))
            {
                this.GnSt = ((GeneratorStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((attribute == "GnCtl"))
            {
                return new GnCtlProxy(this);
            }
            if ((attribute == "DExt"))
            {
                return new DExtProxy(this);
            }
            if ((attribute == "AuxSCO"))
            {
                return new AuxSCOProxy(this);
            }
            if ((attribute == "StopVlv"))
            {
                return new StopVlvProxy(this);
            }
            if ((attribute == "ReactPwrR"))
            {
                return new ReactPwrRProxy(this);
            }
            if ((attribute == "ReactPwrL"))
            {
                return new ReactPwrLProxy(this);
            }
            if ((attribute == "GnSpd"))
            {
                return new GnSpdProxy(this);
            }
            if ((attribute == "OANL"))
            {
                return new OANLProxy(this);
            }
            if ((attribute == "ClkRot"))
            {
                return new ClkRotProxy(this);
            }
            if ((attribute == "CntClkRot"))
            {
                return new CntClkRotProxy(this);
            }
            if ((attribute == "OpUnExt"))
            {
                return new OpUnExtProxy(this);
            }
            if ((attribute == "OpOvExt"))
            {
                return new OpOvExtProxy(this);
            }
            if ((attribute == "LosOil"))
            {
                return new LosOilProxy(this);
            }
            if ((attribute == "LosVac"))
            {
                return new LosVacProxy(this);
            }
            if ((attribute == "PresAlm"))
            {
                return new PresAlmProxy(this);
            }
            if ((attribute == "DmdPwr"))
            {
                return new DmdPwrProxy(this);
            }
            if ((attribute == "PwrRtg"))
            {
                return new PwrRtgProxy(this);
            }
            if ((attribute == "VRtg"))
            {
                return new VRtgProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((reference == "GnCtl"))
            {
                return new GnCtlProxy(this);
            }
            if ((reference == "DExt"))
            {
                return new DExtProxy(this);
            }
            if ((reference == "AuxSCO"))
            {
                return new AuxSCOProxy(this);
            }
            if ((reference == "StopVlv"))
            {
                return new StopVlvProxy(this);
            }
            if ((reference == "ReactPwrR"))
            {
                return new ReactPwrRProxy(this);
            }
            if ((reference == "ReactPwrL"))
            {
                return new ReactPwrLProxy(this);
            }
            if ((reference == "GnSpd"))
            {
                return new GnSpdProxy(this);
            }
            if ((reference == "OANL"))
            {
                return new OANLProxy(this);
            }
            if ((reference == "ClkRot"))
            {
                return new ClkRotProxy(this);
            }
            if ((reference == "CntClkRot"))
            {
                return new CntClkRotProxy(this);
            }
            if ((reference == "OpUnExt"))
            {
                return new OpUnExtProxy(this);
            }
            if ((reference == "OpOvExt"))
            {
                return new OpOvExtProxy(this);
            }
            if ((reference == "LosOil"))
            {
                return new LosOilProxy(this);
            }
            if ((reference == "LosVac"))
            {
                return new LosVacProxy(this);
            }
            if ((reference == "PresAlm"))
            {
                return new PresAlmProxy(this);
            }
            if ((reference == "DmdPwr"))
            {
                return new DmdPwrProxy(this);
            }
            if ((reference == "PwrRtg"))
            {
                return new PwrRtgProxy(this);
            }
            if ((reference == "VRtg"))
            {
                return new VRtgProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupZ/ZGEN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ZGEN class
        /// </summary>
        public class ZGENReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ZGEN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ZGENReferencedElementsCollection(ZGEN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpTmh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GnCtl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DExt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AuxSCO != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StopVlv != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReactPwrR != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReactPwrL != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GnSpd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OANL != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ClkRot != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CntClkRot != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpUnExt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpOvExt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LosOil != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LosVac != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PresAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DmdPwr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PwrRtg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VRtg != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpTmhChanged += this.PropagateValueChanges;
                this._parent.GnCtlChanged += this.PropagateValueChanges;
                this._parent.DExtChanged += this.PropagateValueChanges;
                this._parent.AuxSCOChanged += this.PropagateValueChanges;
                this._parent.StopVlvChanged += this.PropagateValueChanges;
                this._parent.ReactPwrRChanged += this.PropagateValueChanges;
                this._parent.ReactPwrLChanged += this.PropagateValueChanges;
                this._parent.GnSpdChanged += this.PropagateValueChanges;
                this._parent.OANLChanged += this.PropagateValueChanges;
                this._parent.ClkRotChanged += this.PropagateValueChanges;
                this._parent.CntClkRotChanged += this.PropagateValueChanges;
                this._parent.OpUnExtChanged += this.PropagateValueChanges;
                this._parent.OpOvExtChanged += this.PropagateValueChanges;
                this._parent.LosOilChanged += this.PropagateValueChanges;
                this._parent.LosVacChanged += this.PropagateValueChanges;
                this._parent.PresAlmChanged += this.PropagateValueChanges;
                this._parent.DmdPwrChanged += this.PropagateValueChanges;
                this._parent.PwrRtgChanged += this.PropagateValueChanges;
                this._parent.VRtgChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpTmhChanged -= this.PropagateValueChanges;
                this._parent.GnCtlChanged -= this.PropagateValueChanges;
                this._parent.DExtChanged -= this.PropagateValueChanges;
                this._parent.AuxSCOChanged -= this.PropagateValueChanges;
                this._parent.StopVlvChanged -= this.PropagateValueChanges;
                this._parent.ReactPwrRChanged -= this.PropagateValueChanges;
                this._parent.ReactPwrLChanged -= this.PropagateValueChanges;
                this._parent.GnSpdChanged -= this.PropagateValueChanges;
                this._parent.OANLChanged -= this.PropagateValueChanges;
                this._parent.ClkRotChanged -= this.PropagateValueChanges;
                this._parent.CntClkRotChanged -= this.PropagateValueChanges;
                this._parent.OpUnExtChanged -= this.PropagateValueChanges;
                this._parent.OpOvExtChanged -= this.PropagateValueChanges;
                this._parent.LosOilChanged -= this.PropagateValueChanges;
                this._parent.LosVacChanged -= this.PropagateValueChanges;
                this._parent.PresAlmChanged -= this.PropagateValueChanges;
                this._parent.DmdPwrChanged -= this.PropagateValueChanges;
                this._parent.PwrRtgChanged -= this.PropagateValueChanges;
                this._parent.VRtgChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpTmh == null))
                {
                    IINS opTmhCasted = item.As<IINS>();
                    if ((opTmhCasted != null))
                    {
                        this._parent.OpTmh = opTmhCasted;
                        return;
                    }
                }
                if ((this._parent.GnCtl == null))
                {
                    IDPC gnCtlCasted = item.As<IDPC>();
                    if ((gnCtlCasted != null))
                    {
                        this._parent.GnCtl = gnCtlCasted;
                        return;
                    }
                }
                if ((this._parent.DExt == null))
                {
                    ISPC dExtCasted = item.As<ISPC>();
                    if ((dExtCasted != null))
                    {
                        this._parent.DExt = dExtCasted;
                        return;
                    }
                }
                if ((this._parent.AuxSCO == null))
                {
                    ISPC auxSCOCasted = item.As<ISPC>();
                    if ((auxSCOCasted != null))
                    {
                        this._parent.AuxSCO = auxSCOCasted;
                        return;
                    }
                }
                if ((this._parent.StopVlv == null))
                {
                    ISPC stopVlvCasted = item.As<ISPC>();
                    if ((stopVlvCasted != null))
                    {
                        this._parent.StopVlv = stopVlvCasted;
                        return;
                    }
                }
                if ((this._parent.ReactPwrR == null))
                {
                    ISPC reactPwrRCasted = item.As<ISPC>();
                    if ((reactPwrRCasted != null))
                    {
                        this._parent.ReactPwrR = reactPwrRCasted;
                        return;
                    }
                }
                if ((this._parent.ReactPwrL == null))
                {
                    ISPC reactPwrLCasted = item.As<ISPC>();
                    if ((reactPwrLCasted != null))
                    {
                        this._parent.ReactPwrL = reactPwrLCasted;
                        return;
                    }
                }
                if ((this._parent.GnSpd == null))
                {
                    IMV gnSpdCasted = item.As<IMV>();
                    if ((gnSpdCasted != null))
                    {
                        this._parent.GnSpd = gnSpdCasted;
                        return;
                    }
                }
                if ((this._parent.OANL == null))
                {
                    ISPS oANLCasted = item.As<ISPS>();
                    if ((oANLCasted != null))
                    {
                        this._parent.OANL = oANLCasted;
                        return;
                    }
                }
                if ((this._parent.ClkRot == null))
                {
                    ISPS clkRotCasted = item.As<ISPS>();
                    if ((clkRotCasted != null))
                    {
                        this._parent.ClkRot = clkRotCasted;
                        return;
                    }
                }
                if ((this._parent.CntClkRot == null))
                {
                    ISPS cntClkRotCasted = item.As<ISPS>();
                    if ((cntClkRotCasted != null))
                    {
                        this._parent.CntClkRot = cntClkRotCasted;
                        return;
                    }
                }
                if ((this._parent.OpUnExt == null))
                {
                    ISPS opUnExtCasted = item.As<ISPS>();
                    if ((opUnExtCasted != null))
                    {
                        this._parent.OpUnExt = opUnExtCasted;
                        return;
                    }
                }
                if ((this._parent.OpOvExt == null))
                {
                    ISPS opOvExtCasted = item.As<ISPS>();
                    if ((opOvExtCasted != null))
                    {
                        this._parent.OpOvExt = opOvExtCasted;
                        return;
                    }
                }
                if ((this._parent.LosOil == null))
                {
                    ISPS losOilCasted = item.As<ISPS>();
                    if ((losOilCasted != null))
                    {
                        this._parent.LosOil = losOilCasted;
                        return;
                    }
                }
                if ((this._parent.LosVac == null))
                {
                    ISPS losVacCasted = item.As<ISPS>();
                    if ((losVacCasted != null))
                    {
                        this._parent.LosVac = losVacCasted;
                        return;
                    }
                }
                if ((this._parent.PresAlm == null))
                {
                    ISPS presAlmCasted = item.As<ISPS>();
                    if ((presAlmCasted != null))
                    {
                        this._parent.PresAlm = presAlmCasted;
                        return;
                    }
                }
                if ((this._parent.DmdPwr == null))
                {
                    IASG dmdPwrCasted = item.As<IASG>();
                    if ((dmdPwrCasted != null))
                    {
                        this._parent.DmdPwr = dmdPwrCasted;
                        return;
                    }
                }
                if ((this._parent.PwrRtg == null))
                {
                    IASG pwrRtgCasted = item.As<IASG>();
                    if ((pwrRtgCasted != null))
                    {
                        this._parent.PwrRtg = pwrRtgCasted;
                        return;
                    }
                }
                if ((this._parent.VRtg == null))
                {
                    IASG vRtgCasted = item.As<IASG>();
                    if ((vRtgCasted != null))
                    {
                        this._parent.VRtg = vRtgCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpTmh = null;
                this._parent.GnCtl = null;
                this._parent.DExt = null;
                this._parent.AuxSCO = null;
                this._parent.StopVlv = null;
                this._parent.ReactPwrR = null;
                this._parent.ReactPwrL = null;
                this._parent.GnSpd = null;
                this._parent.OANL = null;
                this._parent.ClkRot = null;
                this._parent.CntClkRot = null;
                this._parent.OpUnExt = null;
                this._parent.OpOvExt = null;
                this._parent.LosOil = null;
                this._parent.LosVac = null;
                this._parent.PresAlm = null;
                this._parent.DmdPwr = null;
                this._parent.PwrRtg = null;
                this._parent.VRtg = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpTmh))
                {
                    return true;
                }
                if ((item == this._parent.GnCtl))
                {
                    return true;
                }
                if ((item == this._parent.DExt))
                {
                    return true;
                }
                if ((item == this._parent.AuxSCO))
                {
                    return true;
                }
                if ((item == this._parent.StopVlv))
                {
                    return true;
                }
                if ((item == this._parent.ReactPwrR))
                {
                    return true;
                }
                if ((item == this._parent.ReactPwrL))
                {
                    return true;
                }
                if ((item == this._parent.GnSpd))
                {
                    return true;
                }
                if ((item == this._parent.OANL))
                {
                    return true;
                }
                if ((item == this._parent.ClkRot))
                {
                    return true;
                }
                if ((item == this._parent.CntClkRot))
                {
                    return true;
                }
                if ((item == this._parent.OpUnExt))
                {
                    return true;
                }
                if ((item == this._parent.OpOvExt))
                {
                    return true;
                }
                if ((item == this._parent.LosOil))
                {
                    return true;
                }
                if ((item == this._parent.LosVac))
                {
                    return true;
                }
                if ((item == this._parent.PresAlm))
                {
                    return true;
                }
                if ((item == this._parent.DmdPwr))
                {
                    return true;
                }
                if ((item == this._parent.PwrRtg))
                {
                    return true;
                }
                if ((item == this._parent.VRtg))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpTmh != null))
                {
                    array[arrayIndex] = this._parent.OpTmh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GnCtl != null))
                {
                    array[arrayIndex] = this._parent.GnCtl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DExt != null))
                {
                    array[arrayIndex] = this._parent.DExt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AuxSCO != null))
                {
                    array[arrayIndex] = this._parent.AuxSCO;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StopVlv != null))
                {
                    array[arrayIndex] = this._parent.StopVlv;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReactPwrR != null))
                {
                    array[arrayIndex] = this._parent.ReactPwrR;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReactPwrL != null))
                {
                    array[arrayIndex] = this._parent.ReactPwrL;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GnSpd != null))
                {
                    array[arrayIndex] = this._parent.GnSpd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OANL != null))
                {
                    array[arrayIndex] = this._parent.OANL;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ClkRot != null))
                {
                    array[arrayIndex] = this._parent.ClkRot;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CntClkRot != null))
                {
                    array[arrayIndex] = this._parent.CntClkRot;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpUnExt != null))
                {
                    array[arrayIndex] = this._parent.OpUnExt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpOvExt != null))
                {
                    array[arrayIndex] = this._parent.OpOvExt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LosOil != null))
                {
                    array[arrayIndex] = this._parent.LosOil;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LosVac != null))
                {
                    array[arrayIndex] = this._parent.LosVac;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PresAlm != null))
                {
                    array[arrayIndex] = this._parent.PresAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DmdPwr != null))
                {
                    array[arrayIndex] = this._parent.DmdPwr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PwrRtg != null))
                {
                    array[arrayIndex] = this._parent.PwrRtg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VRtg != null))
                {
                    array[arrayIndex] = this._parent.VRtg;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpTmh == item))
                {
                    this._parent.OpTmh = null;
                    return true;
                }
                if ((this._parent.GnCtl == item))
                {
                    this._parent.GnCtl = null;
                    return true;
                }
                if ((this._parent.DExt == item))
                {
                    this._parent.DExt = null;
                    return true;
                }
                if ((this._parent.AuxSCO == item))
                {
                    this._parent.AuxSCO = null;
                    return true;
                }
                if ((this._parent.StopVlv == item))
                {
                    this._parent.StopVlv = null;
                    return true;
                }
                if ((this._parent.ReactPwrR == item))
                {
                    this._parent.ReactPwrR = null;
                    return true;
                }
                if ((this._parent.ReactPwrL == item))
                {
                    this._parent.ReactPwrL = null;
                    return true;
                }
                if ((this._parent.GnSpd == item))
                {
                    this._parent.GnSpd = null;
                    return true;
                }
                if ((this._parent.OANL == item))
                {
                    this._parent.OANL = null;
                    return true;
                }
                if ((this._parent.ClkRot == item))
                {
                    this._parent.ClkRot = null;
                    return true;
                }
                if ((this._parent.CntClkRot == item))
                {
                    this._parent.CntClkRot = null;
                    return true;
                }
                if ((this._parent.OpUnExt == item))
                {
                    this._parent.OpUnExt = null;
                    return true;
                }
                if ((this._parent.OpOvExt == item))
                {
                    this._parent.OpOvExt = null;
                    return true;
                }
                if ((this._parent.LosOil == item))
                {
                    this._parent.LosOil = null;
                    return true;
                }
                if ((this._parent.LosVac == item))
                {
                    this._parent.LosVac = null;
                    return true;
                }
                if ((this._parent.PresAlm == item))
                {
                    this._parent.PresAlm = null;
                    return true;
                }
                if ((this._parent.DmdPwr == item))
                {
                    this._parent.DmdPwr = null;
                    return true;
                }
                if ((this._parent.PwrRtg == item))
                {
                    this._parent.PwrRtg = null;
                    return true;
                }
                if ((this._parent.VRtg == item))
                {
                    this._parent.VRtg = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpTmh).Concat(this._parent.GnCtl).Concat(this._parent.DExt).Concat(this._parent.AuxSCO).Concat(this._parent.StopVlv).Concat(this._parent.ReactPwrR).Concat(this._parent.ReactPwrL).Concat(this._parent.GnSpd).Concat(this._parent.OANL).Concat(this._parent.ClkRot).Concat(this._parent.CntClkRot).Concat(this._parent.OpUnExt).Concat(this._parent.OpOvExt).Concat(this._parent.LosOil).Concat(this._parent.LosVac).Concat(this._parent.PresAlm).Concat(this._parent.DmdPwr).Concat(this._parent.PwrRtg).Concat(this._parent.VRtg).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GnSt property
        /// </summary>
        private sealed class GnStProxy : ModelPropertyChange<IZGEN, Nullable<GeneratorStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GnStProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<GeneratorStateKind> Value
            {
                get
                {
                    return this.ModelElement.GnSt;
                }
                set
                {
                    this.ModelElement.GnSt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnStChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnStChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpTmh property
        /// </summary>
        private sealed class OpTmhProxy : ModelPropertyChange<IZGEN, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpTmhProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpTmh;
                }
                set
                {
                    this.ModelElement.OpTmh = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GnCtl property
        /// </summary>
        private sealed class GnCtlProxy : ModelPropertyChange<IZGEN, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GnCtlProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.GnCtl;
                }
                set
                {
                    this.ModelElement.GnCtl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnCtlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnCtlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DExt property
        /// </summary>
        private sealed class DExtProxy : ModelPropertyChange<IZGEN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DExtProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.DExt;
                }
                set
                {
                    this.ModelElement.DExt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DExtChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DExtChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AuxSCO property
        /// </summary>
        private sealed class AuxSCOProxy : ModelPropertyChange<IZGEN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxSCOProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.AuxSCO;
                }
                set
                {
                    this.ModelElement.AuxSCO = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxSCOChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxSCOChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StopVlv property
        /// </summary>
        private sealed class StopVlvProxy : ModelPropertyChange<IZGEN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StopVlvProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.StopVlv;
                }
                set
                {
                    this.ModelElement.StopVlv = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StopVlvChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StopVlvChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactPwrR property
        /// </summary>
        private sealed class ReactPwrRProxy : ModelPropertyChange<IZGEN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactPwrRProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.ReactPwrR;
                }
                set
                {
                    this.ModelElement.ReactPwrR = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactPwrRChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactPwrRChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReactPwrL property
        /// </summary>
        private sealed class ReactPwrLProxy : ModelPropertyChange<IZGEN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactPwrLProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.ReactPwrL;
                }
                set
                {
                    this.ModelElement.ReactPwrL = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactPwrLChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReactPwrLChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GnSpd property
        /// </summary>
        private sealed class GnSpdProxy : ModelPropertyChange<IZGEN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GnSpdProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.GnSpd;
                }
                set
                {
                    this.ModelElement.GnSpd = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnSpdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GnSpdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OANL property
        /// </summary>
        private sealed class OANLProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OANLProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OANL;
                }
                set
                {
                    this.ModelElement.OANL = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OANLChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OANLChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ClkRot property
        /// </summary>
        private sealed class ClkRotProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClkRotProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.ClkRot;
                }
                set
                {
                    this.ModelElement.ClkRot = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClkRotChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClkRotChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CntClkRot property
        /// </summary>
        private sealed class CntClkRotProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CntClkRotProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.CntClkRot;
                }
                set
                {
                    this.ModelElement.CntClkRot = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CntClkRotChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CntClkRotChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpUnExt property
        /// </summary>
        private sealed class OpUnExtProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpUnExtProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OpUnExt;
                }
                set
                {
                    this.ModelElement.OpUnExt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpUnExtChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpUnExtChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpOvExt property
        /// </summary>
        private sealed class OpOvExtProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpOvExtProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OpOvExt;
                }
                set
                {
                    this.ModelElement.OpOvExt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpOvExtChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpOvExtChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LosOil property
        /// </summary>
        private sealed class LosOilProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LosOilProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.LosOil;
                }
                set
                {
                    this.ModelElement.LosOil = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LosOilChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LosOilChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LosVac property
        /// </summary>
        private sealed class LosVacProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LosVacProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.LosVac;
                }
                set
                {
                    this.ModelElement.LosVac = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LosVacChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LosVacChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PresAlm property
        /// </summary>
        private sealed class PresAlmProxy : ModelPropertyChange<IZGEN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PresAlmProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.PresAlm;
                }
                set
                {
                    this.ModelElement.PresAlm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PresAlmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PresAlmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DmdPwr property
        /// </summary>
        private sealed class DmdPwrProxy : ModelPropertyChange<IZGEN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DmdPwrProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DmdPwr;
                }
                set
                {
                    this.ModelElement.DmdPwr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DmdPwrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DmdPwrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PwrRtg property
        /// </summary>
        private sealed class PwrRtgProxy : ModelPropertyChange<IZGEN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PwrRtgProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PwrRtg;
                }
                set
                {
                    this.ModelElement.PwrRtg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PwrRtgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PwrRtgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VRtg property
        /// </summary>
        private sealed class VRtgProxy : ModelPropertyChange<IZGEN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VRtgProxy(IZGEN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.VRtg;
                }
                set
                {
                    this.ModelElement.VRtg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRtgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRtgChanged -= handler;
            }
        }
    }
}

