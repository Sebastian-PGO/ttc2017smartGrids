//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupZ
{
    
    
    /// <summary>
    /// The public interface for ZBAT
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ZBAT))]
    [XmlDefaultImplementationTypeAttribute(typeof(ZBAT))]
    public interface IZBAT : IModelElement, IGroupZ
    {
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        IMV OpTmh
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Vol property
        /// </summary>
        IMV Vol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The VolChgRte property
        /// </summary>
        IMV VolChgRte
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Amp property
        /// </summary>
        IMV Amp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BatTest property
        /// </summary>
        ISPC BatTest
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TestRsl property
        /// </summary>
        ISPC TestRsl
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BatHi property
        /// </summary>
        ISPC BatHi
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BatLo property
        /// </summary>
        ISPC BatLo
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LoBatVal property
        /// </summary>
        IASG LoBatVal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HiBatVal property
        /// </summary>
        IASG HiBatVal
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the Vol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChanging;
        
        /// <summary>
        /// Gets fired when the Vol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChanged;
        
        /// <summary>
        /// Gets fired before the VolChgRte property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChgRteChanging;
        
        /// <summary>
        /// Gets fired when the VolChgRte property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolChgRteChanged;
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the BatTest property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatTestChanging;
        
        /// <summary>
        /// Gets fired when the BatTest property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatTestChanged;
        
        /// <summary>
        /// Gets fired before the TestRsl property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TestRslChanging;
        
        /// <summary>
        /// Gets fired when the TestRsl property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TestRslChanged;
        
        /// <summary>
        /// Gets fired before the BatHi property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatHiChanging;
        
        /// <summary>
        /// Gets fired when the BatHi property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatHiChanged;
        
        /// <summary>
        /// Gets fired before the BatLo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatLoChanging;
        
        /// <summary>
        /// Gets fired when the BatLo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BatLoChanged;
        
        /// <summary>
        /// Gets fired before the LoBatVal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoBatValChanging;
        
        /// <summary>
        /// Gets fired when the LoBatVal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoBatValChanged;
        
        /// <summary>
        /// Gets fired before the HiBatVal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HiBatValChanging;
        
        /// <summary>
        /// Gets fired when the HiBatVal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HiBatValChanged;
    }
}

