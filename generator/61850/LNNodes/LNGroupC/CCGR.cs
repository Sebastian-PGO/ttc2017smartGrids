//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC
{
    
    
    /// <summary>
    /// The default implementation of the CCGR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pC")]
    [XmlNamespacePrefixAttribute("groupc")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupC/CCGR")]
    public class CCGR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC.GroupC, ICCGR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private IING _eEHealth;
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        /// <summary>
        /// The backing field for the OpTmh property
        /// </summary>
        private IINS _opTmh;
        
        /// <summary>
        /// The backing field for the EnvTmp property
        /// </summary>
        private IMV _envTmp;
        
        /// <summary>
        /// The backing field for the OilTmpIn property
        /// </summary>
        private IMV _oilTmpIn;
        
        /// <summary>
        /// The backing field for the OilTmpOut property
        /// </summary>
        private IMV _oilTmpOut;
        
        /// <summary>
        /// The backing field for the OilMotA property
        /// </summary>
        private IMV _oilMotA;
        
        /// <summary>
        /// The backing field for the FanFlw property
        /// </summary>
        private IMV _fanFlw;
        
        /// <summary>
        /// The backing field for the FanA property
        /// </summary>
        private IMV _fanA;
        
        /// <summary>
        /// The backing field for the CECtl property
        /// </summary>
        private ISPC _cECtl;
        
        /// <summary>
        /// The backing field for the PmpCtlGen property
        /// </summary>
        private IINC _pmpCtlGen;
        
        /// <summary>
        /// The backing field for the PmpCtl property
        /// </summary>
        private IINC _pmpCtl;
        
        /// <summary>
        /// The backing field for the FanCtlGen property
        /// </summary>
        private IINC _fanCtlGen;
        
        /// <summary>
        /// The backing field for the FanCtl property
        /// </summary>
        private IINC _fanCtl;
        
        /// <summary>
        /// The backing field for the Auto property
        /// </summary>
        private ISPS _auto;
        
        /// <summary>
        /// The backing field for the FanOvCur property
        /// </summary>
        private ISPS _fanOvCur;
        
        /// <summary>
        /// The backing field for the PmpOvCur property
        /// </summary>
        private ISPS _pmpOvCur;
        
        /// <summary>
        /// The backing field for the PmpAlm property
        /// </summary>
        private ISPS _pmpAlm;
        
        /// <summary>
        /// The backing field for the OilTmpSet property
        /// </summary>
        private IASG _oilTmpSet;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    IING old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e);
                    this._eEHealth = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEHealth;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEHealth;
                    }
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e);
                }
            }
        }
        
        /// <summary>
        /// The OpTmh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpTmh
        {
            get
            {
                return this._opTmh;
            }
            set
            {
                if ((this._opTmh != value))
                {
                    IINS old = this._opTmh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpTmhChanging(e);
                    this.OnPropertyChanging("OpTmh", e);
                    this._opTmh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpTmh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpTmh;
                    }
                    this.OnOpTmhChanged(e);
                    this.OnPropertyChanged("OpTmh", e);
                }
            }
        }
        
        /// <summary>
        /// The EnvTmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV EnvTmp
        {
            get
            {
                return this._envTmp;
            }
            set
            {
                if ((this._envTmp != value))
                {
                    IMV old = this._envTmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnvTmpChanging(e);
                    this.OnPropertyChanging("EnvTmp", e);
                    this._envTmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEnvTmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEnvTmp;
                    }
                    this.OnEnvTmpChanged(e);
                    this.OnPropertyChanged("EnvTmp", e);
                }
            }
        }
        
        /// <summary>
        /// The OilTmpIn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV OilTmpIn
        {
            get
            {
                return this._oilTmpIn;
            }
            set
            {
                if ((this._oilTmpIn != value))
                {
                    IMV old = this._oilTmpIn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilTmpInChanging(e);
                    this.OnPropertyChanging("OilTmpIn", e);
                    this._oilTmpIn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOilTmpIn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOilTmpIn;
                    }
                    this.OnOilTmpInChanged(e);
                    this.OnPropertyChanged("OilTmpIn", e);
                }
            }
        }
        
        /// <summary>
        /// The OilTmpOut property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV OilTmpOut
        {
            get
            {
                return this._oilTmpOut;
            }
            set
            {
                if ((this._oilTmpOut != value))
                {
                    IMV old = this._oilTmpOut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilTmpOutChanging(e);
                    this.OnPropertyChanging("OilTmpOut", e);
                    this._oilTmpOut = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOilTmpOut;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOilTmpOut;
                    }
                    this.OnOilTmpOutChanged(e);
                    this.OnPropertyChanged("OilTmpOut", e);
                }
            }
        }
        
        /// <summary>
        /// The OilMotA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV OilMotA
        {
            get
            {
                return this._oilMotA;
            }
            set
            {
                if ((this._oilMotA != value))
                {
                    IMV old = this._oilMotA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilMotAChanging(e);
                    this.OnPropertyChanging("OilMotA", e);
                    this._oilMotA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOilMotA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOilMotA;
                    }
                    this.OnOilMotAChanged(e);
                    this.OnPropertyChanged("OilMotA", e);
                }
            }
        }
        
        /// <summary>
        /// The FanFlw property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV FanFlw
        {
            get
            {
                return this._fanFlw;
            }
            set
            {
                if ((this._fanFlw != value))
                {
                    IMV old = this._fanFlw;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFanFlwChanging(e);
                    this.OnPropertyChanging("FanFlw", e);
                    this._fanFlw = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFanFlw;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFanFlw;
                    }
                    this.OnFanFlwChanged(e);
                    this.OnPropertyChanged("FanFlw", e);
                }
            }
        }
        
        /// <summary>
        /// The FanA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV FanA
        {
            get
            {
                return this._fanA;
            }
            set
            {
                if ((this._fanA != value))
                {
                    IMV old = this._fanA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFanAChanging(e);
                    this.OnPropertyChanging("FanA", e);
                    this._fanA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFanA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFanA;
                    }
                    this.OnFanAChanged(e);
                    this.OnPropertyChanged("FanA", e);
                }
            }
        }
        
        /// <summary>
        /// The CECtl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC CECtl
        {
            get
            {
                return this._cECtl;
            }
            set
            {
                if ((this._cECtl != value))
                {
                    ISPC old = this._cECtl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCECtlChanging(e);
                    this.OnPropertyChanging("CECtl", e);
                    this._cECtl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCECtl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCECtl;
                    }
                    this.OnCECtlChanged(e);
                    this.OnPropertyChanged("CECtl", e);
                }
            }
        }
        
        /// <summary>
        /// The PmpCtlGen property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC PmpCtlGen
        {
            get
            {
                return this._pmpCtlGen;
            }
            set
            {
                if ((this._pmpCtlGen != value))
                {
                    IINC old = this._pmpCtlGen;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPmpCtlGenChanging(e);
                    this.OnPropertyChanging("PmpCtlGen", e);
                    this._pmpCtlGen = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPmpCtlGen;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPmpCtlGen;
                    }
                    this.OnPmpCtlGenChanged(e);
                    this.OnPropertyChanged("PmpCtlGen", e);
                }
            }
        }
        
        /// <summary>
        /// The PmpCtl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC PmpCtl
        {
            get
            {
                return this._pmpCtl;
            }
            set
            {
                if ((this._pmpCtl != value))
                {
                    IINC old = this._pmpCtl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPmpCtlChanging(e);
                    this.OnPropertyChanging("PmpCtl", e);
                    this._pmpCtl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPmpCtl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPmpCtl;
                    }
                    this.OnPmpCtlChanged(e);
                    this.OnPropertyChanged("PmpCtl", e);
                }
            }
        }
        
        /// <summary>
        /// The FanCtlGen property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC FanCtlGen
        {
            get
            {
                return this._fanCtlGen;
            }
            set
            {
                if ((this._fanCtlGen != value))
                {
                    IINC old = this._fanCtlGen;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFanCtlGenChanging(e);
                    this.OnPropertyChanging("FanCtlGen", e);
                    this._fanCtlGen = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFanCtlGen;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFanCtlGen;
                    }
                    this.OnFanCtlGenChanged(e);
                    this.OnPropertyChanged("FanCtlGen", e);
                }
            }
        }
        
        /// <summary>
        /// The FanCtl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC FanCtl
        {
            get
            {
                return this._fanCtl;
            }
            set
            {
                if ((this._fanCtl != value))
                {
                    IINC old = this._fanCtl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFanCtlChanging(e);
                    this.OnPropertyChanging("FanCtl", e);
                    this._fanCtl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFanCtl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFanCtl;
                    }
                    this.OnFanCtlChanged(e);
                    this.OnPropertyChanged("FanCtl", e);
                }
            }
        }
        
        /// <summary>
        /// The Auto property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Auto
        {
            get
            {
                return this._auto;
            }
            set
            {
                if ((this._auto != value))
                {
                    ISPS old = this._auto;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoChanging(e);
                    this.OnPropertyChanging("Auto", e);
                    this._auto = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAuto;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAuto;
                    }
                    this.OnAutoChanged(e);
                    this.OnPropertyChanged("Auto", e);
                }
            }
        }
        
        /// <summary>
        /// The FanOvCur property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS FanOvCur
        {
            get
            {
                return this._fanOvCur;
            }
            set
            {
                if ((this._fanOvCur != value))
                {
                    ISPS old = this._fanOvCur;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFanOvCurChanging(e);
                    this.OnPropertyChanging("FanOvCur", e);
                    this._fanOvCur = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFanOvCur;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFanOvCur;
                    }
                    this.OnFanOvCurChanged(e);
                    this.OnPropertyChanged("FanOvCur", e);
                }
            }
        }
        
        /// <summary>
        /// The PmpOvCur property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS PmpOvCur
        {
            get
            {
                return this._pmpOvCur;
            }
            set
            {
                if ((this._pmpOvCur != value))
                {
                    ISPS old = this._pmpOvCur;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPmpOvCurChanging(e);
                    this.OnPropertyChanging("PmpOvCur", e);
                    this._pmpOvCur = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPmpOvCur;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPmpOvCur;
                    }
                    this.OnPmpOvCurChanged(e);
                    this.OnPropertyChanged("PmpOvCur", e);
                }
            }
        }
        
        /// <summary>
        /// The PmpAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS PmpAlm
        {
            get
            {
                return this._pmpAlm;
            }
            set
            {
                if ((this._pmpAlm != value))
                {
                    ISPS old = this._pmpAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPmpAlmChanging(e);
                    this.OnPropertyChanging("PmpAlm", e);
                    this._pmpAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPmpAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPmpAlm;
                    }
                    this.OnPmpAlmChanged(e);
                    this.OnPropertyChanged("PmpAlm", e);
                }
            }
        }
        
        /// <summary>
        /// The OilTmpSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG OilTmpSet
        {
            get
            {
                return this._oilTmpSet;
            }
            set
            {
                if ((this._oilTmpSet != value))
                {
                    IASG old = this._oilTmpSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilTmpSetChanging(e);
                    this.OnPropertyChanging("OilTmpSet", e);
                    this._oilTmpSet = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOilTmpSet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOilTmpSet;
                    }
                    this.OnOilTmpSetChanged(e);
                    this.OnPropertyChanged("OilTmpSet", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CCGRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupC/CCGR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the OpTmh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanging;
        
        /// <summary>
        /// Gets fired when the OpTmh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpTmhChanged;
        
        /// <summary>
        /// Gets fired before the EnvTmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvTmpChanging;
        
        /// <summary>
        /// Gets fired when the EnvTmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvTmpChanged;
        
        /// <summary>
        /// Gets fired before the OilTmpIn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpInChanging;
        
        /// <summary>
        /// Gets fired when the OilTmpIn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpInChanged;
        
        /// <summary>
        /// Gets fired before the OilTmpOut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpOutChanging;
        
        /// <summary>
        /// Gets fired when the OilTmpOut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpOutChanged;
        
        /// <summary>
        /// Gets fired before the OilMotA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilMotAChanging;
        
        /// <summary>
        /// Gets fired when the OilMotA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilMotAChanged;
        
        /// <summary>
        /// Gets fired before the FanFlw property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanFlwChanging;
        
        /// <summary>
        /// Gets fired when the FanFlw property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanFlwChanged;
        
        /// <summary>
        /// Gets fired before the FanA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanAChanging;
        
        /// <summary>
        /// Gets fired when the FanA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanAChanged;
        
        /// <summary>
        /// Gets fired before the CECtl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CECtlChanging;
        
        /// <summary>
        /// Gets fired when the CECtl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CECtlChanged;
        
        /// <summary>
        /// Gets fired before the PmpCtlGen property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpCtlGenChanging;
        
        /// <summary>
        /// Gets fired when the PmpCtlGen property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpCtlGenChanged;
        
        /// <summary>
        /// Gets fired before the PmpCtl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpCtlChanging;
        
        /// <summary>
        /// Gets fired when the PmpCtl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpCtlChanged;
        
        /// <summary>
        /// Gets fired before the FanCtlGen property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanCtlGenChanging;
        
        /// <summary>
        /// Gets fired when the FanCtlGen property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanCtlGenChanged;
        
        /// <summary>
        /// Gets fired before the FanCtl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanCtlChanging;
        
        /// <summary>
        /// Gets fired when the FanCtl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanCtlChanged;
        
        /// <summary>
        /// Gets fired before the Auto property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoChanging;
        
        /// <summary>
        /// Gets fired when the Auto property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoChanged;
        
        /// <summary>
        /// Gets fired before the FanOvCur property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanOvCurChanging;
        
        /// <summary>
        /// Gets fired when the FanOvCur property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FanOvCurChanged;
        
        /// <summary>
        /// Gets fired before the PmpOvCur property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpOvCurChanging;
        
        /// <summary>
        /// Gets fired when the PmpOvCur property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpOvCurChanged;
        
        /// <summary>
        /// Gets fired before the PmpAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpAlmChanging;
        
        /// <summary>
        /// Gets fired when the PmpAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PmpAlmChanged;
        
        /// <summary>
        /// Gets fired before the OilTmpSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpSetChanging;
        
        /// <summary>
        /// Gets fired when the OilTmpSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilTmpSetChanged;
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEHealth property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEHealth(object sender, System.EventArgs eventArgs)
        {
            this.EEHealth = null;
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        /// <summary>
        /// Raises the OpTmhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpTmhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpTmhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpTmhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpTmh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpTmh(object sender, System.EventArgs eventArgs)
        {
            this.OpTmh = null;
        }
        
        /// <summary>
        /// Raises the EnvTmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvTmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvTmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnvTmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvTmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvTmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EnvTmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnvTmp(object sender, System.EventArgs eventArgs)
        {
            this.EnvTmp = null;
        }
        
        /// <summary>
        /// Raises the OilTmpInChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpInChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpInChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilTmpInChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpInChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpInChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OilTmpIn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOilTmpIn(object sender, System.EventArgs eventArgs)
        {
            this.OilTmpIn = null;
        }
        
        /// <summary>
        /// Raises the OilTmpOutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpOutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpOutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilTmpOutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpOutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpOutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OilTmpOut property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOilTmpOut(object sender, System.EventArgs eventArgs)
        {
            this.OilTmpOut = null;
        }
        
        /// <summary>
        /// Raises the OilMotAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilMotAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilMotAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilMotAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilMotAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilMotAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OilMotA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOilMotA(object sender, System.EventArgs eventArgs)
        {
            this.OilMotA = null;
        }
        
        /// <summary>
        /// Raises the FanFlwChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanFlwChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanFlwChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FanFlwChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanFlwChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanFlwChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FanFlw property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFanFlw(object sender, System.EventArgs eventArgs)
        {
            this.FanFlw = null;
        }
        
        /// <summary>
        /// Raises the FanAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FanAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FanA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFanA(object sender, System.EventArgs eventArgs)
        {
            this.FanA = null;
        }
        
        /// <summary>
        /// Raises the CECtlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCECtlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CECtlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CECtlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCECtlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CECtlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CECtl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCECtl(object sender, System.EventArgs eventArgs)
        {
            this.CECtl = null;
        }
        
        /// <summary>
        /// Raises the PmpCtlGenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpCtlGenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpCtlGenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PmpCtlGenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpCtlGenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpCtlGenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PmpCtlGen property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPmpCtlGen(object sender, System.EventArgs eventArgs)
        {
            this.PmpCtlGen = null;
        }
        
        /// <summary>
        /// Raises the PmpCtlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpCtlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpCtlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PmpCtlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpCtlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpCtlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PmpCtl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPmpCtl(object sender, System.EventArgs eventArgs)
        {
            this.PmpCtl = null;
        }
        
        /// <summary>
        /// Raises the FanCtlGenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanCtlGenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanCtlGenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FanCtlGenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanCtlGenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanCtlGenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FanCtlGen property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFanCtlGen(object sender, System.EventArgs eventArgs)
        {
            this.FanCtlGen = null;
        }
        
        /// <summary>
        /// Raises the FanCtlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanCtlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanCtlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FanCtlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanCtlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanCtlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FanCtl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFanCtl(object sender, System.EventArgs eventArgs)
        {
            this.FanCtl = null;
        }
        
        /// <summary>
        /// Raises the AutoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Auto property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAuto(object sender, System.EventArgs eventArgs)
        {
            this.Auto = null;
        }
        
        /// <summary>
        /// Raises the FanOvCurChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanOvCurChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanOvCurChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FanOvCurChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFanOvCurChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FanOvCurChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FanOvCur property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFanOvCur(object sender, System.EventArgs eventArgs)
        {
            this.FanOvCur = null;
        }
        
        /// <summary>
        /// Raises the PmpOvCurChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpOvCurChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpOvCurChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PmpOvCurChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpOvCurChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpOvCurChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PmpOvCur property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPmpOvCur(object sender, System.EventArgs eventArgs)
        {
            this.PmpOvCur = null;
        }
        
        /// <summary>
        /// Raises the PmpAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PmpAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPmpAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PmpAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PmpAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPmpAlm(object sender, System.EventArgs eventArgs)
        {
            this.PmpAlm = null;
        }
        
        /// <summary>
        /// Raises the OilTmpSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilTmpSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilTmpSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilTmpSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OilTmpSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOilTmpSet(object sender, System.EventArgs eventArgs)
        {
            this.OilTmpSet = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((IING)(value));
                return;
            }
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "OPTMH"))
            {
                this.OpTmh = ((IINS)(value));
                return;
            }
            if ((feature == "ENVTMP"))
            {
                this.EnvTmp = ((IMV)(value));
                return;
            }
            if ((feature == "OILTMPIN"))
            {
                this.OilTmpIn = ((IMV)(value));
                return;
            }
            if ((feature == "OILTMPOUT"))
            {
                this.OilTmpOut = ((IMV)(value));
                return;
            }
            if ((feature == "OILMOTA"))
            {
                this.OilMotA = ((IMV)(value));
                return;
            }
            if ((feature == "FANFLW"))
            {
                this.FanFlw = ((IMV)(value));
                return;
            }
            if ((feature == "FANA"))
            {
                this.FanA = ((IMV)(value));
                return;
            }
            if ((feature == "CECTL"))
            {
                this.CECtl = ((ISPC)(value));
                return;
            }
            if ((feature == "PMPCTLGEN"))
            {
                this.PmpCtlGen = ((IINC)(value));
                return;
            }
            if ((feature == "PMPCTL"))
            {
                this.PmpCtl = ((IINC)(value));
                return;
            }
            if ((feature == "FANCTLGEN"))
            {
                this.FanCtlGen = ((IINC)(value));
                return;
            }
            if ((feature == "FANCTL"))
            {
                this.FanCtl = ((IINC)(value));
                return;
            }
            if ((feature == "AUTO"))
            {
                this.Auto = ((ISPS)(value));
                return;
            }
            if ((feature == "FANOVCUR"))
            {
                this.FanOvCur = ((ISPS)(value));
                return;
            }
            if ((feature == "PMPOVCUR"))
            {
                this.PmpOvCur = ((ISPS)(value));
                return;
            }
            if ((feature == "PMPALM"))
            {
                this.PmpAlm = ((ISPS)(value));
                return;
            }
            if ((feature == "OILTMPSET"))
            {
                this.OilTmpSet = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEHealth"))
            {
                return new EEHealthProxy(this);
            }
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((attribute == "EnvTmp"))
            {
                return new EnvTmpProxy(this);
            }
            if ((attribute == "OilTmpIn"))
            {
                return new OilTmpInProxy(this);
            }
            if ((attribute == "OilTmpOut"))
            {
                return new OilTmpOutProxy(this);
            }
            if ((attribute == "OilMotA"))
            {
                return new OilMotAProxy(this);
            }
            if ((attribute == "FanFlw"))
            {
                return new FanFlwProxy(this);
            }
            if ((attribute == "FanA"))
            {
                return new FanAProxy(this);
            }
            if ((attribute == "CECtl"))
            {
                return new CECtlProxy(this);
            }
            if ((attribute == "PmpCtlGen"))
            {
                return new PmpCtlGenProxy(this);
            }
            if ((attribute == "PmpCtl"))
            {
                return new PmpCtlProxy(this);
            }
            if ((attribute == "FanCtlGen"))
            {
                return new FanCtlGenProxy(this);
            }
            if ((attribute == "FanCtl"))
            {
                return new FanCtlProxy(this);
            }
            if ((attribute == "Auto"))
            {
                return new AutoProxy(this);
            }
            if ((attribute == "FanOvCur"))
            {
                return new FanOvCurProxy(this);
            }
            if ((attribute == "PmpOvCur"))
            {
                return new PmpOvCurProxy(this);
            }
            if ((attribute == "PmpAlm"))
            {
                return new PmpAlmProxy(this);
            }
            if ((attribute == "OilTmpSet"))
            {
                return new OilTmpSetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEHealth"))
            {
                return new EEHealthProxy(this);
            }
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "OpTmh"))
            {
                return new OpTmhProxy(this);
            }
            if ((reference == "EnvTmp"))
            {
                return new EnvTmpProxy(this);
            }
            if ((reference == "OilTmpIn"))
            {
                return new OilTmpInProxy(this);
            }
            if ((reference == "OilTmpOut"))
            {
                return new OilTmpOutProxy(this);
            }
            if ((reference == "OilMotA"))
            {
                return new OilMotAProxy(this);
            }
            if ((reference == "FanFlw"))
            {
                return new FanFlwProxy(this);
            }
            if ((reference == "FanA"))
            {
                return new FanAProxy(this);
            }
            if ((reference == "CECtl"))
            {
                return new CECtlProxy(this);
            }
            if ((reference == "PmpCtlGen"))
            {
                return new PmpCtlGenProxy(this);
            }
            if ((reference == "PmpCtl"))
            {
                return new PmpCtlProxy(this);
            }
            if ((reference == "FanCtlGen"))
            {
                return new FanCtlGenProxy(this);
            }
            if ((reference == "FanCtl"))
            {
                return new FanCtlProxy(this);
            }
            if ((reference == "Auto"))
            {
                return new AutoProxy(this);
            }
            if ((reference == "FanOvCur"))
            {
                return new FanOvCurProxy(this);
            }
            if ((reference == "PmpOvCur"))
            {
                return new PmpOvCurProxy(this);
            }
            if ((reference == "PmpAlm"))
            {
                return new PmpAlmProxy(this);
            }
            if ((reference == "OilTmpSet"))
            {
                return new OilTmpSetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupC/CCGR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CCGR class
        /// </summary>
        public class CCGRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CCGR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CCGRReferencedElementsCollection(CCGR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEHealth != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpTmh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EnvTmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OilTmpIn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OilTmpOut != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OilMotA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FanFlw != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FanA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CECtl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PmpCtlGen != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PmpCtl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FanCtlGen != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FanCtl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Auto != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FanOvCur != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PmpOvCur != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PmpAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OilTmpSet != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EEHealthChanged += this.PropagateValueChanges;
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.OpTmhChanged += this.PropagateValueChanges;
                this._parent.EnvTmpChanged += this.PropagateValueChanges;
                this._parent.OilTmpInChanged += this.PropagateValueChanges;
                this._parent.OilTmpOutChanged += this.PropagateValueChanges;
                this._parent.OilMotAChanged += this.PropagateValueChanges;
                this._parent.FanFlwChanged += this.PropagateValueChanges;
                this._parent.FanAChanged += this.PropagateValueChanges;
                this._parent.CECtlChanged += this.PropagateValueChanges;
                this._parent.PmpCtlGenChanged += this.PropagateValueChanges;
                this._parent.PmpCtlChanged += this.PropagateValueChanges;
                this._parent.FanCtlGenChanged += this.PropagateValueChanges;
                this._parent.FanCtlChanged += this.PropagateValueChanges;
                this._parent.AutoChanged += this.PropagateValueChanges;
                this._parent.FanOvCurChanged += this.PropagateValueChanges;
                this._parent.PmpOvCurChanged += this.PropagateValueChanges;
                this._parent.PmpAlmChanged += this.PropagateValueChanges;
                this._parent.OilTmpSetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EEHealthChanged -= this.PropagateValueChanges;
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.OpTmhChanged -= this.PropagateValueChanges;
                this._parent.EnvTmpChanged -= this.PropagateValueChanges;
                this._parent.OilTmpInChanged -= this.PropagateValueChanges;
                this._parent.OilTmpOutChanged -= this.PropagateValueChanges;
                this._parent.OilMotAChanged -= this.PropagateValueChanges;
                this._parent.FanFlwChanged -= this.PropagateValueChanges;
                this._parent.FanAChanged -= this.PropagateValueChanges;
                this._parent.CECtlChanged -= this.PropagateValueChanges;
                this._parent.PmpCtlGenChanged -= this.PropagateValueChanges;
                this._parent.PmpCtlChanged -= this.PropagateValueChanges;
                this._parent.FanCtlGenChanged -= this.PropagateValueChanges;
                this._parent.FanCtlChanged -= this.PropagateValueChanges;
                this._parent.AutoChanged -= this.PropagateValueChanges;
                this._parent.FanOvCurChanged -= this.PropagateValueChanges;
                this._parent.PmpOvCurChanged -= this.PropagateValueChanges;
                this._parent.PmpAlmChanged -= this.PropagateValueChanges;
                this._parent.OilTmpSetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEHealth == null))
                {
                    IING eEHealthCasted = item.As<IING>();
                    if ((eEHealthCasted != null))
                    {
                        this._parent.EEHealth = eEHealthCasted;
                        return;
                    }
                }
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.OpTmh == null))
                {
                    IINS opTmhCasted = item.As<IINS>();
                    if ((opTmhCasted != null))
                    {
                        this._parent.OpTmh = opTmhCasted;
                        return;
                    }
                }
                if ((this._parent.EnvTmp == null))
                {
                    IMV envTmpCasted = item.As<IMV>();
                    if ((envTmpCasted != null))
                    {
                        this._parent.EnvTmp = envTmpCasted;
                        return;
                    }
                }
                if ((this._parent.OilTmpIn == null))
                {
                    IMV oilTmpInCasted = item.As<IMV>();
                    if ((oilTmpInCasted != null))
                    {
                        this._parent.OilTmpIn = oilTmpInCasted;
                        return;
                    }
                }
                if ((this._parent.OilTmpOut == null))
                {
                    IMV oilTmpOutCasted = item.As<IMV>();
                    if ((oilTmpOutCasted != null))
                    {
                        this._parent.OilTmpOut = oilTmpOutCasted;
                        return;
                    }
                }
                if ((this._parent.OilMotA == null))
                {
                    IMV oilMotACasted = item.As<IMV>();
                    if ((oilMotACasted != null))
                    {
                        this._parent.OilMotA = oilMotACasted;
                        return;
                    }
                }
                if ((this._parent.FanFlw == null))
                {
                    IMV fanFlwCasted = item.As<IMV>();
                    if ((fanFlwCasted != null))
                    {
                        this._parent.FanFlw = fanFlwCasted;
                        return;
                    }
                }
                if ((this._parent.FanA == null))
                {
                    IMV fanACasted = item.As<IMV>();
                    if ((fanACasted != null))
                    {
                        this._parent.FanA = fanACasted;
                        return;
                    }
                }
                if ((this._parent.CECtl == null))
                {
                    ISPC cECtlCasted = item.As<ISPC>();
                    if ((cECtlCasted != null))
                    {
                        this._parent.CECtl = cECtlCasted;
                        return;
                    }
                }
                if ((this._parent.PmpCtlGen == null))
                {
                    IINC pmpCtlGenCasted = item.As<IINC>();
                    if ((pmpCtlGenCasted != null))
                    {
                        this._parent.PmpCtlGen = pmpCtlGenCasted;
                        return;
                    }
                }
                if ((this._parent.PmpCtl == null))
                {
                    IINC pmpCtlCasted = item.As<IINC>();
                    if ((pmpCtlCasted != null))
                    {
                        this._parent.PmpCtl = pmpCtlCasted;
                        return;
                    }
                }
                if ((this._parent.FanCtlGen == null))
                {
                    IINC fanCtlGenCasted = item.As<IINC>();
                    if ((fanCtlGenCasted != null))
                    {
                        this._parent.FanCtlGen = fanCtlGenCasted;
                        return;
                    }
                }
                if ((this._parent.FanCtl == null))
                {
                    IINC fanCtlCasted = item.As<IINC>();
                    if ((fanCtlCasted != null))
                    {
                        this._parent.FanCtl = fanCtlCasted;
                        return;
                    }
                }
                if ((this._parent.Auto == null))
                {
                    ISPS autoCasted = item.As<ISPS>();
                    if ((autoCasted != null))
                    {
                        this._parent.Auto = autoCasted;
                        return;
                    }
                }
                if ((this._parent.FanOvCur == null))
                {
                    ISPS fanOvCurCasted = item.As<ISPS>();
                    if ((fanOvCurCasted != null))
                    {
                        this._parent.FanOvCur = fanOvCurCasted;
                        return;
                    }
                }
                if ((this._parent.PmpOvCur == null))
                {
                    ISPS pmpOvCurCasted = item.As<ISPS>();
                    if ((pmpOvCurCasted != null))
                    {
                        this._parent.PmpOvCur = pmpOvCurCasted;
                        return;
                    }
                }
                if ((this._parent.PmpAlm == null))
                {
                    ISPS pmpAlmCasted = item.As<ISPS>();
                    if ((pmpAlmCasted != null))
                    {
                        this._parent.PmpAlm = pmpAlmCasted;
                        return;
                    }
                }
                if ((this._parent.OilTmpSet == null))
                {
                    IASG oilTmpSetCasted = item.As<IASG>();
                    if ((oilTmpSetCasted != null))
                    {
                        this._parent.OilTmpSet = oilTmpSetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEHealth = null;
                this._parent.EEName = null;
                this._parent.OpTmh = null;
                this._parent.EnvTmp = null;
                this._parent.OilTmpIn = null;
                this._parent.OilTmpOut = null;
                this._parent.OilMotA = null;
                this._parent.FanFlw = null;
                this._parent.FanA = null;
                this._parent.CECtl = null;
                this._parent.PmpCtlGen = null;
                this._parent.PmpCtl = null;
                this._parent.FanCtlGen = null;
                this._parent.FanCtl = null;
                this._parent.Auto = null;
                this._parent.FanOvCur = null;
                this._parent.PmpOvCur = null;
                this._parent.PmpAlm = null;
                this._parent.OilTmpSet = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEHealth))
                {
                    return true;
                }
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.OpTmh))
                {
                    return true;
                }
                if ((item == this._parent.EnvTmp))
                {
                    return true;
                }
                if ((item == this._parent.OilTmpIn))
                {
                    return true;
                }
                if ((item == this._parent.OilTmpOut))
                {
                    return true;
                }
                if ((item == this._parent.OilMotA))
                {
                    return true;
                }
                if ((item == this._parent.FanFlw))
                {
                    return true;
                }
                if ((item == this._parent.FanA))
                {
                    return true;
                }
                if ((item == this._parent.CECtl))
                {
                    return true;
                }
                if ((item == this._parent.PmpCtlGen))
                {
                    return true;
                }
                if ((item == this._parent.PmpCtl))
                {
                    return true;
                }
                if ((item == this._parent.FanCtlGen))
                {
                    return true;
                }
                if ((item == this._parent.FanCtl))
                {
                    return true;
                }
                if ((item == this._parent.Auto))
                {
                    return true;
                }
                if ((item == this._parent.FanOvCur))
                {
                    return true;
                }
                if ((item == this._parent.PmpOvCur))
                {
                    return true;
                }
                if ((item == this._parent.PmpAlm))
                {
                    return true;
                }
                if ((item == this._parent.OilTmpSet))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEHealth != null))
                {
                    array[arrayIndex] = this._parent.EEHealth;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpTmh != null))
                {
                    array[arrayIndex] = this._parent.OpTmh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EnvTmp != null))
                {
                    array[arrayIndex] = this._parent.EnvTmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OilTmpIn != null))
                {
                    array[arrayIndex] = this._parent.OilTmpIn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OilTmpOut != null))
                {
                    array[arrayIndex] = this._parent.OilTmpOut;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OilMotA != null))
                {
                    array[arrayIndex] = this._parent.OilMotA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FanFlw != null))
                {
                    array[arrayIndex] = this._parent.FanFlw;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FanA != null))
                {
                    array[arrayIndex] = this._parent.FanA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CECtl != null))
                {
                    array[arrayIndex] = this._parent.CECtl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PmpCtlGen != null))
                {
                    array[arrayIndex] = this._parent.PmpCtlGen;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PmpCtl != null))
                {
                    array[arrayIndex] = this._parent.PmpCtl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FanCtlGen != null))
                {
                    array[arrayIndex] = this._parent.FanCtlGen;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FanCtl != null))
                {
                    array[arrayIndex] = this._parent.FanCtl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Auto != null))
                {
                    array[arrayIndex] = this._parent.Auto;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FanOvCur != null))
                {
                    array[arrayIndex] = this._parent.FanOvCur;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PmpOvCur != null))
                {
                    array[arrayIndex] = this._parent.PmpOvCur;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PmpAlm != null))
                {
                    array[arrayIndex] = this._parent.PmpAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OilTmpSet != null))
                {
                    array[arrayIndex] = this._parent.OilTmpSet;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEHealth == item))
                {
                    this._parent.EEHealth = null;
                    return true;
                }
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.OpTmh == item))
                {
                    this._parent.OpTmh = null;
                    return true;
                }
                if ((this._parent.EnvTmp == item))
                {
                    this._parent.EnvTmp = null;
                    return true;
                }
                if ((this._parent.OilTmpIn == item))
                {
                    this._parent.OilTmpIn = null;
                    return true;
                }
                if ((this._parent.OilTmpOut == item))
                {
                    this._parent.OilTmpOut = null;
                    return true;
                }
                if ((this._parent.OilMotA == item))
                {
                    this._parent.OilMotA = null;
                    return true;
                }
                if ((this._parent.FanFlw == item))
                {
                    this._parent.FanFlw = null;
                    return true;
                }
                if ((this._parent.FanA == item))
                {
                    this._parent.FanA = null;
                    return true;
                }
                if ((this._parent.CECtl == item))
                {
                    this._parent.CECtl = null;
                    return true;
                }
                if ((this._parent.PmpCtlGen == item))
                {
                    this._parent.PmpCtlGen = null;
                    return true;
                }
                if ((this._parent.PmpCtl == item))
                {
                    this._parent.PmpCtl = null;
                    return true;
                }
                if ((this._parent.FanCtlGen == item))
                {
                    this._parent.FanCtlGen = null;
                    return true;
                }
                if ((this._parent.FanCtl == item))
                {
                    this._parent.FanCtl = null;
                    return true;
                }
                if ((this._parent.Auto == item))
                {
                    this._parent.Auto = null;
                    return true;
                }
                if ((this._parent.FanOvCur == item))
                {
                    this._parent.FanOvCur = null;
                    return true;
                }
                if ((this._parent.PmpOvCur == item))
                {
                    this._parent.PmpOvCur = null;
                    return true;
                }
                if ((this._parent.PmpAlm == item))
                {
                    this._parent.PmpAlm = null;
                    return true;
                }
                if ((this._parent.OilTmpSet == item))
                {
                    this._parent.OilTmpSet = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEHealth).Concat(this._parent.EEName).Concat(this._parent.OpTmh).Concat(this._parent.EnvTmp).Concat(this._parent.OilTmpIn).Concat(this._parent.OilTmpOut).Concat(this._parent.OilMotA).Concat(this._parent.FanFlw).Concat(this._parent.FanA).Concat(this._parent.CECtl).Concat(this._parent.PmpCtlGen).Concat(this._parent.PmpCtl).Concat(this._parent.FanCtlGen).Concat(this._parent.FanCtl).Concat(this._parent.Auto).Concat(this._parent.FanOvCur).Concat(this._parent.PmpOvCur).Concat(this._parent.PmpAlm).Concat(this._parent.OilTmpSet).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<ICCGR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<ICCGR, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpTmh property
        /// </summary>
        private sealed class OpTmhProxy : ModelPropertyChange<ICCGR, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpTmhProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpTmh;
                }
                set
                {
                    this.ModelElement.OpTmh = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpTmhChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EnvTmp property
        /// </summary>
        private sealed class EnvTmpProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnvTmpProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.EnvTmp;
                }
                set
                {
                    this.ModelElement.EnvTmp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvTmpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvTmpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OilTmpIn property
        /// </summary>
        private sealed class OilTmpInProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilTmpInProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.OilTmpIn;
                }
                set
                {
                    this.ModelElement.OilTmpIn = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpInChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpInChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OilTmpOut property
        /// </summary>
        private sealed class OilTmpOutProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilTmpOutProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.OilTmpOut;
                }
                set
                {
                    this.ModelElement.OilTmpOut = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpOutChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpOutChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OilMotA property
        /// </summary>
        private sealed class OilMotAProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilMotAProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.OilMotA;
                }
                set
                {
                    this.ModelElement.OilMotA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilMotAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilMotAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FanFlw property
        /// </summary>
        private sealed class FanFlwProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FanFlwProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.FanFlw;
                }
                set
                {
                    this.ModelElement.FanFlw = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanFlwChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanFlwChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FanA property
        /// </summary>
        private sealed class FanAProxy : ModelPropertyChange<ICCGR, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FanAProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.FanA;
                }
                set
                {
                    this.ModelElement.FanA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CECtl property
        /// </summary>
        private sealed class CECtlProxy : ModelPropertyChange<ICCGR, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CECtlProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.CECtl;
                }
                set
                {
                    this.ModelElement.CECtl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CECtlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CECtlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PmpCtlGen property
        /// </summary>
        private sealed class PmpCtlGenProxy : ModelPropertyChange<ICCGR, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PmpCtlGenProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.PmpCtlGen;
                }
                set
                {
                    this.ModelElement.PmpCtlGen = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpCtlGenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpCtlGenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PmpCtl property
        /// </summary>
        private sealed class PmpCtlProxy : ModelPropertyChange<ICCGR, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PmpCtlProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.PmpCtl;
                }
                set
                {
                    this.ModelElement.PmpCtl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpCtlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpCtlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FanCtlGen property
        /// </summary>
        private sealed class FanCtlGenProxy : ModelPropertyChange<ICCGR, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FanCtlGenProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.FanCtlGen;
                }
                set
                {
                    this.ModelElement.FanCtlGen = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanCtlGenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanCtlGenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FanCtl property
        /// </summary>
        private sealed class FanCtlProxy : ModelPropertyChange<ICCGR, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FanCtlProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.FanCtl;
                }
                set
                {
                    this.ModelElement.FanCtl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanCtlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanCtlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Auto property
        /// </summary>
        private sealed class AutoProxy : ModelPropertyChange<ICCGR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Auto;
                }
                set
                {
                    this.ModelElement.Auto = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FanOvCur property
        /// </summary>
        private sealed class FanOvCurProxy : ModelPropertyChange<ICCGR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FanOvCurProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.FanOvCur;
                }
                set
                {
                    this.ModelElement.FanOvCur = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanOvCurChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FanOvCurChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PmpOvCur property
        /// </summary>
        private sealed class PmpOvCurProxy : ModelPropertyChange<ICCGR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PmpOvCurProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.PmpOvCur;
                }
                set
                {
                    this.ModelElement.PmpOvCur = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpOvCurChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpOvCurChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PmpAlm property
        /// </summary>
        private sealed class PmpAlmProxy : ModelPropertyChange<ICCGR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PmpAlmProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.PmpAlm;
                }
                set
                {
                    this.ModelElement.PmpAlm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpAlmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PmpAlmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OilTmpSet property
        /// </summary>
        private sealed class OilTmpSetProxy : ModelPropertyChange<ICCGR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilTmpSetProxy(ICCGR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.OilTmpSet;
                }
                set
                {
                    this.ModelElement.OilTmpSet = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpSetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilTmpSetChanged -= handler;
            }
        }
    }
}

