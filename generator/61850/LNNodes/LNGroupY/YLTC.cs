//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY
{
    
    
    /// <summary>
    /// The default implementation of the YLTC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pY")]
    [XmlNamespacePrefixAttribute("groupy")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupY/YLTC")]
    public partial class YLTC : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupY.GroupY, IYLTC, IModelElement
    {
        
        private static Lazy<ITypedElement> _opCntReference = new Lazy<ITypedElement>(RetrieveOpCntReference);
        
        /// <summary>
        /// The backing field for the OpCnt property
        /// </summary>
        private IINS _opCnt;
        
        private static Lazy<ITypedElement> _torqReference = new Lazy<ITypedElement>(RetrieveTorqReference);
        
        /// <summary>
        /// The backing field for the Torq property
        /// </summary>
        private IMV _torq;
        
        private static Lazy<ITypedElement> _motDrvAReference = new Lazy<ITypedElement>(RetrieveMotDrvAReference);
        
        /// <summary>
        /// The backing field for the MotDrvA property
        /// </summary>
        private IMV _motDrvA;
        
        private static Lazy<ITypedElement> _tapPosReference = new Lazy<ITypedElement>(RetrieveTapPosReference);
        
        /// <summary>
        /// The backing field for the TapPos property
        /// </summary>
        private IISC _tapPos;
        
        private static Lazy<ITypedElement> _tapChgReference = new Lazy<ITypedElement>(RetrieveTapChgReference);
        
        /// <summary>
        /// The backing field for the TapChg property
        /// </summary>
        private IBSC _tapChg;
        
        private static Lazy<ITypedElement> _endPosRReference = new Lazy<ITypedElement>(RetrieveEndPosRReference);
        
        /// <summary>
        /// The backing field for the EndPosR property
        /// </summary>
        private ISPS _endPosR;
        
        private static Lazy<ITypedElement> _endPosLReference = new Lazy<ITypedElement>(RetrieveEndPosLReference);
        
        /// <summary>
        /// The backing field for the EndPosL property
        /// </summary>
        private ISPS _endPosL;
        
        private static Lazy<ITypedElement> _oilFilReference = new Lazy<ITypedElement>(RetrieveOilFilReference);
        
        /// <summary>
        /// The backing field for the OilFil property
        /// </summary>
        private ISPS _oilFil;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCnt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpCnt
        {
            get
            {
                return this._opCnt;
            }
            set
            {
                if ((this._opCnt != value))
                {
                    IINS old = this._opCnt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntChanging(e);
                    this.OnPropertyChanging("OpCnt", e, _opCntReference);
                    this._opCnt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCnt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCnt;
                    }
                    this.OnOpCntChanged(e);
                    this.OnPropertyChanged("OpCnt", e, _opCntReference);
                }
            }
        }
        
        /// <summary>
        /// The Torq property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Torq
        {
            get
            {
                return this._torq;
            }
            set
            {
                if ((this._torq != value))
                {
                    IMV old = this._torq;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTorqChanging(e);
                    this.OnPropertyChanging("Torq", e, _torqReference);
                    this._torq = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTorq;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTorq;
                    }
                    this.OnTorqChanged(e);
                    this.OnPropertyChanged("Torq", e, _torqReference);
                }
            }
        }
        
        /// <summary>
        /// The MotDrvA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MotDrvA
        {
            get
            {
                return this._motDrvA;
            }
            set
            {
                if ((this._motDrvA != value))
                {
                    IMV old = this._motDrvA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMotDrvAChanging(e);
                    this.OnPropertyChanging("MotDrvA", e, _motDrvAReference);
                    this._motDrvA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMotDrvA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMotDrvA;
                    }
                    this.OnMotDrvAChanged(e);
                    this.OnPropertyChanged("MotDrvA", e, _motDrvAReference);
                }
            }
        }
        
        /// <summary>
        /// The TapPos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IISC TapPos
        {
            get
            {
                return this._tapPos;
            }
            set
            {
                if ((this._tapPos != value))
                {
                    IISC old = this._tapPos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapPosChanging(e);
                    this.OnPropertyChanging("TapPos", e, _tapPosReference);
                    this._tapPos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapPos;
                    }
                    this.OnTapPosChanged(e);
                    this.OnPropertyChanged("TapPos", e, _tapPosReference);
                }
            }
        }
        
        /// <summary>
        /// The TapChg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBSC TapChg
        {
            get
            {
                return this._tapChg;
            }
            set
            {
                if ((this._tapChg != value))
                {
                    IBSC old = this._tapChg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapChgChanging(e);
                    this.OnPropertyChanging("TapChg", e, _tapChgReference);
                    this._tapChg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapChg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapChg;
                    }
                    this.OnTapChgChanged(e);
                    this.OnPropertyChanged("TapChg", e, _tapChgReference);
                }
            }
        }
        
        /// <summary>
        /// The EndPosR property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS EndPosR
        {
            get
            {
                return this._endPosR;
            }
            set
            {
                if ((this._endPosR != value))
                {
                    ISPS old = this._endPosR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndPosRChanging(e);
                    this.OnPropertyChanging("EndPosR", e, _endPosRReference);
                    this._endPosR = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEndPosR;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEndPosR;
                    }
                    this.OnEndPosRChanged(e);
                    this.OnPropertyChanged("EndPosR", e, _endPosRReference);
                }
            }
        }
        
        /// <summary>
        /// The EndPosL property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS EndPosL
        {
            get
            {
                return this._endPosL;
            }
            set
            {
                if ((this._endPosL != value))
                {
                    ISPS old = this._endPosL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndPosLChanging(e);
                    this.OnPropertyChanging("EndPosL", e, _endPosLReference);
                    this._endPosL = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEndPosL;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEndPosL;
                    }
                    this.OnEndPosLChanged(e);
                    this.OnPropertyChanged("EndPosL", e, _endPosLReference);
                }
            }
        }
        
        /// <summary>
        /// The OilFil property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS OilFil
        {
            get
            {
                return this._oilFil;
            }
            set
            {
                if ((this._oilFil != value))
                {
                    ISPS old = this._oilFil;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilFilChanging(e);
                    this.OnPropertyChanging("OilFil", e, _oilFilReference);
                    this._oilFil = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOilFil;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOilFil;
                    }
                    this.OnOilFilChanged(e);
                    this.OnPropertyChanged("OilFil", e, _oilFilReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new YLTCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupY/YLTC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCnt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntChanging;
        
        /// <summary>
        /// Gets fired when the OpCnt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntChanged;
        
        /// <summary>
        /// Gets fired before the Torq property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TorqChanging;
        
        /// <summary>
        /// Gets fired when the Torq property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TorqChanged;
        
        /// <summary>
        /// Gets fired before the MotDrvA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotDrvAChanging;
        
        /// <summary>
        /// Gets fired when the MotDrvA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotDrvAChanged;
        
        /// <summary>
        /// Gets fired before the TapPos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapPosChanging;
        
        /// <summary>
        /// Gets fired when the TapPos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapPosChanged;
        
        /// <summary>
        /// Gets fired before the TapChg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanging;
        
        /// <summary>
        /// Gets fired when the TapChg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanged;
        
        /// <summary>
        /// Gets fired before the EndPosR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPosRChanging;
        
        /// <summary>
        /// Gets fired when the EndPosR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPosRChanged;
        
        /// <summary>
        /// Gets fired before the EndPosL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPosLChanging;
        
        /// <summary>
        /// Gets fired when the EndPosL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPosLChanged;
        
        /// <summary>
        /// Gets fired before the OilFil property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilFilChanging;
        
        /// <summary>
        /// Gets fired when the OilFil property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilFilChanged;
        
        private static ITypedElement RetrieveOpCntReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("OpCnt")));
        }
        
        /// <summary>
        /// Raises the OpCntChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCnt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCnt(object sender, System.EventArgs eventArgs)
        {
            this.OpCnt = null;
        }
        
        private static ITypedElement RetrieveTorqReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("Torq")));
        }
        
        /// <summary>
        /// Raises the TorqChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTorqChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TorqChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TorqChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTorqChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TorqChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Torq property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTorq(object sender, System.EventArgs eventArgs)
        {
            this.Torq = null;
        }
        
        private static ITypedElement RetrieveMotDrvAReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("MotDrvA")));
        }
        
        /// <summary>
        /// Raises the MotDrvAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotDrvAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotDrvAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MotDrvAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotDrvAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotDrvAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MotDrvA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMotDrvA(object sender, System.EventArgs eventArgs)
        {
            this.MotDrvA = null;
        }
        
        private static ITypedElement RetrieveTapPosReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("TapPos")));
        }
        
        /// <summary>
        /// Raises the TapPosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapPosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapPosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapPosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapPos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapPos(object sender, System.EventArgs eventArgs)
        {
            this.TapPos = null;
        }
        
        private static ITypedElement RetrieveTapChgReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("TapChg")));
        }
        
        /// <summary>
        /// Raises the TapChgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapChgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapChg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapChg(object sender, System.EventArgs eventArgs)
        {
            this.TapChg = null;
        }
        
        private static ITypedElement RetrieveEndPosRReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("EndPosR")));
        }
        
        /// <summary>
        /// Raises the EndPosRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPosRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPosRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndPosRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPosRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPosRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndPosR property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndPosR(object sender, System.EventArgs eventArgs)
        {
            this.EndPosR = null;
        }
        
        private static ITypedElement RetrieveEndPosLReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("EndPosL")));
        }
        
        /// <summary>
        /// Raises the EndPosLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPosLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPosLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndPosLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPosLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPosLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndPosL property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndPosL(object sender, System.EventArgs eventArgs)
        {
            this.EndPosL = null;
        }
        
        private static ITypedElement RetrieveOilFilReference()
        {
            return ((ITypedElement)(((ModelElement)(YLTC.ClassInstance)).Resolve("OilFil")));
        }
        
        /// <summary>
        /// Raises the OilFilChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilFilChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilFilChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilFilChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilFilChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilFilChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OilFil property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOilFil(object sender, System.EventArgs eventArgs)
        {
            this.OilFil = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNT"))
            {
                this.OpCnt = ((IINS)(value));
                return;
            }
            if ((feature == "TORQ"))
            {
                this.Torq = ((IMV)(value));
                return;
            }
            if ((feature == "MOTDRVA"))
            {
                this.MotDrvA = ((IMV)(value));
                return;
            }
            if ((feature == "TAPPOS"))
            {
                this.TapPos = ((IISC)(value));
                return;
            }
            if ((feature == "TAPCHG"))
            {
                this.TapChg = ((IBSC)(value));
                return;
            }
            if ((feature == "ENDPOSR"))
            {
                this.EndPosR = ((ISPS)(value));
                return;
            }
            if ((feature == "ENDPOSL"))
            {
                this.EndPosL = ((ISPS)(value));
                return;
            }
            if ((feature == "OILFIL"))
            {
                this.OilFil = ((ISPS)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCnt"))
            {
                return new OpCntProxy(this);
            }
            if ((attribute == "Torq"))
            {
                return new TorqProxy(this);
            }
            if ((attribute == "MotDrvA"))
            {
                return new MotDrvAProxy(this);
            }
            if ((attribute == "TapPos"))
            {
                return new TapPosProxy(this);
            }
            if ((attribute == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((attribute == "EndPosR"))
            {
                return new EndPosRProxy(this);
            }
            if ((attribute == "EndPosL"))
            {
                return new EndPosLProxy(this);
            }
            if ((attribute == "OilFil"))
            {
                return new OilFilProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCnt"))
            {
                return new OpCntProxy(this);
            }
            if ((reference == "Torq"))
            {
                return new TorqProxy(this);
            }
            if ((reference == "MotDrvA"))
            {
                return new MotDrvAProxy(this);
            }
            if ((reference == "TapPos"))
            {
                return new TapPosProxy(this);
            }
            if ((reference == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((reference == "EndPosR"))
            {
                return new EndPosRProxy(this);
            }
            if ((reference == "EndPosL"))
            {
                return new EndPosLProxy(this);
            }
            if ((reference == "OilFil"))
            {
                return new OilFilProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupY/YLTC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the YLTC class
        /// </summary>
        public class YLTCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private YLTC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public YLTCReferencedElementsCollection(YLTC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCnt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Torq != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MotDrvA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TapPos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TapChg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EndPosR != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EndPosL != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OilFil != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntChanged += this.PropagateValueChanges;
                this._parent.TorqChanged += this.PropagateValueChanges;
                this._parent.MotDrvAChanged += this.PropagateValueChanges;
                this._parent.TapPosChanged += this.PropagateValueChanges;
                this._parent.TapChgChanged += this.PropagateValueChanges;
                this._parent.EndPosRChanged += this.PropagateValueChanges;
                this._parent.EndPosLChanged += this.PropagateValueChanges;
                this._parent.OilFilChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntChanged -= this.PropagateValueChanges;
                this._parent.TorqChanged -= this.PropagateValueChanges;
                this._parent.MotDrvAChanged -= this.PropagateValueChanges;
                this._parent.TapPosChanged -= this.PropagateValueChanges;
                this._parent.TapChgChanged -= this.PropagateValueChanges;
                this._parent.EndPosRChanged -= this.PropagateValueChanges;
                this._parent.EndPosLChanged -= this.PropagateValueChanges;
                this._parent.OilFilChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCnt == null))
                {
                    IINS opCntCasted = item.As<IINS>();
                    if ((opCntCasted != null))
                    {
                        this._parent.OpCnt = opCntCasted;
                        return;
                    }
                }
                if ((this._parent.Torq == null))
                {
                    IMV torqCasted = item.As<IMV>();
                    if ((torqCasted != null))
                    {
                        this._parent.Torq = torqCasted;
                        return;
                    }
                }
                if ((this._parent.MotDrvA == null))
                {
                    IMV motDrvACasted = item.As<IMV>();
                    if ((motDrvACasted != null))
                    {
                        this._parent.MotDrvA = motDrvACasted;
                        return;
                    }
                }
                if ((this._parent.TapPos == null))
                {
                    IISC tapPosCasted = item.As<IISC>();
                    if ((tapPosCasted != null))
                    {
                        this._parent.TapPos = tapPosCasted;
                        return;
                    }
                }
                if ((this._parent.TapChg == null))
                {
                    IBSC tapChgCasted = item.As<IBSC>();
                    if ((tapChgCasted != null))
                    {
                        this._parent.TapChg = tapChgCasted;
                        return;
                    }
                }
                if ((this._parent.EndPosR == null))
                {
                    ISPS endPosRCasted = item.As<ISPS>();
                    if ((endPosRCasted != null))
                    {
                        this._parent.EndPosR = endPosRCasted;
                        return;
                    }
                }
                if ((this._parent.EndPosL == null))
                {
                    ISPS endPosLCasted = item.As<ISPS>();
                    if ((endPosLCasted != null))
                    {
                        this._parent.EndPosL = endPosLCasted;
                        return;
                    }
                }
                if ((this._parent.OilFil == null))
                {
                    ISPS oilFilCasted = item.As<ISPS>();
                    if ((oilFilCasted != null))
                    {
                        this._parent.OilFil = oilFilCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCnt = null;
                this._parent.Torq = null;
                this._parent.MotDrvA = null;
                this._parent.TapPos = null;
                this._parent.TapChg = null;
                this._parent.EndPosR = null;
                this._parent.EndPosL = null;
                this._parent.OilFil = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCnt))
                {
                    return true;
                }
                if ((item == this._parent.Torq))
                {
                    return true;
                }
                if ((item == this._parent.MotDrvA))
                {
                    return true;
                }
                if ((item == this._parent.TapPos))
                {
                    return true;
                }
                if ((item == this._parent.TapChg))
                {
                    return true;
                }
                if ((item == this._parent.EndPosR))
                {
                    return true;
                }
                if ((item == this._parent.EndPosL))
                {
                    return true;
                }
                if ((item == this._parent.OilFil))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCnt != null))
                {
                    array[arrayIndex] = this._parent.OpCnt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Torq != null))
                {
                    array[arrayIndex] = this._parent.Torq;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MotDrvA != null))
                {
                    array[arrayIndex] = this._parent.MotDrvA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TapPos != null))
                {
                    array[arrayIndex] = this._parent.TapPos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TapChg != null))
                {
                    array[arrayIndex] = this._parent.TapChg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EndPosR != null))
                {
                    array[arrayIndex] = this._parent.EndPosR;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EndPosL != null))
                {
                    array[arrayIndex] = this._parent.EndPosL;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OilFil != null))
                {
                    array[arrayIndex] = this._parent.OilFil;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCnt == item))
                {
                    this._parent.OpCnt = null;
                    return true;
                }
                if ((this._parent.Torq == item))
                {
                    this._parent.Torq = null;
                    return true;
                }
                if ((this._parent.MotDrvA == item))
                {
                    this._parent.MotDrvA = null;
                    return true;
                }
                if ((this._parent.TapPos == item))
                {
                    this._parent.TapPos = null;
                    return true;
                }
                if ((this._parent.TapChg == item))
                {
                    this._parent.TapChg = null;
                    return true;
                }
                if ((this._parent.EndPosR == item))
                {
                    this._parent.EndPosR = null;
                    return true;
                }
                if ((this._parent.EndPosL == item))
                {
                    this._parent.EndPosL = null;
                    return true;
                }
                if ((this._parent.OilFil == item))
                {
                    this._parent.OilFil = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCnt).Concat(this._parent.Torq).Concat(this._parent.MotDrvA).Concat(this._parent.TapPos).Concat(this._parent.TapChg).Concat(this._parent.EndPosR).Concat(this._parent.EndPosL).Concat(this._parent.OilFil).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCnt property
        /// </summary>
        private sealed class OpCntProxy : ModelPropertyChange<IYLTC, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntProxy(IYLTC modelElement) : 
                    base(modelElement, "OpCnt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpCnt;
                }
                set
                {
                    this.ModelElement.OpCnt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Torq property
        /// </summary>
        private sealed class TorqProxy : ModelPropertyChange<IYLTC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TorqProxy(IYLTC modelElement) : 
                    base(modelElement, "Torq")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Torq;
                }
                set
                {
                    this.ModelElement.Torq = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MotDrvA property
        /// </summary>
        private sealed class MotDrvAProxy : ModelPropertyChange<IYLTC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MotDrvAProxy(IYLTC modelElement) : 
                    base(modelElement, "MotDrvA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MotDrvA;
                }
                set
                {
                    this.ModelElement.MotDrvA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapPos property
        /// </summary>
        private sealed class TapPosProxy : ModelPropertyChange<IYLTC, IISC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapPosProxy(IYLTC modelElement) : 
                    base(modelElement, "TapPos")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IISC Value
            {
                get
                {
                    return this.ModelElement.TapPos;
                }
                set
                {
                    this.ModelElement.TapPos = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapChg property
        /// </summary>
        private sealed class TapChgProxy : ModelPropertyChange<IYLTC, IBSC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapChgProxy(IYLTC modelElement) : 
                    base(modelElement, "TapChg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBSC Value
            {
                get
                {
                    return this.ModelElement.TapChg;
                }
                set
                {
                    this.ModelElement.TapChg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndPosR property
        /// </summary>
        private sealed class EndPosRProxy : ModelPropertyChange<IYLTC, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndPosRProxy(IYLTC modelElement) : 
                    base(modelElement, "EndPosR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.EndPosR;
                }
                set
                {
                    this.ModelElement.EndPosR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndPosL property
        /// </summary>
        private sealed class EndPosLProxy : ModelPropertyChange<IYLTC, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndPosLProxy(IYLTC modelElement) : 
                    base(modelElement, "EndPosL")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.EndPosL;
                }
                set
                {
                    this.ModelElement.EndPosL = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OilFil property
        /// </summary>
        private sealed class OilFilProxy : ModelPropertyChange<IYLTC, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilFilProxy(IYLTC modelElement) : 
                    base(modelElement, "OilFil")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.OilFil;
                }
                set
                {
                    this.ModelElement.OilFil = value;
                }
            }
        }
    }
}

