//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MHAN class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MHAN")]
    public partial class MHAN : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMHAN, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        private static Lazy<ITypedElement> _eEHealthAttribute = new Lazy<ITypedElement>(RetrieveEEHealthAttribute);
        
        private static Lazy<ITypedElement> _eENameReference = new Lazy<ITypedElement>(RetrieveEENameReference);
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        private static Lazy<ITypedElement> _hzReference = new Lazy<ITypedElement>(RetrieveHzReference);
        
        /// <summary>
        /// The backing field for the Hz property
        /// </summary>
        private IMV _hz;
        
        private static Lazy<ITypedElement> _haAmpReference = new Lazy<ITypedElement>(RetrieveHaAmpReference);
        
        /// <summary>
        /// The backing field for the HaAmp property
        /// </summary>
        private IHMV _haAmp;
        
        private static Lazy<ITypedElement> _haVolReference = new Lazy<ITypedElement>(RetrieveHaVolReference);
        
        /// <summary>
        /// The backing field for the HaVol property
        /// </summary>
        private IHMV _haVol;
        
        private static Lazy<ITypedElement> _haWattReference = new Lazy<ITypedElement>(RetrieveHaWattReference);
        
        /// <summary>
        /// The backing field for the HaWatt property
        /// </summary>
        private IHMV _haWatt;
        
        private static Lazy<ITypedElement> _haVolAmprReference = new Lazy<ITypedElement>(RetrieveHaVolAmprReference);
        
        /// <summary>
        /// The backing field for the HaVolAmpr property
        /// </summary>
        private IHMV _haVolAmpr;
        
        private static Lazy<ITypedElement> _haVolAmpReference = new Lazy<ITypedElement>(RetrieveHaVolAmpReference);
        
        /// <summary>
        /// The backing field for the HaVolAmp property
        /// </summary>
        private IHMV _haVolAmp;
        
        private static Lazy<ITypedElement> _haRmsAmpReference = new Lazy<ITypedElement>(RetrieveHaRmsAmpReference);
        
        /// <summary>
        /// The backing field for the HaRmsAmp property
        /// </summary>
        private IMV _haRmsAmp;
        
        private static Lazy<ITypedElement> _haRmsVolReference = new Lazy<ITypedElement>(RetrieveHaRmsVolReference);
        
        /// <summary>
        /// The backing field for the HaRmsVol property
        /// </summary>
        private IMV _haRmsVol;
        
        private static Lazy<ITypedElement> _haTuWattReference = new Lazy<ITypedElement>(RetrieveHaTuWattReference);
        
        /// <summary>
        /// The backing field for the HaTuWatt property
        /// </summary>
        private IMV _haTuWatt;
        
        private static Lazy<ITypedElement> _haTsWattReference = new Lazy<ITypedElement>(RetrieveHaTsWattReference);
        
        /// <summary>
        /// The backing field for the HaTsWatt property
        /// </summary>
        private IMV _haTsWatt;
        
        private static Lazy<ITypedElement> _haAmpTmReference = new Lazy<ITypedElement>(RetrieveHaAmpTmReference);
        
        /// <summary>
        /// The backing field for the HaAmpTm property
        /// </summary>
        private IMV _haAmpTm;
        
        private static Lazy<ITypedElement> _haKFactReference = new Lazy<ITypedElement>(RetrieveHaKFactReference);
        
        /// <summary>
        /// The backing field for the HaKFact property
        /// </summary>
        private IMV _haKFact;
        
        private static Lazy<ITypedElement> _haTdFactReference = new Lazy<ITypedElement>(RetrieveHaTdFactReference);
        
        /// <summary>
        /// The backing field for the HaTdFact property
        /// </summary>
        private IMV _haTdFact;
        
        private static Lazy<ITypedElement> _thdAmpReference = new Lazy<ITypedElement>(RetrieveThdAmpReference);
        
        /// <summary>
        /// The backing field for the ThdAmp property
        /// </summary>
        private IMV _thdAmp;
        
        private static Lazy<ITypedElement> _thdOddAmpReference = new Lazy<ITypedElement>(RetrieveThdOddAmpReference);
        
        /// <summary>
        /// The backing field for the ThdOddAmp property
        /// </summary>
        private IMV _thdOddAmp;
        
        private static Lazy<ITypedElement> _thdEvnAmpReference = new Lazy<ITypedElement>(RetrieveThdEvnAmpReference);
        
        /// <summary>
        /// The backing field for the ThdEvnAmp property
        /// </summary>
        private IMV _thdEvnAmp;
        
        private static Lazy<ITypedElement> _tddAmpReference = new Lazy<ITypedElement>(RetrieveTddAmpReference);
        
        /// <summary>
        /// The backing field for the TddAmp property
        /// </summary>
        private IMV _tddAmp;
        
        private static Lazy<ITypedElement> _tddOddAmpReference = new Lazy<ITypedElement>(RetrieveTddOddAmpReference);
        
        /// <summary>
        /// The backing field for the TddOddAmp property
        /// </summary>
        private IMV _tddOddAmp;
        
        private static Lazy<ITypedElement> _tddEvnAmpReference = new Lazy<ITypedElement>(RetrieveTddEvnAmpReference);
        
        /// <summary>
        /// The backing field for the TddEvnAmp property
        /// </summary>
        private IMV _tddEvnAmp;
        
        private static Lazy<ITypedElement> _thdVolReference = new Lazy<ITypedElement>(RetrieveThdVolReference);
        
        /// <summary>
        /// The backing field for the ThdVol property
        /// </summary>
        private IMV _thdVol;
        
        private static Lazy<ITypedElement> _thdOddVolReference = new Lazy<ITypedElement>(RetrieveThdOddVolReference);
        
        /// <summary>
        /// The backing field for the ThdOddVol property
        /// </summary>
        private IMV _thdOddVol;
        
        private static Lazy<ITypedElement> _thdEvnVolReference = new Lazy<ITypedElement>(RetrieveThdEvnVolReference);
        
        /// <summary>
        /// The backing field for the ThdEvnVol property
        /// </summary>
        private IMV _thdEvnVol;
        
        private static Lazy<ITypedElement> _haCfAmpReference = new Lazy<ITypedElement>(RetrieveHaCfAmpReference);
        
        /// <summary>
        /// The backing field for the HaCfAmp property
        /// </summary>
        private IMV _haCfAmp;
        
        private static Lazy<ITypedElement> _haCfVolReference = new Lazy<ITypedElement>(RetrieveHaCfVolReference);
        
        /// <summary>
        /// The backing field for the HaCfVol property
        /// </summary>
        private IMV _haCfVol;
        
        private static Lazy<ITypedElement> _haTiFactReference = new Lazy<ITypedElement>(RetrieveHaTiFactReference);
        
        /// <summary>
        /// The backing field for the HaTiFact property
        /// </summary>
        private IMV _haTiFact;
        
        private static Lazy<ITypedElement> _hzSetReference = new Lazy<ITypedElement>(RetrieveHzSetReference);
        
        /// <summary>
        /// The backing field for the HzSet property
        /// </summary>
        private IASG _hzSet;
        
        private static Lazy<ITypedElement> _evTmmsReference = new Lazy<ITypedElement>(RetrieveEvTmmsReference);
        
        /// <summary>
        /// The backing field for the EvTmms property
        /// </summary>
        private IASG _evTmms;
        
        private static Lazy<ITypedElement> _numCycReference = new Lazy<ITypedElement>(RetrieveNumCycReference);
        
        /// <summary>
        /// The backing field for the NumCyc property
        /// </summary>
        private IING _numCyc;
        
        private static Lazy<ITypedElement> _thdAValReference = new Lazy<ITypedElement>(RetrieveThdAValReference);
        
        /// <summary>
        /// The backing field for the ThdAVal property
        /// </summary>
        private IASG _thdAVal;
        
        private static Lazy<ITypedElement> _thdVValReference = new Lazy<ITypedElement>(RetrieveThdVValReference);
        
        /// <summary>
        /// The backing field for the ThdVVal property
        /// </summary>
        private IASG _thdVVal;
        
        private static Lazy<ITypedElement> _thdATmmsReference = new Lazy<ITypedElement>(RetrieveThdATmmsReference);
        
        /// <summary>
        /// The backing field for the ThdATmms property
        /// </summary>
        private IING _thdATmms;
        
        private static Lazy<ITypedElement> _thdVTmmsReference = new Lazy<ITypedElement>(RetrieveThdVTmmsReference);
        
        /// <summary>
        /// The backing field for the ThdVTmms property
        /// </summary>
        private IING _thdVTmms;
        
        private static Lazy<ITypedElement> _nomAReference = new Lazy<ITypedElement>(RetrieveNomAReference);
        
        /// <summary>
        /// The backing field for the NomA property
        /// </summary>
        private IASG _nomA;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e, _eEHealthAttribute);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e, _eEHealthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e, _eENameReference);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e, _eENameReference);
                }
            }
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Hz
        {
            get
            {
                return this._hz;
            }
            set
            {
                if ((this._hz != value))
                {
                    IMV old = this._hz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzChanging(e);
                    this.OnPropertyChanging("Hz", e, _hzReference);
                    this._hz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHz;
                    }
                    this.OnHzChanged(e);
                    this.OnPropertyChanged("Hz", e, _hzReference);
                }
            }
        }
        
        /// <summary>
        /// The HaAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHMV HaAmp
        {
            get
            {
                return this._haAmp;
            }
            set
            {
                if ((this._haAmp != value))
                {
                    IHMV old = this._haAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaAmpChanging(e);
                    this.OnPropertyChanging("HaAmp", e, _haAmpReference);
                    this._haAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaAmp;
                    }
                    this.OnHaAmpChanged(e);
                    this.OnPropertyChanged("HaAmp", e, _haAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The HaVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHMV HaVol
        {
            get
            {
                return this._haVol;
            }
            set
            {
                if ((this._haVol != value))
                {
                    IHMV old = this._haVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaVolChanging(e);
                    this.OnPropertyChanging("HaVol", e, _haVolReference);
                    this._haVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaVol;
                    }
                    this.OnHaVolChanged(e);
                    this.OnPropertyChanged("HaVol", e, _haVolReference);
                }
            }
        }
        
        /// <summary>
        /// The HaWatt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHMV HaWatt
        {
            get
            {
                return this._haWatt;
            }
            set
            {
                if ((this._haWatt != value))
                {
                    IHMV old = this._haWatt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaWattChanging(e);
                    this.OnPropertyChanging("HaWatt", e, _haWattReference);
                    this._haWatt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaWatt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaWatt;
                    }
                    this.OnHaWattChanged(e);
                    this.OnPropertyChanged("HaWatt", e, _haWattReference);
                }
            }
        }
        
        /// <summary>
        /// The HaVolAmpr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHMV HaVolAmpr
        {
            get
            {
                return this._haVolAmpr;
            }
            set
            {
                if ((this._haVolAmpr != value))
                {
                    IHMV old = this._haVolAmpr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaVolAmprChanging(e);
                    this.OnPropertyChanging("HaVolAmpr", e, _haVolAmprReference);
                    this._haVolAmpr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaVolAmpr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaVolAmpr;
                    }
                    this.OnHaVolAmprChanged(e);
                    this.OnPropertyChanged("HaVolAmpr", e, _haVolAmprReference);
                }
            }
        }
        
        /// <summary>
        /// The HaVolAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHMV HaVolAmp
        {
            get
            {
                return this._haVolAmp;
            }
            set
            {
                if ((this._haVolAmp != value))
                {
                    IHMV old = this._haVolAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaVolAmpChanging(e);
                    this.OnPropertyChanging("HaVolAmp", e, _haVolAmpReference);
                    this._haVolAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaVolAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaVolAmp;
                    }
                    this.OnHaVolAmpChanged(e);
                    this.OnPropertyChanged("HaVolAmp", e, _haVolAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The HaRmsAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaRmsAmp
        {
            get
            {
                return this._haRmsAmp;
            }
            set
            {
                if ((this._haRmsAmp != value))
                {
                    IMV old = this._haRmsAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaRmsAmpChanging(e);
                    this.OnPropertyChanging("HaRmsAmp", e, _haRmsAmpReference);
                    this._haRmsAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaRmsAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaRmsAmp;
                    }
                    this.OnHaRmsAmpChanged(e);
                    this.OnPropertyChanged("HaRmsAmp", e, _haRmsAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The HaRmsVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaRmsVol
        {
            get
            {
                return this._haRmsVol;
            }
            set
            {
                if ((this._haRmsVol != value))
                {
                    IMV old = this._haRmsVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaRmsVolChanging(e);
                    this.OnPropertyChanging("HaRmsVol", e, _haRmsVolReference);
                    this._haRmsVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaRmsVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaRmsVol;
                    }
                    this.OnHaRmsVolChanged(e);
                    this.OnPropertyChanged("HaRmsVol", e, _haRmsVolReference);
                }
            }
        }
        
        /// <summary>
        /// The HaTuWatt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaTuWatt
        {
            get
            {
                return this._haTuWatt;
            }
            set
            {
                if ((this._haTuWatt != value))
                {
                    IMV old = this._haTuWatt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaTuWattChanging(e);
                    this.OnPropertyChanging("HaTuWatt", e, _haTuWattReference);
                    this._haTuWatt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaTuWatt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaTuWatt;
                    }
                    this.OnHaTuWattChanged(e);
                    this.OnPropertyChanged("HaTuWatt", e, _haTuWattReference);
                }
            }
        }
        
        /// <summary>
        /// The HaTsWatt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaTsWatt
        {
            get
            {
                return this._haTsWatt;
            }
            set
            {
                if ((this._haTsWatt != value))
                {
                    IMV old = this._haTsWatt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaTsWattChanging(e);
                    this.OnPropertyChanging("HaTsWatt", e, _haTsWattReference);
                    this._haTsWatt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaTsWatt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaTsWatt;
                    }
                    this.OnHaTsWattChanged(e);
                    this.OnPropertyChanged("HaTsWatt", e, _haTsWattReference);
                }
            }
        }
        
        /// <summary>
        /// The HaAmpTm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaAmpTm
        {
            get
            {
                return this._haAmpTm;
            }
            set
            {
                if ((this._haAmpTm != value))
                {
                    IMV old = this._haAmpTm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaAmpTmChanging(e);
                    this.OnPropertyChanging("HaAmpTm", e, _haAmpTmReference);
                    this._haAmpTm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaAmpTm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaAmpTm;
                    }
                    this.OnHaAmpTmChanged(e);
                    this.OnPropertyChanged("HaAmpTm", e, _haAmpTmReference);
                }
            }
        }
        
        /// <summary>
        /// The HaKFact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaKFact
        {
            get
            {
                return this._haKFact;
            }
            set
            {
                if ((this._haKFact != value))
                {
                    IMV old = this._haKFact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaKFactChanging(e);
                    this.OnPropertyChanging("HaKFact", e, _haKFactReference);
                    this._haKFact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaKFact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaKFact;
                    }
                    this.OnHaKFactChanged(e);
                    this.OnPropertyChanged("HaKFact", e, _haKFactReference);
                }
            }
        }
        
        /// <summary>
        /// The HaTdFact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaTdFact
        {
            get
            {
                return this._haTdFact;
            }
            set
            {
                if ((this._haTdFact != value))
                {
                    IMV old = this._haTdFact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaTdFactChanging(e);
                    this.OnPropertyChanging("HaTdFact", e, _haTdFactReference);
                    this._haTdFact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaTdFact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaTdFact;
                    }
                    this.OnHaTdFactChanged(e);
                    this.OnPropertyChanged("HaTdFact", e, _haTdFactReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdAmp
        {
            get
            {
                return this._thdAmp;
            }
            set
            {
                if ((this._thdAmp != value))
                {
                    IMV old = this._thdAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdAmpChanging(e);
                    this.OnPropertyChanging("ThdAmp", e, _thdAmpReference);
                    this._thdAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdAmp;
                    }
                    this.OnThdAmpChanged(e);
                    this.OnPropertyChanged("ThdAmp", e, _thdAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdOddAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdOddAmp
        {
            get
            {
                return this._thdOddAmp;
            }
            set
            {
                if ((this._thdOddAmp != value))
                {
                    IMV old = this._thdOddAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdOddAmpChanging(e);
                    this.OnPropertyChanging("ThdOddAmp", e, _thdOddAmpReference);
                    this._thdOddAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdOddAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdOddAmp;
                    }
                    this.OnThdOddAmpChanged(e);
                    this.OnPropertyChanged("ThdOddAmp", e, _thdOddAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdEvnAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdEvnAmp
        {
            get
            {
                return this._thdEvnAmp;
            }
            set
            {
                if ((this._thdEvnAmp != value))
                {
                    IMV old = this._thdEvnAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdEvnAmpChanging(e);
                    this.OnPropertyChanging("ThdEvnAmp", e, _thdEvnAmpReference);
                    this._thdEvnAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdEvnAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdEvnAmp;
                    }
                    this.OnThdEvnAmpChanged(e);
                    this.OnPropertyChanged("ThdEvnAmp", e, _thdEvnAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The TddAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TddAmp
        {
            get
            {
                return this._tddAmp;
            }
            set
            {
                if ((this._tddAmp != value))
                {
                    IMV old = this._tddAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTddAmpChanging(e);
                    this.OnPropertyChanging("TddAmp", e, _tddAmpReference);
                    this._tddAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTddAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTddAmp;
                    }
                    this.OnTddAmpChanged(e);
                    this.OnPropertyChanged("TddAmp", e, _tddAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The TddOddAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TddOddAmp
        {
            get
            {
                return this._tddOddAmp;
            }
            set
            {
                if ((this._tddOddAmp != value))
                {
                    IMV old = this._tddOddAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTddOddAmpChanging(e);
                    this.OnPropertyChanging("TddOddAmp", e, _tddOddAmpReference);
                    this._tddOddAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTddOddAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTddOddAmp;
                    }
                    this.OnTddOddAmpChanged(e);
                    this.OnPropertyChanged("TddOddAmp", e, _tddOddAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The TddEvnAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TddEvnAmp
        {
            get
            {
                return this._tddEvnAmp;
            }
            set
            {
                if ((this._tddEvnAmp != value))
                {
                    IMV old = this._tddEvnAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTddEvnAmpChanging(e);
                    this.OnPropertyChanging("TddEvnAmp", e, _tddEvnAmpReference);
                    this._tddEvnAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTddEvnAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTddEvnAmp;
                    }
                    this.OnTddEvnAmpChanged(e);
                    this.OnPropertyChanged("TddEvnAmp", e, _tddEvnAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdVol
        {
            get
            {
                return this._thdVol;
            }
            set
            {
                if ((this._thdVol != value))
                {
                    IMV old = this._thdVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdVolChanging(e);
                    this.OnPropertyChanging("ThdVol", e, _thdVolReference);
                    this._thdVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdVol;
                    }
                    this.OnThdVolChanged(e);
                    this.OnPropertyChanged("ThdVol", e, _thdVolReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdOddVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdOddVol
        {
            get
            {
                return this._thdOddVol;
            }
            set
            {
                if ((this._thdOddVol != value))
                {
                    IMV old = this._thdOddVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdOddVolChanging(e);
                    this.OnPropertyChanging("ThdOddVol", e, _thdOddVolReference);
                    this._thdOddVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdOddVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdOddVol;
                    }
                    this.OnThdOddVolChanged(e);
                    this.OnPropertyChanged("ThdOddVol", e, _thdOddVolReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdEvnVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ThdEvnVol
        {
            get
            {
                return this._thdEvnVol;
            }
            set
            {
                if ((this._thdEvnVol != value))
                {
                    IMV old = this._thdEvnVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdEvnVolChanging(e);
                    this.OnPropertyChanging("ThdEvnVol", e, _thdEvnVolReference);
                    this._thdEvnVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdEvnVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdEvnVol;
                    }
                    this.OnThdEvnVolChanged(e);
                    this.OnPropertyChanged("ThdEvnVol", e, _thdEvnVolReference);
                }
            }
        }
        
        /// <summary>
        /// The HaCfAmp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaCfAmp
        {
            get
            {
                return this._haCfAmp;
            }
            set
            {
                if ((this._haCfAmp != value))
                {
                    IMV old = this._haCfAmp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaCfAmpChanging(e);
                    this.OnPropertyChanging("HaCfAmp", e, _haCfAmpReference);
                    this._haCfAmp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaCfAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaCfAmp;
                    }
                    this.OnHaCfAmpChanged(e);
                    this.OnPropertyChanged("HaCfAmp", e, _haCfAmpReference);
                }
            }
        }
        
        /// <summary>
        /// The HaCfVol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaCfVol
        {
            get
            {
                return this._haCfVol;
            }
            set
            {
                if ((this._haCfVol != value))
                {
                    IMV old = this._haCfVol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaCfVolChanging(e);
                    this.OnPropertyChanging("HaCfVol", e, _haCfVolReference);
                    this._haCfVol = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaCfVol;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaCfVol;
                    }
                    this.OnHaCfVolChanged(e);
                    this.OnPropertyChanged("HaCfVol", e, _haCfVolReference);
                }
            }
        }
        
        /// <summary>
        /// The HaTiFact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HaTiFact
        {
            get
            {
                return this._haTiFact;
            }
            set
            {
                if ((this._haTiFact != value))
                {
                    IMV old = this._haTiFact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaTiFactChanging(e);
                    this.OnPropertyChanging("HaTiFact", e, _haTiFactReference);
                    this._haTiFact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaTiFact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaTiFact;
                    }
                    this.OnHaTiFactChanged(e);
                    this.OnPropertyChanged("HaTiFact", e, _haTiFactReference);
                }
            }
        }
        
        /// <summary>
        /// The HzSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HzSet
        {
            get
            {
                return this._hzSet;
            }
            set
            {
                if ((this._hzSet != value))
                {
                    IASG old = this._hzSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzSetChanging(e);
                    this.OnPropertyChanging("HzSet", e, _hzSetReference);
                    this._hzSet = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHzSet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHzSet;
                    }
                    this.OnHzSetChanged(e);
                    this.OnPropertyChanged("HzSet", e, _hzSetReference);
                }
            }
        }
        
        /// <summary>
        /// The EvTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG EvTmms
        {
            get
            {
                return this._evTmms;
            }
            set
            {
                if ((this._evTmms != value))
                {
                    IASG old = this._evTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvTmmsChanging(e);
                    this.OnPropertyChanging("EvTmms", e, _evTmmsReference);
                    this._evTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvTmms;
                    }
                    this.OnEvTmmsChanged(e);
                    this.OnPropertyChanged("EvTmms", e, _evTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The NumCyc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING NumCyc
        {
            get
            {
                return this._numCyc;
            }
            set
            {
                if ((this._numCyc != value))
                {
                    IING old = this._numCyc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumCycChanging(e);
                    this.OnPropertyChanging("NumCyc", e, _numCycReference);
                    this._numCyc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNumCyc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNumCyc;
                    }
                    this.OnNumCycChanged(e);
                    this.OnPropertyChanged("NumCyc", e, _numCycReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdAVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ThdAVal
        {
            get
            {
                return this._thdAVal;
            }
            set
            {
                if ((this._thdAVal != value))
                {
                    IASG old = this._thdAVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdAValChanging(e);
                    this.OnPropertyChanging("ThdAVal", e, _thdAValReference);
                    this._thdAVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdAVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdAVal;
                    }
                    this.OnThdAValChanged(e);
                    this.OnPropertyChanged("ThdAVal", e, _thdAValReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdVVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ThdVVal
        {
            get
            {
                return this._thdVVal;
            }
            set
            {
                if ((this._thdVVal != value))
                {
                    IASG old = this._thdVVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdVValChanging(e);
                    this.OnPropertyChanging("ThdVVal", e, _thdVValReference);
                    this._thdVVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdVVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdVVal;
                    }
                    this.OnThdVValChanged(e);
                    this.OnPropertyChanged("ThdVVal", e, _thdVValReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdATmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ThdATmms
        {
            get
            {
                return this._thdATmms;
            }
            set
            {
                if ((this._thdATmms != value))
                {
                    IING old = this._thdATmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdATmmsChanging(e);
                    this.OnPropertyChanging("ThdATmms", e, _thdATmmsReference);
                    this._thdATmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdATmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdATmms;
                    }
                    this.OnThdATmmsChanged(e);
                    this.OnPropertyChanged("ThdATmms", e, _thdATmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The ThdVTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ThdVTmms
        {
            get
            {
                return this._thdVTmms;
            }
            set
            {
                if ((this._thdVTmms != value))
                {
                    IING old = this._thdVTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdVTmmsChanging(e);
                    this.OnPropertyChanging("ThdVTmms", e, _thdVTmmsReference);
                    this._thdVTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdVTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdVTmms;
                    }
                    this.OnThdVTmmsChanged(e);
                    this.OnPropertyChanged("ThdVTmms", e, _thdVTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The NomA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG NomA
        {
            get
            {
                return this._nomA;
            }
            set
            {
                if ((this._nomA != value))
                {
                    IASG old = this._nomA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNomAChanging(e);
                    this.OnPropertyChanging("NomA", e, _nomAReference);
                    this._nomA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNomA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNomA;
                    }
                    this.OnNomAChanged(e);
                    this.OnPropertyChanged("NomA", e, _nomAReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MHANReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MHAN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanged;
        
        /// <summary>
        /// Gets fired before the HaAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolChanging;
        
        /// <summary>
        /// Gets fired when the HaVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolChanged;
        
        /// <summary>
        /// Gets fired before the HaWatt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaWattChanging;
        
        /// <summary>
        /// Gets fired when the HaWatt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaWattChanged;
        
        /// <summary>
        /// Gets fired before the HaVolAmpr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolAmprChanging;
        
        /// <summary>
        /// Gets fired when the HaVolAmpr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolAmprChanged;
        
        /// <summary>
        /// Gets fired before the HaVolAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaVolAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaVolAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaRmsAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRmsAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaRmsAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRmsAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaRmsVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRmsVolChanging;
        
        /// <summary>
        /// Gets fired when the HaRmsVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRmsVolChanged;
        
        /// <summary>
        /// Gets fired before the HaTuWatt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTuWattChanging;
        
        /// <summary>
        /// Gets fired when the HaTuWatt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTuWattChanged;
        
        /// <summary>
        /// Gets fired before the HaTsWatt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTsWattChanging;
        
        /// <summary>
        /// Gets fired when the HaTsWatt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTsWattChanged;
        
        /// <summary>
        /// Gets fired before the HaAmpTm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaAmpTmChanging;
        
        /// <summary>
        /// Gets fired when the HaAmpTm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaAmpTmChanged;
        
        /// <summary>
        /// Gets fired before the HaKFact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaKFactChanging;
        
        /// <summary>
        /// Gets fired when the HaKFact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaKFactChanged;
        
        /// <summary>
        /// Gets fired before the HaTdFact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTdFactChanging;
        
        /// <summary>
        /// Gets fired when the HaTdFact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTdFactChanged;
        
        /// <summary>
        /// Gets fired before the ThdAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddOddAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddOddAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddOddAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddOddAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddEvnAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddEvnAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddEvnAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TddEvnAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVolChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddVolChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnVolChanged;
        
        /// <summary>
        /// Gets fired before the HaCfAmp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaCfAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaCfAmp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaCfAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaCfVol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaCfVolChanging;
        
        /// <summary>
        /// Gets fired when the HaCfVol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaCfVolChanged;
        
        /// <summary>
        /// Gets fired before the HaTiFact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTiFactChanging;
        
        /// <summary>
        /// Gets fired when the HaTiFact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaTiFactChanged;
        
        /// <summary>
        /// Gets fired before the HzSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzSetChanging;
        
        /// <summary>
        /// Gets fired when the HzSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzSetChanged;
        
        /// <summary>
        /// Gets fired before the EvTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanging;
        
        /// <summary>
        /// Gets fired when the EvTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NumCyc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumCycChanging;
        
        /// <summary>
        /// Gets fired when the NumCyc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumCycChanged;
        
        /// <summary>
        /// Gets fired before the ThdAVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAValChanging;
        
        /// <summary>
        /// Gets fired when the ThdAVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAValChanged;
        
        /// <summary>
        /// Gets fired before the ThdVVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVValChanging;
        
        /// <summary>
        /// Gets fired when the ThdVVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVValChanged;
        
        /// <summary>
        /// Gets fired before the ThdATmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdATmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanged;
        
        /// <summary>
        /// Gets fired before the ThdVTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdVTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NomA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomAChanging;
        
        /// <summary>
        /// Gets fired when the NomA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomAChanged;
        
        private static ITypedElement RetrieveEEHealthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("EEHealth")));
        }
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEENameReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("EEName")));
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        private static ITypedElement RetrieveHzReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("Hz")));
        }
        
        /// <summary>
        /// Raises the HzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Hz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHz(object sender, System.EventArgs eventArgs)
        {
            this.Hz = null;
        }
        
        private static ITypedElement RetrieveHaAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaAmp")));
        }
        
        /// <summary>
        /// Raises the HaAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaAmp(object sender, System.EventArgs eventArgs)
        {
            this.HaAmp = null;
        }
        
        private static ITypedElement RetrieveHaVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaVol")));
        }
        
        /// <summary>
        /// Raises the HaVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaVol(object sender, System.EventArgs eventArgs)
        {
            this.HaVol = null;
        }
        
        private static ITypedElement RetrieveHaWattReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaWatt")));
        }
        
        /// <summary>
        /// Raises the HaWattChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaWattChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaWattChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaWattChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaWattChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaWattChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaWatt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaWatt(object sender, System.EventArgs eventArgs)
        {
            this.HaWatt = null;
        }
        
        private static ITypedElement RetrieveHaVolAmprReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaVolAmpr")));
        }
        
        /// <summary>
        /// Raises the HaVolAmprChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolAmprChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolAmprChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaVolAmprChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolAmprChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolAmprChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaVolAmpr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaVolAmpr(object sender, System.EventArgs eventArgs)
        {
            this.HaVolAmpr = null;
        }
        
        private static ITypedElement RetrieveHaVolAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaVolAmp")));
        }
        
        /// <summary>
        /// Raises the HaVolAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaVolAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaVolAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaVolAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaVolAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaVolAmp(object sender, System.EventArgs eventArgs)
        {
            this.HaVolAmp = null;
        }
        
        private static ITypedElement RetrieveHaRmsAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaRmsAmp")));
        }
        
        /// <summary>
        /// Raises the HaRmsAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRmsAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRmsAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaRmsAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRmsAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRmsAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaRmsAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaRmsAmp(object sender, System.EventArgs eventArgs)
        {
            this.HaRmsAmp = null;
        }
        
        private static ITypedElement RetrieveHaRmsVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaRmsVol")));
        }
        
        /// <summary>
        /// Raises the HaRmsVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRmsVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRmsVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaRmsVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRmsVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRmsVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaRmsVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaRmsVol(object sender, System.EventArgs eventArgs)
        {
            this.HaRmsVol = null;
        }
        
        private static ITypedElement RetrieveHaTuWattReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaTuWatt")));
        }
        
        /// <summary>
        /// Raises the HaTuWattChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTuWattChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTuWattChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaTuWattChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTuWattChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTuWattChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaTuWatt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaTuWatt(object sender, System.EventArgs eventArgs)
        {
            this.HaTuWatt = null;
        }
        
        private static ITypedElement RetrieveHaTsWattReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaTsWatt")));
        }
        
        /// <summary>
        /// Raises the HaTsWattChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTsWattChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTsWattChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaTsWattChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTsWattChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTsWattChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaTsWatt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaTsWatt(object sender, System.EventArgs eventArgs)
        {
            this.HaTsWatt = null;
        }
        
        private static ITypedElement RetrieveHaAmpTmReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaAmpTm")));
        }
        
        /// <summary>
        /// Raises the HaAmpTmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaAmpTmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaAmpTmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaAmpTmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaAmpTmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaAmpTmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaAmpTm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaAmpTm(object sender, System.EventArgs eventArgs)
        {
            this.HaAmpTm = null;
        }
        
        private static ITypedElement RetrieveHaKFactReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaKFact")));
        }
        
        /// <summary>
        /// Raises the HaKFactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaKFactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaKFactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaKFactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaKFactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaKFactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaKFact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaKFact(object sender, System.EventArgs eventArgs)
        {
            this.HaKFact = null;
        }
        
        private static ITypedElement RetrieveHaTdFactReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaTdFact")));
        }
        
        /// <summary>
        /// Raises the HaTdFactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTdFactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTdFactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaTdFactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTdFactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTdFactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaTdFact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaTdFact(object sender, System.EventArgs eventArgs)
        {
            this.HaTdFact = null;
        }
        
        private static ITypedElement RetrieveThdAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdAmp")));
        }
        
        /// <summary>
        /// Raises the ThdAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdAmp(object sender, System.EventArgs eventArgs)
        {
            this.ThdAmp = null;
        }
        
        private static ITypedElement RetrieveThdOddAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdOddAmp")));
        }
        
        /// <summary>
        /// Raises the ThdOddAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdOddAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdOddAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdOddAmp(object sender, System.EventArgs eventArgs)
        {
            this.ThdOddAmp = null;
        }
        
        private static ITypedElement RetrieveThdEvnAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdEvnAmp")));
        }
        
        /// <summary>
        /// Raises the ThdEvnAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdEvnAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdEvnAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdEvnAmp(object sender, System.EventArgs eventArgs)
        {
            this.ThdEvnAmp = null;
        }
        
        private static ITypedElement RetrieveTddAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("TddAmp")));
        }
        
        /// <summary>
        /// Raises the TddAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TddAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TddAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTddAmp(object sender, System.EventArgs eventArgs)
        {
            this.TddAmp = null;
        }
        
        private static ITypedElement RetrieveTddOddAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("TddOddAmp")));
        }
        
        /// <summary>
        /// Raises the TddOddAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddOddAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddOddAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TddOddAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddOddAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddOddAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TddOddAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTddOddAmp(object sender, System.EventArgs eventArgs)
        {
            this.TddOddAmp = null;
        }
        
        private static ITypedElement RetrieveTddEvnAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("TddEvnAmp")));
        }
        
        /// <summary>
        /// Raises the TddEvnAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddEvnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddEvnAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TddEvnAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTddEvnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TddEvnAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TddEvnAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTddEvnAmp(object sender, System.EventArgs eventArgs)
        {
            this.TddEvnAmp = null;
        }
        
        private static ITypedElement RetrieveThdVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdVol")));
        }
        
        /// <summary>
        /// Raises the ThdVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdVol(object sender, System.EventArgs eventArgs)
        {
            this.ThdVol = null;
        }
        
        private static ITypedElement RetrieveThdOddVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdOddVol")));
        }
        
        /// <summary>
        /// Raises the ThdOddVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdOddVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdOddVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdOddVol(object sender, System.EventArgs eventArgs)
        {
            this.ThdOddVol = null;
        }
        
        private static ITypedElement RetrieveThdEvnVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdEvnVol")));
        }
        
        /// <summary>
        /// Raises the ThdEvnVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdEvnVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdEvnVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdEvnVol(object sender, System.EventArgs eventArgs)
        {
            this.ThdEvnVol = null;
        }
        
        private static ITypedElement RetrieveHaCfAmpReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaCfAmp")));
        }
        
        /// <summary>
        /// Raises the HaCfAmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaCfAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaCfAmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaCfAmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaCfAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaCfAmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaCfAmp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaCfAmp(object sender, System.EventArgs eventArgs)
        {
            this.HaCfAmp = null;
        }
        
        private static ITypedElement RetrieveHaCfVolReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaCfVol")));
        }
        
        /// <summary>
        /// Raises the HaCfVolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaCfVolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaCfVolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaCfVolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaCfVolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaCfVolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaCfVol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaCfVol(object sender, System.EventArgs eventArgs)
        {
            this.HaCfVol = null;
        }
        
        private static ITypedElement RetrieveHaTiFactReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HaTiFact")));
        }
        
        /// <summary>
        /// Raises the HaTiFactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTiFactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTiFactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaTiFactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaTiFactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaTiFactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaTiFact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaTiFact(object sender, System.EventArgs eventArgs)
        {
            this.HaTiFact = null;
        }
        
        private static ITypedElement RetrieveHzSetReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("HzSet")));
        }
        
        /// <summary>
        /// Raises the HzSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HzSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHzSet(object sender, System.EventArgs eventArgs)
        {
            this.HzSet = null;
        }
        
        private static ITypedElement RetrieveEvTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("EvTmms")));
        }
        
        /// <summary>
        /// Raises the EvTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EvTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EvTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvTmms(object sender, System.EventArgs eventArgs)
        {
            this.EvTmms = null;
        }
        
        private static ITypedElement RetrieveNumCycReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("NumCyc")));
        }
        
        /// <summary>
        /// Raises the NumCycChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumCycChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumCycChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumCycChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumCycChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumCycChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NumCyc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNumCyc(object sender, System.EventArgs eventArgs)
        {
            this.NumCyc = null;
        }
        
        private static ITypedElement RetrieveThdAValReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdAVal")));
        }
        
        /// <summary>
        /// Raises the ThdAValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdAValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdAVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdAVal(object sender, System.EventArgs eventArgs)
        {
            this.ThdAVal = null;
        }
        
        private static ITypedElement RetrieveThdVValReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdVVal")));
        }
        
        /// <summary>
        /// Raises the ThdVValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdVValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdVVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdVVal(object sender, System.EventArgs eventArgs)
        {
            this.ThdVVal = null;
        }
        
        private static ITypedElement RetrieveThdATmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdATmms")));
        }
        
        /// <summary>
        /// Raises the ThdATmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdATmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdATmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdATmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdATmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdATmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdATmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdATmms(object sender, System.EventArgs eventArgs)
        {
            this.ThdATmms = null;
        }
        
        private static ITypedElement RetrieveThdVTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("ThdVTmms")));
        }
        
        /// <summary>
        /// Raises the ThdVTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdVTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdVTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdVTmms(object sender, System.EventArgs eventArgs)
        {
            this.ThdVTmms = null;
        }
        
        private static ITypedElement RetrieveNomAReference()
        {
            return ((ITypedElement)(((ModelElement)(MHAN.ClassInstance)).Resolve("NomA")));
        }
        
        /// <summary>
        /// Raises the NomAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NomAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NomA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNomA(object sender, System.EventArgs eventArgs)
        {
            this.NomA = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "HZ"))
            {
                this.Hz = ((IMV)(value));
                return;
            }
            if ((feature == "HAAMP"))
            {
                this.HaAmp = ((IHMV)(value));
                return;
            }
            if ((feature == "HAVOL"))
            {
                this.HaVol = ((IHMV)(value));
                return;
            }
            if ((feature == "HAWATT"))
            {
                this.HaWatt = ((IHMV)(value));
                return;
            }
            if ((feature == "HAVOLAMPR"))
            {
                this.HaVolAmpr = ((IHMV)(value));
                return;
            }
            if ((feature == "HAVOLAMP"))
            {
                this.HaVolAmp = ((IHMV)(value));
                return;
            }
            if ((feature == "HARMSAMP"))
            {
                this.HaRmsAmp = ((IMV)(value));
                return;
            }
            if ((feature == "HARMSVOL"))
            {
                this.HaRmsVol = ((IMV)(value));
                return;
            }
            if ((feature == "HATUWATT"))
            {
                this.HaTuWatt = ((IMV)(value));
                return;
            }
            if ((feature == "HATSWATT"))
            {
                this.HaTsWatt = ((IMV)(value));
                return;
            }
            if ((feature == "HAAMPTM"))
            {
                this.HaAmpTm = ((IMV)(value));
                return;
            }
            if ((feature == "HAKFACT"))
            {
                this.HaKFact = ((IMV)(value));
                return;
            }
            if ((feature == "HATDFACT"))
            {
                this.HaTdFact = ((IMV)(value));
                return;
            }
            if ((feature == "THDAMP"))
            {
                this.ThdAmp = ((IMV)(value));
                return;
            }
            if ((feature == "THDODDAMP"))
            {
                this.ThdOddAmp = ((IMV)(value));
                return;
            }
            if ((feature == "THDEVNAMP"))
            {
                this.ThdEvnAmp = ((IMV)(value));
                return;
            }
            if ((feature == "TDDAMP"))
            {
                this.TddAmp = ((IMV)(value));
                return;
            }
            if ((feature == "TDDODDAMP"))
            {
                this.TddOddAmp = ((IMV)(value));
                return;
            }
            if ((feature == "TDDEVNAMP"))
            {
                this.TddEvnAmp = ((IMV)(value));
                return;
            }
            if ((feature == "THDVOL"))
            {
                this.ThdVol = ((IMV)(value));
                return;
            }
            if ((feature == "THDODDVOL"))
            {
                this.ThdOddVol = ((IMV)(value));
                return;
            }
            if ((feature == "THDEVNVOL"))
            {
                this.ThdEvnVol = ((IMV)(value));
                return;
            }
            if ((feature == "HACFAMP"))
            {
                this.HaCfAmp = ((IMV)(value));
                return;
            }
            if ((feature == "HACFVOL"))
            {
                this.HaCfVol = ((IMV)(value));
                return;
            }
            if ((feature == "HATIFACT"))
            {
                this.HaTiFact = ((IMV)(value));
                return;
            }
            if ((feature == "HZSET"))
            {
                this.HzSet = ((IASG)(value));
                return;
            }
            if ((feature == "EVTMMS"))
            {
                this.EvTmms = ((IASG)(value));
                return;
            }
            if ((feature == "NUMCYC"))
            {
                this.NumCyc = ((IING)(value));
                return;
            }
            if ((feature == "THDAVAL"))
            {
                this.ThdAVal = ((IASG)(value));
                return;
            }
            if ((feature == "THDVVAL"))
            {
                this.ThdVVal = ((IASG)(value));
                return;
            }
            if ((feature == "THDATMMS"))
            {
                this.ThdATmms = ((IING)(value));
                return;
            }
            if ((feature == "THDVTMMS"))
            {
                this.ThdVTmms = ((IING)(value));
                return;
            }
            if ((feature == "NOMA"))
            {
                this.NomA = ((IASG)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((attribute == "HaAmp"))
            {
                return new HaAmpProxy(this);
            }
            if ((attribute == "HaVol"))
            {
                return new HaVolProxy(this);
            }
            if ((attribute == "HaWatt"))
            {
                return new HaWattProxy(this);
            }
            if ((attribute == "HaVolAmpr"))
            {
                return new HaVolAmprProxy(this);
            }
            if ((attribute == "HaVolAmp"))
            {
                return new HaVolAmpProxy(this);
            }
            if ((attribute == "HaRmsAmp"))
            {
                return new HaRmsAmpProxy(this);
            }
            if ((attribute == "HaRmsVol"))
            {
                return new HaRmsVolProxy(this);
            }
            if ((attribute == "HaTuWatt"))
            {
                return new HaTuWattProxy(this);
            }
            if ((attribute == "HaTsWatt"))
            {
                return new HaTsWattProxy(this);
            }
            if ((attribute == "HaAmpTm"))
            {
                return new HaAmpTmProxy(this);
            }
            if ((attribute == "HaKFact"))
            {
                return new HaKFactProxy(this);
            }
            if ((attribute == "HaTdFact"))
            {
                return new HaTdFactProxy(this);
            }
            if ((attribute == "ThdAmp"))
            {
                return new ThdAmpProxy(this);
            }
            if ((attribute == "ThdOddAmp"))
            {
                return new ThdOddAmpProxy(this);
            }
            if ((attribute == "ThdEvnAmp"))
            {
                return new ThdEvnAmpProxy(this);
            }
            if ((attribute == "TddAmp"))
            {
                return new TddAmpProxy(this);
            }
            if ((attribute == "TddOddAmp"))
            {
                return new TddOddAmpProxy(this);
            }
            if ((attribute == "TddEvnAmp"))
            {
                return new TddEvnAmpProxy(this);
            }
            if ((attribute == "ThdVol"))
            {
                return new ThdVolProxy(this);
            }
            if ((attribute == "ThdOddVol"))
            {
                return new ThdOddVolProxy(this);
            }
            if ((attribute == "ThdEvnVol"))
            {
                return new ThdEvnVolProxy(this);
            }
            if ((attribute == "HaCfAmp"))
            {
                return new HaCfAmpProxy(this);
            }
            if ((attribute == "HaCfVol"))
            {
                return new HaCfVolProxy(this);
            }
            if ((attribute == "HaTiFact"))
            {
                return new HaTiFactProxy(this);
            }
            if ((attribute == "HzSet"))
            {
                return new HzSetProxy(this);
            }
            if ((attribute == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            if ((attribute == "NumCyc"))
            {
                return new NumCycProxy(this);
            }
            if ((attribute == "ThdAVal"))
            {
                return new ThdAValProxy(this);
            }
            if ((attribute == "ThdVVal"))
            {
                return new ThdVValProxy(this);
            }
            if ((attribute == "ThdATmms"))
            {
                return new ThdATmmsProxy(this);
            }
            if ((attribute == "ThdVTmms"))
            {
                return new ThdVTmmsProxy(this);
            }
            if ((attribute == "NomA"))
            {
                return new NomAProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((reference == "HaAmp"))
            {
                return new HaAmpProxy(this);
            }
            if ((reference == "HaVol"))
            {
                return new HaVolProxy(this);
            }
            if ((reference == "HaWatt"))
            {
                return new HaWattProxy(this);
            }
            if ((reference == "HaVolAmpr"))
            {
                return new HaVolAmprProxy(this);
            }
            if ((reference == "HaVolAmp"))
            {
                return new HaVolAmpProxy(this);
            }
            if ((reference == "HaRmsAmp"))
            {
                return new HaRmsAmpProxy(this);
            }
            if ((reference == "HaRmsVol"))
            {
                return new HaRmsVolProxy(this);
            }
            if ((reference == "HaTuWatt"))
            {
                return new HaTuWattProxy(this);
            }
            if ((reference == "HaTsWatt"))
            {
                return new HaTsWattProxy(this);
            }
            if ((reference == "HaAmpTm"))
            {
                return new HaAmpTmProxy(this);
            }
            if ((reference == "HaKFact"))
            {
                return new HaKFactProxy(this);
            }
            if ((reference == "HaTdFact"))
            {
                return new HaTdFactProxy(this);
            }
            if ((reference == "ThdAmp"))
            {
                return new ThdAmpProxy(this);
            }
            if ((reference == "ThdOddAmp"))
            {
                return new ThdOddAmpProxy(this);
            }
            if ((reference == "ThdEvnAmp"))
            {
                return new ThdEvnAmpProxy(this);
            }
            if ((reference == "TddAmp"))
            {
                return new TddAmpProxy(this);
            }
            if ((reference == "TddOddAmp"))
            {
                return new TddOddAmpProxy(this);
            }
            if ((reference == "TddEvnAmp"))
            {
                return new TddEvnAmpProxy(this);
            }
            if ((reference == "ThdVol"))
            {
                return new ThdVolProxy(this);
            }
            if ((reference == "ThdOddVol"))
            {
                return new ThdOddVolProxy(this);
            }
            if ((reference == "ThdEvnVol"))
            {
                return new ThdEvnVolProxy(this);
            }
            if ((reference == "HaCfAmp"))
            {
                return new HaCfAmpProxy(this);
            }
            if ((reference == "HaCfVol"))
            {
                return new HaCfVolProxy(this);
            }
            if ((reference == "HaTiFact"))
            {
                return new HaTiFactProxy(this);
            }
            if ((reference == "HzSet"))
            {
                return new HzSetProxy(this);
            }
            if ((reference == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            if ((reference == "NumCyc"))
            {
                return new NumCycProxy(this);
            }
            if ((reference == "ThdAVal"))
            {
                return new ThdAValProxy(this);
            }
            if ((reference == "ThdVVal"))
            {
                return new ThdVValProxy(this);
            }
            if ((reference == "ThdATmms"))
            {
                return new ThdATmmsProxy(this);
            }
            if ((reference == "ThdVTmms"))
            {
                return new ThdVTmmsProxy(this);
            }
            if ((reference == "NomA"))
            {
                return new NomAProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MHAN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MHAN class
        /// </summary>
        public class MHANReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MHAN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MHANReferencedElementsCollection(MHAN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Hz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaWatt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaVolAmpr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaVolAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaRmsAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaRmsVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaTuWatt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaTsWatt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaAmpTm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaKFact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaTdFact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdOddAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdEvnAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TddAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TddOddAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TddEvnAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdOddVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdEvnVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaCfAmp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaCfVol != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaTiFact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HzSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EvTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NumCyc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdAVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdVVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdATmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdVTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NomA != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.HzChanged += this.PropagateValueChanges;
                this._parent.HaAmpChanged += this.PropagateValueChanges;
                this._parent.HaVolChanged += this.PropagateValueChanges;
                this._parent.HaWattChanged += this.PropagateValueChanges;
                this._parent.HaVolAmprChanged += this.PropagateValueChanges;
                this._parent.HaVolAmpChanged += this.PropagateValueChanges;
                this._parent.HaRmsAmpChanged += this.PropagateValueChanges;
                this._parent.HaRmsVolChanged += this.PropagateValueChanges;
                this._parent.HaTuWattChanged += this.PropagateValueChanges;
                this._parent.HaTsWattChanged += this.PropagateValueChanges;
                this._parent.HaAmpTmChanged += this.PropagateValueChanges;
                this._parent.HaKFactChanged += this.PropagateValueChanges;
                this._parent.HaTdFactChanged += this.PropagateValueChanges;
                this._parent.ThdAmpChanged += this.PropagateValueChanges;
                this._parent.ThdOddAmpChanged += this.PropagateValueChanges;
                this._parent.ThdEvnAmpChanged += this.PropagateValueChanges;
                this._parent.TddAmpChanged += this.PropagateValueChanges;
                this._parent.TddOddAmpChanged += this.PropagateValueChanges;
                this._parent.TddEvnAmpChanged += this.PropagateValueChanges;
                this._parent.ThdVolChanged += this.PropagateValueChanges;
                this._parent.ThdOddVolChanged += this.PropagateValueChanges;
                this._parent.ThdEvnVolChanged += this.PropagateValueChanges;
                this._parent.HaCfAmpChanged += this.PropagateValueChanges;
                this._parent.HaCfVolChanged += this.PropagateValueChanges;
                this._parent.HaTiFactChanged += this.PropagateValueChanges;
                this._parent.HzSetChanged += this.PropagateValueChanges;
                this._parent.EvTmmsChanged += this.PropagateValueChanges;
                this._parent.NumCycChanged += this.PropagateValueChanges;
                this._parent.ThdAValChanged += this.PropagateValueChanges;
                this._parent.ThdVValChanged += this.PropagateValueChanges;
                this._parent.ThdATmmsChanged += this.PropagateValueChanges;
                this._parent.ThdVTmmsChanged += this.PropagateValueChanges;
                this._parent.NomAChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.HzChanged -= this.PropagateValueChanges;
                this._parent.HaAmpChanged -= this.PropagateValueChanges;
                this._parent.HaVolChanged -= this.PropagateValueChanges;
                this._parent.HaWattChanged -= this.PropagateValueChanges;
                this._parent.HaVolAmprChanged -= this.PropagateValueChanges;
                this._parent.HaVolAmpChanged -= this.PropagateValueChanges;
                this._parent.HaRmsAmpChanged -= this.PropagateValueChanges;
                this._parent.HaRmsVolChanged -= this.PropagateValueChanges;
                this._parent.HaTuWattChanged -= this.PropagateValueChanges;
                this._parent.HaTsWattChanged -= this.PropagateValueChanges;
                this._parent.HaAmpTmChanged -= this.PropagateValueChanges;
                this._parent.HaKFactChanged -= this.PropagateValueChanges;
                this._parent.HaTdFactChanged -= this.PropagateValueChanges;
                this._parent.ThdAmpChanged -= this.PropagateValueChanges;
                this._parent.ThdOddAmpChanged -= this.PropagateValueChanges;
                this._parent.ThdEvnAmpChanged -= this.PropagateValueChanges;
                this._parent.TddAmpChanged -= this.PropagateValueChanges;
                this._parent.TddOddAmpChanged -= this.PropagateValueChanges;
                this._parent.TddEvnAmpChanged -= this.PropagateValueChanges;
                this._parent.ThdVolChanged -= this.PropagateValueChanges;
                this._parent.ThdOddVolChanged -= this.PropagateValueChanges;
                this._parent.ThdEvnVolChanged -= this.PropagateValueChanges;
                this._parent.HaCfAmpChanged -= this.PropagateValueChanges;
                this._parent.HaCfVolChanged -= this.PropagateValueChanges;
                this._parent.HaTiFactChanged -= this.PropagateValueChanges;
                this._parent.HzSetChanged -= this.PropagateValueChanges;
                this._parent.EvTmmsChanged -= this.PropagateValueChanges;
                this._parent.NumCycChanged -= this.PropagateValueChanges;
                this._parent.ThdAValChanged -= this.PropagateValueChanges;
                this._parent.ThdVValChanged -= this.PropagateValueChanges;
                this._parent.ThdATmmsChanged -= this.PropagateValueChanges;
                this._parent.ThdVTmmsChanged -= this.PropagateValueChanges;
                this._parent.NomAChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.Hz == null))
                {
                    IMV hzCasted = item.As<IMV>();
                    if ((hzCasted != null))
                    {
                        this._parent.Hz = hzCasted;
                        return;
                    }
                }
                if ((this._parent.HaAmp == null))
                {
                    IHMV haAmpCasted = item.As<IHMV>();
                    if ((haAmpCasted != null))
                    {
                        this._parent.HaAmp = haAmpCasted;
                        return;
                    }
                }
                if ((this._parent.HaVol == null))
                {
                    IHMV haVolCasted = item.As<IHMV>();
                    if ((haVolCasted != null))
                    {
                        this._parent.HaVol = haVolCasted;
                        return;
                    }
                }
                if ((this._parent.HaWatt == null))
                {
                    IHMV haWattCasted = item.As<IHMV>();
                    if ((haWattCasted != null))
                    {
                        this._parent.HaWatt = haWattCasted;
                        return;
                    }
                }
                if ((this._parent.HaVolAmpr == null))
                {
                    IHMV haVolAmprCasted = item.As<IHMV>();
                    if ((haVolAmprCasted != null))
                    {
                        this._parent.HaVolAmpr = haVolAmprCasted;
                        return;
                    }
                }
                if ((this._parent.HaVolAmp == null))
                {
                    IHMV haVolAmpCasted = item.As<IHMV>();
                    if ((haVolAmpCasted != null))
                    {
                        this._parent.HaVolAmp = haVolAmpCasted;
                        return;
                    }
                }
                if ((this._parent.HaRmsAmp == null))
                {
                    IMV haRmsAmpCasted = item.As<IMV>();
                    if ((haRmsAmpCasted != null))
                    {
                        this._parent.HaRmsAmp = haRmsAmpCasted;
                        return;
                    }
                }
                if ((this._parent.HaRmsVol == null))
                {
                    IMV haRmsVolCasted = item.As<IMV>();
                    if ((haRmsVolCasted != null))
                    {
                        this._parent.HaRmsVol = haRmsVolCasted;
                        return;
                    }
                }
                if ((this._parent.HaTuWatt == null))
                {
                    IMV haTuWattCasted = item.As<IMV>();
                    if ((haTuWattCasted != null))
                    {
                        this._parent.HaTuWatt = haTuWattCasted;
                        return;
                    }
                }
                if ((this._parent.HaTsWatt == null))
                {
                    IMV haTsWattCasted = item.As<IMV>();
                    if ((haTsWattCasted != null))
                    {
                        this._parent.HaTsWatt = haTsWattCasted;
                        return;
                    }
                }
                if ((this._parent.HaAmpTm == null))
                {
                    IMV haAmpTmCasted = item.As<IMV>();
                    if ((haAmpTmCasted != null))
                    {
                        this._parent.HaAmpTm = haAmpTmCasted;
                        return;
                    }
                }
                if ((this._parent.HaKFact == null))
                {
                    IMV haKFactCasted = item.As<IMV>();
                    if ((haKFactCasted != null))
                    {
                        this._parent.HaKFact = haKFactCasted;
                        return;
                    }
                }
                if ((this._parent.HaTdFact == null))
                {
                    IMV haTdFactCasted = item.As<IMV>();
                    if ((haTdFactCasted != null))
                    {
                        this._parent.HaTdFact = haTdFactCasted;
                        return;
                    }
                }
                if ((this._parent.ThdAmp == null))
                {
                    IMV thdAmpCasted = item.As<IMV>();
                    if ((thdAmpCasted != null))
                    {
                        this._parent.ThdAmp = thdAmpCasted;
                        return;
                    }
                }
                if ((this._parent.ThdOddAmp == null))
                {
                    IMV thdOddAmpCasted = item.As<IMV>();
                    if ((thdOddAmpCasted != null))
                    {
                        this._parent.ThdOddAmp = thdOddAmpCasted;
                        return;
                    }
                }
                if ((this._parent.ThdEvnAmp == null))
                {
                    IMV thdEvnAmpCasted = item.As<IMV>();
                    if ((thdEvnAmpCasted != null))
                    {
                        this._parent.ThdEvnAmp = thdEvnAmpCasted;
                        return;
                    }
                }
                if ((this._parent.TddAmp == null))
                {
                    IMV tddAmpCasted = item.As<IMV>();
                    if ((tddAmpCasted != null))
                    {
                        this._parent.TddAmp = tddAmpCasted;
                        return;
                    }
                }
                if ((this._parent.TddOddAmp == null))
                {
                    IMV tddOddAmpCasted = item.As<IMV>();
                    if ((tddOddAmpCasted != null))
                    {
                        this._parent.TddOddAmp = tddOddAmpCasted;
                        return;
                    }
                }
                if ((this._parent.TddEvnAmp == null))
                {
                    IMV tddEvnAmpCasted = item.As<IMV>();
                    if ((tddEvnAmpCasted != null))
                    {
                        this._parent.TddEvnAmp = tddEvnAmpCasted;
                        return;
                    }
                }
                if ((this._parent.ThdVol == null))
                {
                    IMV thdVolCasted = item.As<IMV>();
                    if ((thdVolCasted != null))
                    {
                        this._parent.ThdVol = thdVolCasted;
                        return;
                    }
                }
                if ((this._parent.ThdOddVol == null))
                {
                    IMV thdOddVolCasted = item.As<IMV>();
                    if ((thdOddVolCasted != null))
                    {
                        this._parent.ThdOddVol = thdOddVolCasted;
                        return;
                    }
                }
                if ((this._parent.ThdEvnVol == null))
                {
                    IMV thdEvnVolCasted = item.As<IMV>();
                    if ((thdEvnVolCasted != null))
                    {
                        this._parent.ThdEvnVol = thdEvnVolCasted;
                        return;
                    }
                }
                if ((this._parent.HaCfAmp == null))
                {
                    IMV haCfAmpCasted = item.As<IMV>();
                    if ((haCfAmpCasted != null))
                    {
                        this._parent.HaCfAmp = haCfAmpCasted;
                        return;
                    }
                }
                if ((this._parent.HaCfVol == null))
                {
                    IMV haCfVolCasted = item.As<IMV>();
                    if ((haCfVolCasted != null))
                    {
                        this._parent.HaCfVol = haCfVolCasted;
                        return;
                    }
                }
                if ((this._parent.HaTiFact == null))
                {
                    IMV haTiFactCasted = item.As<IMV>();
                    if ((haTiFactCasted != null))
                    {
                        this._parent.HaTiFact = haTiFactCasted;
                        return;
                    }
                }
                if ((this._parent.HzSet == null))
                {
                    IASG hzSetCasted = item.As<IASG>();
                    if ((hzSetCasted != null))
                    {
                        this._parent.HzSet = hzSetCasted;
                        return;
                    }
                }
                if ((this._parent.EvTmms == null))
                {
                    IASG evTmmsCasted = item.As<IASG>();
                    if ((evTmmsCasted != null))
                    {
                        this._parent.EvTmms = evTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.NumCyc == null))
                {
                    IING numCycCasted = item.As<IING>();
                    if ((numCycCasted != null))
                    {
                        this._parent.NumCyc = numCycCasted;
                        return;
                    }
                }
                if ((this._parent.ThdAVal == null))
                {
                    IASG thdAValCasted = item.As<IASG>();
                    if ((thdAValCasted != null))
                    {
                        this._parent.ThdAVal = thdAValCasted;
                        return;
                    }
                }
                if ((this._parent.ThdVVal == null))
                {
                    IASG thdVValCasted = item.As<IASG>();
                    if ((thdVValCasted != null))
                    {
                        this._parent.ThdVVal = thdVValCasted;
                        return;
                    }
                }
                if ((this._parent.ThdATmms == null))
                {
                    IING thdATmmsCasted = item.As<IING>();
                    if ((thdATmmsCasted != null))
                    {
                        this._parent.ThdATmms = thdATmmsCasted;
                        return;
                    }
                }
                if ((this._parent.ThdVTmms == null))
                {
                    IING thdVTmmsCasted = item.As<IING>();
                    if ((thdVTmmsCasted != null))
                    {
                        this._parent.ThdVTmms = thdVTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.NomA == null))
                {
                    IASG nomACasted = item.As<IASG>();
                    if ((nomACasted != null))
                    {
                        this._parent.NomA = nomACasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.Hz = null;
                this._parent.HaAmp = null;
                this._parent.HaVol = null;
                this._parent.HaWatt = null;
                this._parent.HaVolAmpr = null;
                this._parent.HaVolAmp = null;
                this._parent.HaRmsAmp = null;
                this._parent.HaRmsVol = null;
                this._parent.HaTuWatt = null;
                this._parent.HaTsWatt = null;
                this._parent.HaAmpTm = null;
                this._parent.HaKFact = null;
                this._parent.HaTdFact = null;
                this._parent.ThdAmp = null;
                this._parent.ThdOddAmp = null;
                this._parent.ThdEvnAmp = null;
                this._parent.TddAmp = null;
                this._parent.TddOddAmp = null;
                this._parent.TddEvnAmp = null;
                this._parent.ThdVol = null;
                this._parent.ThdOddVol = null;
                this._parent.ThdEvnVol = null;
                this._parent.HaCfAmp = null;
                this._parent.HaCfVol = null;
                this._parent.HaTiFact = null;
                this._parent.HzSet = null;
                this._parent.EvTmms = null;
                this._parent.NumCyc = null;
                this._parent.ThdAVal = null;
                this._parent.ThdVVal = null;
                this._parent.ThdATmms = null;
                this._parent.ThdVTmms = null;
                this._parent.NomA = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.Hz))
                {
                    return true;
                }
                if ((item == this._parent.HaAmp))
                {
                    return true;
                }
                if ((item == this._parent.HaVol))
                {
                    return true;
                }
                if ((item == this._parent.HaWatt))
                {
                    return true;
                }
                if ((item == this._parent.HaVolAmpr))
                {
                    return true;
                }
                if ((item == this._parent.HaVolAmp))
                {
                    return true;
                }
                if ((item == this._parent.HaRmsAmp))
                {
                    return true;
                }
                if ((item == this._parent.HaRmsVol))
                {
                    return true;
                }
                if ((item == this._parent.HaTuWatt))
                {
                    return true;
                }
                if ((item == this._parent.HaTsWatt))
                {
                    return true;
                }
                if ((item == this._parent.HaAmpTm))
                {
                    return true;
                }
                if ((item == this._parent.HaKFact))
                {
                    return true;
                }
                if ((item == this._parent.HaTdFact))
                {
                    return true;
                }
                if ((item == this._parent.ThdAmp))
                {
                    return true;
                }
                if ((item == this._parent.ThdOddAmp))
                {
                    return true;
                }
                if ((item == this._parent.ThdEvnAmp))
                {
                    return true;
                }
                if ((item == this._parent.TddAmp))
                {
                    return true;
                }
                if ((item == this._parent.TddOddAmp))
                {
                    return true;
                }
                if ((item == this._parent.TddEvnAmp))
                {
                    return true;
                }
                if ((item == this._parent.ThdVol))
                {
                    return true;
                }
                if ((item == this._parent.ThdOddVol))
                {
                    return true;
                }
                if ((item == this._parent.ThdEvnVol))
                {
                    return true;
                }
                if ((item == this._parent.HaCfAmp))
                {
                    return true;
                }
                if ((item == this._parent.HaCfVol))
                {
                    return true;
                }
                if ((item == this._parent.HaTiFact))
                {
                    return true;
                }
                if ((item == this._parent.HzSet))
                {
                    return true;
                }
                if ((item == this._parent.EvTmms))
                {
                    return true;
                }
                if ((item == this._parent.NumCyc))
                {
                    return true;
                }
                if ((item == this._parent.ThdAVal))
                {
                    return true;
                }
                if ((item == this._parent.ThdVVal))
                {
                    return true;
                }
                if ((item == this._parent.ThdATmms))
                {
                    return true;
                }
                if ((item == this._parent.ThdVTmms))
                {
                    return true;
                }
                if ((item == this._parent.NomA))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Hz != null))
                {
                    array[arrayIndex] = this._parent.Hz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaAmp != null))
                {
                    array[arrayIndex] = this._parent.HaAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaVol != null))
                {
                    array[arrayIndex] = this._parent.HaVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaWatt != null))
                {
                    array[arrayIndex] = this._parent.HaWatt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaVolAmpr != null))
                {
                    array[arrayIndex] = this._parent.HaVolAmpr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaVolAmp != null))
                {
                    array[arrayIndex] = this._parent.HaVolAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaRmsAmp != null))
                {
                    array[arrayIndex] = this._parent.HaRmsAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaRmsVol != null))
                {
                    array[arrayIndex] = this._parent.HaRmsVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaTuWatt != null))
                {
                    array[arrayIndex] = this._parent.HaTuWatt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaTsWatt != null))
                {
                    array[arrayIndex] = this._parent.HaTsWatt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaAmpTm != null))
                {
                    array[arrayIndex] = this._parent.HaAmpTm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaKFact != null))
                {
                    array[arrayIndex] = this._parent.HaKFact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaTdFact != null))
                {
                    array[arrayIndex] = this._parent.HaTdFact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdAmp != null))
                {
                    array[arrayIndex] = this._parent.ThdAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdOddAmp != null))
                {
                    array[arrayIndex] = this._parent.ThdOddAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdEvnAmp != null))
                {
                    array[arrayIndex] = this._parent.ThdEvnAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TddAmp != null))
                {
                    array[arrayIndex] = this._parent.TddAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TddOddAmp != null))
                {
                    array[arrayIndex] = this._parent.TddOddAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TddEvnAmp != null))
                {
                    array[arrayIndex] = this._parent.TddEvnAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdVol != null))
                {
                    array[arrayIndex] = this._parent.ThdVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdOddVol != null))
                {
                    array[arrayIndex] = this._parent.ThdOddVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdEvnVol != null))
                {
                    array[arrayIndex] = this._parent.ThdEvnVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaCfAmp != null))
                {
                    array[arrayIndex] = this._parent.HaCfAmp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaCfVol != null))
                {
                    array[arrayIndex] = this._parent.HaCfVol;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaTiFact != null))
                {
                    array[arrayIndex] = this._parent.HaTiFact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HzSet != null))
                {
                    array[arrayIndex] = this._parent.HzSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EvTmms != null))
                {
                    array[arrayIndex] = this._parent.EvTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NumCyc != null))
                {
                    array[arrayIndex] = this._parent.NumCyc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdAVal != null))
                {
                    array[arrayIndex] = this._parent.ThdAVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdVVal != null))
                {
                    array[arrayIndex] = this._parent.ThdVVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdATmms != null))
                {
                    array[arrayIndex] = this._parent.ThdATmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdVTmms != null))
                {
                    array[arrayIndex] = this._parent.ThdVTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NomA != null))
                {
                    array[arrayIndex] = this._parent.NomA;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.Hz == item))
                {
                    this._parent.Hz = null;
                    return true;
                }
                if ((this._parent.HaAmp == item))
                {
                    this._parent.HaAmp = null;
                    return true;
                }
                if ((this._parent.HaVol == item))
                {
                    this._parent.HaVol = null;
                    return true;
                }
                if ((this._parent.HaWatt == item))
                {
                    this._parent.HaWatt = null;
                    return true;
                }
                if ((this._parent.HaVolAmpr == item))
                {
                    this._parent.HaVolAmpr = null;
                    return true;
                }
                if ((this._parent.HaVolAmp == item))
                {
                    this._parent.HaVolAmp = null;
                    return true;
                }
                if ((this._parent.HaRmsAmp == item))
                {
                    this._parent.HaRmsAmp = null;
                    return true;
                }
                if ((this._parent.HaRmsVol == item))
                {
                    this._parent.HaRmsVol = null;
                    return true;
                }
                if ((this._parent.HaTuWatt == item))
                {
                    this._parent.HaTuWatt = null;
                    return true;
                }
                if ((this._parent.HaTsWatt == item))
                {
                    this._parent.HaTsWatt = null;
                    return true;
                }
                if ((this._parent.HaAmpTm == item))
                {
                    this._parent.HaAmpTm = null;
                    return true;
                }
                if ((this._parent.HaKFact == item))
                {
                    this._parent.HaKFact = null;
                    return true;
                }
                if ((this._parent.HaTdFact == item))
                {
                    this._parent.HaTdFact = null;
                    return true;
                }
                if ((this._parent.ThdAmp == item))
                {
                    this._parent.ThdAmp = null;
                    return true;
                }
                if ((this._parent.ThdOddAmp == item))
                {
                    this._parent.ThdOddAmp = null;
                    return true;
                }
                if ((this._parent.ThdEvnAmp == item))
                {
                    this._parent.ThdEvnAmp = null;
                    return true;
                }
                if ((this._parent.TddAmp == item))
                {
                    this._parent.TddAmp = null;
                    return true;
                }
                if ((this._parent.TddOddAmp == item))
                {
                    this._parent.TddOddAmp = null;
                    return true;
                }
                if ((this._parent.TddEvnAmp == item))
                {
                    this._parent.TddEvnAmp = null;
                    return true;
                }
                if ((this._parent.ThdVol == item))
                {
                    this._parent.ThdVol = null;
                    return true;
                }
                if ((this._parent.ThdOddVol == item))
                {
                    this._parent.ThdOddVol = null;
                    return true;
                }
                if ((this._parent.ThdEvnVol == item))
                {
                    this._parent.ThdEvnVol = null;
                    return true;
                }
                if ((this._parent.HaCfAmp == item))
                {
                    this._parent.HaCfAmp = null;
                    return true;
                }
                if ((this._parent.HaCfVol == item))
                {
                    this._parent.HaCfVol = null;
                    return true;
                }
                if ((this._parent.HaTiFact == item))
                {
                    this._parent.HaTiFact = null;
                    return true;
                }
                if ((this._parent.HzSet == item))
                {
                    this._parent.HzSet = null;
                    return true;
                }
                if ((this._parent.EvTmms == item))
                {
                    this._parent.EvTmms = null;
                    return true;
                }
                if ((this._parent.NumCyc == item))
                {
                    this._parent.NumCyc = null;
                    return true;
                }
                if ((this._parent.ThdAVal == item))
                {
                    this._parent.ThdAVal = null;
                    return true;
                }
                if ((this._parent.ThdVVal == item))
                {
                    this._parent.ThdVVal = null;
                    return true;
                }
                if ((this._parent.ThdATmms == item))
                {
                    this._parent.ThdATmms = null;
                    return true;
                }
                if ((this._parent.ThdVTmms == item))
                {
                    this._parent.ThdVTmms = null;
                    return true;
                }
                if ((this._parent.NomA == item))
                {
                    this._parent.NomA = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.Hz).Concat(this._parent.HaAmp).Concat(this._parent.HaVol).Concat(this._parent.HaWatt).Concat(this._parent.HaVolAmpr).Concat(this._parent.HaVolAmp).Concat(this._parent.HaRmsAmp).Concat(this._parent.HaRmsVol).Concat(this._parent.HaTuWatt).Concat(this._parent.HaTsWatt).Concat(this._parent.HaAmpTm).Concat(this._parent.HaKFact).Concat(this._parent.HaTdFact).Concat(this._parent.ThdAmp).Concat(this._parent.ThdOddAmp).Concat(this._parent.ThdEvnAmp).Concat(this._parent.TddAmp).Concat(this._parent.TddOddAmp).Concat(this._parent.TddEvnAmp).Concat(this._parent.ThdVol).Concat(this._parent.ThdOddVol).Concat(this._parent.ThdEvnVol).Concat(this._parent.HaCfAmp).Concat(this._parent.HaCfVol).Concat(this._parent.HaTiFact).Concat(this._parent.HzSet).Concat(this._parent.EvTmms).Concat(this._parent.NumCyc).Concat(this._parent.ThdAVal).Concat(this._parent.ThdVVal).Concat(this._parent.ThdATmms).Concat(this._parent.ThdVTmms).Concat(this._parent.NomA).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMHAN, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMHAN modelElement) : 
                    base(modelElement, "EEHealth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMHAN, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMHAN modelElement) : 
                    base(modelElement, "EEName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Hz property
        /// </summary>
        private sealed class HzProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzProxy(IMHAN modelElement) : 
                    base(modelElement, "Hz")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Hz;
                }
                set
                {
                    this.ModelElement.Hz = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaAmp property
        /// </summary>
        private sealed class HaAmpProxy : ModelPropertyChange<IMHAN, IHMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "HaAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHMV Value
            {
                get
                {
                    return this.ModelElement.HaAmp;
                }
                set
                {
                    this.ModelElement.HaAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaVol property
        /// </summary>
        private sealed class HaVolProxy : ModelPropertyChange<IMHAN, IHMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaVolProxy(IMHAN modelElement) : 
                    base(modelElement, "HaVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHMV Value
            {
                get
                {
                    return this.ModelElement.HaVol;
                }
                set
                {
                    this.ModelElement.HaVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaWatt property
        /// </summary>
        private sealed class HaWattProxy : ModelPropertyChange<IMHAN, IHMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaWattProxy(IMHAN modelElement) : 
                    base(modelElement, "HaWatt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHMV Value
            {
                get
                {
                    return this.ModelElement.HaWatt;
                }
                set
                {
                    this.ModelElement.HaWatt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaVolAmpr property
        /// </summary>
        private sealed class HaVolAmprProxy : ModelPropertyChange<IMHAN, IHMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaVolAmprProxy(IMHAN modelElement) : 
                    base(modelElement, "HaVolAmpr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHMV Value
            {
                get
                {
                    return this.ModelElement.HaVolAmpr;
                }
                set
                {
                    this.ModelElement.HaVolAmpr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaVolAmp property
        /// </summary>
        private sealed class HaVolAmpProxy : ModelPropertyChange<IMHAN, IHMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaVolAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "HaVolAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHMV Value
            {
                get
                {
                    return this.ModelElement.HaVolAmp;
                }
                set
                {
                    this.ModelElement.HaVolAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaRmsAmp property
        /// </summary>
        private sealed class HaRmsAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaRmsAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "HaRmsAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaRmsAmp;
                }
                set
                {
                    this.ModelElement.HaRmsAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaRmsVol property
        /// </summary>
        private sealed class HaRmsVolProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaRmsVolProxy(IMHAN modelElement) : 
                    base(modelElement, "HaRmsVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaRmsVol;
                }
                set
                {
                    this.ModelElement.HaRmsVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaTuWatt property
        /// </summary>
        private sealed class HaTuWattProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaTuWattProxy(IMHAN modelElement) : 
                    base(modelElement, "HaTuWatt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaTuWatt;
                }
                set
                {
                    this.ModelElement.HaTuWatt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaTsWatt property
        /// </summary>
        private sealed class HaTsWattProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaTsWattProxy(IMHAN modelElement) : 
                    base(modelElement, "HaTsWatt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaTsWatt;
                }
                set
                {
                    this.ModelElement.HaTsWatt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaAmpTm property
        /// </summary>
        private sealed class HaAmpTmProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaAmpTmProxy(IMHAN modelElement) : 
                    base(modelElement, "HaAmpTm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaAmpTm;
                }
                set
                {
                    this.ModelElement.HaAmpTm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaKFact property
        /// </summary>
        private sealed class HaKFactProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaKFactProxy(IMHAN modelElement) : 
                    base(modelElement, "HaKFact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaKFact;
                }
                set
                {
                    this.ModelElement.HaKFact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaTdFact property
        /// </summary>
        private sealed class HaTdFactProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaTdFactProxy(IMHAN modelElement) : 
                    base(modelElement, "HaTdFact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaTdFact;
                }
                set
                {
                    this.ModelElement.HaTdFact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdAmp property
        /// </summary>
        private sealed class ThdAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdAmp;
                }
                set
                {
                    this.ModelElement.ThdAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdOddAmp property
        /// </summary>
        private sealed class ThdOddAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdOddAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdOddAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdOddAmp;
                }
                set
                {
                    this.ModelElement.ThdOddAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdEvnAmp property
        /// </summary>
        private sealed class ThdEvnAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdEvnAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdEvnAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdEvnAmp;
                }
                set
                {
                    this.ModelElement.ThdEvnAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TddAmp property
        /// </summary>
        private sealed class TddAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TddAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "TddAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TddAmp;
                }
                set
                {
                    this.ModelElement.TddAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TddOddAmp property
        /// </summary>
        private sealed class TddOddAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TddOddAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "TddOddAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TddOddAmp;
                }
                set
                {
                    this.ModelElement.TddOddAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TddEvnAmp property
        /// </summary>
        private sealed class TddEvnAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TddEvnAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "TddEvnAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TddEvnAmp;
                }
                set
                {
                    this.ModelElement.TddEvnAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdVol property
        /// </summary>
        private sealed class ThdVolProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdVolProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdVol;
                }
                set
                {
                    this.ModelElement.ThdVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdOddVol property
        /// </summary>
        private sealed class ThdOddVolProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdOddVolProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdOddVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdOddVol;
                }
                set
                {
                    this.ModelElement.ThdOddVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdEvnVol property
        /// </summary>
        private sealed class ThdEvnVolProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdEvnVolProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdEvnVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ThdEvnVol;
                }
                set
                {
                    this.ModelElement.ThdEvnVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaCfAmp property
        /// </summary>
        private sealed class HaCfAmpProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaCfAmpProxy(IMHAN modelElement) : 
                    base(modelElement, "HaCfAmp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaCfAmp;
                }
                set
                {
                    this.ModelElement.HaCfAmp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaCfVol property
        /// </summary>
        private sealed class HaCfVolProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaCfVolProxy(IMHAN modelElement) : 
                    base(modelElement, "HaCfVol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaCfVol;
                }
                set
                {
                    this.ModelElement.HaCfVol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaTiFact property
        /// </summary>
        private sealed class HaTiFactProxy : ModelPropertyChange<IMHAN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaTiFactProxy(IMHAN modelElement) : 
                    base(modelElement, "HaTiFact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HaTiFact;
                }
                set
                {
                    this.ModelElement.HaTiFact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HzSet property
        /// </summary>
        private sealed class HzSetProxy : ModelPropertyChange<IMHAN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzSetProxy(IMHAN modelElement) : 
                    base(modelElement, "HzSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HzSet;
                }
                set
                {
                    this.ModelElement.HzSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EvTmms property
        /// </summary>
        private sealed class EvTmmsProxy : ModelPropertyChange<IMHAN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EvTmmsProxy(IMHAN modelElement) : 
                    base(modelElement, "EvTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.EvTmms;
                }
                set
                {
                    this.ModelElement.EvTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumCyc property
        /// </summary>
        private sealed class NumCycProxy : ModelPropertyChange<IMHAN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumCycProxy(IMHAN modelElement) : 
                    base(modelElement, "NumCyc")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.NumCyc;
                }
                set
                {
                    this.ModelElement.NumCyc = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdAVal property
        /// </summary>
        private sealed class ThdAValProxy : ModelPropertyChange<IMHAN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdAValProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdAVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ThdAVal;
                }
                set
                {
                    this.ModelElement.ThdAVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdVVal property
        /// </summary>
        private sealed class ThdVValProxy : ModelPropertyChange<IMHAN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdVValProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdVVal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ThdVVal;
                }
                set
                {
                    this.ModelElement.ThdVVal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdATmms property
        /// </summary>
        private sealed class ThdATmmsProxy : ModelPropertyChange<IMHAN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdATmmsProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdATmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ThdATmms;
                }
                set
                {
                    this.ModelElement.ThdATmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdVTmms property
        /// </summary>
        private sealed class ThdVTmmsProxy : ModelPropertyChange<IMHAN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdVTmmsProxy(IMHAN modelElement) : 
                    base(modelElement, "ThdVTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ThdVTmms;
                }
                set
                {
                    this.ModelElement.ThdVTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NomA property
        /// </summary>
        private sealed class NomAProxy : ModelPropertyChange<IMHAN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NomAProxy(IMHAN modelElement) : 
                    base(modelElement, "NomA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.NomA;
                }
                set
                {
                    this.ModelElement.NomA = value;
                }
            }
        }
    }
}

