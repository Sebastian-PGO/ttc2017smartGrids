//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MMXU class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MMXU")]
    public class MMXU : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMMXU, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        /// <summary>
        /// The backing field for the TotW property
        /// </summary>
        private IMV _totW;
        
        /// <summary>
        /// The backing field for the TotVAr property
        /// </summary>
        private IMV _totVAr;
        
        /// <summary>
        /// The backing field for the TotVA property
        /// </summary>
        private IMV _totVA;
        
        /// <summary>
        /// The backing field for the TotPF property
        /// </summary>
        private IMV _totPF;
        
        /// <summary>
        /// The backing field for the Hz property
        /// </summary>
        private IMV _hz;
        
        /// <summary>
        /// The backing field for the PPV property
        /// </summary>
        private IDEL _pPV;
        
        /// <summary>
        /// The backing field for the PhV property
        /// </summary>
        private IWYE _phV;
        
        /// <summary>
        /// The backing field for the A property
        /// </summary>
        private IWYE _a;
        
        /// <summary>
        /// The backing field for the W property
        /// </summary>
        private IWYE _w;
        
        /// <summary>
        /// The backing field for the VAr property
        /// </summary>
        private IWYE _vAr;
        
        /// <summary>
        /// The backing field for the VA property
        /// </summary>
        private IWYE _vA;
        
        /// <summary>
        /// The backing field for the PF property
        /// </summary>
        private IWYE _pF;
        
        /// <summary>
        /// The backing field for the Z property
        /// </summary>
        private IWYE _z;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e);
                }
            }
        }
        
        /// <summary>
        /// The TotW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TotW
        {
            get
            {
                return this._totW;
            }
            set
            {
                if ((this._totW != value))
                {
                    IMV old = this._totW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotWChanging(e);
                    this.OnPropertyChanging("TotW", e);
                    this._totW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotW;
                    }
                    this.OnTotWChanged(e);
                    this.OnPropertyChanged("TotW", e);
                }
            }
        }
        
        /// <summary>
        /// The TotVAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TotVAr
        {
            get
            {
                return this._totVAr;
            }
            set
            {
                if ((this._totVAr != value))
                {
                    IMV old = this._totVAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotVArChanging(e);
                    this.OnPropertyChanging("TotVAr", e);
                    this._totVAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotVAr;
                    }
                    this.OnTotVArChanged(e);
                    this.OnPropertyChanged("TotVAr", e);
                }
            }
        }
        
        /// <summary>
        /// The TotVA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TotVA
        {
            get
            {
                return this._totVA;
            }
            set
            {
                if ((this._totVA != value))
                {
                    IMV old = this._totVA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotVAChanging(e);
                    this.OnPropertyChanging("TotVA", e);
                    this._totVA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotVA;
                    }
                    this.OnTotVAChanged(e);
                    this.OnPropertyChanged("TotVA", e);
                }
            }
        }
        
        /// <summary>
        /// The TotPF property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV TotPF
        {
            get
            {
                return this._totPF;
            }
            set
            {
                if ((this._totPF != value))
                {
                    IMV old = this._totPF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotPFChanging(e);
                    this.OnPropertyChanging("TotPF", e);
                    this._totPF = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTotPF;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTotPF;
                    }
                    this.OnTotPFChanged(e);
                    this.OnPropertyChanged("TotPF", e);
                }
            }
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Hz
        {
            get
            {
                return this._hz;
            }
            set
            {
                if ((this._hz != value))
                {
                    IMV old = this._hz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzChanging(e);
                    this.OnPropertyChanging("Hz", e);
                    this._hz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHz;
                    }
                    this.OnHzChanged(e);
                    this.OnPropertyChanged("Hz", e);
                }
            }
        }
        
        /// <summary>
        /// The PPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL PPV
        {
            get
            {
                return this._pPV;
            }
            set
            {
                if ((this._pPV != value))
                {
                    IDEL old = this._pPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPPVChanging(e);
                    this.OnPropertyChanging("PPV", e);
                    this._pPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPPV;
                    }
                    this.OnPPVChanged(e);
                    this.OnPropertyChanged("PPV", e);
                }
            }
        }
        
        /// <summary>
        /// The PhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE PhV
        {
            get
            {
                return this._phV;
            }
            set
            {
                if ((this._phV != value))
                {
                    IWYE old = this._phV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhVChanging(e);
                    this.OnPropertyChanging("PhV", e);
                    this._phV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhV;
                    }
                    this.OnPhVChanged(e);
                    this.OnPropertyChanged("PhV", e);
                }
            }
        }
        
        /// <summary>
        /// The A property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE A
        {
            get
            {
                return this._a;
            }
            set
            {
                if ((this._a != value))
                {
                    IWYE old = this._a;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAChanging(e);
                    this.OnPropertyChanging("A", e);
                    this._a = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetA;
                    }
                    this.OnAChanged(e);
                    this.OnPropertyChanged("A", e);
                }
            }
        }
        
        /// <summary>
        /// The W property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE W
        {
            get
            {
                return this._w;
            }
            set
            {
                if ((this._w != value))
                {
                    IWYE old = this._w;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWChanging(e);
                    this.OnPropertyChanging("W", e);
                    this._w = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetW;
                    }
                    this.OnWChanged(e);
                    this.OnPropertyChanged("W", e);
                }
            }
        }
        
        /// <summary>
        /// The VAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE VAr
        {
            get
            {
                return this._vAr;
            }
            set
            {
                if ((this._vAr != value))
                {
                    IWYE old = this._vAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVArChanging(e);
                    this.OnPropertyChanging("VAr", e);
                    this._vAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVAr;
                    }
                    this.OnVArChanged(e);
                    this.OnPropertyChanged("VAr", e);
                }
            }
        }
        
        /// <summary>
        /// The VA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE VA
        {
            get
            {
                return this._vA;
            }
            set
            {
                if ((this._vA != value))
                {
                    IWYE old = this._vA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVAChanging(e);
                    this.OnPropertyChanging("VA", e);
                    this._vA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVA;
                    }
                    this.OnVAChanged(e);
                    this.OnPropertyChanged("VA", e);
                }
            }
        }
        
        /// <summary>
        /// The PF property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE PF
        {
            get
            {
                return this._pF;
            }
            set
            {
                if ((this._pF != value))
                {
                    IWYE old = this._pF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPFChanging(e);
                    this.OnPropertyChanging("PF", e);
                    this._pF = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPF;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPF;
                    }
                    this.OnPFChanged(e);
                    this.OnPropertyChanged("PF", e);
                }
            }
        }
        
        /// <summary>
        /// The Z property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE Z
        {
            get
            {
                return this._z;
            }
            set
            {
                if ((this._z != value))
                {
                    IWYE old = this._z;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZChanging(e);
                    this.OnPropertyChanging("Z", e);
                    this._z = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZ;
                    }
                    this.OnZChanged(e);
                    this.OnPropertyChanged("Z", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MMXUReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MMXU")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the TotW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotWChanging;
        
        /// <summary>
        /// Gets fired when the TotW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotWChanged;
        
        /// <summary>
        /// Gets fired before the TotVAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVArChanging;
        
        /// <summary>
        /// Gets fired when the TotVAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVArChanged;
        
        /// <summary>
        /// Gets fired before the TotVA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVAChanging;
        
        /// <summary>
        /// Gets fired when the TotVA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotVAChanged;
        
        /// <summary>
        /// Gets fired before the TotPF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotPFChanging;
        
        /// <summary>
        /// Gets fired when the TotPF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotPFChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanged;
        
        /// <summary>
        /// Gets fired before the PPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PPVChanging;
        
        /// <summary>
        /// Gets fired when the PPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PPVChanged;
        
        /// <summary>
        /// Gets fired before the PhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhVChanging;
        
        /// <summary>
        /// Gets fired when the PhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhVChanged;
        
        /// <summary>
        /// Gets fired before the A property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AChanging;
        
        /// <summary>
        /// Gets fired when the A property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AChanged;
        
        /// <summary>
        /// Gets fired before the W property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WChanging;
        
        /// <summary>
        /// Gets fired when the W property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WChanged;
        
        /// <summary>
        /// Gets fired before the VAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VArChanging;
        
        /// <summary>
        /// Gets fired when the VAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VArChanged;
        
        /// <summary>
        /// Gets fired before the VA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VAChanging;
        
        /// <summary>
        /// Gets fired when the VA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VAChanged;
        
        /// <summary>
        /// Gets fired before the PF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PFChanging;
        
        /// <summary>
        /// Gets fired when the PF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PFChanged;
        
        /// <summary>
        /// Gets fired before the Z property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZChanging;
        
        /// <summary>
        /// Gets fired when the Z property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZChanged;
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotW(object sender, System.EventArgs eventArgs)
        {
            this.TotW = null;
        }
        
        /// <summary>
        /// Raises the TotVArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotVArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotVAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotVAr(object sender, System.EventArgs eventArgs)
        {
            this.TotVAr = null;
        }
        
        /// <summary>
        /// Raises the TotVAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotVAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotVAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotVA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotVA(object sender, System.EventArgs eventArgs)
        {
            this.TotVA = null;
        }
        
        /// <summary>
        /// Raises the TotPFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotPFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotPFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotPFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotPFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotPFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TotPF property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTotPF(object sender, System.EventArgs eventArgs)
        {
            this.TotPF = null;
        }
        
        /// <summary>
        /// Raises the HzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Hz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHz(object sender, System.EventArgs eventArgs)
        {
            this.Hz = null;
        }
        
        /// <summary>
        /// Raises the PPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPPV(object sender, System.EventArgs eventArgs)
        {
            this.PPV = null;
        }
        
        /// <summary>
        /// Raises the PhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhV(object sender, System.EventArgs eventArgs)
        {
            this.PhV = null;
        }
        
        /// <summary>
        /// Raises the AChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the A property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetA(object sender, System.EventArgs eventArgs)
        {
            this.A = null;
        }
        
        /// <summary>
        /// Raises the WChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the W property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetW(object sender, System.EventArgs eventArgs)
        {
            this.W = null;
        }
        
        /// <summary>
        /// Raises the VArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVAr(object sender, System.EventArgs eventArgs)
        {
            this.VAr = null;
        }
        
        /// <summary>
        /// Raises the VAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVA(object sender, System.EventArgs eventArgs)
        {
            this.VA = null;
        }
        
        /// <summary>
        /// Raises the PFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PF property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPF(object sender, System.EventArgs eventArgs)
        {
            this.PF = null;
        }
        
        /// <summary>
        /// Raises the ZChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Z property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZ(object sender, System.EventArgs eventArgs)
        {
            this.Z = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOTW"))
            {
                this.TotW = ((IMV)(value));
                return;
            }
            if ((feature == "TOTVAR"))
            {
                this.TotVAr = ((IMV)(value));
                return;
            }
            if ((feature == "TOTVA"))
            {
                this.TotVA = ((IMV)(value));
                return;
            }
            if ((feature == "TOTPF"))
            {
                this.TotPF = ((IMV)(value));
                return;
            }
            if ((feature == "HZ"))
            {
                this.Hz = ((IMV)(value));
                return;
            }
            if ((feature == "PPV"))
            {
                this.PPV = ((IDEL)(value));
                return;
            }
            if ((feature == "PHV"))
            {
                this.PhV = ((IWYE)(value));
                return;
            }
            if ((feature == "A"))
            {
                this.A = ((IWYE)(value));
                return;
            }
            if ((feature == "W"))
            {
                this.W = ((IWYE)(value));
                return;
            }
            if ((feature == "VAR"))
            {
                this.VAr = ((IWYE)(value));
                return;
            }
            if ((feature == "VA"))
            {
                this.VA = ((IWYE)(value));
                return;
            }
            if ((feature == "PF"))
            {
                this.PF = ((IWYE)(value));
                return;
            }
            if ((feature == "Z"))
            {
                this.Z = ((IWYE)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TotW"))
            {
                return new TotWProxy(this);
            }
            if ((attribute == "TotVAr"))
            {
                return new TotVArProxy(this);
            }
            if ((attribute == "TotVA"))
            {
                return new TotVAProxy(this);
            }
            if ((attribute == "TotPF"))
            {
                return new TotPFProxy(this);
            }
            if ((attribute == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((attribute == "PPV"))
            {
                return new PPVProxy(this);
            }
            if ((attribute == "PhV"))
            {
                return new PhVProxy(this);
            }
            if ((attribute == "A"))
            {
                return new AProxy(this);
            }
            if ((attribute == "W"))
            {
                return new WProxy(this);
            }
            if ((attribute == "VAr"))
            {
                return new VArProxy(this);
            }
            if ((attribute == "VA"))
            {
                return new VAProxy(this);
            }
            if ((attribute == "PF"))
            {
                return new PFProxy(this);
            }
            if ((attribute == "Z"))
            {
                return new ZProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TotW"))
            {
                return new TotWProxy(this);
            }
            if ((reference == "TotVAr"))
            {
                return new TotVArProxy(this);
            }
            if ((reference == "TotVA"))
            {
                return new TotVAProxy(this);
            }
            if ((reference == "TotPF"))
            {
                return new TotPFProxy(this);
            }
            if ((reference == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((reference == "PPV"))
            {
                return new PPVProxy(this);
            }
            if ((reference == "PhV"))
            {
                return new PhVProxy(this);
            }
            if ((reference == "A"))
            {
                return new AProxy(this);
            }
            if ((reference == "W"))
            {
                return new WProxy(this);
            }
            if ((reference == "VAr"))
            {
                return new VArProxy(this);
            }
            if ((reference == "VA"))
            {
                return new VAProxy(this);
            }
            if ((reference == "PF"))
            {
                return new PFProxy(this);
            }
            if ((reference == "Z"))
            {
                return new ZProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MMXU")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MMXU class
        /// </summary>
        public class MMXUReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MMXU _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MMXUReferencedElementsCollection(MMXU parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TotW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotVAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotVA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TotPF != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Hz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.A != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.W != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PF != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Z != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TotWChanged += this.PropagateValueChanges;
                this._parent.TotVArChanged += this.PropagateValueChanges;
                this._parent.TotVAChanged += this.PropagateValueChanges;
                this._parent.TotPFChanged += this.PropagateValueChanges;
                this._parent.HzChanged += this.PropagateValueChanges;
                this._parent.PPVChanged += this.PropagateValueChanges;
                this._parent.PhVChanged += this.PropagateValueChanges;
                this._parent.AChanged += this.PropagateValueChanges;
                this._parent.WChanged += this.PropagateValueChanges;
                this._parent.VArChanged += this.PropagateValueChanges;
                this._parent.VAChanged += this.PropagateValueChanges;
                this._parent.PFChanged += this.PropagateValueChanges;
                this._parent.ZChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TotWChanged -= this.PropagateValueChanges;
                this._parent.TotVArChanged -= this.PropagateValueChanges;
                this._parent.TotVAChanged -= this.PropagateValueChanges;
                this._parent.TotPFChanged -= this.PropagateValueChanges;
                this._parent.HzChanged -= this.PropagateValueChanges;
                this._parent.PPVChanged -= this.PropagateValueChanges;
                this._parent.PhVChanged -= this.PropagateValueChanges;
                this._parent.AChanged -= this.PropagateValueChanges;
                this._parent.WChanged -= this.PropagateValueChanges;
                this._parent.VArChanged -= this.PropagateValueChanges;
                this._parent.VAChanged -= this.PropagateValueChanges;
                this._parent.PFChanged -= this.PropagateValueChanges;
                this._parent.ZChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TotW == null))
                {
                    IMV totWCasted = item.As<IMV>();
                    if ((totWCasted != null))
                    {
                        this._parent.TotW = totWCasted;
                        return;
                    }
                }
                if ((this._parent.TotVAr == null))
                {
                    IMV totVArCasted = item.As<IMV>();
                    if ((totVArCasted != null))
                    {
                        this._parent.TotVAr = totVArCasted;
                        return;
                    }
                }
                if ((this._parent.TotVA == null))
                {
                    IMV totVACasted = item.As<IMV>();
                    if ((totVACasted != null))
                    {
                        this._parent.TotVA = totVACasted;
                        return;
                    }
                }
                if ((this._parent.TotPF == null))
                {
                    IMV totPFCasted = item.As<IMV>();
                    if ((totPFCasted != null))
                    {
                        this._parent.TotPF = totPFCasted;
                        return;
                    }
                }
                if ((this._parent.Hz == null))
                {
                    IMV hzCasted = item.As<IMV>();
                    if ((hzCasted != null))
                    {
                        this._parent.Hz = hzCasted;
                        return;
                    }
                }
                if ((this._parent.PPV == null))
                {
                    IDEL pPVCasted = item.As<IDEL>();
                    if ((pPVCasted != null))
                    {
                        this._parent.PPV = pPVCasted;
                        return;
                    }
                }
                if ((this._parent.PhV == null))
                {
                    IWYE phVCasted = item.As<IWYE>();
                    if ((phVCasted != null))
                    {
                        this._parent.PhV = phVCasted;
                        return;
                    }
                }
                if ((this._parent.A == null))
                {
                    IWYE aCasted = item.As<IWYE>();
                    if ((aCasted != null))
                    {
                        this._parent.A = aCasted;
                        return;
                    }
                }
                if ((this._parent.W == null))
                {
                    IWYE wCasted = item.As<IWYE>();
                    if ((wCasted != null))
                    {
                        this._parent.W = wCasted;
                        return;
                    }
                }
                if ((this._parent.VAr == null))
                {
                    IWYE vArCasted = item.As<IWYE>();
                    if ((vArCasted != null))
                    {
                        this._parent.VAr = vArCasted;
                        return;
                    }
                }
                if ((this._parent.VA == null))
                {
                    IWYE vACasted = item.As<IWYE>();
                    if ((vACasted != null))
                    {
                        this._parent.VA = vACasted;
                        return;
                    }
                }
                if ((this._parent.PF == null))
                {
                    IWYE pFCasted = item.As<IWYE>();
                    if ((pFCasted != null))
                    {
                        this._parent.PF = pFCasted;
                        return;
                    }
                }
                if ((this._parent.Z == null))
                {
                    IWYE zCasted = item.As<IWYE>();
                    if ((zCasted != null))
                    {
                        this._parent.Z = zCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TotW = null;
                this._parent.TotVAr = null;
                this._parent.TotVA = null;
                this._parent.TotPF = null;
                this._parent.Hz = null;
                this._parent.PPV = null;
                this._parent.PhV = null;
                this._parent.A = null;
                this._parent.W = null;
                this._parent.VAr = null;
                this._parent.VA = null;
                this._parent.PF = null;
                this._parent.Z = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TotW))
                {
                    return true;
                }
                if ((item == this._parent.TotVAr))
                {
                    return true;
                }
                if ((item == this._parent.TotVA))
                {
                    return true;
                }
                if ((item == this._parent.TotPF))
                {
                    return true;
                }
                if ((item == this._parent.Hz))
                {
                    return true;
                }
                if ((item == this._parent.PPV))
                {
                    return true;
                }
                if ((item == this._parent.PhV))
                {
                    return true;
                }
                if ((item == this._parent.A))
                {
                    return true;
                }
                if ((item == this._parent.W))
                {
                    return true;
                }
                if ((item == this._parent.VAr))
                {
                    return true;
                }
                if ((item == this._parent.VA))
                {
                    return true;
                }
                if ((item == this._parent.PF))
                {
                    return true;
                }
                if ((item == this._parent.Z))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TotW != null))
                {
                    array[arrayIndex] = this._parent.TotW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotVAr != null))
                {
                    array[arrayIndex] = this._parent.TotVAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotVA != null))
                {
                    array[arrayIndex] = this._parent.TotVA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TotPF != null))
                {
                    array[arrayIndex] = this._parent.TotPF;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Hz != null))
                {
                    array[arrayIndex] = this._parent.Hz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PPV != null))
                {
                    array[arrayIndex] = this._parent.PPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhV != null))
                {
                    array[arrayIndex] = this._parent.PhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.A != null))
                {
                    array[arrayIndex] = this._parent.A;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.W != null))
                {
                    array[arrayIndex] = this._parent.W;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VAr != null))
                {
                    array[arrayIndex] = this._parent.VAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VA != null))
                {
                    array[arrayIndex] = this._parent.VA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PF != null))
                {
                    array[arrayIndex] = this._parent.PF;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Z != null))
                {
                    array[arrayIndex] = this._parent.Z;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TotW == item))
                {
                    this._parent.TotW = null;
                    return true;
                }
                if ((this._parent.TotVAr == item))
                {
                    this._parent.TotVAr = null;
                    return true;
                }
                if ((this._parent.TotVA == item))
                {
                    this._parent.TotVA = null;
                    return true;
                }
                if ((this._parent.TotPF == item))
                {
                    this._parent.TotPF = null;
                    return true;
                }
                if ((this._parent.Hz == item))
                {
                    this._parent.Hz = null;
                    return true;
                }
                if ((this._parent.PPV == item))
                {
                    this._parent.PPV = null;
                    return true;
                }
                if ((this._parent.PhV == item))
                {
                    this._parent.PhV = null;
                    return true;
                }
                if ((this._parent.A == item))
                {
                    this._parent.A = null;
                    return true;
                }
                if ((this._parent.W == item))
                {
                    this._parent.W = null;
                    return true;
                }
                if ((this._parent.VAr == item))
                {
                    this._parent.VAr = null;
                    return true;
                }
                if ((this._parent.VA == item))
                {
                    this._parent.VA = null;
                    return true;
                }
                if ((this._parent.PF == item))
                {
                    this._parent.PF = null;
                    return true;
                }
                if ((this._parent.Z == item))
                {
                    this._parent.Z = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TotW).Concat(this._parent.TotVAr).Concat(this._parent.TotVA).Concat(this._parent.TotPF).Concat(this._parent.Hz).Concat(this._parent.PPV).Concat(this._parent.PhV).Concat(this._parent.A).Concat(this._parent.W).Concat(this._parent.VAr).Concat(this._parent.VA).Concat(this._parent.PF).Concat(this._parent.Z).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMMXU, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotW property
        /// </summary>
        private sealed class TotWProxy : ModelPropertyChange<IMMXU, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotWProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TotW;
                }
                set
                {
                    this.ModelElement.TotW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotVAr property
        /// </summary>
        private sealed class TotVArProxy : ModelPropertyChange<IMMXU, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotVArProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TotVAr;
                }
                set
                {
                    this.ModelElement.TotVAr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotVArChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotVArChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotVA property
        /// </summary>
        private sealed class TotVAProxy : ModelPropertyChange<IMMXU, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotVAProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TotVA;
                }
                set
                {
                    this.ModelElement.TotVA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotVAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotVAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TotPF property
        /// </summary>
        private sealed class TotPFProxy : ModelPropertyChange<IMMXU, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotPFProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.TotPF;
                }
                set
                {
                    this.ModelElement.TotPF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotPFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotPFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Hz property
        /// </summary>
        private sealed class HzProxy : ModelPropertyChange<IMMXU, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Hz;
                }
                set
                {
                    this.ModelElement.Hz = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PPV property
        /// </summary>
        private sealed class PPVProxy : ModelPropertyChange<IMMXU, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PPVProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.PPV;
                }
                set
                {
                    this.ModelElement.PPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhV property
        /// </summary>
        private sealed class PhVProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhVProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.PhV;
                }
                set
                {
                    this.ModelElement.PhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the A property
        /// </summary>
        private sealed class AProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.A;
                }
                set
                {
                    this.ModelElement.A = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the W property
        /// </summary>
        private sealed class WProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.W;
                }
                set
                {
                    this.ModelElement.W = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VAr property
        /// </summary>
        private sealed class VArProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VArProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.VAr;
                }
                set
                {
                    this.ModelElement.VAr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VArChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VArChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VA property
        /// </summary>
        private sealed class VAProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VAProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.VA;
                }
                set
                {
                    this.ModelElement.VA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PF property
        /// </summary>
        private sealed class PFProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PFProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.PF;
                }
                set
                {
                    this.ModelElement.PF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Z property
        /// </summary>
        private sealed class ZProxy : ModelPropertyChange<IMMXU, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZProxy(IMMXU modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.Z;
                }
                set
                {
                    this.ModelElement.Z = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ZChanged -= handler;
            }
        }
    }
}

