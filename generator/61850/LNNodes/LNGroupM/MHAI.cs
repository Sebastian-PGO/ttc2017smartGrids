//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MHAI class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MHAI")]
    public class MHAI : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMHAI, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        /// <summary>
        /// The backing field for the Hz property
        /// </summary>
        private IMV _hz;
        
        /// <summary>
        /// The backing field for the HA property
        /// </summary>
        private IHYWE _hA;
        
        /// <summary>
        /// The backing field for the HPhV property
        /// </summary>
        private IHYWE _hPhV;
        
        /// <summary>
        /// The backing field for the HPPV property
        /// </summary>
        private IHDEL _hPPV;
        
        /// <summary>
        /// The backing field for the HW property
        /// </summary>
        private IHYWE _hW;
        
        /// <summary>
        /// The backing field for the HVAr property
        /// </summary>
        private IHYWE _hVAr;
        
        /// <summary>
        /// The backing field for the HVA property
        /// </summary>
        private IHYWE _hVA;
        
        /// <summary>
        /// The backing field for the HRmsA property
        /// </summary>
        private IWYE _hRmsA;
        
        /// <summary>
        /// The backing field for the HRmsPhV property
        /// </summary>
        private IWYE _hRmsPhV;
        
        /// <summary>
        /// The backing field for the HRmsPPV property
        /// </summary>
        private IDEL _hRmsPPV;
        
        /// <summary>
        /// The backing field for the HTuW property
        /// </summary>
        private IWYE _hTuW;
        
        /// <summary>
        /// The backing field for the HTsW property
        /// </summary>
        private IWYE _hTsW;
        
        /// <summary>
        /// The backing field for the HATm property
        /// </summary>
        private IWYE _hATm;
        
        /// <summary>
        /// The backing field for the HKf property
        /// </summary>
        private IWYE _hKf;
        
        /// <summary>
        /// The backing field for the HTdf property
        /// </summary>
        private IWYE _hTdf;
        
        /// <summary>
        /// The backing field for the ThdA property
        /// </summary>
        private IWYE _thdA;
        
        /// <summary>
        /// The backing field for the ThdOddA property
        /// </summary>
        private IWYE _thdOddA;
        
        /// <summary>
        /// The backing field for the ThdEvnA property
        /// </summary>
        private IWYE _thdEvnA;
        
        /// <summary>
        /// The backing field for the ThdPhV property
        /// </summary>
        private IWYE _thdPhV;
        
        /// <summary>
        /// The backing field for the ThdOddPhV property
        /// </summary>
        private IWYE _thdOddPhV;
        
        /// <summary>
        /// The backing field for the ThdEvnV property
        /// </summary>
        private IWYE _thdEvnV;
        
        /// <summary>
        /// The backing field for the ThdPPV property
        /// </summary>
        private IDEL _thdPPV;
        
        /// <summary>
        /// The backing field for the ThdOddPPV property
        /// </summary>
        private IDEL _thdOddPPV;
        
        /// <summary>
        /// The backing field for the ThdEvnPPV property
        /// </summary>
        private IDEL _thdEvnPPV;
        
        /// <summary>
        /// The backing field for the HCfPhV property
        /// </summary>
        private IWYE _hCfPhV;
        
        /// <summary>
        /// The backing field for the HCfPPV property
        /// </summary>
        private IDEL _hCfPPV;
        
        /// <summary>
        /// The backing field for the HCfA property
        /// </summary>
        private IWYE _hCfA;
        
        /// <summary>
        /// The backing field for the HTif property
        /// </summary>
        private IWYE _hTif;
        
        /// <summary>
        /// The backing field for the HzSet property
        /// </summary>
        private IASG _hzSet;
        
        /// <summary>
        /// The backing field for the EvTmms property
        /// </summary>
        private IASG _evTmms;
        
        /// <summary>
        /// The backing field for the NumCyc property
        /// </summary>
        private IING _numCyc;
        
        /// <summary>
        /// The backing field for the ThdAVal property
        /// </summary>
        private IASG _thdAVal;
        
        /// <summary>
        /// The backing field for the ThdVVal property
        /// </summary>
        private IASG _thdVVal;
        
        /// <summary>
        /// The backing field for the ThdATmms property
        /// </summary>
        private IING _thdATmms;
        
        /// <summary>
        /// The backing field for the ThdVTmms property
        /// </summary>
        private IING _thdVTmms;
        
        /// <summary>
        /// The backing field for the NomA property
        /// </summary>
        private IASG _nomA;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e);
                }
            }
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV Hz
        {
            get
            {
                return this._hz;
            }
            set
            {
                if ((this._hz != value))
                {
                    IMV old = this._hz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzChanging(e);
                    this.OnPropertyChanging("Hz", e);
                    this._hz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHz;
                    }
                    this.OnHzChanged(e);
                    this.OnPropertyChanged("Hz", e);
                }
            }
        }
        
        /// <summary>
        /// The HA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHYWE HA
        {
            get
            {
                return this._hA;
            }
            set
            {
                if ((this._hA != value))
                {
                    IHYWE old = this._hA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHAChanging(e);
                    this.OnPropertyChanging("HA", e);
                    this._hA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHA;
                    }
                    this.OnHAChanged(e);
                    this.OnPropertyChanged("HA", e);
                }
            }
        }
        
        /// <summary>
        /// The HPhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHYWE HPhV
        {
            get
            {
                return this._hPhV;
            }
            set
            {
                if ((this._hPhV != value))
                {
                    IHYWE old = this._hPhV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHPhVChanging(e);
                    this.OnPropertyChanging("HPhV", e);
                    this._hPhV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHPhV;
                    }
                    this.OnHPhVChanged(e);
                    this.OnPropertyChanged("HPhV", e);
                }
            }
        }
        
        /// <summary>
        /// The HPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHDEL HPPV
        {
            get
            {
                return this._hPPV;
            }
            set
            {
                if ((this._hPPV != value))
                {
                    IHDEL old = this._hPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHPPVChanging(e);
                    this.OnPropertyChanging("HPPV", e);
                    this._hPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHPPV;
                    }
                    this.OnHPPVChanged(e);
                    this.OnPropertyChanged("HPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The HW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHYWE HW
        {
            get
            {
                return this._hW;
            }
            set
            {
                if ((this._hW != value))
                {
                    IHYWE old = this._hW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHWChanging(e);
                    this.OnPropertyChanging("HW", e);
                    this._hW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHW;
                    }
                    this.OnHWChanged(e);
                    this.OnPropertyChanged("HW", e);
                }
            }
        }
        
        /// <summary>
        /// The HVAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHYWE HVAr
        {
            get
            {
                return this._hVAr;
            }
            set
            {
                if ((this._hVAr != value))
                {
                    IHYWE old = this._hVAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHVArChanging(e);
                    this.OnPropertyChanging("HVAr", e);
                    this._hVAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHVAr;
                    }
                    this.OnHVArChanged(e);
                    this.OnPropertyChanged("HVAr", e);
                }
            }
        }
        
        /// <summary>
        /// The HVA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IHYWE HVA
        {
            get
            {
                return this._hVA;
            }
            set
            {
                if ((this._hVA != value))
                {
                    IHYWE old = this._hVA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHVAChanging(e);
                    this.OnPropertyChanging("HVA", e);
                    this._hVA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHVA;
                    }
                    this.OnHVAChanged(e);
                    this.OnPropertyChanged("HVA", e);
                }
            }
        }
        
        /// <summary>
        /// The HRmsA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HRmsA
        {
            get
            {
                return this._hRmsA;
            }
            set
            {
                if ((this._hRmsA != value))
                {
                    IWYE old = this._hRmsA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHRmsAChanging(e);
                    this.OnPropertyChanging("HRmsA", e);
                    this._hRmsA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHRmsA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHRmsA;
                    }
                    this.OnHRmsAChanged(e);
                    this.OnPropertyChanged("HRmsA", e);
                }
            }
        }
        
        /// <summary>
        /// The HRmsPhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HRmsPhV
        {
            get
            {
                return this._hRmsPhV;
            }
            set
            {
                if ((this._hRmsPhV != value))
                {
                    IWYE old = this._hRmsPhV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHRmsPhVChanging(e);
                    this.OnPropertyChanging("HRmsPhV", e);
                    this._hRmsPhV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHRmsPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHRmsPhV;
                    }
                    this.OnHRmsPhVChanged(e);
                    this.OnPropertyChanged("HRmsPhV", e);
                }
            }
        }
        
        /// <summary>
        /// The HRmsPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL HRmsPPV
        {
            get
            {
                return this._hRmsPPV;
            }
            set
            {
                if ((this._hRmsPPV != value))
                {
                    IDEL old = this._hRmsPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHRmsPPVChanging(e);
                    this.OnPropertyChanging("HRmsPPV", e);
                    this._hRmsPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHRmsPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHRmsPPV;
                    }
                    this.OnHRmsPPVChanged(e);
                    this.OnPropertyChanged("HRmsPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The HTuW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HTuW
        {
            get
            {
                return this._hTuW;
            }
            set
            {
                if ((this._hTuW != value))
                {
                    IWYE old = this._hTuW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHTuWChanging(e);
                    this.OnPropertyChanging("HTuW", e);
                    this._hTuW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHTuW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHTuW;
                    }
                    this.OnHTuWChanged(e);
                    this.OnPropertyChanged("HTuW", e);
                }
            }
        }
        
        /// <summary>
        /// The HTsW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HTsW
        {
            get
            {
                return this._hTsW;
            }
            set
            {
                if ((this._hTsW != value))
                {
                    IWYE old = this._hTsW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHTsWChanging(e);
                    this.OnPropertyChanging("HTsW", e);
                    this._hTsW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHTsW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHTsW;
                    }
                    this.OnHTsWChanged(e);
                    this.OnPropertyChanged("HTsW", e);
                }
            }
        }
        
        /// <summary>
        /// The HATm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HATm
        {
            get
            {
                return this._hATm;
            }
            set
            {
                if ((this._hATm != value))
                {
                    IWYE old = this._hATm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHATmChanging(e);
                    this.OnPropertyChanging("HATm", e);
                    this._hATm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHATm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHATm;
                    }
                    this.OnHATmChanged(e);
                    this.OnPropertyChanged("HATm", e);
                }
            }
        }
        
        /// <summary>
        /// The HKf property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HKf
        {
            get
            {
                return this._hKf;
            }
            set
            {
                if ((this._hKf != value))
                {
                    IWYE old = this._hKf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHKfChanging(e);
                    this.OnPropertyChanging("HKf", e);
                    this._hKf = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHKf;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHKf;
                    }
                    this.OnHKfChanged(e);
                    this.OnPropertyChanged("HKf", e);
                }
            }
        }
        
        /// <summary>
        /// The HTdf property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HTdf
        {
            get
            {
                return this._hTdf;
            }
            set
            {
                if ((this._hTdf != value))
                {
                    IWYE old = this._hTdf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHTdfChanging(e);
                    this.OnPropertyChanging("HTdf", e);
                    this._hTdf = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHTdf;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHTdf;
                    }
                    this.OnHTdfChanged(e);
                    this.OnPropertyChanged("HTdf", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdA
        {
            get
            {
                return this._thdA;
            }
            set
            {
                if ((this._thdA != value))
                {
                    IWYE old = this._thdA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdAChanging(e);
                    this.OnPropertyChanging("ThdA", e);
                    this._thdA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdA;
                    }
                    this.OnThdAChanged(e);
                    this.OnPropertyChanged("ThdA", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdOddA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdOddA
        {
            get
            {
                return this._thdOddA;
            }
            set
            {
                if ((this._thdOddA != value))
                {
                    IWYE old = this._thdOddA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdOddAChanging(e);
                    this.OnPropertyChanging("ThdOddA", e);
                    this._thdOddA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdOddA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdOddA;
                    }
                    this.OnThdOddAChanged(e);
                    this.OnPropertyChanged("ThdOddA", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdEvnA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdEvnA
        {
            get
            {
                return this._thdEvnA;
            }
            set
            {
                if ((this._thdEvnA != value))
                {
                    IWYE old = this._thdEvnA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdEvnAChanging(e);
                    this.OnPropertyChanging("ThdEvnA", e);
                    this._thdEvnA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdEvnA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdEvnA;
                    }
                    this.OnThdEvnAChanged(e);
                    this.OnPropertyChanged("ThdEvnA", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdPhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdPhV
        {
            get
            {
                return this._thdPhV;
            }
            set
            {
                if ((this._thdPhV != value))
                {
                    IWYE old = this._thdPhV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdPhVChanging(e);
                    this.OnPropertyChanging("ThdPhV", e);
                    this._thdPhV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdPhV;
                    }
                    this.OnThdPhVChanged(e);
                    this.OnPropertyChanged("ThdPhV", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdOddPhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdOddPhV
        {
            get
            {
                return this._thdOddPhV;
            }
            set
            {
                if ((this._thdOddPhV != value))
                {
                    IWYE old = this._thdOddPhV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdOddPhVChanging(e);
                    this.OnPropertyChanging("ThdOddPhV", e);
                    this._thdOddPhV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdOddPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdOddPhV;
                    }
                    this.OnThdOddPhVChanged(e);
                    this.OnPropertyChanged("ThdOddPhV", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdEvnV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ThdEvnV
        {
            get
            {
                return this._thdEvnV;
            }
            set
            {
                if ((this._thdEvnV != value))
                {
                    IWYE old = this._thdEvnV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdEvnVChanging(e);
                    this.OnPropertyChanging("ThdEvnV", e);
                    this._thdEvnV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdEvnV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdEvnV;
                    }
                    this.OnThdEvnVChanged(e);
                    this.OnPropertyChanged("ThdEvnV", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL ThdPPV
        {
            get
            {
                return this._thdPPV;
            }
            set
            {
                if ((this._thdPPV != value))
                {
                    IDEL old = this._thdPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdPPVChanging(e);
                    this.OnPropertyChanging("ThdPPV", e);
                    this._thdPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdPPV;
                    }
                    this.OnThdPPVChanged(e);
                    this.OnPropertyChanged("ThdPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdOddPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL ThdOddPPV
        {
            get
            {
                return this._thdOddPPV;
            }
            set
            {
                if ((this._thdOddPPV != value))
                {
                    IDEL old = this._thdOddPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdOddPPVChanging(e);
                    this.OnPropertyChanging("ThdOddPPV", e);
                    this._thdOddPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdOddPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdOddPPV;
                    }
                    this.OnThdOddPPVChanged(e);
                    this.OnPropertyChanged("ThdOddPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdEvnPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL ThdEvnPPV
        {
            get
            {
                return this._thdEvnPPV;
            }
            set
            {
                if ((this._thdEvnPPV != value))
                {
                    IDEL old = this._thdEvnPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdEvnPPVChanging(e);
                    this.OnPropertyChanging("ThdEvnPPV", e);
                    this._thdEvnPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdEvnPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdEvnPPV;
                    }
                    this.OnThdEvnPPVChanged(e);
                    this.OnPropertyChanged("ThdEvnPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The HCfPhV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HCfPhV
        {
            get
            {
                return this._hCfPhV;
            }
            set
            {
                if ((this._hCfPhV != value))
                {
                    IWYE old = this._hCfPhV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHCfPhVChanging(e);
                    this.OnPropertyChanging("HCfPhV", e);
                    this._hCfPhV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHCfPhV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHCfPhV;
                    }
                    this.OnHCfPhVChanged(e);
                    this.OnPropertyChanged("HCfPhV", e);
                }
            }
        }
        
        /// <summary>
        /// The HCfPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL HCfPPV
        {
            get
            {
                return this._hCfPPV;
            }
            set
            {
                if ((this._hCfPPV != value))
                {
                    IDEL old = this._hCfPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHCfPPVChanging(e);
                    this.OnPropertyChanging("HCfPPV", e);
                    this._hCfPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHCfPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHCfPPV;
                    }
                    this.OnHCfPPVChanged(e);
                    this.OnPropertyChanged("HCfPPV", e);
                }
            }
        }
        
        /// <summary>
        /// The HCfA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HCfA
        {
            get
            {
                return this._hCfA;
            }
            set
            {
                if ((this._hCfA != value))
                {
                    IWYE old = this._hCfA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHCfAChanging(e);
                    this.OnPropertyChanging("HCfA", e);
                    this._hCfA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHCfA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHCfA;
                    }
                    this.OnHCfAChanged(e);
                    this.OnPropertyChanged("HCfA", e);
                }
            }
        }
        
        /// <summary>
        /// The HTif property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE HTif
        {
            get
            {
                return this._hTif;
            }
            set
            {
                if ((this._hTif != value))
                {
                    IWYE old = this._hTif;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHTifChanging(e);
                    this.OnPropertyChanging("HTif", e);
                    this._hTif = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHTif;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHTif;
                    }
                    this.OnHTifChanged(e);
                    this.OnPropertyChanged("HTif", e);
                }
            }
        }
        
        /// <summary>
        /// The HzSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HzSet
        {
            get
            {
                return this._hzSet;
            }
            set
            {
                if ((this._hzSet != value))
                {
                    IASG old = this._hzSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzSetChanging(e);
                    this.OnPropertyChanging("HzSet", e);
                    this._hzSet = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHzSet;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHzSet;
                    }
                    this.OnHzSetChanged(e);
                    this.OnPropertyChanged("HzSet", e);
                }
            }
        }
        
        /// <summary>
        /// The EvTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG EvTmms
        {
            get
            {
                return this._evTmms;
            }
            set
            {
                if ((this._evTmms != value))
                {
                    IASG old = this._evTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvTmmsChanging(e);
                    this.OnPropertyChanging("EvTmms", e);
                    this._evTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvTmms;
                    }
                    this.OnEvTmmsChanged(e);
                    this.OnPropertyChanged("EvTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The NumCyc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING NumCyc
        {
            get
            {
                return this._numCyc;
            }
            set
            {
                if ((this._numCyc != value))
                {
                    IING old = this._numCyc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumCycChanging(e);
                    this.OnPropertyChanging("NumCyc", e);
                    this._numCyc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNumCyc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNumCyc;
                    }
                    this.OnNumCycChanged(e);
                    this.OnPropertyChanged("NumCyc", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdAVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ThdAVal
        {
            get
            {
                return this._thdAVal;
            }
            set
            {
                if ((this._thdAVal != value))
                {
                    IASG old = this._thdAVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdAValChanging(e);
                    this.OnPropertyChanging("ThdAVal", e);
                    this._thdAVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdAVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdAVal;
                    }
                    this.OnThdAValChanged(e);
                    this.OnPropertyChanged("ThdAVal", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdVVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ThdVVal
        {
            get
            {
                return this._thdVVal;
            }
            set
            {
                if ((this._thdVVal != value))
                {
                    IASG old = this._thdVVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdVValChanging(e);
                    this.OnPropertyChanging("ThdVVal", e);
                    this._thdVVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdVVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdVVal;
                    }
                    this.OnThdVValChanged(e);
                    this.OnPropertyChanged("ThdVVal", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdATmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ThdATmms
        {
            get
            {
                return this._thdATmms;
            }
            set
            {
                if ((this._thdATmms != value))
                {
                    IING old = this._thdATmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdATmmsChanging(e);
                    this.OnPropertyChanging("ThdATmms", e);
                    this._thdATmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdATmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdATmms;
                    }
                    this.OnThdATmmsChanged(e);
                    this.OnPropertyChanged("ThdATmms", e);
                }
            }
        }
        
        /// <summary>
        /// The ThdVTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ThdVTmms
        {
            get
            {
                return this._thdVTmms;
            }
            set
            {
                if ((this._thdVTmms != value))
                {
                    IING old = this._thdVTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThdVTmmsChanging(e);
                    this.OnPropertyChanging("ThdVTmms", e);
                    this._thdVTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetThdVTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetThdVTmms;
                    }
                    this.OnThdVTmmsChanged(e);
                    this.OnPropertyChanged("ThdVTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The NomA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG NomA
        {
            get
            {
                return this._nomA;
            }
            set
            {
                if ((this._nomA != value))
                {
                    IASG old = this._nomA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNomAChanging(e);
                    this.OnPropertyChanging("NomA", e);
                    this._nomA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNomA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNomA;
                    }
                    this.OnNomAChanged(e);
                    this.OnPropertyChanged("NomA", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MHAIReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MHAI")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzChanged;
        
        /// <summary>
        /// Gets fired before the HA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HAChanging;
        
        /// <summary>
        /// Gets fired when the HA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HAChanged;
        
        /// <summary>
        /// Gets fired before the HPhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPhVChanging;
        
        /// <summary>
        /// Gets fired when the HPhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPhVChanged;
        
        /// <summary>
        /// Gets fired before the HPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPPVChanging;
        
        /// <summary>
        /// Gets fired when the HPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HPPVChanged;
        
        /// <summary>
        /// Gets fired before the HW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HWChanging;
        
        /// <summary>
        /// Gets fired when the HW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HWChanged;
        
        /// <summary>
        /// Gets fired before the HVAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVArChanging;
        
        /// <summary>
        /// Gets fired when the HVAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVArChanged;
        
        /// <summary>
        /// Gets fired before the HVA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVAChanging;
        
        /// <summary>
        /// Gets fired when the HVA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVAChanged;
        
        /// <summary>
        /// Gets fired before the HRmsA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsAChanging;
        
        /// <summary>
        /// Gets fired when the HRmsA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsAChanged;
        
        /// <summary>
        /// Gets fired before the HRmsPhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsPhVChanging;
        
        /// <summary>
        /// Gets fired when the HRmsPhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsPhVChanged;
        
        /// <summary>
        /// Gets fired before the HRmsPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsPPVChanging;
        
        /// <summary>
        /// Gets fired when the HRmsPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HRmsPPVChanged;
        
        /// <summary>
        /// Gets fired before the HTuW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTuWChanging;
        
        /// <summary>
        /// Gets fired when the HTuW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTuWChanged;
        
        /// <summary>
        /// Gets fired before the HTsW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTsWChanging;
        
        /// <summary>
        /// Gets fired when the HTsW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTsWChanged;
        
        /// <summary>
        /// Gets fired before the HATm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HATmChanging;
        
        /// <summary>
        /// Gets fired when the HATm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HATmChanged;
        
        /// <summary>
        /// Gets fired before the HKf property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HKfChanging;
        
        /// <summary>
        /// Gets fired when the HKf property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HKfChanged;
        
        /// <summary>
        /// Gets fired before the HTdf property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTdfChanging;
        
        /// <summary>
        /// Gets fired when the HTdf property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTdfChanged;
        
        /// <summary>
        /// Gets fired before the ThdA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAChanging;
        
        /// <summary>
        /// Gets fired when the ThdA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddAChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddAChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnAChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnAChanged;
        
        /// <summary>
        /// Gets fired before the ThdPhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdPhVChanging;
        
        /// <summary>
        /// Gets fired when the ThdPhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdPhVChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddPhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddPhVChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddPhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddPhVChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnVChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnVChanged;
        
        /// <summary>
        /// Gets fired before the ThdPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdPPVChanging;
        
        /// <summary>
        /// Gets fired when the ThdPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdPPVChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddPPVChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdOddPPVChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnPPVChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdEvnPPVChanged;
        
        /// <summary>
        /// Gets fired before the HCfPhV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfPhVChanging;
        
        /// <summary>
        /// Gets fired when the HCfPhV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfPhVChanged;
        
        /// <summary>
        /// Gets fired before the HCfPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfPPVChanging;
        
        /// <summary>
        /// Gets fired when the HCfPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfPPVChanged;
        
        /// <summary>
        /// Gets fired before the HCfA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfAChanging;
        
        /// <summary>
        /// Gets fired when the HCfA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HCfAChanged;
        
        /// <summary>
        /// Gets fired before the HTif property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTifChanging;
        
        /// <summary>
        /// Gets fired when the HTif property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HTifChanged;
        
        /// <summary>
        /// Gets fired before the HzSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzSetChanging;
        
        /// <summary>
        /// Gets fired when the HzSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzSetChanged;
        
        /// <summary>
        /// Gets fired before the EvTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanging;
        
        /// <summary>
        /// Gets fired when the EvTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NumCyc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumCycChanging;
        
        /// <summary>
        /// Gets fired when the NumCyc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumCycChanged;
        
        /// <summary>
        /// Gets fired before the ThdAVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAValChanging;
        
        /// <summary>
        /// Gets fired when the ThdAVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdAValChanged;
        
        /// <summary>
        /// Gets fired before the ThdVVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVValChanging;
        
        /// <summary>
        /// Gets fired when the ThdVVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVValChanged;
        
        /// <summary>
        /// Gets fired before the ThdATmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdATmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanged;
        
        /// <summary>
        /// Gets fired before the ThdVTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdVTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NomA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomAChanging;
        
        /// <summary>
        /// Gets fired when the NomA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomAChanged;
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        /// <summary>
        /// Raises the HzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Hz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHz(object sender, System.EventArgs eventArgs)
        {
            this.Hz = null;
        }
        
        /// <summary>
        /// Raises the HAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHA(object sender, System.EventArgs eventArgs)
        {
            this.HA = null;
        }
        
        /// <summary>
        /// Raises the HPhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HPhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HPhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHPhV(object sender, System.EventArgs eventArgs)
        {
            this.HPhV = null;
        }
        
        /// <summary>
        /// Raises the HPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHPPV(object sender, System.EventArgs eventArgs)
        {
            this.HPPV = null;
        }
        
        /// <summary>
        /// Raises the HWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHW(object sender, System.EventArgs eventArgs)
        {
            this.HW = null;
        }
        
        /// <summary>
        /// Raises the HVArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HVArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HVAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHVAr(object sender, System.EventArgs eventArgs)
        {
            this.HVAr = null;
        }
        
        /// <summary>
        /// Raises the HVAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HVAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HVA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHVA(object sender, System.EventArgs eventArgs)
        {
            this.HVA = null;
        }
        
        /// <summary>
        /// Raises the HRmsAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HRmsAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HRmsA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHRmsA(object sender, System.EventArgs eventArgs)
        {
            this.HRmsA = null;
        }
        
        /// <summary>
        /// Raises the HRmsPhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsPhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HRmsPhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsPhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HRmsPhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHRmsPhV(object sender, System.EventArgs eventArgs)
        {
            this.HRmsPhV = null;
        }
        
        /// <summary>
        /// Raises the HRmsPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HRmsPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHRmsPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HRmsPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HRmsPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHRmsPPV(object sender, System.EventArgs eventArgs)
        {
            this.HRmsPPV = null;
        }
        
        /// <summary>
        /// Raises the HTuWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTuWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTuWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HTuWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTuWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTuWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HTuW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHTuW(object sender, System.EventArgs eventArgs)
        {
            this.HTuW = null;
        }
        
        /// <summary>
        /// Raises the HTsWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTsWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTsWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HTsWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTsWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTsWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HTsW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHTsW(object sender, System.EventArgs eventArgs)
        {
            this.HTsW = null;
        }
        
        /// <summary>
        /// Raises the HATmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHATmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HATmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HATmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHATmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HATmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HATm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHATm(object sender, System.EventArgs eventArgs)
        {
            this.HATm = null;
        }
        
        /// <summary>
        /// Raises the HKfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHKfChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HKfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HKfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHKfChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HKfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HKf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHKf(object sender, System.EventArgs eventArgs)
        {
            this.HKf = null;
        }
        
        /// <summary>
        /// Raises the HTdfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTdfChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTdfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HTdfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTdfChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTdfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HTdf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHTdf(object sender, System.EventArgs eventArgs)
        {
            this.HTdf = null;
        }
        
        /// <summary>
        /// Raises the ThdAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdA(object sender, System.EventArgs eventArgs)
        {
            this.ThdA = null;
        }
        
        /// <summary>
        /// Raises the ThdOddAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdOddAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdOddA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdOddA(object sender, System.EventArgs eventArgs)
        {
            this.ThdOddA = null;
        }
        
        /// <summary>
        /// Raises the ThdEvnAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdEvnAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdEvnA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdEvnA(object sender, System.EventArgs eventArgs)
        {
            this.ThdEvnA = null;
        }
        
        /// <summary>
        /// Raises the ThdPhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdPhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdPhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdPhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdPhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdPhV(object sender, System.EventArgs eventArgs)
        {
            this.ThdPhV = null;
        }
        
        /// <summary>
        /// Raises the ThdOddPhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddPhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdOddPhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddPhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdOddPhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdOddPhV(object sender, System.EventArgs eventArgs)
        {
            this.ThdOddPhV = null;
        }
        
        /// <summary>
        /// Raises the ThdEvnVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdEvnVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdEvnV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdEvnV(object sender, System.EventArgs eventArgs)
        {
            this.ThdEvnV = null;
        }
        
        /// <summary>
        /// Raises the ThdPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdPPV(object sender, System.EventArgs eventArgs)
        {
            this.ThdPPV = null;
        }
        
        /// <summary>
        /// Raises the ThdOddPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdOddPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdOddPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdOddPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdOddPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdOddPPV(object sender, System.EventArgs eventArgs)
        {
            this.ThdOddPPV = null;
        }
        
        /// <summary>
        /// Raises the ThdEvnPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdEvnPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdEvnPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdEvnPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdEvnPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdEvnPPV(object sender, System.EventArgs eventArgs)
        {
            this.ThdEvnPPV = null;
        }
        
        /// <summary>
        /// Raises the HCfPhVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfPhVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfPhVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HCfPhVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfPhVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfPhVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HCfPhV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHCfPhV(object sender, System.EventArgs eventArgs)
        {
            this.HCfPhV = null;
        }
        
        /// <summary>
        /// Raises the HCfPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HCfPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HCfPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHCfPPV(object sender, System.EventArgs eventArgs)
        {
            this.HCfPPV = null;
        }
        
        /// <summary>
        /// Raises the HCfAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HCfAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHCfAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HCfAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HCfA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHCfA(object sender, System.EventArgs eventArgs)
        {
            this.HCfA = null;
        }
        
        /// <summary>
        /// Raises the HTifChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTifChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTifChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HTifChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHTifChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HTifChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HTif property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHTif(object sender, System.EventArgs eventArgs)
        {
            this.HTif = null;
        }
        
        /// <summary>
        /// Raises the HzSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HzSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHzSet(object sender, System.EventArgs eventArgs)
        {
            this.HzSet = null;
        }
        
        /// <summary>
        /// Raises the EvTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EvTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EvTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvTmms(object sender, System.EventArgs eventArgs)
        {
            this.EvTmms = null;
        }
        
        /// <summary>
        /// Raises the NumCycChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumCycChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumCycChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumCycChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumCycChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumCycChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NumCyc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNumCyc(object sender, System.EventArgs eventArgs)
        {
            this.NumCyc = null;
        }
        
        /// <summary>
        /// Raises the ThdAValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdAValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdAValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdAValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdAVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdAVal(object sender, System.EventArgs eventArgs)
        {
            this.ThdAVal = null;
        }
        
        /// <summary>
        /// Raises the ThdVValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdVValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdVVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdVVal(object sender, System.EventArgs eventArgs)
        {
            this.ThdVVal = null;
        }
        
        /// <summary>
        /// Raises the ThdATmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdATmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdATmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdATmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdATmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdATmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdATmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdATmms(object sender, System.EventArgs eventArgs)
        {
            this.ThdATmms = null;
        }
        
        /// <summary>
        /// Raises the ThdVTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThdVTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThdVTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThdVTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThdVTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThdVTmms(object sender, System.EventArgs eventArgs)
        {
            this.ThdVTmms = null;
        }
        
        /// <summary>
        /// Raises the NomAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NomAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NomA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNomA(object sender, System.EventArgs eventArgs)
        {
            this.NomA = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "HZ"))
            {
                this.Hz = ((IMV)(value));
                return;
            }
            if ((feature == "HA"))
            {
                this.HA = ((IHYWE)(value));
                return;
            }
            if ((feature == "HPHV"))
            {
                this.HPhV = ((IHYWE)(value));
                return;
            }
            if ((feature == "HPPV"))
            {
                this.HPPV = ((IHDEL)(value));
                return;
            }
            if ((feature == "HW"))
            {
                this.HW = ((IHYWE)(value));
                return;
            }
            if ((feature == "HVAR"))
            {
                this.HVAr = ((IHYWE)(value));
                return;
            }
            if ((feature == "HVA"))
            {
                this.HVA = ((IHYWE)(value));
                return;
            }
            if ((feature == "HRMSA"))
            {
                this.HRmsA = ((IWYE)(value));
                return;
            }
            if ((feature == "HRMSPHV"))
            {
                this.HRmsPhV = ((IWYE)(value));
                return;
            }
            if ((feature == "HRMSPPV"))
            {
                this.HRmsPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "HTUW"))
            {
                this.HTuW = ((IWYE)(value));
                return;
            }
            if ((feature == "HTSW"))
            {
                this.HTsW = ((IWYE)(value));
                return;
            }
            if ((feature == "HATM"))
            {
                this.HATm = ((IWYE)(value));
                return;
            }
            if ((feature == "HKF"))
            {
                this.HKf = ((IWYE)(value));
                return;
            }
            if ((feature == "HTDF"))
            {
                this.HTdf = ((IWYE)(value));
                return;
            }
            if ((feature == "THDA"))
            {
                this.ThdA = ((IWYE)(value));
                return;
            }
            if ((feature == "THDODDA"))
            {
                this.ThdOddA = ((IWYE)(value));
                return;
            }
            if ((feature == "THDEVNA"))
            {
                this.ThdEvnA = ((IWYE)(value));
                return;
            }
            if ((feature == "THDPHV"))
            {
                this.ThdPhV = ((IWYE)(value));
                return;
            }
            if ((feature == "THDODDPHV"))
            {
                this.ThdOddPhV = ((IWYE)(value));
                return;
            }
            if ((feature == "THDEVNV"))
            {
                this.ThdEvnV = ((IWYE)(value));
                return;
            }
            if ((feature == "THDPPV"))
            {
                this.ThdPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "THDODDPPV"))
            {
                this.ThdOddPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "THDEVNPPV"))
            {
                this.ThdEvnPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "HCFPHV"))
            {
                this.HCfPhV = ((IWYE)(value));
                return;
            }
            if ((feature == "HCFPPV"))
            {
                this.HCfPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "HCFA"))
            {
                this.HCfA = ((IWYE)(value));
                return;
            }
            if ((feature == "HTIF"))
            {
                this.HTif = ((IWYE)(value));
                return;
            }
            if ((feature == "HZSET"))
            {
                this.HzSet = ((IASG)(value));
                return;
            }
            if ((feature == "EVTMMS"))
            {
                this.EvTmms = ((IASG)(value));
                return;
            }
            if ((feature == "NUMCYC"))
            {
                this.NumCyc = ((IING)(value));
                return;
            }
            if ((feature == "THDAVAL"))
            {
                this.ThdAVal = ((IASG)(value));
                return;
            }
            if ((feature == "THDVVAL"))
            {
                this.ThdVVal = ((IASG)(value));
                return;
            }
            if ((feature == "THDATMMS"))
            {
                this.ThdATmms = ((IING)(value));
                return;
            }
            if ((feature == "THDVTMMS"))
            {
                this.ThdVTmms = ((IING)(value));
                return;
            }
            if ((feature == "NOMA"))
            {
                this.NomA = ((IASG)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((attribute == "HA"))
            {
                return new HAProxy(this);
            }
            if ((attribute == "HPhV"))
            {
                return new HPhVProxy(this);
            }
            if ((attribute == "HPPV"))
            {
                return new HPPVProxy(this);
            }
            if ((attribute == "HW"))
            {
                return new HWProxy(this);
            }
            if ((attribute == "HVAr"))
            {
                return new HVArProxy(this);
            }
            if ((attribute == "HVA"))
            {
                return new HVAProxy(this);
            }
            if ((attribute == "HRmsA"))
            {
                return new HRmsAProxy(this);
            }
            if ((attribute == "HRmsPhV"))
            {
                return new HRmsPhVProxy(this);
            }
            if ((attribute == "HRmsPPV"))
            {
                return new HRmsPPVProxy(this);
            }
            if ((attribute == "HTuW"))
            {
                return new HTuWProxy(this);
            }
            if ((attribute == "HTsW"))
            {
                return new HTsWProxy(this);
            }
            if ((attribute == "HATm"))
            {
                return new HATmProxy(this);
            }
            if ((attribute == "HKf"))
            {
                return new HKfProxy(this);
            }
            if ((attribute == "HTdf"))
            {
                return new HTdfProxy(this);
            }
            if ((attribute == "ThdA"))
            {
                return new ThdAProxy(this);
            }
            if ((attribute == "ThdOddA"))
            {
                return new ThdOddAProxy(this);
            }
            if ((attribute == "ThdEvnA"))
            {
                return new ThdEvnAProxy(this);
            }
            if ((attribute == "ThdPhV"))
            {
                return new ThdPhVProxy(this);
            }
            if ((attribute == "ThdOddPhV"))
            {
                return new ThdOddPhVProxy(this);
            }
            if ((attribute == "ThdEvnV"))
            {
                return new ThdEvnVProxy(this);
            }
            if ((attribute == "ThdPPV"))
            {
                return new ThdPPVProxy(this);
            }
            if ((attribute == "ThdOddPPV"))
            {
                return new ThdOddPPVProxy(this);
            }
            if ((attribute == "ThdEvnPPV"))
            {
                return new ThdEvnPPVProxy(this);
            }
            if ((attribute == "HCfPhV"))
            {
                return new HCfPhVProxy(this);
            }
            if ((attribute == "HCfPPV"))
            {
                return new HCfPPVProxy(this);
            }
            if ((attribute == "HCfA"))
            {
                return new HCfAProxy(this);
            }
            if ((attribute == "HTif"))
            {
                return new HTifProxy(this);
            }
            if ((attribute == "HzSet"))
            {
                return new HzSetProxy(this);
            }
            if ((attribute == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            if ((attribute == "NumCyc"))
            {
                return new NumCycProxy(this);
            }
            if ((attribute == "ThdAVal"))
            {
                return new ThdAValProxy(this);
            }
            if ((attribute == "ThdVVal"))
            {
                return new ThdVValProxy(this);
            }
            if ((attribute == "ThdATmms"))
            {
                return new ThdATmmsProxy(this);
            }
            if ((attribute == "ThdVTmms"))
            {
                return new ThdVTmmsProxy(this);
            }
            if ((attribute == "NomA"))
            {
                return new NomAProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "Hz"))
            {
                return new HzProxy(this);
            }
            if ((reference == "HA"))
            {
                return new HAProxy(this);
            }
            if ((reference == "HPhV"))
            {
                return new HPhVProxy(this);
            }
            if ((reference == "HPPV"))
            {
                return new HPPVProxy(this);
            }
            if ((reference == "HW"))
            {
                return new HWProxy(this);
            }
            if ((reference == "HVAr"))
            {
                return new HVArProxy(this);
            }
            if ((reference == "HVA"))
            {
                return new HVAProxy(this);
            }
            if ((reference == "HRmsA"))
            {
                return new HRmsAProxy(this);
            }
            if ((reference == "HRmsPhV"))
            {
                return new HRmsPhVProxy(this);
            }
            if ((reference == "HRmsPPV"))
            {
                return new HRmsPPVProxy(this);
            }
            if ((reference == "HTuW"))
            {
                return new HTuWProxy(this);
            }
            if ((reference == "HTsW"))
            {
                return new HTsWProxy(this);
            }
            if ((reference == "HATm"))
            {
                return new HATmProxy(this);
            }
            if ((reference == "HKf"))
            {
                return new HKfProxy(this);
            }
            if ((reference == "HTdf"))
            {
                return new HTdfProxy(this);
            }
            if ((reference == "ThdA"))
            {
                return new ThdAProxy(this);
            }
            if ((reference == "ThdOddA"))
            {
                return new ThdOddAProxy(this);
            }
            if ((reference == "ThdEvnA"))
            {
                return new ThdEvnAProxy(this);
            }
            if ((reference == "ThdPhV"))
            {
                return new ThdPhVProxy(this);
            }
            if ((reference == "ThdOddPhV"))
            {
                return new ThdOddPhVProxy(this);
            }
            if ((reference == "ThdEvnV"))
            {
                return new ThdEvnVProxy(this);
            }
            if ((reference == "ThdPPV"))
            {
                return new ThdPPVProxy(this);
            }
            if ((reference == "ThdOddPPV"))
            {
                return new ThdOddPPVProxy(this);
            }
            if ((reference == "ThdEvnPPV"))
            {
                return new ThdEvnPPVProxy(this);
            }
            if ((reference == "HCfPhV"))
            {
                return new HCfPhVProxy(this);
            }
            if ((reference == "HCfPPV"))
            {
                return new HCfPPVProxy(this);
            }
            if ((reference == "HCfA"))
            {
                return new HCfAProxy(this);
            }
            if ((reference == "HTif"))
            {
                return new HTifProxy(this);
            }
            if ((reference == "HzSet"))
            {
                return new HzSetProxy(this);
            }
            if ((reference == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            if ((reference == "NumCyc"))
            {
                return new NumCycProxy(this);
            }
            if ((reference == "ThdAVal"))
            {
                return new ThdAValProxy(this);
            }
            if ((reference == "ThdVVal"))
            {
                return new ThdVValProxy(this);
            }
            if ((reference == "ThdATmms"))
            {
                return new ThdATmmsProxy(this);
            }
            if ((reference == "ThdVTmms"))
            {
                return new ThdVTmmsProxy(this);
            }
            if ((reference == "NomA"))
            {
                return new NomAProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MHAI")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MHAI class
        /// </summary>
        public class MHAIReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MHAI _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MHAIReferencedElementsCollection(MHAI parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Hz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HPhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HVAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HVA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HRmsA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HRmsPhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HRmsPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HTuW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HTsW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HATm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HKf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HTdf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdOddA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdEvnA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdPhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdOddPhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdEvnV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdOddPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdEvnPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HCfPhV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HCfPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HCfA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HTif != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HzSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EvTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NumCyc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdAVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdVVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdATmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThdVTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NomA != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.HzChanged += this.PropagateValueChanges;
                this._parent.HAChanged += this.PropagateValueChanges;
                this._parent.HPhVChanged += this.PropagateValueChanges;
                this._parent.HPPVChanged += this.PropagateValueChanges;
                this._parent.HWChanged += this.PropagateValueChanges;
                this._parent.HVArChanged += this.PropagateValueChanges;
                this._parent.HVAChanged += this.PropagateValueChanges;
                this._parent.HRmsAChanged += this.PropagateValueChanges;
                this._parent.HRmsPhVChanged += this.PropagateValueChanges;
                this._parent.HRmsPPVChanged += this.PropagateValueChanges;
                this._parent.HTuWChanged += this.PropagateValueChanges;
                this._parent.HTsWChanged += this.PropagateValueChanges;
                this._parent.HATmChanged += this.PropagateValueChanges;
                this._parent.HKfChanged += this.PropagateValueChanges;
                this._parent.HTdfChanged += this.PropagateValueChanges;
                this._parent.ThdAChanged += this.PropagateValueChanges;
                this._parent.ThdOddAChanged += this.PropagateValueChanges;
                this._parent.ThdEvnAChanged += this.PropagateValueChanges;
                this._parent.ThdPhVChanged += this.PropagateValueChanges;
                this._parent.ThdOddPhVChanged += this.PropagateValueChanges;
                this._parent.ThdEvnVChanged += this.PropagateValueChanges;
                this._parent.ThdPPVChanged += this.PropagateValueChanges;
                this._parent.ThdOddPPVChanged += this.PropagateValueChanges;
                this._parent.ThdEvnPPVChanged += this.PropagateValueChanges;
                this._parent.HCfPhVChanged += this.PropagateValueChanges;
                this._parent.HCfPPVChanged += this.PropagateValueChanges;
                this._parent.HCfAChanged += this.PropagateValueChanges;
                this._parent.HTifChanged += this.PropagateValueChanges;
                this._parent.HzSetChanged += this.PropagateValueChanges;
                this._parent.EvTmmsChanged += this.PropagateValueChanges;
                this._parent.NumCycChanged += this.PropagateValueChanges;
                this._parent.ThdAValChanged += this.PropagateValueChanges;
                this._parent.ThdVValChanged += this.PropagateValueChanges;
                this._parent.ThdATmmsChanged += this.PropagateValueChanges;
                this._parent.ThdVTmmsChanged += this.PropagateValueChanges;
                this._parent.NomAChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.HzChanged -= this.PropagateValueChanges;
                this._parent.HAChanged -= this.PropagateValueChanges;
                this._parent.HPhVChanged -= this.PropagateValueChanges;
                this._parent.HPPVChanged -= this.PropagateValueChanges;
                this._parent.HWChanged -= this.PropagateValueChanges;
                this._parent.HVArChanged -= this.PropagateValueChanges;
                this._parent.HVAChanged -= this.PropagateValueChanges;
                this._parent.HRmsAChanged -= this.PropagateValueChanges;
                this._parent.HRmsPhVChanged -= this.PropagateValueChanges;
                this._parent.HRmsPPVChanged -= this.PropagateValueChanges;
                this._parent.HTuWChanged -= this.PropagateValueChanges;
                this._parent.HTsWChanged -= this.PropagateValueChanges;
                this._parent.HATmChanged -= this.PropagateValueChanges;
                this._parent.HKfChanged -= this.PropagateValueChanges;
                this._parent.HTdfChanged -= this.PropagateValueChanges;
                this._parent.ThdAChanged -= this.PropagateValueChanges;
                this._parent.ThdOddAChanged -= this.PropagateValueChanges;
                this._parent.ThdEvnAChanged -= this.PropagateValueChanges;
                this._parent.ThdPhVChanged -= this.PropagateValueChanges;
                this._parent.ThdOddPhVChanged -= this.PropagateValueChanges;
                this._parent.ThdEvnVChanged -= this.PropagateValueChanges;
                this._parent.ThdPPVChanged -= this.PropagateValueChanges;
                this._parent.ThdOddPPVChanged -= this.PropagateValueChanges;
                this._parent.ThdEvnPPVChanged -= this.PropagateValueChanges;
                this._parent.HCfPhVChanged -= this.PropagateValueChanges;
                this._parent.HCfPPVChanged -= this.PropagateValueChanges;
                this._parent.HCfAChanged -= this.PropagateValueChanges;
                this._parent.HTifChanged -= this.PropagateValueChanges;
                this._parent.HzSetChanged -= this.PropagateValueChanges;
                this._parent.EvTmmsChanged -= this.PropagateValueChanges;
                this._parent.NumCycChanged -= this.PropagateValueChanges;
                this._parent.ThdAValChanged -= this.PropagateValueChanges;
                this._parent.ThdVValChanged -= this.PropagateValueChanges;
                this._parent.ThdATmmsChanged -= this.PropagateValueChanges;
                this._parent.ThdVTmmsChanged -= this.PropagateValueChanges;
                this._parent.NomAChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.Hz == null))
                {
                    IMV hzCasted = item.As<IMV>();
                    if ((hzCasted != null))
                    {
                        this._parent.Hz = hzCasted;
                        return;
                    }
                }
                if ((this._parent.HA == null))
                {
                    IHYWE hACasted = item.As<IHYWE>();
                    if ((hACasted != null))
                    {
                        this._parent.HA = hACasted;
                        return;
                    }
                }
                if ((this._parent.HPhV == null))
                {
                    IHYWE hPhVCasted = item.As<IHYWE>();
                    if ((hPhVCasted != null))
                    {
                        this._parent.HPhV = hPhVCasted;
                        return;
                    }
                }
                if ((this._parent.HPPV == null))
                {
                    IHDEL hPPVCasted = item.As<IHDEL>();
                    if ((hPPVCasted != null))
                    {
                        this._parent.HPPV = hPPVCasted;
                        return;
                    }
                }
                if ((this._parent.HW == null))
                {
                    IHYWE hWCasted = item.As<IHYWE>();
                    if ((hWCasted != null))
                    {
                        this._parent.HW = hWCasted;
                        return;
                    }
                }
                if ((this._parent.HVAr == null))
                {
                    IHYWE hVArCasted = item.As<IHYWE>();
                    if ((hVArCasted != null))
                    {
                        this._parent.HVAr = hVArCasted;
                        return;
                    }
                }
                if ((this._parent.HVA == null))
                {
                    IHYWE hVACasted = item.As<IHYWE>();
                    if ((hVACasted != null))
                    {
                        this._parent.HVA = hVACasted;
                        return;
                    }
                }
                if ((this._parent.HRmsA == null))
                {
                    IWYE hRmsACasted = item.As<IWYE>();
                    if ((hRmsACasted != null))
                    {
                        this._parent.HRmsA = hRmsACasted;
                        return;
                    }
                }
                if ((this._parent.HRmsPhV == null))
                {
                    IWYE hRmsPhVCasted = item.As<IWYE>();
                    if ((hRmsPhVCasted != null))
                    {
                        this._parent.HRmsPhV = hRmsPhVCasted;
                        return;
                    }
                }
                if ((this._parent.HRmsPPV == null))
                {
                    IDEL hRmsPPVCasted = item.As<IDEL>();
                    if ((hRmsPPVCasted != null))
                    {
                        this._parent.HRmsPPV = hRmsPPVCasted;
                        return;
                    }
                }
                if ((this._parent.HTuW == null))
                {
                    IWYE hTuWCasted = item.As<IWYE>();
                    if ((hTuWCasted != null))
                    {
                        this._parent.HTuW = hTuWCasted;
                        return;
                    }
                }
                if ((this._parent.HTsW == null))
                {
                    IWYE hTsWCasted = item.As<IWYE>();
                    if ((hTsWCasted != null))
                    {
                        this._parent.HTsW = hTsWCasted;
                        return;
                    }
                }
                if ((this._parent.HATm == null))
                {
                    IWYE hATmCasted = item.As<IWYE>();
                    if ((hATmCasted != null))
                    {
                        this._parent.HATm = hATmCasted;
                        return;
                    }
                }
                if ((this._parent.HKf == null))
                {
                    IWYE hKfCasted = item.As<IWYE>();
                    if ((hKfCasted != null))
                    {
                        this._parent.HKf = hKfCasted;
                        return;
                    }
                }
                if ((this._parent.HTdf == null))
                {
                    IWYE hTdfCasted = item.As<IWYE>();
                    if ((hTdfCasted != null))
                    {
                        this._parent.HTdf = hTdfCasted;
                        return;
                    }
                }
                if ((this._parent.ThdA == null))
                {
                    IWYE thdACasted = item.As<IWYE>();
                    if ((thdACasted != null))
                    {
                        this._parent.ThdA = thdACasted;
                        return;
                    }
                }
                if ((this._parent.ThdOddA == null))
                {
                    IWYE thdOddACasted = item.As<IWYE>();
                    if ((thdOddACasted != null))
                    {
                        this._parent.ThdOddA = thdOddACasted;
                        return;
                    }
                }
                if ((this._parent.ThdEvnA == null))
                {
                    IWYE thdEvnACasted = item.As<IWYE>();
                    if ((thdEvnACasted != null))
                    {
                        this._parent.ThdEvnA = thdEvnACasted;
                        return;
                    }
                }
                if ((this._parent.ThdPhV == null))
                {
                    IWYE thdPhVCasted = item.As<IWYE>();
                    if ((thdPhVCasted != null))
                    {
                        this._parent.ThdPhV = thdPhVCasted;
                        return;
                    }
                }
                if ((this._parent.ThdOddPhV == null))
                {
                    IWYE thdOddPhVCasted = item.As<IWYE>();
                    if ((thdOddPhVCasted != null))
                    {
                        this._parent.ThdOddPhV = thdOddPhVCasted;
                        return;
                    }
                }
                if ((this._parent.ThdEvnV == null))
                {
                    IWYE thdEvnVCasted = item.As<IWYE>();
                    if ((thdEvnVCasted != null))
                    {
                        this._parent.ThdEvnV = thdEvnVCasted;
                        return;
                    }
                }
                if ((this._parent.ThdPPV == null))
                {
                    IDEL thdPPVCasted = item.As<IDEL>();
                    if ((thdPPVCasted != null))
                    {
                        this._parent.ThdPPV = thdPPVCasted;
                        return;
                    }
                }
                if ((this._parent.ThdOddPPV == null))
                {
                    IDEL thdOddPPVCasted = item.As<IDEL>();
                    if ((thdOddPPVCasted != null))
                    {
                        this._parent.ThdOddPPV = thdOddPPVCasted;
                        return;
                    }
                }
                if ((this._parent.ThdEvnPPV == null))
                {
                    IDEL thdEvnPPVCasted = item.As<IDEL>();
                    if ((thdEvnPPVCasted != null))
                    {
                        this._parent.ThdEvnPPV = thdEvnPPVCasted;
                        return;
                    }
                }
                if ((this._parent.HCfPhV == null))
                {
                    IWYE hCfPhVCasted = item.As<IWYE>();
                    if ((hCfPhVCasted != null))
                    {
                        this._parent.HCfPhV = hCfPhVCasted;
                        return;
                    }
                }
                if ((this._parent.HCfPPV == null))
                {
                    IDEL hCfPPVCasted = item.As<IDEL>();
                    if ((hCfPPVCasted != null))
                    {
                        this._parent.HCfPPV = hCfPPVCasted;
                        return;
                    }
                }
                if ((this._parent.HCfA == null))
                {
                    IWYE hCfACasted = item.As<IWYE>();
                    if ((hCfACasted != null))
                    {
                        this._parent.HCfA = hCfACasted;
                        return;
                    }
                }
                if ((this._parent.HTif == null))
                {
                    IWYE hTifCasted = item.As<IWYE>();
                    if ((hTifCasted != null))
                    {
                        this._parent.HTif = hTifCasted;
                        return;
                    }
                }
                if ((this._parent.HzSet == null))
                {
                    IASG hzSetCasted = item.As<IASG>();
                    if ((hzSetCasted != null))
                    {
                        this._parent.HzSet = hzSetCasted;
                        return;
                    }
                }
                if ((this._parent.EvTmms == null))
                {
                    IASG evTmmsCasted = item.As<IASG>();
                    if ((evTmmsCasted != null))
                    {
                        this._parent.EvTmms = evTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.NumCyc == null))
                {
                    IING numCycCasted = item.As<IING>();
                    if ((numCycCasted != null))
                    {
                        this._parent.NumCyc = numCycCasted;
                        return;
                    }
                }
                if ((this._parent.ThdAVal == null))
                {
                    IASG thdAValCasted = item.As<IASG>();
                    if ((thdAValCasted != null))
                    {
                        this._parent.ThdAVal = thdAValCasted;
                        return;
                    }
                }
                if ((this._parent.ThdVVal == null))
                {
                    IASG thdVValCasted = item.As<IASG>();
                    if ((thdVValCasted != null))
                    {
                        this._parent.ThdVVal = thdVValCasted;
                        return;
                    }
                }
                if ((this._parent.ThdATmms == null))
                {
                    IING thdATmmsCasted = item.As<IING>();
                    if ((thdATmmsCasted != null))
                    {
                        this._parent.ThdATmms = thdATmmsCasted;
                        return;
                    }
                }
                if ((this._parent.ThdVTmms == null))
                {
                    IING thdVTmmsCasted = item.As<IING>();
                    if ((thdVTmmsCasted != null))
                    {
                        this._parent.ThdVTmms = thdVTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.NomA == null))
                {
                    IASG nomACasted = item.As<IASG>();
                    if ((nomACasted != null))
                    {
                        this._parent.NomA = nomACasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.Hz = null;
                this._parent.HA = null;
                this._parent.HPhV = null;
                this._parent.HPPV = null;
                this._parent.HW = null;
                this._parent.HVAr = null;
                this._parent.HVA = null;
                this._parent.HRmsA = null;
                this._parent.HRmsPhV = null;
                this._parent.HRmsPPV = null;
                this._parent.HTuW = null;
                this._parent.HTsW = null;
                this._parent.HATm = null;
                this._parent.HKf = null;
                this._parent.HTdf = null;
                this._parent.ThdA = null;
                this._parent.ThdOddA = null;
                this._parent.ThdEvnA = null;
                this._parent.ThdPhV = null;
                this._parent.ThdOddPhV = null;
                this._parent.ThdEvnV = null;
                this._parent.ThdPPV = null;
                this._parent.ThdOddPPV = null;
                this._parent.ThdEvnPPV = null;
                this._parent.HCfPhV = null;
                this._parent.HCfPPV = null;
                this._parent.HCfA = null;
                this._parent.HTif = null;
                this._parent.HzSet = null;
                this._parent.EvTmms = null;
                this._parent.NumCyc = null;
                this._parent.ThdAVal = null;
                this._parent.ThdVVal = null;
                this._parent.ThdATmms = null;
                this._parent.ThdVTmms = null;
                this._parent.NomA = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.Hz))
                {
                    return true;
                }
                if ((item == this._parent.HA))
                {
                    return true;
                }
                if ((item == this._parent.HPhV))
                {
                    return true;
                }
                if ((item == this._parent.HPPV))
                {
                    return true;
                }
                if ((item == this._parent.HW))
                {
                    return true;
                }
                if ((item == this._parent.HVAr))
                {
                    return true;
                }
                if ((item == this._parent.HVA))
                {
                    return true;
                }
                if ((item == this._parent.HRmsA))
                {
                    return true;
                }
                if ((item == this._parent.HRmsPhV))
                {
                    return true;
                }
                if ((item == this._parent.HRmsPPV))
                {
                    return true;
                }
                if ((item == this._parent.HTuW))
                {
                    return true;
                }
                if ((item == this._parent.HTsW))
                {
                    return true;
                }
                if ((item == this._parent.HATm))
                {
                    return true;
                }
                if ((item == this._parent.HKf))
                {
                    return true;
                }
                if ((item == this._parent.HTdf))
                {
                    return true;
                }
                if ((item == this._parent.ThdA))
                {
                    return true;
                }
                if ((item == this._parent.ThdOddA))
                {
                    return true;
                }
                if ((item == this._parent.ThdEvnA))
                {
                    return true;
                }
                if ((item == this._parent.ThdPhV))
                {
                    return true;
                }
                if ((item == this._parent.ThdOddPhV))
                {
                    return true;
                }
                if ((item == this._parent.ThdEvnV))
                {
                    return true;
                }
                if ((item == this._parent.ThdPPV))
                {
                    return true;
                }
                if ((item == this._parent.ThdOddPPV))
                {
                    return true;
                }
                if ((item == this._parent.ThdEvnPPV))
                {
                    return true;
                }
                if ((item == this._parent.HCfPhV))
                {
                    return true;
                }
                if ((item == this._parent.HCfPPV))
                {
                    return true;
                }
                if ((item == this._parent.HCfA))
                {
                    return true;
                }
                if ((item == this._parent.HTif))
                {
                    return true;
                }
                if ((item == this._parent.HzSet))
                {
                    return true;
                }
                if ((item == this._parent.EvTmms))
                {
                    return true;
                }
                if ((item == this._parent.NumCyc))
                {
                    return true;
                }
                if ((item == this._parent.ThdAVal))
                {
                    return true;
                }
                if ((item == this._parent.ThdVVal))
                {
                    return true;
                }
                if ((item == this._parent.ThdATmms))
                {
                    return true;
                }
                if ((item == this._parent.ThdVTmms))
                {
                    return true;
                }
                if ((item == this._parent.NomA))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Hz != null))
                {
                    array[arrayIndex] = this._parent.Hz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HA != null))
                {
                    array[arrayIndex] = this._parent.HA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HPhV != null))
                {
                    array[arrayIndex] = this._parent.HPhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HPPV != null))
                {
                    array[arrayIndex] = this._parent.HPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HW != null))
                {
                    array[arrayIndex] = this._parent.HW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HVAr != null))
                {
                    array[arrayIndex] = this._parent.HVAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HVA != null))
                {
                    array[arrayIndex] = this._parent.HVA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HRmsA != null))
                {
                    array[arrayIndex] = this._parent.HRmsA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HRmsPhV != null))
                {
                    array[arrayIndex] = this._parent.HRmsPhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HRmsPPV != null))
                {
                    array[arrayIndex] = this._parent.HRmsPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HTuW != null))
                {
                    array[arrayIndex] = this._parent.HTuW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HTsW != null))
                {
                    array[arrayIndex] = this._parent.HTsW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HATm != null))
                {
                    array[arrayIndex] = this._parent.HATm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HKf != null))
                {
                    array[arrayIndex] = this._parent.HKf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HTdf != null))
                {
                    array[arrayIndex] = this._parent.HTdf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdA != null))
                {
                    array[arrayIndex] = this._parent.ThdA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdOddA != null))
                {
                    array[arrayIndex] = this._parent.ThdOddA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdEvnA != null))
                {
                    array[arrayIndex] = this._parent.ThdEvnA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdPhV != null))
                {
                    array[arrayIndex] = this._parent.ThdPhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdOddPhV != null))
                {
                    array[arrayIndex] = this._parent.ThdOddPhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdEvnV != null))
                {
                    array[arrayIndex] = this._parent.ThdEvnV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdPPV != null))
                {
                    array[arrayIndex] = this._parent.ThdPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdOddPPV != null))
                {
                    array[arrayIndex] = this._parent.ThdOddPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdEvnPPV != null))
                {
                    array[arrayIndex] = this._parent.ThdEvnPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HCfPhV != null))
                {
                    array[arrayIndex] = this._parent.HCfPhV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HCfPPV != null))
                {
                    array[arrayIndex] = this._parent.HCfPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HCfA != null))
                {
                    array[arrayIndex] = this._parent.HCfA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HTif != null))
                {
                    array[arrayIndex] = this._parent.HTif;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HzSet != null))
                {
                    array[arrayIndex] = this._parent.HzSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EvTmms != null))
                {
                    array[arrayIndex] = this._parent.EvTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NumCyc != null))
                {
                    array[arrayIndex] = this._parent.NumCyc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdAVal != null))
                {
                    array[arrayIndex] = this._parent.ThdAVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdVVal != null))
                {
                    array[arrayIndex] = this._parent.ThdVVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdATmms != null))
                {
                    array[arrayIndex] = this._parent.ThdATmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThdVTmms != null))
                {
                    array[arrayIndex] = this._parent.ThdVTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NomA != null))
                {
                    array[arrayIndex] = this._parent.NomA;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.Hz == item))
                {
                    this._parent.Hz = null;
                    return true;
                }
                if ((this._parent.HA == item))
                {
                    this._parent.HA = null;
                    return true;
                }
                if ((this._parent.HPhV == item))
                {
                    this._parent.HPhV = null;
                    return true;
                }
                if ((this._parent.HPPV == item))
                {
                    this._parent.HPPV = null;
                    return true;
                }
                if ((this._parent.HW == item))
                {
                    this._parent.HW = null;
                    return true;
                }
                if ((this._parent.HVAr == item))
                {
                    this._parent.HVAr = null;
                    return true;
                }
                if ((this._parent.HVA == item))
                {
                    this._parent.HVA = null;
                    return true;
                }
                if ((this._parent.HRmsA == item))
                {
                    this._parent.HRmsA = null;
                    return true;
                }
                if ((this._parent.HRmsPhV == item))
                {
                    this._parent.HRmsPhV = null;
                    return true;
                }
                if ((this._parent.HRmsPPV == item))
                {
                    this._parent.HRmsPPV = null;
                    return true;
                }
                if ((this._parent.HTuW == item))
                {
                    this._parent.HTuW = null;
                    return true;
                }
                if ((this._parent.HTsW == item))
                {
                    this._parent.HTsW = null;
                    return true;
                }
                if ((this._parent.HATm == item))
                {
                    this._parent.HATm = null;
                    return true;
                }
                if ((this._parent.HKf == item))
                {
                    this._parent.HKf = null;
                    return true;
                }
                if ((this._parent.HTdf == item))
                {
                    this._parent.HTdf = null;
                    return true;
                }
                if ((this._parent.ThdA == item))
                {
                    this._parent.ThdA = null;
                    return true;
                }
                if ((this._parent.ThdOddA == item))
                {
                    this._parent.ThdOddA = null;
                    return true;
                }
                if ((this._parent.ThdEvnA == item))
                {
                    this._parent.ThdEvnA = null;
                    return true;
                }
                if ((this._parent.ThdPhV == item))
                {
                    this._parent.ThdPhV = null;
                    return true;
                }
                if ((this._parent.ThdOddPhV == item))
                {
                    this._parent.ThdOddPhV = null;
                    return true;
                }
                if ((this._parent.ThdEvnV == item))
                {
                    this._parent.ThdEvnV = null;
                    return true;
                }
                if ((this._parent.ThdPPV == item))
                {
                    this._parent.ThdPPV = null;
                    return true;
                }
                if ((this._parent.ThdOddPPV == item))
                {
                    this._parent.ThdOddPPV = null;
                    return true;
                }
                if ((this._parent.ThdEvnPPV == item))
                {
                    this._parent.ThdEvnPPV = null;
                    return true;
                }
                if ((this._parent.HCfPhV == item))
                {
                    this._parent.HCfPhV = null;
                    return true;
                }
                if ((this._parent.HCfPPV == item))
                {
                    this._parent.HCfPPV = null;
                    return true;
                }
                if ((this._parent.HCfA == item))
                {
                    this._parent.HCfA = null;
                    return true;
                }
                if ((this._parent.HTif == item))
                {
                    this._parent.HTif = null;
                    return true;
                }
                if ((this._parent.HzSet == item))
                {
                    this._parent.HzSet = null;
                    return true;
                }
                if ((this._parent.EvTmms == item))
                {
                    this._parent.EvTmms = null;
                    return true;
                }
                if ((this._parent.NumCyc == item))
                {
                    this._parent.NumCyc = null;
                    return true;
                }
                if ((this._parent.ThdAVal == item))
                {
                    this._parent.ThdAVal = null;
                    return true;
                }
                if ((this._parent.ThdVVal == item))
                {
                    this._parent.ThdVVal = null;
                    return true;
                }
                if ((this._parent.ThdATmms == item))
                {
                    this._parent.ThdATmms = null;
                    return true;
                }
                if ((this._parent.ThdVTmms == item))
                {
                    this._parent.ThdVTmms = null;
                    return true;
                }
                if ((this._parent.NomA == item))
                {
                    this._parent.NomA = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.Hz).Concat(this._parent.HA).Concat(this._parent.HPhV).Concat(this._parent.HPPV).Concat(this._parent.HW).Concat(this._parent.HVAr).Concat(this._parent.HVA).Concat(this._parent.HRmsA).Concat(this._parent.HRmsPhV).Concat(this._parent.HRmsPPV).Concat(this._parent.HTuW).Concat(this._parent.HTsW).Concat(this._parent.HATm).Concat(this._parent.HKf).Concat(this._parent.HTdf).Concat(this._parent.ThdA).Concat(this._parent.ThdOddA).Concat(this._parent.ThdEvnA).Concat(this._parent.ThdPhV).Concat(this._parent.ThdOddPhV).Concat(this._parent.ThdEvnV).Concat(this._parent.ThdPPV).Concat(this._parent.ThdOddPPV).Concat(this._parent.ThdEvnPPV).Concat(this._parent.HCfPhV).Concat(this._parent.HCfPPV).Concat(this._parent.HCfA).Concat(this._parent.HTif).Concat(this._parent.HzSet).Concat(this._parent.EvTmms).Concat(this._parent.NumCyc).Concat(this._parent.ThdAVal).Concat(this._parent.ThdVVal).Concat(this._parent.ThdATmms).Concat(this._parent.ThdVTmms).Concat(this._parent.NomA).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMHAI, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMHAI, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Hz property
        /// </summary>
        private sealed class HzProxy : ModelPropertyChange<IMHAI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.Hz;
                }
                set
                {
                    this.ModelElement.Hz = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HA property
        /// </summary>
        private sealed class HAProxy : ModelPropertyChange<IMHAI, IHYWE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHYWE Value
            {
                get
                {
                    return this.ModelElement.HA;
                }
                set
                {
                    this.ModelElement.HA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HPhV property
        /// </summary>
        private sealed class HPhVProxy : ModelPropertyChange<IMHAI, IHYWE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HPhVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHYWE Value
            {
                get
                {
                    return this.ModelElement.HPhV;
                }
                set
                {
                    this.ModelElement.HPhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HPhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HPhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HPPV property
        /// </summary>
        private sealed class HPPVProxy : ModelPropertyChange<IMHAI, IHDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHDEL Value
            {
                get
                {
                    return this.ModelElement.HPPV;
                }
                set
                {
                    this.ModelElement.HPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HW property
        /// </summary>
        private sealed class HWProxy : ModelPropertyChange<IMHAI, IHYWE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HWProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHYWE Value
            {
                get
                {
                    return this.ModelElement.HW;
                }
                set
                {
                    this.ModelElement.HW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HVAr property
        /// </summary>
        private sealed class HVArProxy : ModelPropertyChange<IMHAI, IHYWE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HVArProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHYWE Value
            {
                get
                {
                    return this.ModelElement.HVAr;
                }
                set
                {
                    this.ModelElement.HVAr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HVArChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HVArChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HVA property
        /// </summary>
        private sealed class HVAProxy : ModelPropertyChange<IMHAI, IHYWE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HVAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHYWE Value
            {
                get
                {
                    return this.ModelElement.HVA;
                }
                set
                {
                    this.ModelElement.HVA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HVAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HVAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HRmsA property
        /// </summary>
        private sealed class HRmsAProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HRmsAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HRmsA;
                }
                set
                {
                    this.ModelElement.HRmsA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HRmsPhV property
        /// </summary>
        private sealed class HRmsPhVProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HRmsPhVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HRmsPhV;
                }
                set
                {
                    this.ModelElement.HRmsPhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsPhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsPhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HRmsPPV property
        /// </summary>
        private sealed class HRmsPPVProxy : ModelPropertyChange<IMHAI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HRmsPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.HRmsPPV;
                }
                set
                {
                    this.ModelElement.HRmsPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HRmsPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HTuW property
        /// </summary>
        private sealed class HTuWProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HTuWProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HTuW;
                }
                set
                {
                    this.ModelElement.HTuW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTuWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTuWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HTsW property
        /// </summary>
        private sealed class HTsWProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HTsWProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HTsW;
                }
                set
                {
                    this.ModelElement.HTsW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTsWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTsWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HATm property
        /// </summary>
        private sealed class HATmProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HATmProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HATm;
                }
                set
                {
                    this.ModelElement.HATm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HATmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HATmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HKf property
        /// </summary>
        private sealed class HKfProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HKfProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HKf;
                }
                set
                {
                    this.ModelElement.HKf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HKfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HKfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HTdf property
        /// </summary>
        private sealed class HTdfProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HTdfProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HTdf;
                }
                set
                {
                    this.ModelElement.HTdf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTdfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTdfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdA property
        /// </summary>
        private sealed class ThdAProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdA;
                }
                set
                {
                    this.ModelElement.ThdA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdOddA property
        /// </summary>
        private sealed class ThdOddAProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdOddAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdOddA;
                }
                set
                {
                    this.ModelElement.ThdOddA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdEvnA property
        /// </summary>
        private sealed class ThdEvnAProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdEvnAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdEvnA;
                }
                set
                {
                    this.ModelElement.ThdEvnA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdPhV property
        /// </summary>
        private sealed class ThdPhVProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdPhVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdPhV;
                }
                set
                {
                    this.ModelElement.ThdPhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdPhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdPhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdOddPhV property
        /// </summary>
        private sealed class ThdOddPhVProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdOddPhVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdOddPhV;
                }
                set
                {
                    this.ModelElement.ThdOddPhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddPhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddPhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdEvnV property
        /// </summary>
        private sealed class ThdEvnVProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdEvnVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ThdEvnV;
                }
                set
                {
                    this.ModelElement.ThdEvnV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdPPV property
        /// </summary>
        private sealed class ThdPPVProxy : ModelPropertyChange<IMHAI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.ThdPPV;
                }
                set
                {
                    this.ModelElement.ThdPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdOddPPV property
        /// </summary>
        private sealed class ThdOddPPVProxy : ModelPropertyChange<IMHAI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdOddPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.ThdOddPPV;
                }
                set
                {
                    this.ModelElement.ThdOddPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdOddPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdEvnPPV property
        /// </summary>
        private sealed class ThdEvnPPVProxy : ModelPropertyChange<IMHAI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdEvnPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.ThdEvnPPV;
                }
                set
                {
                    this.ModelElement.ThdEvnPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdEvnPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HCfPhV property
        /// </summary>
        private sealed class HCfPhVProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HCfPhVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HCfPhV;
                }
                set
                {
                    this.ModelElement.HCfPhV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfPhVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfPhVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HCfPPV property
        /// </summary>
        private sealed class HCfPPVProxy : ModelPropertyChange<IMHAI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HCfPPVProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.HCfPPV;
                }
                set
                {
                    this.ModelElement.HCfPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfPPVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HCfA property
        /// </summary>
        private sealed class HCfAProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HCfAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HCfA;
                }
                set
                {
                    this.ModelElement.HCfA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HCfAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HTif property
        /// </summary>
        private sealed class HTifProxy : ModelPropertyChange<IMHAI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HTifProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.HTif;
                }
                set
                {
                    this.ModelElement.HTif = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTifChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HTifChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HzSet property
        /// </summary>
        private sealed class HzSetProxy : ModelPropertyChange<IMHAI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzSetProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HzSet;
                }
                set
                {
                    this.ModelElement.HzSet = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzSetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzSetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EvTmms property
        /// </summary>
        private sealed class EvTmmsProxy : ModelPropertyChange<IMHAI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EvTmmsProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.EvTmms;
                }
                set
                {
                    this.ModelElement.EvTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EvTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EvTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NumCyc property
        /// </summary>
        private sealed class NumCycProxy : ModelPropertyChange<IMHAI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumCycProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.NumCyc;
                }
                set
                {
                    this.ModelElement.NumCyc = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumCycChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumCycChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdAVal property
        /// </summary>
        private sealed class ThdAValProxy : ModelPropertyChange<IMHAI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdAValProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ThdAVal;
                }
                set
                {
                    this.ModelElement.ThdAVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdAValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdAValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdVVal property
        /// </summary>
        private sealed class ThdVValProxy : ModelPropertyChange<IMHAI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdVValProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ThdVVal;
                }
                set
                {
                    this.ModelElement.ThdVVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdVValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdVValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdATmms property
        /// </summary>
        private sealed class ThdATmmsProxy : ModelPropertyChange<IMHAI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdATmmsProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ThdATmms;
                }
                set
                {
                    this.ModelElement.ThdATmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdATmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdATmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThdVTmms property
        /// </summary>
        private sealed class ThdVTmmsProxy : ModelPropertyChange<IMHAI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThdVTmmsProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ThdVTmms;
                }
                set
                {
                    this.ModelElement.ThdVTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdVTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThdVTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NomA property
        /// </summary>
        private sealed class NomAProxy : ModelPropertyChange<IMHAI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NomAProxy(IMHAI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.NomA;
                }
                set
                {
                    this.ModelElement.NomA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NomAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NomAChanged -= handler;
            }
        }
    }
}

