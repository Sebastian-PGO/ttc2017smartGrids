//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MSTA class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MSTA")]
    public partial class MSTA : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMSTA, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        private static Lazy<ITypedElement> _eEHealthAttribute = new Lazy<ITypedElement>(RetrieveEEHealthAttribute);
        
        private static Lazy<ITypedElement> _eENameReference = new Lazy<ITypedElement>(RetrieveEENameReference);
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        private static Lazy<ITypedElement> _avAmpsReference = new Lazy<ITypedElement>(RetrieveAvAmpsReference);
        
        /// <summary>
        /// The backing field for the AvAmps property
        /// </summary>
        private IMV _avAmps;
        
        private static Lazy<ITypedElement> _maxAmpsReference = new Lazy<ITypedElement>(RetrieveMaxAmpsReference);
        
        /// <summary>
        /// The backing field for the MaxAmps property
        /// </summary>
        private IMV _maxAmps;
        
        private static Lazy<ITypedElement> _minAmpsReference = new Lazy<ITypedElement>(RetrieveMinAmpsReference);
        
        /// <summary>
        /// The backing field for the MinAmps property
        /// </summary>
        private IMV _minAmps;
        
        private static Lazy<ITypedElement> _avVoltsReference = new Lazy<ITypedElement>(RetrieveAvVoltsReference);
        
        /// <summary>
        /// The backing field for the AvVolts property
        /// </summary>
        private IMV _avVolts;
        
        private static Lazy<ITypedElement> _maxVoltsReference = new Lazy<ITypedElement>(RetrieveMaxVoltsReference);
        
        /// <summary>
        /// The backing field for the MaxVolts property
        /// </summary>
        private IMV _maxVolts;
        
        private static Lazy<ITypedElement> _minVoltsReference = new Lazy<ITypedElement>(RetrieveMinVoltsReference);
        
        /// <summary>
        /// The backing field for the MinVolts property
        /// </summary>
        private IMV _minVolts;
        
        private static Lazy<ITypedElement> _avVAReference = new Lazy<ITypedElement>(RetrieveAvVAReference);
        
        /// <summary>
        /// The backing field for the AvVA property
        /// </summary>
        private IMV _avVA;
        
        private static Lazy<ITypedElement> _maxVAReference = new Lazy<ITypedElement>(RetrieveMaxVAReference);
        
        /// <summary>
        /// The backing field for the MaxVA property
        /// </summary>
        private IMV _maxVA;
        
        private static Lazy<ITypedElement> _minVAReference = new Lazy<ITypedElement>(RetrieveMinVAReference);
        
        /// <summary>
        /// The backing field for the MinVA property
        /// </summary>
        private IMV _minVA;
        
        private static Lazy<ITypedElement> _avWReference = new Lazy<ITypedElement>(RetrieveAvWReference);
        
        /// <summary>
        /// The backing field for the AvW property
        /// </summary>
        private IMV _avW;
        
        private static Lazy<ITypedElement> _maxWReference = new Lazy<ITypedElement>(RetrieveMaxWReference);
        
        /// <summary>
        /// The backing field for the MaxW property
        /// </summary>
        private IMV _maxW;
        
        private static Lazy<ITypedElement> _minWReference = new Lazy<ITypedElement>(RetrieveMinWReference);
        
        /// <summary>
        /// The backing field for the MinW property
        /// </summary>
        private IMV _minW;
        
        private static Lazy<ITypedElement> _avVArReference = new Lazy<ITypedElement>(RetrieveAvVArReference);
        
        /// <summary>
        /// The backing field for the AvVAr property
        /// </summary>
        private IMV _avVAr;
        
        private static Lazy<ITypedElement> _maxVArReference = new Lazy<ITypedElement>(RetrieveMaxVArReference);
        
        /// <summary>
        /// The backing field for the MaxVAr property
        /// </summary>
        private IMV _maxVAr;
        
        private static Lazy<ITypedElement> _minVArReference = new Lazy<ITypedElement>(RetrieveMinVArReference);
        
        /// <summary>
        /// The backing field for the MinVAr property
        /// </summary>
        private IMV _minVAr;
        
        private static Lazy<ITypedElement> _evStrReference = new Lazy<ITypedElement>(RetrieveEvStrReference);
        
        /// <summary>
        /// The backing field for the EvStr property
        /// </summary>
        private ISPC _evStr;
        
        private static Lazy<ITypedElement> _evTmmsReference = new Lazy<ITypedElement>(RetrieveEvTmmsReference);
        
        /// <summary>
        /// The backing field for the EvTmms property
        /// </summary>
        private IASG _evTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e, _eEHealthAttribute);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e, _eEHealthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e, _eENameReference);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e, _eENameReference);
                }
            }
        }
        
        /// <summary>
        /// The AvAmps property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AvAmps
        {
            get
            {
                return this._avAmps;
            }
            set
            {
                if ((this._avAmps != value))
                {
                    IMV old = this._avAmps;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvAmpsChanging(e);
                    this.OnPropertyChanging("AvAmps", e, _avAmpsReference);
                    this._avAmps = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvAmps;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvAmps;
                    }
                    this.OnAvAmpsChanged(e);
                    this.OnPropertyChanged("AvAmps", e, _avAmpsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxAmps property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MaxAmps
        {
            get
            {
                return this._maxAmps;
            }
            set
            {
                if ((this._maxAmps != value))
                {
                    IMV old = this._maxAmps;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxAmpsChanging(e);
                    this.OnPropertyChanging("MaxAmps", e, _maxAmpsReference);
                    this._maxAmps = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxAmps;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxAmps;
                    }
                    this.OnMaxAmpsChanged(e);
                    this.OnPropertyChanged("MaxAmps", e, _maxAmpsReference);
                }
            }
        }
        
        /// <summary>
        /// The MinAmps property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MinAmps
        {
            get
            {
                return this._minAmps;
            }
            set
            {
                if ((this._minAmps != value))
                {
                    IMV old = this._minAmps;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinAmpsChanging(e);
                    this.OnPropertyChanging("MinAmps", e, _minAmpsReference);
                    this._minAmps = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinAmps;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinAmps;
                    }
                    this.OnMinAmpsChanged(e);
                    this.OnPropertyChanged("MinAmps", e, _minAmpsReference);
                }
            }
        }
        
        /// <summary>
        /// The AvVolts property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AvVolts
        {
            get
            {
                return this._avVolts;
            }
            set
            {
                if ((this._avVolts != value))
                {
                    IMV old = this._avVolts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvVoltsChanging(e);
                    this.OnPropertyChanging("AvVolts", e, _avVoltsReference);
                    this._avVolts = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvVolts;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvVolts;
                    }
                    this.OnAvVoltsChanged(e);
                    this.OnPropertyChanged("AvVolts", e, _avVoltsReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxVolts property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MaxVolts
        {
            get
            {
                return this._maxVolts;
            }
            set
            {
                if ((this._maxVolts != value))
                {
                    IMV old = this._maxVolts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxVoltsChanging(e);
                    this.OnPropertyChanging("MaxVolts", e, _maxVoltsReference);
                    this._maxVolts = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxVolts;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxVolts;
                    }
                    this.OnMaxVoltsChanged(e);
                    this.OnPropertyChanged("MaxVolts", e, _maxVoltsReference);
                }
            }
        }
        
        /// <summary>
        /// The MinVolts property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MinVolts
        {
            get
            {
                return this._minVolts;
            }
            set
            {
                if ((this._minVolts != value))
                {
                    IMV old = this._minVolts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinVoltsChanging(e);
                    this.OnPropertyChanging("MinVolts", e, _minVoltsReference);
                    this._minVolts = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinVolts;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinVolts;
                    }
                    this.OnMinVoltsChanged(e);
                    this.OnPropertyChanged("MinVolts", e, _minVoltsReference);
                }
            }
        }
        
        /// <summary>
        /// The AvVA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AvVA
        {
            get
            {
                return this._avVA;
            }
            set
            {
                if ((this._avVA != value))
                {
                    IMV old = this._avVA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvVAChanging(e);
                    this.OnPropertyChanging("AvVA", e, _avVAReference);
                    this._avVA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvVA;
                    }
                    this.OnAvVAChanged(e);
                    this.OnPropertyChanged("AvVA", e, _avVAReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxVA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MaxVA
        {
            get
            {
                return this._maxVA;
            }
            set
            {
                if ((this._maxVA != value))
                {
                    IMV old = this._maxVA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxVAChanging(e);
                    this.OnPropertyChanging("MaxVA", e, _maxVAReference);
                    this._maxVA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxVA;
                    }
                    this.OnMaxVAChanged(e);
                    this.OnPropertyChanged("MaxVA", e, _maxVAReference);
                }
            }
        }
        
        /// <summary>
        /// The MinVA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MinVA
        {
            get
            {
                return this._minVA;
            }
            set
            {
                if ((this._minVA != value))
                {
                    IMV old = this._minVA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinVAChanging(e);
                    this.OnPropertyChanging("MinVA", e, _minVAReference);
                    this._minVA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinVA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinVA;
                    }
                    this.OnMinVAChanged(e);
                    this.OnPropertyChanged("MinVA", e, _minVAReference);
                }
            }
        }
        
        /// <summary>
        /// The AvW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AvW
        {
            get
            {
                return this._avW;
            }
            set
            {
                if ((this._avW != value))
                {
                    IMV old = this._avW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvWChanging(e);
                    this.OnPropertyChanging("AvW", e, _avWReference);
                    this._avW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvW;
                    }
                    this.OnAvWChanged(e);
                    this.OnPropertyChanged("AvW", e, _avWReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MaxW
        {
            get
            {
                return this._maxW;
            }
            set
            {
                if ((this._maxW != value))
                {
                    IMV old = this._maxW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxWChanging(e);
                    this.OnPropertyChanging("MaxW", e, _maxWReference);
                    this._maxW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxW;
                    }
                    this.OnMaxWChanged(e);
                    this.OnPropertyChanged("MaxW", e, _maxWReference);
                }
            }
        }
        
        /// <summary>
        /// The MinW property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MinW
        {
            get
            {
                return this._minW;
            }
            set
            {
                if ((this._minW != value))
                {
                    IMV old = this._minW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinWChanging(e);
                    this.OnPropertyChanging("MinW", e, _minWReference);
                    this._minW = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinW;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinW;
                    }
                    this.OnMinWChanged(e);
                    this.OnPropertyChanged("MinW", e, _minWReference);
                }
            }
        }
        
        /// <summary>
        /// The AvVAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV AvVAr
        {
            get
            {
                return this._avVAr;
            }
            set
            {
                if ((this._avVAr != value))
                {
                    IMV old = this._avVAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvVArChanging(e);
                    this.OnPropertyChanging("AvVAr", e, _avVArReference);
                    this._avVAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvVAr;
                    }
                    this.OnAvVArChanged(e);
                    this.OnPropertyChanged("AvVAr", e, _avVArReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxVAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MaxVAr
        {
            get
            {
                return this._maxVAr;
            }
            set
            {
                if ((this._maxVAr != value))
                {
                    IMV old = this._maxVAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxVArChanging(e);
                    this.OnPropertyChanging("MaxVAr", e, _maxVArReference);
                    this._maxVAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxVAr;
                    }
                    this.OnMaxVArChanged(e);
                    this.OnPropertyChanged("MaxVAr", e, _maxVArReference);
                }
            }
        }
        
        /// <summary>
        /// The MinVAr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV MinVAr
        {
            get
            {
                return this._minVAr;
            }
            set
            {
                if ((this._minVAr != value))
                {
                    IMV old = this._minVAr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinVArChanging(e);
                    this.OnPropertyChanging("MinVAr", e, _minVArReference);
                    this._minVAr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinVAr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinVAr;
                    }
                    this.OnMinVArChanged(e);
                    this.OnPropertyChanged("MinVAr", e, _minVArReference);
                }
            }
        }
        
        /// <summary>
        /// The EvStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC EvStr
        {
            get
            {
                return this._evStr;
            }
            set
            {
                if ((this._evStr != value))
                {
                    ISPC old = this._evStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvStrChanging(e);
                    this.OnPropertyChanging("EvStr", e, _evStrReference);
                    this._evStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvStr;
                    }
                    this.OnEvStrChanged(e);
                    this.OnPropertyChanged("EvStr", e, _evStrReference);
                }
            }
        }
        
        /// <summary>
        /// The EvTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG EvTmms
        {
            get
            {
                return this._evTmms;
            }
            set
            {
                if ((this._evTmms != value))
                {
                    IASG old = this._evTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEvTmmsChanging(e);
                    this.OnPropertyChanging("EvTmms", e, _evTmmsReference);
                    this._evTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvTmms;
                    }
                    this.OnEvTmmsChanged(e);
                    this.OnPropertyChanged("EvTmms", e, _evTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MSTAReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MSTA")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the AvAmps property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvAmpsChanging;
        
        /// <summary>
        /// Gets fired when the AvAmps property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvAmpsChanged;
        
        /// <summary>
        /// Gets fired before the MaxAmps property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxAmpsChanging;
        
        /// <summary>
        /// Gets fired when the MaxAmps property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxAmpsChanged;
        
        /// <summary>
        /// Gets fired before the MinAmps property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinAmpsChanging;
        
        /// <summary>
        /// Gets fired when the MinAmps property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinAmpsChanged;
        
        /// <summary>
        /// Gets fired before the AvVolts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVoltsChanging;
        
        /// <summary>
        /// Gets fired when the AvVolts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVoltsChanged;
        
        /// <summary>
        /// Gets fired before the MaxVolts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVoltsChanging;
        
        /// <summary>
        /// Gets fired when the MaxVolts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVoltsChanged;
        
        /// <summary>
        /// Gets fired before the MinVolts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVoltsChanging;
        
        /// <summary>
        /// Gets fired when the MinVolts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVoltsChanged;
        
        /// <summary>
        /// Gets fired before the AvVA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVAChanging;
        
        /// <summary>
        /// Gets fired when the AvVA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVAChanged;
        
        /// <summary>
        /// Gets fired before the MaxVA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVAChanging;
        
        /// <summary>
        /// Gets fired when the MaxVA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVAChanged;
        
        /// <summary>
        /// Gets fired before the MinVA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVAChanging;
        
        /// <summary>
        /// Gets fired when the MinVA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVAChanged;
        
        /// <summary>
        /// Gets fired before the AvW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvWChanging;
        
        /// <summary>
        /// Gets fired when the AvW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvWChanged;
        
        /// <summary>
        /// Gets fired before the MaxW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxWChanging;
        
        /// <summary>
        /// Gets fired when the MaxW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxWChanged;
        
        /// <summary>
        /// Gets fired before the MinW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinWChanging;
        
        /// <summary>
        /// Gets fired when the MinW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinWChanged;
        
        /// <summary>
        /// Gets fired before the AvVAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVArChanging;
        
        /// <summary>
        /// Gets fired when the AvVAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvVArChanged;
        
        /// <summary>
        /// Gets fired before the MaxVAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVArChanging;
        
        /// <summary>
        /// Gets fired when the MaxVAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxVArChanged;
        
        /// <summary>
        /// Gets fired before the MinVAr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVArChanging;
        
        /// <summary>
        /// Gets fired when the MinVAr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinVArChanged;
        
        /// <summary>
        /// Gets fired before the EvStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvStrChanging;
        
        /// <summary>
        /// Gets fired when the EvStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvStrChanged;
        
        /// <summary>
        /// Gets fired before the EvTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanging;
        
        /// <summary>
        /// Gets fired when the EvTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EvTmmsChanged;
        
        private static ITypedElement RetrieveEEHealthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("EEHealth")));
        }
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEENameReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("EEName")));
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        private static ITypedElement RetrieveAvAmpsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("AvAmps")));
        }
        
        /// <summary>
        /// Raises the AvAmpsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvAmpsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvAmpsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvAmpsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvAmpsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvAmpsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvAmps property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvAmps(object sender, System.EventArgs eventArgs)
        {
            this.AvAmps = null;
        }
        
        private static ITypedElement RetrieveMaxAmpsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MaxAmps")));
        }
        
        /// <summary>
        /// Raises the MaxAmpsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxAmpsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxAmpsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxAmpsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxAmpsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxAmpsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxAmps property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxAmps(object sender, System.EventArgs eventArgs)
        {
            this.MaxAmps = null;
        }
        
        private static ITypedElement RetrieveMinAmpsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MinAmps")));
        }
        
        /// <summary>
        /// Raises the MinAmpsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinAmpsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinAmpsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinAmpsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinAmpsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinAmpsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinAmps property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinAmps(object sender, System.EventArgs eventArgs)
        {
            this.MinAmps = null;
        }
        
        private static ITypedElement RetrieveAvVoltsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("AvVolts")));
        }
        
        /// <summary>
        /// Raises the AvVoltsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVoltsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVoltsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvVoltsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVoltsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVoltsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvVolts property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvVolts(object sender, System.EventArgs eventArgs)
        {
            this.AvVolts = null;
        }
        
        private static ITypedElement RetrieveMaxVoltsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MaxVolts")));
        }
        
        /// <summary>
        /// Raises the MaxVoltsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVoltsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVoltsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxVoltsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVoltsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVoltsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxVolts property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxVolts(object sender, System.EventArgs eventArgs)
        {
            this.MaxVolts = null;
        }
        
        private static ITypedElement RetrieveMinVoltsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MinVolts")));
        }
        
        /// <summary>
        /// Raises the MinVoltsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVoltsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVoltsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinVoltsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVoltsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVoltsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinVolts property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinVolts(object sender, System.EventArgs eventArgs)
        {
            this.MinVolts = null;
        }
        
        private static ITypedElement RetrieveAvVAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("AvVA")));
        }
        
        /// <summary>
        /// Raises the AvVAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvVAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvVA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvVA(object sender, System.EventArgs eventArgs)
        {
            this.AvVA = null;
        }
        
        private static ITypedElement RetrieveMaxVAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MaxVA")));
        }
        
        /// <summary>
        /// Raises the MaxVAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxVAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxVA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxVA(object sender, System.EventArgs eventArgs)
        {
            this.MaxVA = null;
        }
        
        private static ITypedElement RetrieveMinVAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MinVA")));
        }
        
        /// <summary>
        /// Raises the MinVAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinVAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinVA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinVA(object sender, System.EventArgs eventArgs)
        {
            this.MinVA = null;
        }
        
        private static ITypedElement RetrieveAvWReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("AvW")));
        }
        
        /// <summary>
        /// Raises the AvWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvW(object sender, System.EventArgs eventArgs)
        {
            this.AvW = null;
        }
        
        private static ITypedElement RetrieveMaxWReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MaxW")));
        }
        
        /// <summary>
        /// Raises the MaxWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxW(object sender, System.EventArgs eventArgs)
        {
            this.MaxW = null;
        }
        
        private static ITypedElement RetrieveMinWReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MinW")));
        }
        
        /// <summary>
        /// Raises the MinWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinW property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinW(object sender, System.EventArgs eventArgs)
        {
            this.MinW = null;
        }
        
        private static ITypedElement RetrieveAvVArReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("AvVAr")));
        }
        
        /// <summary>
        /// Raises the AvVArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvVArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvVArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvVAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvVAr(object sender, System.EventArgs eventArgs)
        {
            this.AvVAr = null;
        }
        
        private static ITypedElement RetrieveMaxVArReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MaxVAr")));
        }
        
        /// <summary>
        /// Raises the MaxVArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxVArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxVArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxVAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxVAr(object sender, System.EventArgs eventArgs)
        {
            this.MaxVAr = null;
        }
        
        private static ITypedElement RetrieveMinVArReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("MinVAr")));
        }
        
        /// <summary>
        /// Raises the MinVArChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVArChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVArChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinVArChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinVArChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinVArChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinVAr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinVAr(object sender, System.EventArgs eventArgs)
        {
            this.MinVAr = null;
        }
        
        private static ITypedElement RetrieveEvStrReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("EvStr")));
        }
        
        /// <summary>
        /// Raises the EvStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EvStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EvStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvStr(object sender, System.EventArgs eventArgs)
        {
            this.EvStr = null;
        }
        
        private static ITypedElement RetrieveEvTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(MSTA.ClassInstance)).Resolve("EvTmms")));
        }
        
        /// <summary>
        /// Raises the EvTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EvTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEvTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EvTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EvTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvTmms(object sender, System.EventArgs eventArgs)
        {
            this.EvTmms = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "AVAMPS"))
            {
                this.AvAmps = ((IMV)(value));
                return;
            }
            if ((feature == "MAXAMPS"))
            {
                this.MaxAmps = ((IMV)(value));
                return;
            }
            if ((feature == "MINAMPS"))
            {
                this.MinAmps = ((IMV)(value));
                return;
            }
            if ((feature == "AVVOLTS"))
            {
                this.AvVolts = ((IMV)(value));
                return;
            }
            if ((feature == "MAXVOLTS"))
            {
                this.MaxVolts = ((IMV)(value));
                return;
            }
            if ((feature == "MINVOLTS"))
            {
                this.MinVolts = ((IMV)(value));
                return;
            }
            if ((feature == "AVVA"))
            {
                this.AvVA = ((IMV)(value));
                return;
            }
            if ((feature == "MAXVA"))
            {
                this.MaxVA = ((IMV)(value));
                return;
            }
            if ((feature == "MINVA"))
            {
                this.MinVA = ((IMV)(value));
                return;
            }
            if ((feature == "AVW"))
            {
                this.AvW = ((IMV)(value));
                return;
            }
            if ((feature == "MAXW"))
            {
                this.MaxW = ((IMV)(value));
                return;
            }
            if ((feature == "MINW"))
            {
                this.MinW = ((IMV)(value));
                return;
            }
            if ((feature == "AVVAR"))
            {
                this.AvVAr = ((IMV)(value));
                return;
            }
            if ((feature == "MAXVAR"))
            {
                this.MaxVAr = ((IMV)(value));
                return;
            }
            if ((feature == "MINVAR"))
            {
                this.MinVAr = ((IMV)(value));
                return;
            }
            if ((feature == "EVSTR"))
            {
                this.EvStr = ((ISPC)(value));
                return;
            }
            if ((feature == "EVTMMS"))
            {
                this.EvTmms = ((IASG)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "AvAmps"))
            {
                return new AvAmpsProxy(this);
            }
            if ((attribute == "MaxAmps"))
            {
                return new MaxAmpsProxy(this);
            }
            if ((attribute == "MinAmps"))
            {
                return new MinAmpsProxy(this);
            }
            if ((attribute == "AvVolts"))
            {
                return new AvVoltsProxy(this);
            }
            if ((attribute == "MaxVolts"))
            {
                return new MaxVoltsProxy(this);
            }
            if ((attribute == "MinVolts"))
            {
                return new MinVoltsProxy(this);
            }
            if ((attribute == "AvVA"))
            {
                return new AvVAProxy(this);
            }
            if ((attribute == "MaxVA"))
            {
                return new MaxVAProxy(this);
            }
            if ((attribute == "MinVA"))
            {
                return new MinVAProxy(this);
            }
            if ((attribute == "AvW"))
            {
                return new AvWProxy(this);
            }
            if ((attribute == "MaxW"))
            {
                return new MaxWProxy(this);
            }
            if ((attribute == "MinW"))
            {
                return new MinWProxy(this);
            }
            if ((attribute == "AvVAr"))
            {
                return new AvVArProxy(this);
            }
            if ((attribute == "MaxVAr"))
            {
                return new MaxVArProxy(this);
            }
            if ((attribute == "MinVAr"))
            {
                return new MinVArProxy(this);
            }
            if ((attribute == "EvStr"))
            {
                return new EvStrProxy(this);
            }
            if ((attribute == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "AvAmps"))
            {
                return new AvAmpsProxy(this);
            }
            if ((reference == "MaxAmps"))
            {
                return new MaxAmpsProxy(this);
            }
            if ((reference == "MinAmps"))
            {
                return new MinAmpsProxy(this);
            }
            if ((reference == "AvVolts"))
            {
                return new AvVoltsProxy(this);
            }
            if ((reference == "MaxVolts"))
            {
                return new MaxVoltsProxy(this);
            }
            if ((reference == "MinVolts"))
            {
                return new MinVoltsProxy(this);
            }
            if ((reference == "AvVA"))
            {
                return new AvVAProxy(this);
            }
            if ((reference == "MaxVA"))
            {
                return new MaxVAProxy(this);
            }
            if ((reference == "MinVA"))
            {
                return new MinVAProxy(this);
            }
            if ((reference == "AvW"))
            {
                return new AvWProxy(this);
            }
            if ((reference == "MaxW"))
            {
                return new MaxWProxy(this);
            }
            if ((reference == "MinW"))
            {
                return new MinWProxy(this);
            }
            if ((reference == "AvVAr"))
            {
                return new AvVArProxy(this);
            }
            if ((reference == "MaxVAr"))
            {
                return new MaxVArProxy(this);
            }
            if ((reference == "MinVAr"))
            {
                return new MinVArProxy(this);
            }
            if ((reference == "EvStr"))
            {
                return new EvStrProxy(this);
            }
            if ((reference == "EvTmms"))
            {
                return new EvTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MSTA")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MSTA class
        /// </summary>
        public class MSTAReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MSTA _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MSTAReferencedElementsCollection(MSTA parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AvAmps != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxAmps != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinAmps != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AvVolts != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxVolts != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinVolts != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AvVA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxVA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinVA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AvW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinW != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AvVAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxVAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinVAr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EvStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EvTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.AvAmpsChanged += this.PropagateValueChanges;
                this._parent.MaxAmpsChanged += this.PropagateValueChanges;
                this._parent.MinAmpsChanged += this.PropagateValueChanges;
                this._parent.AvVoltsChanged += this.PropagateValueChanges;
                this._parent.MaxVoltsChanged += this.PropagateValueChanges;
                this._parent.MinVoltsChanged += this.PropagateValueChanges;
                this._parent.AvVAChanged += this.PropagateValueChanges;
                this._parent.MaxVAChanged += this.PropagateValueChanges;
                this._parent.MinVAChanged += this.PropagateValueChanges;
                this._parent.AvWChanged += this.PropagateValueChanges;
                this._parent.MaxWChanged += this.PropagateValueChanges;
                this._parent.MinWChanged += this.PropagateValueChanges;
                this._parent.AvVArChanged += this.PropagateValueChanges;
                this._parent.MaxVArChanged += this.PropagateValueChanges;
                this._parent.MinVArChanged += this.PropagateValueChanges;
                this._parent.EvStrChanged += this.PropagateValueChanges;
                this._parent.EvTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.AvAmpsChanged -= this.PropagateValueChanges;
                this._parent.MaxAmpsChanged -= this.PropagateValueChanges;
                this._parent.MinAmpsChanged -= this.PropagateValueChanges;
                this._parent.AvVoltsChanged -= this.PropagateValueChanges;
                this._parent.MaxVoltsChanged -= this.PropagateValueChanges;
                this._parent.MinVoltsChanged -= this.PropagateValueChanges;
                this._parent.AvVAChanged -= this.PropagateValueChanges;
                this._parent.MaxVAChanged -= this.PropagateValueChanges;
                this._parent.MinVAChanged -= this.PropagateValueChanges;
                this._parent.AvWChanged -= this.PropagateValueChanges;
                this._parent.MaxWChanged -= this.PropagateValueChanges;
                this._parent.MinWChanged -= this.PropagateValueChanges;
                this._parent.AvVArChanged -= this.PropagateValueChanges;
                this._parent.MaxVArChanged -= this.PropagateValueChanges;
                this._parent.MinVArChanged -= this.PropagateValueChanges;
                this._parent.EvStrChanged -= this.PropagateValueChanges;
                this._parent.EvTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.AvAmps == null))
                {
                    IMV avAmpsCasted = item.As<IMV>();
                    if ((avAmpsCasted != null))
                    {
                        this._parent.AvAmps = avAmpsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxAmps == null))
                {
                    IMV maxAmpsCasted = item.As<IMV>();
                    if ((maxAmpsCasted != null))
                    {
                        this._parent.MaxAmps = maxAmpsCasted;
                        return;
                    }
                }
                if ((this._parent.MinAmps == null))
                {
                    IMV minAmpsCasted = item.As<IMV>();
                    if ((minAmpsCasted != null))
                    {
                        this._parent.MinAmps = minAmpsCasted;
                        return;
                    }
                }
                if ((this._parent.AvVolts == null))
                {
                    IMV avVoltsCasted = item.As<IMV>();
                    if ((avVoltsCasted != null))
                    {
                        this._parent.AvVolts = avVoltsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxVolts == null))
                {
                    IMV maxVoltsCasted = item.As<IMV>();
                    if ((maxVoltsCasted != null))
                    {
                        this._parent.MaxVolts = maxVoltsCasted;
                        return;
                    }
                }
                if ((this._parent.MinVolts == null))
                {
                    IMV minVoltsCasted = item.As<IMV>();
                    if ((minVoltsCasted != null))
                    {
                        this._parent.MinVolts = minVoltsCasted;
                        return;
                    }
                }
                if ((this._parent.AvVA == null))
                {
                    IMV avVACasted = item.As<IMV>();
                    if ((avVACasted != null))
                    {
                        this._parent.AvVA = avVACasted;
                        return;
                    }
                }
                if ((this._parent.MaxVA == null))
                {
                    IMV maxVACasted = item.As<IMV>();
                    if ((maxVACasted != null))
                    {
                        this._parent.MaxVA = maxVACasted;
                        return;
                    }
                }
                if ((this._parent.MinVA == null))
                {
                    IMV minVACasted = item.As<IMV>();
                    if ((minVACasted != null))
                    {
                        this._parent.MinVA = minVACasted;
                        return;
                    }
                }
                if ((this._parent.AvW == null))
                {
                    IMV avWCasted = item.As<IMV>();
                    if ((avWCasted != null))
                    {
                        this._parent.AvW = avWCasted;
                        return;
                    }
                }
                if ((this._parent.MaxW == null))
                {
                    IMV maxWCasted = item.As<IMV>();
                    if ((maxWCasted != null))
                    {
                        this._parent.MaxW = maxWCasted;
                        return;
                    }
                }
                if ((this._parent.MinW == null))
                {
                    IMV minWCasted = item.As<IMV>();
                    if ((minWCasted != null))
                    {
                        this._parent.MinW = minWCasted;
                        return;
                    }
                }
                if ((this._parent.AvVAr == null))
                {
                    IMV avVArCasted = item.As<IMV>();
                    if ((avVArCasted != null))
                    {
                        this._parent.AvVAr = avVArCasted;
                        return;
                    }
                }
                if ((this._parent.MaxVAr == null))
                {
                    IMV maxVArCasted = item.As<IMV>();
                    if ((maxVArCasted != null))
                    {
                        this._parent.MaxVAr = maxVArCasted;
                        return;
                    }
                }
                if ((this._parent.MinVAr == null))
                {
                    IMV minVArCasted = item.As<IMV>();
                    if ((minVArCasted != null))
                    {
                        this._parent.MinVAr = minVArCasted;
                        return;
                    }
                }
                if ((this._parent.EvStr == null))
                {
                    ISPC evStrCasted = item.As<ISPC>();
                    if ((evStrCasted != null))
                    {
                        this._parent.EvStr = evStrCasted;
                        return;
                    }
                }
                if ((this._parent.EvTmms == null))
                {
                    IASG evTmmsCasted = item.As<IASG>();
                    if ((evTmmsCasted != null))
                    {
                        this._parent.EvTmms = evTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.AvAmps = null;
                this._parent.MaxAmps = null;
                this._parent.MinAmps = null;
                this._parent.AvVolts = null;
                this._parent.MaxVolts = null;
                this._parent.MinVolts = null;
                this._parent.AvVA = null;
                this._parent.MaxVA = null;
                this._parent.MinVA = null;
                this._parent.AvW = null;
                this._parent.MaxW = null;
                this._parent.MinW = null;
                this._parent.AvVAr = null;
                this._parent.MaxVAr = null;
                this._parent.MinVAr = null;
                this._parent.EvStr = null;
                this._parent.EvTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.AvAmps))
                {
                    return true;
                }
                if ((item == this._parent.MaxAmps))
                {
                    return true;
                }
                if ((item == this._parent.MinAmps))
                {
                    return true;
                }
                if ((item == this._parent.AvVolts))
                {
                    return true;
                }
                if ((item == this._parent.MaxVolts))
                {
                    return true;
                }
                if ((item == this._parent.MinVolts))
                {
                    return true;
                }
                if ((item == this._parent.AvVA))
                {
                    return true;
                }
                if ((item == this._parent.MaxVA))
                {
                    return true;
                }
                if ((item == this._parent.MinVA))
                {
                    return true;
                }
                if ((item == this._parent.AvW))
                {
                    return true;
                }
                if ((item == this._parent.MaxW))
                {
                    return true;
                }
                if ((item == this._parent.MinW))
                {
                    return true;
                }
                if ((item == this._parent.AvVAr))
                {
                    return true;
                }
                if ((item == this._parent.MaxVAr))
                {
                    return true;
                }
                if ((item == this._parent.MinVAr))
                {
                    return true;
                }
                if ((item == this._parent.EvStr))
                {
                    return true;
                }
                if ((item == this._parent.EvTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AvAmps != null))
                {
                    array[arrayIndex] = this._parent.AvAmps;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxAmps != null))
                {
                    array[arrayIndex] = this._parent.MaxAmps;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinAmps != null))
                {
                    array[arrayIndex] = this._parent.MinAmps;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AvVolts != null))
                {
                    array[arrayIndex] = this._parent.AvVolts;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxVolts != null))
                {
                    array[arrayIndex] = this._parent.MaxVolts;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinVolts != null))
                {
                    array[arrayIndex] = this._parent.MinVolts;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AvVA != null))
                {
                    array[arrayIndex] = this._parent.AvVA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxVA != null))
                {
                    array[arrayIndex] = this._parent.MaxVA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinVA != null))
                {
                    array[arrayIndex] = this._parent.MinVA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AvW != null))
                {
                    array[arrayIndex] = this._parent.AvW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxW != null))
                {
                    array[arrayIndex] = this._parent.MaxW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinW != null))
                {
                    array[arrayIndex] = this._parent.MinW;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AvVAr != null))
                {
                    array[arrayIndex] = this._parent.AvVAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxVAr != null))
                {
                    array[arrayIndex] = this._parent.MaxVAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinVAr != null))
                {
                    array[arrayIndex] = this._parent.MinVAr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EvStr != null))
                {
                    array[arrayIndex] = this._parent.EvStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EvTmms != null))
                {
                    array[arrayIndex] = this._parent.EvTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.AvAmps == item))
                {
                    this._parent.AvAmps = null;
                    return true;
                }
                if ((this._parent.MaxAmps == item))
                {
                    this._parent.MaxAmps = null;
                    return true;
                }
                if ((this._parent.MinAmps == item))
                {
                    this._parent.MinAmps = null;
                    return true;
                }
                if ((this._parent.AvVolts == item))
                {
                    this._parent.AvVolts = null;
                    return true;
                }
                if ((this._parent.MaxVolts == item))
                {
                    this._parent.MaxVolts = null;
                    return true;
                }
                if ((this._parent.MinVolts == item))
                {
                    this._parent.MinVolts = null;
                    return true;
                }
                if ((this._parent.AvVA == item))
                {
                    this._parent.AvVA = null;
                    return true;
                }
                if ((this._parent.MaxVA == item))
                {
                    this._parent.MaxVA = null;
                    return true;
                }
                if ((this._parent.MinVA == item))
                {
                    this._parent.MinVA = null;
                    return true;
                }
                if ((this._parent.AvW == item))
                {
                    this._parent.AvW = null;
                    return true;
                }
                if ((this._parent.MaxW == item))
                {
                    this._parent.MaxW = null;
                    return true;
                }
                if ((this._parent.MinW == item))
                {
                    this._parent.MinW = null;
                    return true;
                }
                if ((this._parent.AvVAr == item))
                {
                    this._parent.AvVAr = null;
                    return true;
                }
                if ((this._parent.MaxVAr == item))
                {
                    this._parent.MaxVAr = null;
                    return true;
                }
                if ((this._parent.MinVAr == item))
                {
                    this._parent.MinVAr = null;
                    return true;
                }
                if ((this._parent.EvStr == item))
                {
                    this._parent.EvStr = null;
                    return true;
                }
                if ((this._parent.EvTmms == item))
                {
                    this._parent.EvTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.AvAmps).Concat(this._parent.MaxAmps).Concat(this._parent.MinAmps).Concat(this._parent.AvVolts).Concat(this._parent.MaxVolts).Concat(this._parent.MinVolts).Concat(this._parent.AvVA).Concat(this._parent.MaxVA).Concat(this._parent.MinVA).Concat(this._parent.AvW).Concat(this._parent.MaxW).Concat(this._parent.MinW).Concat(this._parent.AvVAr).Concat(this._parent.MaxVAr).Concat(this._parent.MinVAr).Concat(this._parent.EvStr).Concat(this._parent.EvTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMSTA, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMSTA modelElement) : 
                    base(modelElement, "EEHealth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMSTA, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMSTA modelElement) : 
                    base(modelElement, "EEName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AvAmps property
        /// </summary>
        private sealed class AvAmpsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvAmpsProxy(IMSTA modelElement) : 
                    base(modelElement, "AvAmps")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AvAmps;
                }
                set
                {
                    this.ModelElement.AvAmps = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxAmps property
        /// </summary>
        private sealed class MaxAmpsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxAmpsProxy(IMSTA modelElement) : 
                    base(modelElement, "MaxAmps")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MaxAmps;
                }
                set
                {
                    this.ModelElement.MaxAmps = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinAmps property
        /// </summary>
        private sealed class MinAmpsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinAmpsProxy(IMSTA modelElement) : 
                    base(modelElement, "MinAmps")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MinAmps;
                }
                set
                {
                    this.ModelElement.MinAmps = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AvVolts property
        /// </summary>
        private sealed class AvVoltsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvVoltsProxy(IMSTA modelElement) : 
                    base(modelElement, "AvVolts")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AvVolts;
                }
                set
                {
                    this.ModelElement.AvVolts = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxVolts property
        /// </summary>
        private sealed class MaxVoltsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxVoltsProxy(IMSTA modelElement) : 
                    base(modelElement, "MaxVolts")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MaxVolts;
                }
                set
                {
                    this.ModelElement.MaxVolts = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinVolts property
        /// </summary>
        private sealed class MinVoltsProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinVoltsProxy(IMSTA modelElement) : 
                    base(modelElement, "MinVolts")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MinVolts;
                }
                set
                {
                    this.ModelElement.MinVolts = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AvVA property
        /// </summary>
        private sealed class AvVAProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvVAProxy(IMSTA modelElement) : 
                    base(modelElement, "AvVA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AvVA;
                }
                set
                {
                    this.ModelElement.AvVA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxVA property
        /// </summary>
        private sealed class MaxVAProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxVAProxy(IMSTA modelElement) : 
                    base(modelElement, "MaxVA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MaxVA;
                }
                set
                {
                    this.ModelElement.MaxVA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinVA property
        /// </summary>
        private sealed class MinVAProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinVAProxy(IMSTA modelElement) : 
                    base(modelElement, "MinVA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MinVA;
                }
                set
                {
                    this.ModelElement.MinVA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AvW property
        /// </summary>
        private sealed class AvWProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvWProxy(IMSTA modelElement) : 
                    base(modelElement, "AvW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AvW;
                }
                set
                {
                    this.ModelElement.AvW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxW property
        /// </summary>
        private sealed class MaxWProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxWProxy(IMSTA modelElement) : 
                    base(modelElement, "MaxW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MaxW;
                }
                set
                {
                    this.ModelElement.MaxW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinW property
        /// </summary>
        private sealed class MinWProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinWProxy(IMSTA modelElement) : 
                    base(modelElement, "MinW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MinW;
                }
                set
                {
                    this.ModelElement.MinW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AvVAr property
        /// </summary>
        private sealed class AvVArProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvVArProxy(IMSTA modelElement) : 
                    base(modelElement, "AvVAr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.AvVAr;
                }
                set
                {
                    this.ModelElement.AvVAr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxVAr property
        /// </summary>
        private sealed class MaxVArProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxVArProxy(IMSTA modelElement) : 
                    base(modelElement, "MaxVAr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MaxVAr;
                }
                set
                {
                    this.ModelElement.MaxVAr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinVAr property
        /// </summary>
        private sealed class MinVArProxy : ModelPropertyChange<IMSTA, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinVArProxy(IMSTA modelElement) : 
                    base(modelElement, "MinVAr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.MinVAr;
                }
                set
                {
                    this.ModelElement.MinVAr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EvStr property
        /// </summary>
        private sealed class EvStrProxy : ModelPropertyChange<IMSTA, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EvStrProxy(IMSTA modelElement) : 
                    base(modelElement, "EvStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.EvStr;
                }
                set
                {
                    this.ModelElement.EvStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EvTmms property
        /// </summary>
        private sealed class EvTmmsProxy : ModelPropertyChange<IMSTA, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EvTmmsProxy(IMSTA modelElement) : 
                    base(modelElement, "EvTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.EvTmms;
                }
                set
                {
                    this.ModelElement.EvTmms = value;
                }
            }
        }
    }
}

