//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The public interface for MHAN
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MHAN))]
    [XmlDefaultImplementationTypeAttribute(typeof(MHAN))]
    public interface IMHAN : IModelElement, IGroupM
    {
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        Nullable<HealthStateKind> EEHealth
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        IDPL EEName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Hz property
        /// </summary>
        IMV Hz
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaAmp property
        /// </summary>
        IHMV HaAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaVol property
        /// </summary>
        IHMV HaVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaWatt property
        /// </summary>
        IHMV HaWatt
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaVolAmpr property
        /// </summary>
        IHMV HaVolAmpr
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaVolAmp property
        /// </summary>
        IHMV HaVolAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaRmsAmp property
        /// </summary>
        IMV HaRmsAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaRmsVol property
        /// </summary>
        IMV HaRmsVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaTuWatt property
        /// </summary>
        IMV HaTuWatt
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaTsWatt property
        /// </summary>
        IMV HaTsWatt
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaAmpTm property
        /// </summary>
        IMV HaAmpTm
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaKFact property
        /// </summary>
        IMV HaKFact
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaTdFact property
        /// </summary>
        IMV HaTdFact
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdAmp property
        /// </summary>
        IMV ThdAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdOddAmp property
        /// </summary>
        IMV ThdOddAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdEvnAmp property
        /// </summary>
        IMV ThdEvnAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TddAmp property
        /// </summary>
        IMV TddAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TddOddAmp property
        /// </summary>
        IMV TddOddAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TddEvnAmp property
        /// </summary>
        IMV TddEvnAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdVol property
        /// </summary>
        IMV ThdVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdOddVol property
        /// </summary>
        IMV ThdOddVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdEvnVol property
        /// </summary>
        IMV ThdEvnVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaCfAmp property
        /// </summary>
        IMV HaCfAmp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaCfVol property
        /// </summary>
        IMV HaCfVol
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HaTiFact property
        /// </summary>
        IMV HaTiFact
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HzSet property
        /// </summary>
        IASG HzSet
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EvTmms property
        /// </summary>
        IASG EvTmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NumCyc property
        /// </summary>
        IING NumCyc
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdAVal property
        /// </summary>
        IASG ThdAVal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdVVal property
        /// </summary>
        IASG ThdVVal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdATmms property
        /// </summary>
        IING ThdATmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThdVTmms property
        /// </summary>
        IING ThdVTmms
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NomA property
        /// </summary>
        IASG NomA
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the Hz property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzChanging;
        
        /// <summary>
        /// Gets fired when the Hz property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzChanged;
        
        /// <summary>
        /// Gets fired before the HaAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolChanging;
        
        /// <summary>
        /// Gets fired when the HaVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolChanged;
        
        /// <summary>
        /// Gets fired before the HaWatt property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaWattChanging;
        
        /// <summary>
        /// Gets fired when the HaWatt property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaWattChanged;
        
        /// <summary>
        /// Gets fired before the HaVolAmpr property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolAmprChanging;
        
        /// <summary>
        /// Gets fired when the HaVolAmpr property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolAmprChanged;
        
        /// <summary>
        /// Gets fired before the HaVolAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaVolAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaVolAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaRmsAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaRmsAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaRmsAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaRmsAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaRmsVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaRmsVolChanging;
        
        /// <summary>
        /// Gets fired when the HaRmsVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaRmsVolChanged;
        
        /// <summary>
        /// Gets fired before the HaTuWatt property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTuWattChanging;
        
        /// <summary>
        /// Gets fired when the HaTuWatt property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTuWattChanged;
        
        /// <summary>
        /// Gets fired before the HaTsWatt property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTsWattChanging;
        
        /// <summary>
        /// Gets fired when the HaTsWatt property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTsWattChanged;
        
        /// <summary>
        /// Gets fired before the HaAmpTm property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaAmpTmChanging;
        
        /// <summary>
        /// Gets fired when the HaAmpTm property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaAmpTmChanged;
        
        /// <summary>
        /// Gets fired before the HaKFact property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaKFactChanging;
        
        /// <summary>
        /// Gets fired when the HaKFact property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaKFactChanged;
        
        /// <summary>
        /// Gets fired before the HaTdFact property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTdFactChanging;
        
        /// <summary>
        /// Gets fired when the HaTdFact property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTdFactChanged;
        
        /// <summary>
        /// Gets fired before the ThdAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdOddAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdOddAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdEvnAmpChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdEvnAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddOddAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddOddAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddOddAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddOddAmpChanged;
        
        /// <summary>
        /// Gets fired before the TddEvnAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddEvnAmpChanging;
        
        /// <summary>
        /// Gets fired when the TddEvnAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TddEvnAmpChanged;
        
        /// <summary>
        /// Gets fired before the ThdVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVolChanged;
        
        /// <summary>
        /// Gets fired before the ThdOddVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdOddVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdOddVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdOddVolChanged;
        
        /// <summary>
        /// Gets fired before the ThdEvnVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdEvnVolChanging;
        
        /// <summary>
        /// Gets fired when the ThdEvnVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdEvnVolChanged;
        
        /// <summary>
        /// Gets fired before the HaCfAmp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaCfAmpChanging;
        
        /// <summary>
        /// Gets fired when the HaCfAmp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaCfAmpChanged;
        
        /// <summary>
        /// Gets fired before the HaCfVol property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaCfVolChanging;
        
        /// <summary>
        /// Gets fired when the HaCfVol property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaCfVolChanged;
        
        /// <summary>
        /// Gets fired before the HaTiFact property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTiFactChanging;
        
        /// <summary>
        /// Gets fired when the HaTiFact property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HaTiFactChanged;
        
        /// <summary>
        /// Gets fired before the HzSet property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzSetChanging;
        
        /// <summary>
        /// Gets fired when the HzSet property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HzSetChanged;
        
        /// <summary>
        /// Gets fired before the EvTmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvTmmsChanging;
        
        /// <summary>
        /// Gets fired when the EvTmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EvTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NumCyc property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanging;
        
        /// <summary>
        /// Gets fired when the NumCyc property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NumCycChanged;
        
        /// <summary>
        /// Gets fired before the ThdAVal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdAValChanging;
        
        /// <summary>
        /// Gets fired when the ThdAVal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdAValChanged;
        
        /// <summary>
        /// Gets fired before the ThdVVal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVValChanging;
        
        /// <summary>
        /// Gets fired when the ThdVVal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVValChanged;
        
        /// <summary>
        /// Gets fired before the ThdATmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdATmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdATmmsChanged;
        
        /// <summary>
        /// Gets fired before the ThdVTmms property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanging;
        
        /// <summary>
        /// Gets fired when the ThdVTmms property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThdVTmmsChanged;
        
        /// <summary>
        /// Gets fired before the NomA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomAChanging;
        
        /// <summary>
        /// Gets fired when the NomA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomAChanged;
    }
}

