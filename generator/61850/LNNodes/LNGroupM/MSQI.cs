//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM
{
    
    
    /// <summary>
    /// The default implementation of the MSQI class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pM")]
    [XmlNamespacePrefixAttribute("groupm")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupM/MSQI")]
    public partial class MSQI : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupM.GroupM, IMSQI, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        private static Lazy<ITypedElement> _eEHealthAttribute = new Lazy<ITypedElement>(RetrieveEEHealthAttribute);
        
        private static Lazy<ITypedElement> _eENameReference = new Lazy<ITypedElement>(RetrieveEENameReference);
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        private static Lazy<ITypedElement> _seqAReference = new Lazy<ITypedElement>(RetrieveSeqAReference);
        
        /// <summary>
        /// The backing field for the SeqA property
        /// </summary>
        private ISEQ _seqA;
        
        private static Lazy<ITypedElement> _seqVReference = new Lazy<ITypedElement>(RetrieveSeqVReference);
        
        /// <summary>
        /// The backing field for the SeqV property
        /// </summary>
        private ISEQ _seqV;
        
        private static Lazy<ITypedElement> _dQ0SeqReference = new Lazy<ITypedElement>(RetrieveDQ0SeqReference);
        
        /// <summary>
        /// The backing field for the DQ0Seq property
        /// </summary>
        private ISEQ _dQ0Seq;
        
        private static Lazy<ITypedElement> _imbAReference = new Lazy<ITypedElement>(RetrieveImbAReference);
        
        /// <summary>
        /// The backing field for the ImbA property
        /// </summary>
        private IWYE _imbA;
        
        private static Lazy<ITypedElement> _imbNgAReference = new Lazy<ITypedElement>(RetrieveImbNgAReference);
        
        /// <summary>
        /// The backing field for the ImbNgA property
        /// </summary>
        private IMV _imbNgA;
        
        private static Lazy<ITypedElement> _imbNgVReference = new Lazy<ITypedElement>(RetrieveImbNgVReference);
        
        /// <summary>
        /// The backing field for the ImbNgV property
        /// </summary>
        private IMV _imbNgV;
        
        private static Lazy<ITypedElement> _imbPPVReference = new Lazy<ITypedElement>(RetrieveImbPPVReference);
        
        /// <summary>
        /// The backing field for the ImbPPV property
        /// </summary>
        private IDEL _imbPPV;
        
        private static Lazy<ITypedElement> _imbVReference = new Lazy<ITypedElement>(RetrieveImbVReference);
        
        /// <summary>
        /// The backing field for the ImbV property
        /// </summary>
        private IMV _imbV;
        
        private static Lazy<ITypedElement> _imbZroAReference = new Lazy<ITypedElement>(RetrieveImbZroAReference);
        
        /// <summary>
        /// The backing field for the ImbZroA property
        /// </summary>
        private IMV _imbZroA;
        
        private static Lazy<ITypedElement> _imbZroVReference = new Lazy<ITypedElement>(RetrieveImbZroVReference);
        
        /// <summary>
        /// The backing field for the ImbZroV property
        /// </summary>
        private IMV _imbZroV;
        
        private static Lazy<ITypedElement> _maxImbAReference = new Lazy<ITypedElement>(RetrieveMaxImbAReference);
        
        /// <summary>
        /// The backing field for the MaxImbA property
        /// </summary>
        private IWYE _maxImbA;
        
        private static Lazy<ITypedElement> _maxImbPPVReference = new Lazy<ITypedElement>(RetrieveMaxImbPPVReference);
        
        /// <summary>
        /// The backing field for the MaxImbPPV property
        /// </summary>
        private IWYE _maxImbPPV;
        
        private static Lazy<ITypedElement> _maxImbVReference = new Lazy<ITypedElement>(RetrieveMaxImbVReference);
        
        /// <summary>
        /// The backing field for the MaxImbV property
        /// </summary>
        private IWYE _maxImbV;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e, _eEHealthAttribute);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e, _eEHealthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e, _eENameReference);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e, _eENameReference);
                }
            }
        }
        
        /// <summary>
        /// The SeqA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISEQ SeqA
        {
            get
            {
                return this._seqA;
            }
            set
            {
                if ((this._seqA != value))
                {
                    ISEQ old = this._seqA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeqAChanging(e);
                    this.OnPropertyChanging("SeqA", e, _seqAReference);
                    this._seqA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSeqA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSeqA;
                    }
                    this.OnSeqAChanged(e);
                    this.OnPropertyChanged("SeqA", e, _seqAReference);
                }
            }
        }
        
        /// <summary>
        /// The SeqV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISEQ SeqV
        {
            get
            {
                return this._seqV;
            }
            set
            {
                if ((this._seqV != value))
                {
                    ISEQ old = this._seqV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeqVChanging(e);
                    this.OnPropertyChanging("SeqV", e, _seqVReference);
                    this._seqV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSeqV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSeqV;
                    }
                    this.OnSeqVChanged(e);
                    this.OnPropertyChanged("SeqV", e, _seqVReference);
                }
            }
        }
        
        /// <summary>
        /// The DQ0Seq property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISEQ DQ0Seq
        {
            get
            {
                return this._dQ0Seq;
            }
            set
            {
                if ((this._dQ0Seq != value))
                {
                    ISEQ old = this._dQ0Seq;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDQ0SeqChanging(e);
                    this.OnPropertyChanging("DQ0Seq", e, _dQ0SeqReference);
                    this._dQ0Seq = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDQ0Seq;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDQ0Seq;
                    }
                    this.OnDQ0SeqChanged(e);
                    this.OnPropertyChanged("DQ0Seq", e, _dQ0SeqReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE ImbA
        {
            get
            {
                return this._imbA;
            }
            set
            {
                if ((this._imbA != value))
                {
                    IWYE old = this._imbA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbAChanging(e);
                    this.OnPropertyChanging("ImbA", e, _imbAReference);
                    this._imbA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbA;
                    }
                    this.OnImbAChanged(e);
                    this.OnPropertyChanged("ImbA", e, _imbAReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbNgA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ImbNgA
        {
            get
            {
                return this._imbNgA;
            }
            set
            {
                if ((this._imbNgA != value))
                {
                    IMV old = this._imbNgA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbNgAChanging(e);
                    this.OnPropertyChanging("ImbNgA", e, _imbNgAReference);
                    this._imbNgA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbNgA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbNgA;
                    }
                    this.OnImbNgAChanged(e);
                    this.OnPropertyChanged("ImbNgA", e, _imbNgAReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbNgV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ImbNgV
        {
            get
            {
                return this._imbNgV;
            }
            set
            {
                if ((this._imbNgV != value))
                {
                    IMV old = this._imbNgV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbNgVChanging(e);
                    this.OnPropertyChanging("ImbNgV", e, _imbNgVReference);
                    this._imbNgV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbNgV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbNgV;
                    }
                    this.OnImbNgVChanged(e);
                    this.OnPropertyChanged("ImbNgV", e, _imbNgVReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDEL ImbPPV
        {
            get
            {
                return this._imbPPV;
            }
            set
            {
                if ((this._imbPPV != value))
                {
                    IDEL old = this._imbPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbPPVChanging(e);
                    this.OnPropertyChanging("ImbPPV", e, _imbPPVReference);
                    this._imbPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbPPV;
                    }
                    this.OnImbPPVChanged(e);
                    this.OnPropertyChanged("ImbPPV", e, _imbPPVReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ImbV
        {
            get
            {
                return this._imbV;
            }
            set
            {
                if ((this._imbV != value))
                {
                    IMV old = this._imbV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbVChanging(e);
                    this.OnPropertyChanging("ImbV", e, _imbVReference);
                    this._imbV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbV;
                    }
                    this.OnImbVChanged(e);
                    this.OnPropertyChanged("ImbV", e, _imbVReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbZroA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ImbZroA
        {
            get
            {
                return this._imbZroA;
            }
            set
            {
                if ((this._imbZroA != value))
                {
                    IMV old = this._imbZroA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbZroAChanging(e);
                    this.OnPropertyChanging("ImbZroA", e, _imbZroAReference);
                    this._imbZroA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbZroA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbZroA;
                    }
                    this.OnImbZroAChanged(e);
                    this.OnPropertyChanged("ImbZroA", e, _imbZroAReference);
                }
            }
        }
        
        /// <summary>
        /// The ImbZroV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV ImbZroV
        {
            get
            {
                return this._imbZroV;
            }
            set
            {
                if ((this._imbZroV != value))
                {
                    IMV old = this._imbZroV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImbZroVChanging(e);
                    this.OnPropertyChanging("ImbZroV", e, _imbZroVReference);
                    this._imbZroV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImbZroV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImbZroV;
                    }
                    this.OnImbZroVChanged(e);
                    this.OnPropertyChanged("ImbZroV", e, _imbZroVReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxImbA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE MaxImbA
        {
            get
            {
                return this._maxImbA;
            }
            set
            {
                if ((this._maxImbA != value))
                {
                    IWYE old = this._maxImbA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxImbAChanging(e);
                    this.OnPropertyChanging("MaxImbA", e, _maxImbAReference);
                    this._maxImbA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxImbA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxImbA;
                    }
                    this.OnMaxImbAChanged(e);
                    this.OnPropertyChanged("MaxImbA", e, _maxImbAReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxImbPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE MaxImbPPV
        {
            get
            {
                return this._maxImbPPV;
            }
            set
            {
                if ((this._maxImbPPV != value))
                {
                    IWYE old = this._maxImbPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxImbPPVChanging(e);
                    this.OnPropertyChanging("MaxImbPPV", e, _maxImbPPVReference);
                    this._maxImbPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxImbPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxImbPPV;
                    }
                    this.OnMaxImbPPVChanged(e);
                    this.OnPropertyChanged("MaxImbPPV", e, _maxImbPPVReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxImbV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IWYE MaxImbV
        {
            get
            {
                return this._maxImbV;
            }
            set
            {
                if ((this._maxImbV != value))
                {
                    IWYE old = this._maxImbV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxImbVChanging(e);
                    this.OnPropertyChanging("MaxImbV", e, _maxImbVReference);
                    this._maxImbV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxImbV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxImbV;
                    }
                    this.OnMaxImbVChanged(e);
                    this.OnPropertyChanged("MaxImbV", e, _maxImbVReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MSQIReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupM/MSQI")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the SeqA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeqAChanging;
        
        /// <summary>
        /// Gets fired when the SeqA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeqAChanged;
        
        /// <summary>
        /// Gets fired before the SeqV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeqVChanging;
        
        /// <summary>
        /// Gets fired when the SeqV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeqVChanged;
        
        /// <summary>
        /// Gets fired before the DQ0Seq property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DQ0SeqChanging;
        
        /// <summary>
        /// Gets fired when the DQ0Seq property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DQ0SeqChanged;
        
        /// <summary>
        /// Gets fired before the ImbA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbAChanging;
        
        /// <summary>
        /// Gets fired when the ImbA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbAChanged;
        
        /// <summary>
        /// Gets fired before the ImbNgA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbNgAChanging;
        
        /// <summary>
        /// Gets fired when the ImbNgA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbNgAChanged;
        
        /// <summary>
        /// Gets fired before the ImbNgV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbNgVChanging;
        
        /// <summary>
        /// Gets fired when the ImbNgV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbNgVChanged;
        
        /// <summary>
        /// Gets fired before the ImbPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbPPVChanging;
        
        /// <summary>
        /// Gets fired when the ImbPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbPPVChanged;
        
        /// <summary>
        /// Gets fired before the ImbV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbVChanging;
        
        /// <summary>
        /// Gets fired when the ImbV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbVChanged;
        
        /// <summary>
        /// Gets fired before the ImbZroA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbZroAChanging;
        
        /// <summary>
        /// Gets fired when the ImbZroA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbZroAChanged;
        
        /// <summary>
        /// Gets fired before the ImbZroV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbZroVChanging;
        
        /// <summary>
        /// Gets fired when the ImbZroV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImbZroVChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbAChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbAChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbPPVChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbPPVChanged;
        
        /// <summary>
        /// Gets fired before the MaxImbV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbVChanging;
        
        /// <summary>
        /// Gets fired when the MaxImbV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxImbVChanged;
        
        private static ITypedElement RetrieveEEHealthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("EEHealth")));
        }
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEENameReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("EEName")));
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        private static ITypedElement RetrieveSeqAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("SeqA")));
        }
        
        /// <summary>
        /// Raises the SeqAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeqAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeqAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeqAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeqAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeqAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SeqA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSeqA(object sender, System.EventArgs eventArgs)
        {
            this.SeqA = null;
        }
        
        private static ITypedElement RetrieveSeqVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("SeqV")));
        }
        
        /// <summary>
        /// Raises the SeqVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeqVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeqVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeqVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeqVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeqVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SeqV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSeqV(object sender, System.EventArgs eventArgs)
        {
            this.SeqV = null;
        }
        
        private static ITypedElement RetrieveDQ0SeqReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("DQ0Seq")));
        }
        
        /// <summary>
        /// Raises the DQ0SeqChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDQ0SeqChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DQ0SeqChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DQ0SeqChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDQ0SeqChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DQ0SeqChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DQ0Seq property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDQ0Seq(object sender, System.EventArgs eventArgs)
        {
            this.DQ0Seq = null;
        }
        
        private static ITypedElement RetrieveImbAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbA")));
        }
        
        /// <summary>
        /// Raises the ImbAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbA(object sender, System.EventArgs eventArgs)
        {
            this.ImbA = null;
        }
        
        private static ITypedElement RetrieveImbNgAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbNgA")));
        }
        
        /// <summary>
        /// Raises the ImbNgAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbNgAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbNgAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbNgAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbNgAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbNgAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbNgA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbNgA(object sender, System.EventArgs eventArgs)
        {
            this.ImbNgA = null;
        }
        
        private static ITypedElement RetrieveImbNgVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbNgV")));
        }
        
        /// <summary>
        /// Raises the ImbNgVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbNgVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbNgVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbNgVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbNgVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbNgVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbNgV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbNgV(object sender, System.EventArgs eventArgs)
        {
            this.ImbNgV = null;
        }
        
        private static ITypedElement RetrieveImbPPVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbPPV")));
        }
        
        /// <summary>
        /// Raises the ImbPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbPPV(object sender, System.EventArgs eventArgs)
        {
            this.ImbPPV = null;
        }
        
        private static ITypedElement RetrieveImbVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbV")));
        }
        
        /// <summary>
        /// Raises the ImbVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbV(object sender, System.EventArgs eventArgs)
        {
            this.ImbV = null;
        }
        
        private static ITypedElement RetrieveImbZroAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbZroA")));
        }
        
        /// <summary>
        /// Raises the ImbZroAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbZroAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbZroAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbZroAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbZroAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbZroAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbZroA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbZroA(object sender, System.EventArgs eventArgs)
        {
            this.ImbZroA = null;
        }
        
        private static ITypedElement RetrieveImbZroVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("ImbZroV")));
        }
        
        /// <summary>
        /// Raises the ImbZroVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbZroVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbZroVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImbZroVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImbZroVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImbZroVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImbZroV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImbZroV(object sender, System.EventArgs eventArgs)
        {
            this.ImbZroV = null;
        }
        
        private static ITypedElement RetrieveMaxImbAReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("MaxImbA")));
        }
        
        /// <summary>
        /// Raises the MaxImbAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxImbAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxImbA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxImbA(object sender, System.EventArgs eventArgs)
        {
            this.MaxImbA = null;
        }
        
        private static ITypedElement RetrieveMaxImbPPVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("MaxImbPPV")));
        }
        
        /// <summary>
        /// Raises the MaxImbPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxImbPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxImbPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxImbPPV(object sender, System.EventArgs eventArgs)
        {
            this.MaxImbPPV = null;
        }
        
        private static ITypedElement RetrieveMaxImbVReference()
        {
            return ((ITypedElement)(((ModelElement)(MSQI.ClassInstance)).Resolve("MaxImbV")));
        }
        
        /// <summary>
        /// Raises the MaxImbVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxImbVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxImbVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxImbVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxImbV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxImbV(object sender, System.EventArgs eventArgs)
        {
            this.MaxImbV = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "SEQA"))
            {
                this.SeqA = ((ISEQ)(value));
                return;
            }
            if ((feature == "SEQV"))
            {
                this.SeqV = ((ISEQ)(value));
                return;
            }
            if ((feature == "DQ0SEQ"))
            {
                this.DQ0Seq = ((ISEQ)(value));
                return;
            }
            if ((feature == "IMBA"))
            {
                this.ImbA = ((IWYE)(value));
                return;
            }
            if ((feature == "IMBNGA"))
            {
                this.ImbNgA = ((IMV)(value));
                return;
            }
            if ((feature == "IMBNGV"))
            {
                this.ImbNgV = ((IMV)(value));
                return;
            }
            if ((feature == "IMBPPV"))
            {
                this.ImbPPV = ((IDEL)(value));
                return;
            }
            if ((feature == "IMBV"))
            {
                this.ImbV = ((IMV)(value));
                return;
            }
            if ((feature == "IMBZROA"))
            {
                this.ImbZroA = ((IMV)(value));
                return;
            }
            if ((feature == "IMBZROV"))
            {
                this.ImbZroV = ((IMV)(value));
                return;
            }
            if ((feature == "MAXIMBA"))
            {
                this.MaxImbA = ((IWYE)(value));
                return;
            }
            if ((feature == "MAXIMBPPV"))
            {
                this.MaxImbPPV = ((IWYE)(value));
                return;
            }
            if ((feature == "MAXIMBV"))
            {
                this.MaxImbV = ((IWYE)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "SeqA"))
            {
                return new SeqAProxy(this);
            }
            if ((attribute == "SeqV"))
            {
                return new SeqVProxy(this);
            }
            if ((attribute == "DQ0Seq"))
            {
                return new DQ0SeqProxy(this);
            }
            if ((attribute == "ImbA"))
            {
                return new ImbAProxy(this);
            }
            if ((attribute == "ImbNgA"))
            {
                return new ImbNgAProxy(this);
            }
            if ((attribute == "ImbNgV"))
            {
                return new ImbNgVProxy(this);
            }
            if ((attribute == "ImbPPV"))
            {
                return new ImbPPVProxy(this);
            }
            if ((attribute == "ImbV"))
            {
                return new ImbVProxy(this);
            }
            if ((attribute == "ImbZroA"))
            {
                return new ImbZroAProxy(this);
            }
            if ((attribute == "ImbZroV"))
            {
                return new ImbZroVProxy(this);
            }
            if ((attribute == "MaxImbA"))
            {
                return new MaxImbAProxy(this);
            }
            if ((attribute == "MaxImbPPV"))
            {
                return new MaxImbPPVProxy(this);
            }
            if ((attribute == "MaxImbV"))
            {
                return new MaxImbVProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "SeqA"))
            {
                return new SeqAProxy(this);
            }
            if ((reference == "SeqV"))
            {
                return new SeqVProxy(this);
            }
            if ((reference == "DQ0Seq"))
            {
                return new DQ0SeqProxy(this);
            }
            if ((reference == "ImbA"))
            {
                return new ImbAProxy(this);
            }
            if ((reference == "ImbNgA"))
            {
                return new ImbNgAProxy(this);
            }
            if ((reference == "ImbNgV"))
            {
                return new ImbNgVProxy(this);
            }
            if ((reference == "ImbPPV"))
            {
                return new ImbPPVProxy(this);
            }
            if ((reference == "ImbV"))
            {
                return new ImbVProxy(this);
            }
            if ((reference == "ImbZroA"))
            {
                return new ImbZroAProxy(this);
            }
            if ((reference == "ImbZroV"))
            {
                return new ImbZroVProxy(this);
            }
            if ((reference == "MaxImbA"))
            {
                return new MaxImbAProxy(this);
            }
            if ((reference == "MaxImbPPV"))
            {
                return new MaxImbPPVProxy(this);
            }
            if ((reference == "MaxImbV"))
            {
                return new MaxImbVProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupM/MSQI")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MSQI class
        /// </summary>
        public class MSQIReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MSQI _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MSQIReferencedElementsCollection(MSQI parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SeqA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SeqV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DQ0Seq != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbNgA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbNgV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbZroA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImbZroV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxImbA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxImbPPV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxImbV != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.SeqAChanged += this.PropagateValueChanges;
                this._parent.SeqVChanged += this.PropagateValueChanges;
                this._parent.DQ0SeqChanged += this.PropagateValueChanges;
                this._parent.ImbAChanged += this.PropagateValueChanges;
                this._parent.ImbNgAChanged += this.PropagateValueChanges;
                this._parent.ImbNgVChanged += this.PropagateValueChanges;
                this._parent.ImbPPVChanged += this.PropagateValueChanges;
                this._parent.ImbVChanged += this.PropagateValueChanges;
                this._parent.ImbZroAChanged += this.PropagateValueChanges;
                this._parent.ImbZroVChanged += this.PropagateValueChanges;
                this._parent.MaxImbAChanged += this.PropagateValueChanges;
                this._parent.MaxImbPPVChanged += this.PropagateValueChanges;
                this._parent.MaxImbVChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.SeqAChanged -= this.PropagateValueChanges;
                this._parent.SeqVChanged -= this.PropagateValueChanges;
                this._parent.DQ0SeqChanged -= this.PropagateValueChanges;
                this._parent.ImbAChanged -= this.PropagateValueChanges;
                this._parent.ImbNgAChanged -= this.PropagateValueChanges;
                this._parent.ImbNgVChanged -= this.PropagateValueChanges;
                this._parent.ImbPPVChanged -= this.PropagateValueChanges;
                this._parent.ImbVChanged -= this.PropagateValueChanges;
                this._parent.ImbZroAChanged -= this.PropagateValueChanges;
                this._parent.ImbZroVChanged -= this.PropagateValueChanges;
                this._parent.MaxImbAChanged -= this.PropagateValueChanges;
                this._parent.MaxImbPPVChanged -= this.PropagateValueChanges;
                this._parent.MaxImbVChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.SeqA == null))
                {
                    ISEQ seqACasted = item.As<ISEQ>();
                    if ((seqACasted != null))
                    {
                        this._parent.SeqA = seqACasted;
                        return;
                    }
                }
                if ((this._parent.SeqV == null))
                {
                    ISEQ seqVCasted = item.As<ISEQ>();
                    if ((seqVCasted != null))
                    {
                        this._parent.SeqV = seqVCasted;
                        return;
                    }
                }
                if ((this._parent.DQ0Seq == null))
                {
                    ISEQ dQ0SeqCasted = item.As<ISEQ>();
                    if ((dQ0SeqCasted != null))
                    {
                        this._parent.DQ0Seq = dQ0SeqCasted;
                        return;
                    }
                }
                if ((this._parent.ImbA == null))
                {
                    IWYE imbACasted = item.As<IWYE>();
                    if ((imbACasted != null))
                    {
                        this._parent.ImbA = imbACasted;
                        return;
                    }
                }
                if ((this._parent.ImbNgA == null))
                {
                    IMV imbNgACasted = item.As<IMV>();
                    if ((imbNgACasted != null))
                    {
                        this._parent.ImbNgA = imbNgACasted;
                        return;
                    }
                }
                if ((this._parent.ImbNgV == null))
                {
                    IMV imbNgVCasted = item.As<IMV>();
                    if ((imbNgVCasted != null))
                    {
                        this._parent.ImbNgV = imbNgVCasted;
                        return;
                    }
                }
                if ((this._parent.ImbPPV == null))
                {
                    IDEL imbPPVCasted = item.As<IDEL>();
                    if ((imbPPVCasted != null))
                    {
                        this._parent.ImbPPV = imbPPVCasted;
                        return;
                    }
                }
                if ((this._parent.ImbV == null))
                {
                    IMV imbVCasted = item.As<IMV>();
                    if ((imbVCasted != null))
                    {
                        this._parent.ImbV = imbVCasted;
                        return;
                    }
                }
                if ((this._parent.ImbZroA == null))
                {
                    IMV imbZroACasted = item.As<IMV>();
                    if ((imbZroACasted != null))
                    {
                        this._parent.ImbZroA = imbZroACasted;
                        return;
                    }
                }
                if ((this._parent.ImbZroV == null))
                {
                    IMV imbZroVCasted = item.As<IMV>();
                    if ((imbZroVCasted != null))
                    {
                        this._parent.ImbZroV = imbZroVCasted;
                        return;
                    }
                }
                if ((this._parent.MaxImbA == null))
                {
                    IWYE maxImbACasted = item.As<IWYE>();
                    if ((maxImbACasted != null))
                    {
                        this._parent.MaxImbA = maxImbACasted;
                        return;
                    }
                }
                if ((this._parent.MaxImbPPV == null))
                {
                    IWYE maxImbPPVCasted = item.As<IWYE>();
                    if ((maxImbPPVCasted != null))
                    {
                        this._parent.MaxImbPPV = maxImbPPVCasted;
                        return;
                    }
                }
                if ((this._parent.MaxImbV == null))
                {
                    IWYE maxImbVCasted = item.As<IWYE>();
                    if ((maxImbVCasted != null))
                    {
                        this._parent.MaxImbV = maxImbVCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEName = null;
                this._parent.SeqA = null;
                this._parent.SeqV = null;
                this._parent.DQ0Seq = null;
                this._parent.ImbA = null;
                this._parent.ImbNgA = null;
                this._parent.ImbNgV = null;
                this._parent.ImbPPV = null;
                this._parent.ImbV = null;
                this._parent.ImbZroA = null;
                this._parent.ImbZroV = null;
                this._parent.MaxImbA = null;
                this._parent.MaxImbPPV = null;
                this._parent.MaxImbV = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.SeqA))
                {
                    return true;
                }
                if ((item == this._parent.SeqV))
                {
                    return true;
                }
                if ((item == this._parent.DQ0Seq))
                {
                    return true;
                }
                if ((item == this._parent.ImbA))
                {
                    return true;
                }
                if ((item == this._parent.ImbNgA))
                {
                    return true;
                }
                if ((item == this._parent.ImbNgV))
                {
                    return true;
                }
                if ((item == this._parent.ImbPPV))
                {
                    return true;
                }
                if ((item == this._parent.ImbV))
                {
                    return true;
                }
                if ((item == this._parent.ImbZroA))
                {
                    return true;
                }
                if ((item == this._parent.ImbZroV))
                {
                    return true;
                }
                if ((item == this._parent.MaxImbA))
                {
                    return true;
                }
                if ((item == this._parent.MaxImbPPV))
                {
                    return true;
                }
                if ((item == this._parent.MaxImbV))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SeqA != null))
                {
                    array[arrayIndex] = this._parent.SeqA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SeqV != null))
                {
                    array[arrayIndex] = this._parent.SeqV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DQ0Seq != null))
                {
                    array[arrayIndex] = this._parent.DQ0Seq;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbA != null))
                {
                    array[arrayIndex] = this._parent.ImbA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbNgA != null))
                {
                    array[arrayIndex] = this._parent.ImbNgA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbNgV != null))
                {
                    array[arrayIndex] = this._parent.ImbNgV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbPPV != null))
                {
                    array[arrayIndex] = this._parent.ImbPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbV != null))
                {
                    array[arrayIndex] = this._parent.ImbV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbZroA != null))
                {
                    array[arrayIndex] = this._parent.ImbZroA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImbZroV != null))
                {
                    array[arrayIndex] = this._parent.ImbZroV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxImbA != null))
                {
                    array[arrayIndex] = this._parent.MaxImbA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxImbPPV != null))
                {
                    array[arrayIndex] = this._parent.MaxImbPPV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxImbV != null))
                {
                    array[arrayIndex] = this._parent.MaxImbV;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.SeqA == item))
                {
                    this._parent.SeqA = null;
                    return true;
                }
                if ((this._parent.SeqV == item))
                {
                    this._parent.SeqV = null;
                    return true;
                }
                if ((this._parent.DQ0Seq == item))
                {
                    this._parent.DQ0Seq = null;
                    return true;
                }
                if ((this._parent.ImbA == item))
                {
                    this._parent.ImbA = null;
                    return true;
                }
                if ((this._parent.ImbNgA == item))
                {
                    this._parent.ImbNgA = null;
                    return true;
                }
                if ((this._parent.ImbNgV == item))
                {
                    this._parent.ImbNgV = null;
                    return true;
                }
                if ((this._parent.ImbPPV == item))
                {
                    this._parent.ImbPPV = null;
                    return true;
                }
                if ((this._parent.ImbV == item))
                {
                    this._parent.ImbV = null;
                    return true;
                }
                if ((this._parent.ImbZroA == item))
                {
                    this._parent.ImbZroA = null;
                    return true;
                }
                if ((this._parent.ImbZroV == item))
                {
                    this._parent.ImbZroV = null;
                    return true;
                }
                if ((this._parent.MaxImbA == item))
                {
                    this._parent.MaxImbA = null;
                    return true;
                }
                if ((this._parent.MaxImbPPV == item))
                {
                    this._parent.MaxImbPPV = null;
                    return true;
                }
                if ((this._parent.MaxImbV == item))
                {
                    this._parent.MaxImbV = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEName).Concat(this._parent.SeqA).Concat(this._parent.SeqV).Concat(this._parent.DQ0Seq).Concat(this._parent.ImbA).Concat(this._parent.ImbNgA).Concat(this._parent.ImbNgV).Concat(this._parent.ImbPPV).Concat(this._parent.ImbV).Concat(this._parent.ImbZroA).Concat(this._parent.ImbZroV).Concat(this._parent.MaxImbA).Concat(this._parent.MaxImbPPV).Concat(this._parent.MaxImbV).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IMSQI, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IMSQI modelElement) : 
                    base(modelElement, "EEHealth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IMSQI, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IMSQI modelElement) : 
                    base(modelElement, "EEName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SeqA property
        /// </summary>
        private sealed class SeqAProxy : ModelPropertyChange<IMSQI, ISEQ>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeqAProxy(IMSQI modelElement) : 
                    base(modelElement, "SeqA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISEQ Value
            {
                get
                {
                    return this.ModelElement.SeqA;
                }
                set
                {
                    this.ModelElement.SeqA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SeqV property
        /// </summary>
        private sealed class SeqVProxy : ModelPropertyChange<IMSQI, ISEQ>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeqVProxy(IMSQI modelElement) : 
                    base(modelElement, "SeqV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISEQ Value
            {
                get
                {
                    return this.ModelElement.SeqV;
                }
                set
                {
                    this.ModelElement.SeqV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DQ0Seq property
        /// </summary>
        private sealed class DQ0SeqProxy : ModelPropertyChange<IMSQI, ISEQ>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DQ0SeqProxy(IMSQI modelElement) : 
                    base(modelElement, "DQ0Seq")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISEQ Value
            {
                get
                {
                    return this.ModelElement.DQ0Seq;
                }
                set
                {
                    this.ModelElement.DQ0Seq = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbA property
        /// </summary>
        private sealed class ImbAProxy : ModelPropertyChange<IMSQI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbAProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.ImbA;
                }
                set
                {
                    this.ModelElement.ImbA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbNgA property
        /// </summary>
        private sealed class ImbNgAProxy : ModelPropertyChange<IMSQI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbNgAProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbNgA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ImbNgA;
                }
                set
                {
                    this.ModelElement.ImbNgA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbNgV property
        /// </summary>
        private sealed class ImbNgVProxy : ModelPropertyChange<IMSQI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbNgVProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbNgV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ImbNgV;
                }
                set
                {
                    this.ModelElement.ImbNgV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbPPV property
        /// </summary>
        private sealed class ImbPPVProxy : ModelPropertyChange<IMSQI, IDEL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbPPVProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbPPV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDEL Value
            {
                get
                {
                    return this.ModelElement.ImbPPV;
                }
                set
                {
                    this.ModelElement.ImbPPV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbV property
        /// </summary>
        private sealed class ImbVProxy : ModelPropertyChange<IMSQI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbVProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ImbV;
                }
                set
                {
                    this.ModelElement.ImbV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbZroA property
        /// </summary>
        private sealed class ImbZroAProxy : ModelPropertyChange<IMSQI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbZroAProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbZroA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ImbZroA;
                }
                set
                {
                    this.ModelElement.ImbZroA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImbZroV property
        /// </summary>
        private sealed class ImbZroVProxy : ModelPropertyChange<IMSQI, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImbZroVProxy(IMSQI modelElement) : 
                    base(modelElement, "ImbZroV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.ImbZroV;
                }
                set
                {
                    this.ModelElement.ImbZroV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxImbA property
        /// </summary>
        private sealed class MaxImbAProxy : ModelPropertyChange<IMSQI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxImbAProxy(IMSQI modelElement) : 
                    base(modelElement, "MaxImbA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.MaxImbA;
                }
                set
                {
                    this.ModelElement.MaxImbA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxImbPPV property
        /// </summary>
        private sealed class MaxImbPPVProxy : ModelPropertyChange<IMSQI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxImbPPVProxy(IMSQI modelElement) : 
                    base(modelElement, "MaxImbPPV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.MaxImbPPV;
                }
                set
                {
                    this.ModelElement.MaxImbPPV = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxImbV property
        /// </summary>
        private sealed class MaxImbVProxy : ModelPropertyChange<IMSQI, IWYE>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxImbVProxy(IMSQI modelElement) : 
                    base(modelElement, "MaxImbV")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWYE Value
            {
                get
                {
                    return this.ModelElement.MaxImbV;
                }
                set
                {
                    this.ModelElement.MaxImbV = value;
                }
            }
        }
    }
}

