//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs
{
    
    
    /// <summary>
    /// The default implementation of the DomainLN class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/Doma" +
        "inLNs")]
    [XmlNamespacePrefixAttribute("domain")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/DomainLNs/DomainLN")]
    public partial class DomainLN : ModelElement, IDomainLN, IModelElement
    {
        
        private static Lazy<ITypedElement> _modeReference = new Lazy<ITypedElement>(RetrieveModeReference);
        
        /// <summary>
        /// The backing field for the Mode property
        /// </summary>
        private IINC _mode;
        
        private static Lazy<ITypedElement> _behaviourReference = new Lazy<ITypedElement>(RetrieveBehaviourReference);
        
        /// <summary>
        /// The backing field for the Behaviour property
        /// </summary>
        private IINS _behaviour;
        
        private static Lazy<ITypedElement> _healthReference = new Lazy<ITypedElement>(RetrieveHealthReference);
        
        /// <summary>
        /// The backing field for the Health property
        /// </summary>
        private IINS _health;
        
        private static Lazy<ITypedElement> _namePltReference = new Lazy<ITypedElement>(RetrieveNamePltReference);
        
        /// <summary>
        /// The backing field for the NamePlt property
        /// </summary>
        private ILPL _namePlt;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Mode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    IINC old = this._mode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModeChanging(e);
                    this.OnPropertyChanging("Mode", e, _modeReference);
                    this._mode = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMode;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMode;
                    }
                    this.OnModeChanged(e);
                    this.OnPropertyChanged("Mode", e, _modeReference);
                }
            }
        }
        
        /// <summary>
        /// The Behaviour property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS Behaviour
        {
            get
            {
                return this._behaviour;
            }
            set
            {
                if ((this._behaviour != value))
                {
                    IINS old = this._behaviour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBehaviourChanging(e);
                    this.OnPropertyChanging("Behaviour", e, _behaviourReference);
                    this._behaviour = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBehaviour;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBehaviour;
                    }
                    this.OnBehaviourChanged(e);
                    this.OnPropertyChanged("Behaviour", e, _behaviourReference);
                }
            }
        }
        
        /// <summary>
        /// The Health property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS Health
        {
            get
            {
                return this._health;
            }
            set
            {
                if ((this._health != value))
                {
                    IINS old = this._health;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHealthChanging(e);
                    this.OnPropertyChanging("Health", e, _healthReference);
                    this._health = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHealth;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHealth;
                    }
                    this.OnHealthChanged(e);
                    this.OnPropertyChanged("Health", e, _healthReference);
                }
            }
        }
        
        /// <summary>
        /// The NamePlt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ILPL NamePlt
        {
            get
            {
                return this._namePlt;
            }
            set
            {
                if ((this._namePlt != value))
                {
                    ILPL old = this._namePlt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNamePltChanging(e);
                    this.OnPropertyChanging("NamePlt", e, _namePltReference);
                    this._namePlt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNamePlt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNamePlt;
                    }
                    this.OnNamePltChanged(e);
                    this.OnPropertyChanged("NamePlt", e, _namePltReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DomainLNReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/DomainLNs/DomainLN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Mode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanging;
        
        /// <summary>
        /// Gets fired when the Mode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanged;
        
        /// <summary>
        /// Gets fired before the Behaviour property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BehaviourChanging;
        
        /// <summary>
        /// Gets fired when the Behaviour property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BehaviourChanged;
        
        /// <summary>
        /// Gets fired before the Health property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HealthChanging;
        
        /// <summary>
        /// Gets fired when the Health property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HealthChanged;
        
        /// <summary>
        /// Gets fired before the NamePlt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NamePltChanging;
        
        /// <summary>
        /// Gets fired when the NamePlt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NamePltChanged;
        
        private static ITypedElement RetrieveModeReference()
        {
            return ((ITypedElement)(((ModelElement)(DomainLN.ClassInstance)).Resolve("Mode")));
        }
        
        /// <summary>
        /// Raises the ModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Mode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMode(object sender, System.EventArgs eventArgs)
        {
            this.Mode = null;
        }
        
        private static ITypedElement RetrieveBehaviourReference()
        {
            return ((ITypedElement)(((ModelElement)(DomainLN.ClassInstance)).Resolve("Behaviour")));
        }
        
        /// <summary>
        /// Raises the BehaviourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBehaviourChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BehaviourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BehaviourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBehaviourChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BehaviourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Behaviour property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBehaviour(object sender, System.EventArgs eventArgs)
        {
            this.Behaviour = null;
        }
        
        private static ITypedElement RetrieveHealthReference()
        {
            return ((ITypedElement)(((ModelElement)(DomainLN.ClassInstance)).Resolve("Health")));
        }
        
        /// <summary>
        /// Raises the HealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Health property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHealth(object sender, System.EventArgs eventArgs)
        {
            this.Health = null;
        }
        
        private static ITypedElement RetrieveNamePltReference()
        {
            return ((ITypedElement)(((ModelElement)(DomainLN.ClassInstance)).Resolve("NamePlt")));
        }
        
        /// <summary>
        /// Raises the NamePltChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNamePltChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NamePltChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NamePltChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNamePltChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NamePltChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NamePlt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNamePlt(object sender, System.EventArgs eventArgs)
        {
            this.NamePlt = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MODE"))
            {
                this.Mode = ((IINC)(value));
                return;
            }
            if ((feature == "BEHAVIOUR"))
            {
                this.Behaviour = ((IINS)(value));
                return;
            }
            if ((feature == "HEALTH"))
            {
                this.Health = ((IINS)(value));
                return;
            }
            if ((feature == "NAMEPLT"))
            {
                this.NamePlt = ((ILPL)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Mode"))
            {
                return new ModeProxy(this);
            }
            if ((attribute == "Behaviour"))
            {
                return new BehaviourProxy(this);
            }
            if ((attribute == "Health"))
            {
                return new HealthProxy(this);
            }
            if ((attribute == "NamePlt"))
            {
                return new NamePltProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Mode"))
            {
                return new ModeProxy(this);
            }
            if ((reference == "Behaviour"))
            {
                return new BehaviourProxy(this);
            }
            if ((reference == "Health"))
            {
                return new HealthProxy(this);
            }
            if ((reference == "NamePlt"))
            {
                return new NamePltProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/DomainLNs/DomainLN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DomainLN class
        /// </summary>
        public class DomainLNReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DomainLN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DomainLNReferencedElementsCollection(DomainLN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Mode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Behaviour != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Health != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NamePlt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ModeChanged += this.PropagateValueChanges;
                this._parent.BehaviourChanged += this.PropagateValueChanges;
                this._parent.HealthChanged += this.PropagateValueChanges;
                this._parent.NamePltChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ModeChanged -= this.PropagateValueChanges;
                this._parent.BehaviourChanged -= this.PropagateValueChanges;
                this._parent.HealthChanged -= this.PropagateValueChanges;
                this._parent.NamePltChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Mode == null))
                {
                    IINC modeCasted = item.As<IINC>();
                    if ((modeCasted != null))
                    {
                        this._parent.Mode = modeCasted;
                        return;
                    }
                }
                if ((this._parent.Behaviour == null))
                {
                    IINS behaviourCasted = item.As<IINS>();
                    if ((behaviourCasted != null))
                    {
                        this._parent.Behaviour = behaviourCasted;
                        return;
                    }
                }
                if ((this._parent.Health == null))
                {
                    IINS healthCasted = item.As<IINS>();
                    if ((healthCasted != null))
                    {
                        this._parent.Health = healthCasted;
                        return;
                    }
                }
                if ((this._parent.NamePlt == null))
                {
                    ILPL namePltCasted = item.As<ILPL>();
                    if ((namePltCasted != null))
                    {
                        this._parent.NamePlt = namePltCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Mode = null;
                this._parent.Behaviour = null;
                this._parent.Health = null;
                this._parent.NamePlt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Mode))
                {
                    return true;
                }
                if ((item == this._parent.Behaviour))
                {
                    return true;
                }
                if ((item == this._parent.Health))
                {
                    return true;
                }
                if ((item == this._parent.NamePlt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Mode != null))
                {
                    array[arrayIndex] = this._parent.Mode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Behaviour != null))
                {
                    array[arrayIndex] = this._parent.Behaviour;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Health != null))
                {
                    array[arrayIndex] = this._parent.Health;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NamePlt != null))
                {
                    array[arrayIndex] = this._parent.NamePlt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Mode == item))
                {
                    this._parent.Mode = null;
                    return true;
                }
                if ((this._parent.Behaviour == item))
                {
                    this._parent.Behaviour = null;
                    return true;
                }
                if ((this._parent.Health == item))
                {
                    this._parent.Health = null;
                    return true;
                }
                if ((this._parent.NamePlt == item))
                {
                    this._parent.NamePlt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Mode).Concat(this._parent.Behaviour).Concat(this._parent.Health).Concat(this._parent.NamePlt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Mode property
        /// </summary>
        private sealed class ModeProxy : ModelPropertyChange<IDomainLN, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModeProxy(IDomainLN modelElement) : 
                    base(modelElement, "Mode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.Mode;
                }
                set
                {
                    this.ModelElement.Mode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Behaviour property
        /// </summary>
        private sealed class BehaviourProxy : ModelPropertyChange<IDomainLN, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BehaviourProxy(IDomainLN modelElement) : 
                    base(modelElement, "Behaviour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.Behaviour;
                }
                set
                {
                    this.ModelElement.Behaviour = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Health property
        /// </summary>
        private sealed class HealthProxy : ModelPropertyChange<IDomainLN, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HealthProxy(IDomainLN modelElement) : 
                    base(modelElement, "Health")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.Health;
                }
                set
                {
                    this.ModelElement.Health = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NamePlt property
        /// </summary>
        private sealed class NamePltProxy : ModelPropertyChange<IDomainLN, ILPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamePltProxy(IDomainLN modelElement) : 
                    base(modelElement, "NamePlt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILPL Value
            {
                get
                {
                    return this.ModelElement.NamePlt;
                }
                set
                {
                    this.ModelElement.NamePlt = value;
                }
            }
        }
    }
}

