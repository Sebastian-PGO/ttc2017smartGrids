//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PDIS class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PDIS")]
    public partial class PDIS : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPDIS, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _poRchReference = new Lazy<ITypedElement>(RetrievePoRchReference);
        
        /// <summary>
        /// The backing field for the PoRch property
        /// </summary>
        private IASG _poRch;
        
        private static Lazy<ITypedElement> _phStrReference = new Lazy<ITypedElement>(RetrievePhStrReference);
        
        /// <summary>
        /// The backing field for the PhStr property
        /// </summary>
        private IASG _phStr;
        
        private static Lazy<ITypedElement> _gndStrReference = new Lazy<ITypedElement>(RetrieveGndStrReference);
        
        /// <summary>
        /// The backing field for the GndStr property
        /// </summary>
        private IASG _gndStr;
        
        private static Lazy<ITypedElement> _dirModReference = new Lazy<ITypedElement>(RetrieveDirModReference);
        
        /// <summary>
        /// The backing field for the DirMod property
        /// </summary>
        private IING _dirMod;
        
        private static Lazy<ITypedElement> _pctRchReference = new Lazy<ITypedElement>(RetrievePctRchReference);
        
        /// <summary>
        /// The backing field for the PctRch property
        /// </summary>
        private IASG _pctRch;
        
        private static Lazy<ITypedElement> _ofsReference = new Lazy<ITypedElement>(RetrieveOfsReference);
        
        /// <summary>
        /// The backing field for the Ofs property
        /// </summary>
        private IASG _ofs;
        
        private static Lazy<ITypedElement> _pctOfsReference = new Lazy<ITypedElement>(RetrievePctOfsReference);
        
        /// <summary>
        /// The backing field for the PctOfs property
        /// </summary>
        private IASG _pctOfs;
        
        private static Lazy<ITypedElement> _risLodReference = new Lazy<ITypedElement>(RetrieveRisLodReference);
        
        /// <summary>
        /// The backing field for the RisLod property
        /// </summary>
        private IASG _risLod;
        
        private static Lazy<ITypedElement> _angLodReference = new Lazy<ITypedElement>(RetrieveAngLodReference);
        
        /// <summary>
        /// The backing field for the AngLod property
        /// </summary>
        private IASG _angLod;
        
        private static Lazy<ITypedElement> _tmDlModReference = new Lazy<ITypedElement>(RetrieveTmDlModReference);
        
        /// <summary>
        /// The backing field for the TmDlMod property
        /// </summary>
        private ISPG _tmDlMod;
        
        private static Lazy<ITypedElement> _opDlTmmsReference = new Lazy<ITypedElement>(RetrieveOpDlTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        private static Lazy<ITypedElement> _phDlModReference = new Lazy<ITypedElement>(RetrievePhDlModReference);
        
        /// <summary>
        /// The backing field for the PhDlMod property
        /// </summary>
        private ISPG _phDlMod;
        
        private static Lazy<ITypedElement> _phDlTmmsReference = new Lazy<ITypedElement>(RetrievePhDlTmmsReference);
        
        /// <summary>
        /// The backing field for the PhDlTmms property
        /// </summary>
        private IING _phDlTmms;
        
        private static Lazy<ITypedElement> _gndDlModReference = new Lazy<ITypedElement>(RetrieveGndDlModReference);
        
        /// <summary>
        /// The backing field for the GndDlMod property
        /// </summary>
        private ISPG _gndDlMod;
        
        private static Lazy<ITypedElement> _gndDlTmmsReference = new Lazy<ITypedElement>(RetrieveGndDlTmmsReference);
        
        /// <summary>
        /// The backing field for the GndDlTmms property
        /// </summary>
        private IING _gndDlTmms;
        
        private static Lazy<ITypedElement> _x1Reference = new Lazy<ITypedElement>(RetrieveX1Reference);
        
        /// <summary>
        /// The backing field for the X1 property
        /// </summary>
        private IASG _x1;
        
        private static Lazy<ITypedElement> _linAngReference = new Lazy<ITypedElement>(RetrieveLinAngReference);
        
        /// <summary>
        /// The backing field for the LinAng property
        /// </summary>
        private IASG _linAng;
        
        private static Lazy<ITypedElement> _risGndRchReference = new Lazy<ITypedElement>(RetrieveRisGndRchReference);
        
        /// <summary>
        /// The backing field for the RisGndRch property
        /// </summary>
        private IASG _risGndRch;
        
        private static Lazy<ITypedElement> _risPhRchReference = new Lazy<ITypedElement>(RetrieveRisPhRchReference);
        
        /// <summary>
        /// The backing field for the RisPhRch property
        /// </summary>
        private IASG _risPhRch;
        
        private static Lazy<ITypedElement> _k0FactReference = new Lazy<ITypedElement>(RetrieveK0FactReference);
        
        /// <summary>
        /// The backing field for the K0Fact property
        /// </summary>
        private IASG _k0Fact;
        
        private static Lazy<ITypedElement> _k0FactAngReference = new Lazy<ITypedElement>(RetrieveK0FactAngReference);
        
        /// <summary>
        /// The backing field for the K0FactAng property
        /// </summary>
        private IASG _k0FactAng;
        
        private static Lazy<ITypedElement> _rsDlTmmsReference = new Lazy<ITypedElement>(RetrieveRsDlTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDlTmms property
        /// </summary>
        private IING _rsDlTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The PoRch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PoRch
        {
            get
            {
                return this._poRch;
            }
            set
            {
                if ((this._poRch != value))
                {
                    IASG old = this._poRch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPoRchChanging(e);
                    this.OnPropertyChanging("PoRch", e, _poRchReference);
                    this._poRch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPoRch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPoRch;
                    }
                    this.OnPoRchChanged(e);
                    this.OnPropertyChanged("PoRch", e, _poRchReference);
                }
            }
        }
        
        /// <summary>
        /// The PhStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PhStr
        {
            get
            {
                return this._phStr;
            }
            set
            {
                if ((this._phStr != value))
                {
                    IASG old = this._phStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhStrChanging(e);
                    this.OnPropertyChanging("PhStr", e, _phStrReference);
                    this._phStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhStr;
                    }
                    this.OnPhStrChanged(e);
                    this.OnPropertyChanged("PhStr", e, _phStrReference);
                }
            }
        }
        
        /// <summary>
        /// The GndStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG GndStr
        {
            get
            {
                return this._gndStr;
            }
            set
            {
                if ((this._gndStr != value))
                {
                    IASG old = this._gndStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGndStrChanging(e);
                    this.OnPropertyChanging("GndStr", e, _gndStrReference);
                    this._gndStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGndStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGndStr;
                    }
                    this.OnGndStrChanged(e);
                    this.OnPropertyChanged("GndStr", e, _gndStrReference);
                }
            }
        }
        
        /// <summary>
        /// The DirMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING DirMod
        {
            get
            {
                return this._dirMod;
            }
            set
            {
                if ((this._dirMod != value))
                {
                    IING old = this._dirMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirModChanging(e);
                    this.OnPropertyChanging("DirMod", e, _dirModReference);
                    this._dirMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirMod;
                    }
                    this.OnDirModChanged(e);
                    this.OnPropertyChanged("DirMod", e, _dirModReference);
                }
            }
        }
        
        /// <summary>
        /// The PctRch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PctRch
        {
            get
            {
                return this._pctRch;
            }
            set
            {
                if ((this._pctRch != value))
                {
                    IASG old = this._pctRch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPctRchChanging(e);
                    this.OnPropertyChanging("PctRch", e, _pctRchReference);
                    this._pctRch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPctRch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPctRch;
                    }
                    this.OnPctRchChanged(e);
                    this.OnPropertyChanged("PctRch", e, _pctRchReference);
                }
            }
        }
        
        /// <summary>
        /// The Ofs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Ofs
        {
            get
            {
                return this._ofs;
            }
            set
            {
                if ((this._ofs != value))
                {
                    IASG old = this._ofs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOfsChanging(e);
                    this.OnPropertyChanging("Ofs", e, _ofsReference);
                    this._ofs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOfs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOfs;
                    }
                    this.OnOfsChanged(e);
                    this.OnPropertyChanged("Ofs", e, _ofsReference);
                }
            }
        }
        
        /// <summary>
        /// The PctOfs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PctOfs
        {
            get
            {
                return this._pctOfs;
            }
            set
            {
                if ((this._pctOfs != value))
                {
                    IASG old = this._pctOfs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPctOfsChanging(e);
                    this.OnPropertyChanging("PctOfs", e, _pctOfsReference);
                    this._pctOfs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPctOfs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPctOfs;
                    }
                    this.OnPctOfsChanged(e);
                    this.OnPropertyChanged("PctOfs", e, _pctOfsReference);
                }
            }
        }
        
        /// <summary>
        /// The RisLod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG RisLod
        {
            get
            {
                return this._risLod;
            }
            set
            {
                if ((this._risLod != value))
                {
                    IASG old = this._risLod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRisLodChanging(e);
                    this.OnPropertyChanging("RisLod", e, _risLodReference);
                    this._risLod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRisLod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRisLod;
                    }
                    this.OnRisLodChanged(e);
                    this.OnPropertyChanged("RisLod", e, _risLodReference);
                }
            }
        }
        
        /// <summary>
        /// The AngLod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG AngLod
        {
            get
            {
                return this._angLod;
            }
            set
            {
                if ((this._angLod != value))
                {
                    IASG old = this._angLod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngLodChanging(e);
                    this.OnPropertyChanging("AngLod", e, _angLodReference);
                    this._angLod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngLod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngLod;
                    }
                    this.OnAngLodChanged(e);
                    this.OnPropertyChanged("AngLod", e, _angLodReference);
                }
            }
        }
        
        /// <summary>
        /// The TmDlMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG TmDlMod
        {
            get
            {
                return this._tmDlMod;
            }
            set
            {
                if ((this._tmDlMod != value))
                {
                    ISPG old = this._tmDlMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmDlModChanging(e);
                    this.OnPropertyChanging("TmDlMod", e, _tmDlModReference);
                    this._tmDlMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmDlMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmDlMod;
                    }
                    this.OnTmDlModChanged(e);
                    this.OnPropertyChanged("TmDlMod", e, _tmDlModReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e, _opDlTmmsReference);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e, _opDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The PhDlMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG PhDlMod
        {
            get
            {
                return this._phDlMod;
            }
            set
            {
                if ((this._phDlMod != value))
                {
                    ISPG old = this._phDlMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhDlModChanging(e);
                    this.OnPropertyChanging("PhDlMod", e, _phDlModReference);
                    this._phDlMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhDlMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhDlMod;
                    }
                    this.OnPhDlModChanged(e);
                    this.OnPropertyChanged("PhDlMod", e, _phDlModReference);
                }
            }
        }
        
        /// <summary>
        /// The PhDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PhDlTmms
        {
            get
            {
                return this._phDlTmms;
            }
            set
            {
                if ((this._phDlTmms != value))
                {
                    IING old = this._phDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhDlTmmsChanging(e);
                    this.OnPropertyChanging("PhDlTmms", e, _phDlTmmsReference);
                    this._phDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhDlTmms;
                    }
                    this.OnPhDlTmmsChanged(e);
                    this.OnPropertyChanged("PhDlTmms", e, _phDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The GndDlMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG GndDlMod
        {
            get
            {
                return this._gndDlMod;
            }
            set
            {
                if ((this._gndDlMod != value))
                {
                    ISPG old = this._gndDlMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGndDlModChanging(e);
                    this.OnPropertyChanging("GndDlMod", e, _gndDlModReference);
                    this._gndDlMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGndDlMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGndDlMod;
                    }
                    this.OnGndDlModChanged(e);
                    this.OnPropertyChanged("GndDlMod", e, _gndDlModReference);
                }
            }
        }
        
        /// <summary>
        /// The GndDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING GndDlTmms
        {
            get
            {
                return this._gndDlTmms;
            }
            set
            {
                if ((this._gndDlTmms != value))
                {
                    IING old = this._gndDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGndDlTmmsChanging(e);
                    this.OnPropertyChanging("GndDlTmms", e, _gndDlTmmsReference);
                    this._gndDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGndDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGndDlTmms;
                    }
                    this.OnGndDlTmmsChanged(e);
                    this.OnPropertyChanged("GndDlTmms", e, _gndDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The X1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG X1
        {
            get
            {
                return this._x1;
            }
            set
            {
                if ((this._x1 != value))
                {
                    IASG old = this._x1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX1Changing(e);
                    this.OnPropertyChanging("X1", e, _x1Reference);
                    this._x1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetX1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetX1;
                    }
                    this.OnX1Changed(e);
                    this.OnPropertyChanged("X1", e, _x1Reference);
                }
            }
        }
        
        /// <summary>
        /// The LinAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LinAng
        {
            get
            {
                return this._linAng;
            }
            set
            {
                if ((this._linAng != value))
                {
                    IASG old = this._linAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLinAngChanging(e);
                    this.OnPropertyChanging("LinAng", e, _linAngReference);
                    this._linAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLinAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLinAng;
                    }
                    this.OnLinAngChanged(e);
                    this.OnPropertyChanged("LinAng", e, _linAngReference);
                }
            }
        }
        
        /// <summary>
        /// The RisGndRch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG RisGndRch
        {
            get
            {
                return this._risGndRch;
            }
            set
            {
                if ((this._risGndRch != value))
                {
                    IASG old = this._risGndRch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRisGndRchChanging(e);
                    this.OnPropertyChanging("RisGndRch", e, _risGndRchReference);
                    this._risGndRch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRisGndRch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRisGndRch;
                    }
                    this.OnRisGndRchChanged(e);
                    this.OnPropertyChanged("RisGndRch", e, _risGndRchReference);
                }
            }
        }
        
        /// <summary>
        /// The RisPhRch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG RisPhRch
        {
            get
            {
                return this._risPhRch;
            }
            set
            {
                if ((this._risPhRch != value))
                {
                    IASG old = this._risPhRch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRisPhRchChanging(e);
                    this.OnPropertyChanging("RisPhRch", e, _risPhRchReference);
                    this._risPhRch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRisPhRch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRisPhRch;
                    }
                    this.OnRisPhRchChanged(e);
                    this.OnPropertyChanged("RisPhRch", e, _risPhRchReference);
                }
            }
        }
        
        /// <summary>
        /// The K0Fact property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG K0Fact
        {
            get
            {
                return this._k0Fact;
            }
            set
            {
                if ((this._k0Fact != value))
                {
                    IASG old = this._k0Fact;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnK0FactChanging(e);
                    this.OnPropertyChanging("K0Fact", e, _k0FactReference);
                    this._k0Fact = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetK0Fact;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetK0Fact;
                    }
                    this.OnK0FactChanged(e);
                    this.OnPropertyChanged("K0Fact", e, _k0FactReference);
                }
            }
        }
        
        /// <summary>
        /// The K0FactAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG K0FactAng
        {
            get
            {
                return this._k0FactAng;
            }
            set
            {
                if ((this._k0FactAng != value))
                {
                    IASG old = this._k0FactAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnK0FactAngChanging(e);
                    this.OnPropertyChanging("K0FactAng", e, _k0FactAngReference);
                    this._k0FactAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetK0FactAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetK0FactAng;
                    }
                    this.OnK0FactAngChanged(e);
                    this.OnPropertyChanged("K0FactAng", e, _k0FactAngReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDlTmms
        {
            get
            {
                return this._rsDlTmms;
            }
            set
            {
                if ((this._rsDlTmms != value))
                {
                    IING old = this._rsDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDlTmmsChanging(e);
                    this.OnPropertyChanging("RsDlTmms", e, _rsDlTmmsReference);
                    this._rsDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDlTmms;
                    }
                    this.OnRsDlTmmsChanged(e);
                    this.OnPropertyChanged("RsDlTmms", e, _rsDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PDISReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PDIS")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the PoRch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoRchChanging;
        
        /// <summary>
        /// Gets fired when the PoRch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoRchChanged;
        
        /// <summary>
        /// Gets fired before the PhStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStrChanging;
        
        /// <summary>
        /// Gets fired when the PhStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStrChanged;
        
        /// <summary>
        /// Gets fired before the GndStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndStrChanging;
        
        /// <summary>
        /// Gets fired when the GndStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndStrChanged;
        
        /// <summary>
        /// Gets fired before the DirMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirModChanging;
        
        /// <summary>
        /// Gets fired when the DirMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirModChanged;
        
        /// <summary>
        /// Gets fired before the PctRch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PctRchChanging;
        
        /// <summary>
        /// Gets fired when the PctRch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PctRchChanged;
        
        /// <summary>
        /// Gets fired before the Ofs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OfsChanging;
        
        /// <summary>
        /// Gets fired when the Ofs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OfsChanged;
        
        /// <summary>
        /// Gets fired before the PctOfs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PctOfsChanging;
        
        /// <summary>
        /// Gets fired when the PctOfs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PctOfsChanged;
        
        /// <summary>
        /// Gets fired before the RisLod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisLodChanging;
        
        /// <summary>
        /// Gets fired when the RisLod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisLodChanged;
        
        /// <summary>
        /// Gets fired before the AngLod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngLodChanging;
        
        /// <summary>
        /// Gets fired when the AngLod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngLodChanged;
        
        /// <summary>
        /// Gets fired before the TmDlMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmDlModChanging;
        
        /// <summary>
        /// Gets fired when the TmDlMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmDlModChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the PhDlMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhDlModChanging;
        
        /// <summary>
        /// Gets fired when the PhDlMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhDlModChanged;
        
        /// <summary>
        /// Gets fired before the PhDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PhDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the GndDlMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndDlModChanging;
        
        /// <summary>
        /// Gets fired when the GndDlMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndDlModChanged;
        
        /// <summary>
        /// Gets fired before the GndDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the GndDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the X1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X1Changing;
        
        /// <summary>
        /// Gets fired when the X1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X1Changed;
        
        /// <summary>
        /// Gets fired before the LinAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinAngChanging;
        
        /// <summary>
        /// Gets fired when the LinAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinAngChanged;
        
        /// <summary>
        /// Gets fired before the RisGndRch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisGndRchChanging;
        
        /// <summary>
        /// Gets fired when the RisGndRch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisGndRchChanged;
        
        /// <summary>
        /// Gets fired before the RisPhRch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisPhRchChanging;
        
        /// <summary>
        /// Gets fired when the RisPhRch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RisPhRchChanged;
        
        /// <summary>
        /// Gets fired before the K0Fact property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> K0FactChanging;
        
        /// <summary>
        /// Gets fired when the K0Fact property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> K0FactChanged;
        
        /// <summary>
        /// Gets fired before the K0FactAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> K0FactAngChanging;
        
        /// <summary>
        /// Gets fired when the K0FactAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> K0FactAngChanged;
        
        /// <summary>
        /// Gets fired before the RsDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrievePoRchReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PoRch")));
        }
        
        /// <summary>
        /// Raises the PoRchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoRchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoRchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PoRchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoRchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoRchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PoRch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPoRch(object sender, System.EventArgs eventArgs)
        {
            this.PoRch = null;
        }
        
        private static ITypedElement RetrievePhStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PhStr")));
        }
        
        /// <summary>
        /// Raises the PhStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhStr(object sender, System.EventArgs eventArgs)
        {
            this.PhStr = null;
        }
        
        private static ITypedElement RetrieveGndStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("GndStr")));
        }
        
        /// <summary>
        /// Raises the GndStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GndStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GndStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGndStr(object sender, System.EventArgs eventArgs)
        {
            this.GndStr = null;
        }
        
        private static ITypedElement RetrieveDirModReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("DirMod")));
        }
        
        /// <summary>
        /// Raises the DirModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirMod(object sender, System.EventArgs eventArgs)
        {
            this.DirMod = null;
        }
        
        private static ITypedElement RetrievePctRchReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PctRch")));
        }
        
        /// <summary>
        /// Raises the PctRchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPctRchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PctRchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PctRchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPctRchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PctRchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PctRch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPctRch(object sender, System.EventArgs eventArgs)
        {
            this.PctRch = null;
        }
        
        private static ITypedElement RetrieveOfsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("Ofs")));
        }
        
        /// <summary>
        /// Raises the OfsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOfsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OfsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OfsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOfsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OfsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ofs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOfs(object sender, System.EventArgs eventArgs)
        {
            this.Ofs = null;
        }
        
        private static ITypedElement RetrievePctOfsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PctOfs")));
        }
        
        /// <summary>
        /// Raises the PctOfsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPctOfsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PctOfsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PctOfsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPctOfsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PctOfsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PctOfs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPctOfs(object sender, System.EventArgs eventArgs)
        {
            this.PctOfs = null;
        }
        
        private static ITypedElement RetrieveRisLodReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("RisLod")));
        }
        
        /// <summary>
        /// Raises the RisLodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisLodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisLodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RisLodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisLodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisLodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RisLod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRisLod(object sender, System.EventArgs eventArgs)
        {
            this.RisLod = null;
        }
        
        private static ITypedElement RetrieveAngLodReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("AngLod")));
        }
        
        /// <summary>
        /// Raises the AngLodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngLodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngLodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngLodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngLodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngLodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngLod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngLod(object sender, System.EventArgs eventArgs)
        {
            this.AngLod = null;
        }
        
        private static ITypedElement RetrieveTmDlModReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("TmDlMod")));
        }
        
        /// <summary>
        /// Raises the TmDlModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmDlModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmDlModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmDlModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmDlModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmDlModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmDlMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmDlMod(object sender, System.EventArgs eventArgs)
        {
            this.TmDlMod = null;
        }
        
        private static ITypedElement RetrieveOpDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("OpDlTmms")));
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        private static ITypedElement RetrievePhDlModReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PhDlMod")));
        }
        
        /// <summary>
        /// Raises the PhDlModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhDlModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhDlModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhDlModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhDlModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhDlModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhDlMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhDlMod(object sender, System.EventArgs eventArgs)
        {
            this.PhDlMod = null;
        }
        
        private static ITypedElement RetrievePhDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("PhDlTmms")));
        }
        
        /// <summary>
        /// Raises the PhDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.PhDlTmms = null;
        }
        
        private static ITypedElement RetrieveGndDlModReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("GndDlMod")));
        }
        
        /// <summary>
        /// Raises the GndDlModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndDlModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndDlModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GndDlModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndDlModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndDlModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GndDlMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGndDlMod(object sender, System.EventArgs eventArgs)
        {
            this.GndDlMod = null;
        }
        
        private static ITypedElement RetrieveGndDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("GndDlTmms")));
        }
        
        /// <summary>
        /// Raises the GndDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GndDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GndDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGndDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.GndDlTmms = null;
        }
        
        private static ITypedElement RetrieveX1Reference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("X1")));
        }
        
        /// <summary>
        /// Raises the X1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the X1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetX1(object sender, System.EventArgs eventArgs)
        {
            this.X1 = null;
        }
        
        private static ITypedElement RetrieveLinAngReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("LinAng")));
        }
        
        /// <summary>
        /// Raises the LinAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LinAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LinAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLinAng(object sender, System.EventArgs eventArgs)
        {
            this.LinAng = null;
        }
        
        private static ITypedElement RetrieveRisGndRchReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("RisGndRch")));
        }
        
        /// <summary>
        /// Raises the RisGndRchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisGndRchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisGndRchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RisGndRchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisGndRchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisGndRchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RisGndRch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRisGndRch(object sender, System.EventArgs eventArgs)
        {
            this.RisGndRch = null;
        }
        
        private static ITypedElement RetrieveRisPhRchReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("RisPhRch")));
        }
        
        /// <summary>
        /// Raises the RisPhRchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisPhRchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisPhRchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RisPhRchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRisPhRchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RisPhRchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RisPhRch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRisPhRch(object sender, System.EventArgs eventArgs)
        {
            this.RisPhRch = null;
        }
        
        private static ITypedElement RetrieveK0FactReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("K0Fact")));
        }
        
        /// <summary>
        /// Raises the K0FactChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnK0FactChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.K0FactChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the K0FactChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnK0FactChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.K0FactChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the K0Fact property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetK0Fact(object sender, System.EventArgs eventArgs)
        {
            this.K0Fact = null;
        }
        
        private static ITypedElement RetrieveK0FactAngReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("K0FactAng")));
        }
        
        /// <summary>
        /// Raises the K0FactAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnK0FactAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.K0FactAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the K0FactAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnK0FactAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.K0FactAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the K0FactAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetK0FactAng(object sender, System.EventArgs eventArgs)
        {
            this.K0FactAng = null;
        }
        
        private static ITypedElement RetrieveRsDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PDIS.ClassInstance)).Resolve("RsDlTmms")));
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDlTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "PORCH"))
            {
                this.PoRch = ((IASG)(value));
                return;
            }
            if ((feature == "PHSTR"))
            {
                this.PhStr = ((IASG)(value));
                return;
            }
            if ((feature == "GNDSTR"))
            {
                this.GndStr = ((IASG)(value));
                return;
            }
            if ((feature == "DIRMOD"))
            {
                this.DirMod = ((IING)(value));
                return;
            }
            if ((feature == "PCTRCH"))
            {
                this.PctRch = ((IASG)(value));
                return;
            }
            if ((feature == "OFS"))
            {
                this.Ofs = ((IASG)(value));
                return;
            }
            if ((feature == "PCTOFS"))
            {
                this.PctOfs = ((IASG)(value));
                return;
            }
            if ((feature == "RISLOD"))
            {
                this.RisLod = ((IASG)(value));
                return;
            }
            if ((feature == "ANGLOD"))
            {
                this.AngLod = ((IASG)(value));
                return;
            }
            if ((feature == "TMDLMOD"))
            {
                this.TmDlMod = ((ISPG)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "PHDLMOD"))
            {
                this.PhDlMod = ((ISPG)(value));
                return;
            }
            if ((feature == "PHDLTMMS"))
            {
                this.PhDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "GNDDLMOD"))
            {
                this.GndDlMod = ((ISPG)(value));
                return;
            }
            if ((feature == "GNDDLTMMS"))
            {
                this.GndDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "X1"))
            {
                this.X1 = ((IASG)(value));
                return;
            }
            if ((feature == "LINANG"))
            {
                this.LinAng = ((IASG)(value));
                return;
            }
            if ((feature == "RISGNDRCH"))
            {
                this.RisGndRch = ((IASG)(value));
                return;
            }
            if ((feature == "RISPHRCH"))
            {
                this.RisPhRch = ((IASG)(value));
                return;
            }
            if ((feature == "K0FACT"))
            {
                this.K0Fact = ((IASG)(value));
                return;
            }
            if ((feature == "K0FACTANG"))
            {
                this.K0FactAng = ((IASG)(value));
                return;
            }
            if ((feature == "RSDLTMMS"))
            {
                this.RsDlTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "PoRch"))
            {
                return new PoRchProxy(this);
            }
            if ((attribute == "PhStr"))
            {
                return new PhStrProxy(this);
            }
            if ((attribute == "GndStr"))
            {
                return new GndStrProxy(this);
            }
            if ((attribute == "DirMod"))
            {
                return new DirModProxy(this);
            }
            if ((attribute == "PctRch"))
            {
                return new PctRchProxy(this);
            }
            if ((attribute == "Ofs"))
            {
                return new OfsProxy(this);
            }
            if ((attribute == "PctOfs"))
            {
                return new PctOfsProxy(this);
            }
            if ((attribute == "RisLod"))
            {
                return new RisLodProxy(this);
            }
            if ((attribute == "AngLod"))
            {
                return new AngLodProxy(this);
            }
            if ((attribute == "TmDlMod"))
            {
                return new TmDlModProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "PhDlMod"))
            {
                return new PhDlModProxy(this);
            }
            if ((attribute == "PhDlTmms"))
            {
                return new PhDlTmmsProxy(this);
            }
            if ((attribute == "GndDlMod"))
            {
                return new GndDlModProxy(this);
            }
            if ((attribute == "GndDlTmms"))
            {
                return new GndDlTmmsProxy(this);
            }
            if ((attribute == "X1"))
            {
                return new X1Proxy(this);
            }
            if ((attribute == "LinAng"))
            {
                return new LinAngProxy(this);
            }
            if ((attribute == "RisGndRch"))
            {
                return new RisGndRchProxy(this);
            }
            if ((attribute == "RisPhRch"))
            {
                return new RisPhRchProxy(this);
            }
            if ((attribute == "K0Fact"))
            {
                return new K0FactProxy(this);
            }
            if ((attribute == "K0FactAng"))
            {
                return new K0FactAngProxy(this);
            }
            if ((attribute == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "PoRch"))
            {
                return new PoRchProxy(this);
            }
            if ((reference == "PhStr"))
            {
                return new PhStrProxy(this);
            }
            if ((reference == "GndStr"))
            {
                return new GndStrProxy(this);
            }
            if ((reference == "DirMod"))
            {
                return new DirModProxy(this);
            }
            if ((reference == "PctRch"))
            {
                return new PctRchProxy(this);
            }
            if ((reference == "Ofs"))
            {
                return new OfsProxy(this);
            }
            if ((reference == "PctOfs"))
            {
                return new PctOfsProxy(this);
            }
            if ((reference == "RisLod"))
            {
                return new RisLodProxy(this);
            }
            if ((reference == "AngLod"))
            {
                return new AngLodProxy(this);
            }
            if ((reference == "TmDlMod"))
            {
                return new TmDlModProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "PhDlMod"))
            {
                return new PhDlModProxy(this);
            }
            if ((reference == "PhDlTmms"))
            {
                return new PhDlTmmsProxy(this);
            }
            if ((reference == "GndDlMod"))
            {
                return new GndDlModProxy(this);
            }
            if ((reference == "GndDlTmms"))
            {
                return new GndDlTmmsProxy(this);
            }
            if ((reference == "X1"))
            {
                return new X1Proxy(this);
            }
            if ((reference == "LinAng"))
            {
                return new LinAngProxy(this);
            }
            if ((reference == "RisGndRch"))
            {
                return new RisGndRchProxy(this);
            }
            if ((reference == "RisPhRch"))
            {
                return new RisPhRchProxy(this);
            }
            if ((reference == "K0Fact"))
            {
                return new K0FactProxy(this);
            }
            if ((reference == "K0FactAng"))
            {
                return new K0FactAngProxy(this);
            }
            if ((reference == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PDIS")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PDIS class
        /// </summary>
        public class PDISReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PDIS _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PDISReferencedElementsCollection(PDIS parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PoRch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GndStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PctRch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Ofs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PctOfs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RisLod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngLod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmDlMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhDlMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GndDlMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GndDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.X1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LinAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RisGndRch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RisPhRch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.K0Fact != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.K0FactAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.PoRchChanged += this.PropagateValueChanges;
                this._parent.PhStrChanged += this.PropagateValueChanges;
                this._parent.GndStrChanged += this.PropagateValueChanges;
                this._parent.DirModChanged += this.PropagateValueChanges;
                this._parent.PctRchChanged += this.PropagateValueChanges;
                this._parent.OfsChanged += this.PropagateValueChanges;
                this._parent.PctOfsChanged += this.PropagateValueChanges;
                this._parent.RisLodChanged += this.PropagateValueChanges;
                this._parent.AngLodChanged += this.PropagateValueChanges;
                this._parent.TmDlModChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.PhDlModChanged += this.PropagateValueChanges;
                this._parent.PhDlTmmsChanged += this.PropagateValueChanges;
                this._parent.GndDlModChanged += this.PropagateValueChanges;
                this._parent.GndDlTmmsChanged += this.PropagateValueChanges;
                this._parent.X1Changed += this.PropagateValueChanges;
                this._parent.LinAngChanged += this.PropagateValueChanges;
                this._parent.RisGndRchChanged += this.PropagateValueChanges;
                this._parent.RisPhRchChanged += this.PropagateValueChanges;
                this._parent.K0FactChanged += this.PropagateValueChanges;
                this._parent.K0FactAngChanged += this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.PoRchChanged -= this.PropagateValueChanges;
                this._parent.PhStrChanged -= this.PropagateValueChanges;
                this._parent.GndStrChanged -= this.PropagateValueChanges;
                this._parent.DirModChanged -= this.PropagateValueChanges;
                this._parent.PctRchChanged -= this.PropagateValueChanges;
                this._parent.OfsChanged -= this.PropagateValueChanges;
                this._parent.PctOfsChanged -= this.PropagateValueChanges;
                this._parent.RisLodChanged -= this.PropagateValueChanges;
                this._parent.AngLodChanged -= this.PropagateValueChanges;
                this._parent.TmDlModChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.PhDlModChanged -= this.PropagateValueChanges;
                this._parent.PhDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.GndDlModChanged -= this.PropagateValueChanges;
                this._parent.GndDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.X1Changed -= this.PropagateValueChanges;
                this._parent.LinAngChanged -= this.PropagateValueChanges;
                this._parent.RisGndRchChanged -= this.PropagateValueChanges;
                this._parent.RisPhRchChanged -= this.PropagateValueChanges;
                this._parent.K0FactChanged -= this.PropagateValueChanges;
                this._parent.K0FactAngChanged -= this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.PoRch == null))
                {
                    IASG poRchCasted = item.As<IASG>();
                    if ((poRchCasted != null))
                    {
                        this._parent.PoRch = poRchCasted;
                        return;
                    }
                }
                if ((this._parent.PhStr == null))
                {
                    IASG phStrCasted = item.As<IASG>();
                    if ((phStrCasted != null))
                    {
                        this._parent.PhStr = phStrCasted;
                        return;
                    }
                }
                if ((this._parent.GndStr == null))
                {
                    IASG gndStrCasted = item.As<IASG>();
                    if ((gndStrCasted != null))
                    {
                        this._parent.GndStr = gndStrCasted;
                        return;
                    }
                }
                if ((this._parent.DirMod == null))
                {
                    IING dirModCasted = item.As<IING>();
                    if ((dirModCasted != null))
                    {
                        this._parent.DirMod = dirModCasted;
                        return;
                    }
                }
                if ((this._parent.PctRch == null))
                {
                    IASG pctRchCasted = item.As<IASG>();
                    if ((pctRchCasted != null))
                    {
                        this._parent.PctRch = pctRchCasted;
                        return;
                    }
                }
                if ((this._parent.Ofs == null))
                {
                    IASG ofsCasted = item.As<IASG>();
                    if ((ofsCasted != null))
                    {
                        this._parent.Ofs = ofsCasted;
                        return;
                    }
                }
                if ((this._parent.PctOfs == null))
                {
                    IASG pctOfsCasted = item.As<IASG>();
                    if ((pctOfsCasted != null))
                    {
                        this._parent.PctOfs = pctOfsCasted;
                        return;
                    }
                }
                if ((this._parent.RisLod == null))
                {
                    IASG risLodCasted = item.As<IASG>();
                    if ((risLodCasted != null))
                    {
                        this._parent.RisLod = risLodCasted;
                        return;
                    }
                }
                if ((this._parent.AngLod == null))
                {
                    IASG angLodCasted = item.As<IASG>();
                    if ((angLodCasted != null))
                    {
                        this._parent.AngLod = angLodCasted;
                        return;
                    }
                }
                if ((this._parent.TmDlMod == null))
                {
                    ISPG tmDlModCasted = item.As<ISPG>();
                    if ((tmDlModCasted != null))
                    {
                        this._parent.TmDlMod = tmDlModCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.PhDlMod == null))
                {
                    ISPG phDlModCasted = item.As<ISPG>();
                    if ((phDlModCasted != null))
                    {
                        this._parent.PhDlMod = phDlModCasted;
                        return;
                    }
                }
                if ((this._parent.PhDlTmms == null))
                {
                    IING phDlTmmsCasted = item.As<IING>();
                    if ((phDlTmmsCasted != null))
                    {
                        this._parent.PhDlTmms = phDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.GndDlMod == null))
                {
                    ISPG gndDlModCasted = item.As<ISPG>();
                    if ((gndDlModCasted != null))
                    {
                        this._parent.GndDlMod = gndDlModCasted;
                        return;
                    }
                }
                if ((this._parent.GndDlTmms == null))
                {
                    IING gndDlTmmsCasted = item.As<IING>();
                    if ((gndDlTmmsCasted != null))
                    {
                        this._parent.GndDlTmms = gndDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.X1 == null))
                {
                    IASG x1Casted = item.As<IASG>();
                    if ((x1Casted != null))
                    {
                        this._parent.X1 = x1Casted;
                        return;
                    }
                }
                if ((this._parent.LinAng == null))
                {
                    IASG linAngCasted = item.As<IASG>();
                    if ((linAngCasted != null))
                    {
                        this._parent.LinAng = linAngCasted;
                        return;
                    }
                }
                if ((this._parent.RisGndRch == null))
                {
                    IASG risGndRchCasted = item.As<IASG>();
                    if ((risGndRchCasted != null))
                    {
                        this._parent.RisGndRch = risGndRchCasted;
                        return;
                    }
                }
                if ((this._parent.RisPhRch == null))
                {
                    IASG risPhRchCasted = item.As<IASG>();
                    if ((risPhRchCasted != null))
                    {
                        this._parent.RisPhRch = risPhRchCasted;
                        return;
                    }
                }
                if ((this._parent.K0Fact == null))
                {
                    IASG k0FactCasted = item.As<IASG>();
                    if ((k0FactCasted != null))
                    {
                        this._parent.K0Fact = k0FactCasted;
                        return;
                    }
                }
                if ((this._parent.K0FactAng == null))
                {
                    IASG k0FactAngCasted = item.As<IASG>();
                    if ((k0FactAngCasted != null))
                    {
                        this._parent.K0FactAng = k0FactAngCasted;
                        return;
                    }
                }
                if ((this._parent.RsDlTmms == null))
                {
                    IING rsDlTmmsCasted = item.As<IING>();
                    if ((rsDlTmmsCasted != null))
                    {
                        this._parent.RsDlTmms = rsDlTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.PoRch = null;
                this._parent.PhStr = null;
                this._parent.GndStr = null;
                this._parent.DirMod = null;
                this._parent.PctRch = null;
                this._parent.Ofs = null;
                this._parent.PctOfs = null;
                this._parent.RisLod = null;
                this._parent.AngLod = null;
                this._parent.TmDlMod = null;
                this._parent.OpDlTmms = null;
                this._parent.PhDlMod = null;
                this._parent.PhDlTmms = null;
                this._parent.GndDlMod = null;
                this._parent.GndDlTmms = null;
                this._parent.X1 = null;
                this._parent.LinAng = null;
                this._parent.RisGndRch = null;
                this._parent.RisPhRch = null;
                this._parent.K0Fact = null;
                this._parent.K0FactAng = null;
                this._parent.RsDlTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.PoRch))
                {
                    return true;
                }
                if ((item == this._parent.PhStr))
                {
                    return true;
                }
                if ((item == this._parent.GndStr))
                {
                    return true;
                }
                if ((item == this._parent.DirMod))
                {
                    return true;
                }
                if ((item == this._parent.PctRch))
                {
                    return true;
                }
                if ((item == this._parent.Ofs))
                {
                    return true;
                }
                if ((item == this._parent.PctOfs))
                {
                    return true;
                }
                if ((item == this._parent.RisLod))
                {
                    return true;
                }
                if ((item == this._parent.AngLod))
                {
                    return true;
                }
                if ((item == this._parent.TmDlMod))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.PhDlMod))
                {
                    return true;
                }
                if ((item == this._parent.PhDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.GndDlMod))
                {
                    return true;
                }
                if ((item == this._parent.GndDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.X1))
                {
                    return true;
                }
                if ((item == this._parent.LinAng))
                {
                    return true;
                }
                if ((item == this._parent.RisGndRch))
                {
                    return true;
                }
                if ((item == this._parent.RisPhRch))
                {
                    return true;
                }
                if ((item == this._parent.K0Fact))
                {
                    return true;
                }
                if ((item == this._parent.K0FactAng))
                {
                    return true;
                }
                if ((item == this._parent.RsDlTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PoRch != null))
                {
                    array[arrayIndex] = this._parent.PoRch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhStr != null))
                {
                    array[arrayIndex] = this._parent.PhStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GndStr != null))
                {
                    array[arrayIndex] = this._parent.GndStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirMod != null))
                {
                    array[arrayIndex] = this._parent.DirMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PctRch != null))
                {
                    array[arrayIndex] = this._parent.PctRch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Ofs != null))
                {
                    array[arrayIndex] = this._parent.Ofs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PctOfs != null))
                {
                    array[arrayIndex] = this._parent.PctOfs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RisLod != null))
                {
                    array[arrayIndex] = this._parent.RisLod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngLod != null))
                {
                    array[arrayIndex] = this._parent.AngLod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmDlMod != null))
                {
                    array[arrayIndex] = this._parent.TmDlMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhDlMod != null))
                {
                    array[arrayIndex] = this._parent.PhDlMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhDlTmms != null))
                {
                    array[arrayIndex] = this._parent.PhDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GndDlMod != null))
                {
                    array[arrayIndex] = this._parent.GndDlMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GndDlTmms != null))
                {
                    array[arrayIndex] = this._parent.GndDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.X1 != null))
                {
                    array[arrayIndex] = this._parent.X1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LinAng != null))
                {
                    array[arrayIndex] = this._parent.LinAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RisGndRch != null))
                {
                    array[arrayIndex] = this._parent.RisGndRch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RisPhRch != null))
                {
                    array[arrayIndex] = this._parent.RisPhRch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.K0Fact != null))
                {
                    array[arrayIndex] = this._parent.K0Fact;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.K0FactAng != null))
                {
                    array[arrayIndex] = this._parent.K0FactAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDlTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.PoRch == item))
                {
                    this._parent.PoRch = null;
                    return true;
                }
                if ((this._parent.PhStr == item))
                {
                    this._parent.PhStr = null;
                    return true;
                }
                if ((this._parent.GndStr == item))
                {
                    this._parent.GndStr = null;
                    return true;
                }
                if ((this._parent.DirMod == item))
                {
                    this._parent.DirMod = null;
                    return true;
                }
                if ((this._parent.PctRch == item))
                {
                    this._parent.PctRch = null;
                    return true;
                }
                if ((this._parent.Ofs == item))
                {
                    this._parent.Ofs = null;
                    return true;
                }
                if ((this._parent.PctOfs == item))
                {
                    this._parent.PctOfs = null;
                    return true;
                }
                if ((this._parent.RisLod == item))
                {
                    this._parent.RisLod = null;
                    return true;
                }
                if ((this._parent.AngLod == item))
                {
                    this._parent.AngLod = null;
                    return true;
                }
                if ((this._parent.TmDlMod == item))
                {
                    this._parent.TmDlMod = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.PhDlMod == item))
                {
                    this._parent.PhDlMod = null;
                    return true;
                }
                if ((this._parent.PhDlTmms == item))
                {
                    this._parent.PhDlTmms = null;
                    return true;
                }
                if ((this._parent.GndDlMod == item))
                {
                    this._parent.GndDlMod = null;
                    return true;
                }
                if ((this._parent.GndDlTmms == item))
                {
                    this._parent.GndDlTmms = null;
                    return true;
                }
                if ((this._parent.X1 == item))
                {
                    this._parent.X1 = null;
                    return true;
                }
                if ((this._parent.LinAng == item))
                {
                    this._parent.LinAng = null;
                    return true;
                }
                if ((this._parent.RisGndRch == item))
                {
                    this._parent.RisGndRch = null;
                    return true;
                }
                if ((this._parent.RisPhRch == item))
                {
                    this._parent.RisPhRch = null;
                    return true;
                }
                if ((this._parent.K0Fact == item))
                {
                    this._parent.K0Fact = null;
                    return true;
                }
                if ((this._parent.K0FactAng == item))
                {
                    this._parent.K0FactAng = null;
                    return true;
                }
                if ((this._parent.RsDlTmms == item))
                {
                    this._parent.RsDlTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.PoRch).Concat(this._parent.PhStr).Concat(this._parent.GndStr).Concat(this._parent.DirMod).Concat(this._parent.PctRch).Concat(this._parent.Ofs).Concat(this._parent.PctOfs).Concat(this._parent.RisLod).Concat(this._parent.AngLod).Concat(this._parent.TmDlMod).Concat(this._parent.OpDlTmms).Concat(this._parent.PhDlMod).Concat(this._parent.PhDlTmms).Concat(this._parent.GndDlMod).Concat(this._parent.GndDlTmms).Concat(this._parent.X1).Concat(this._parent.LinAng).Concat(this._parent.RisGndRch).Concat(this._parent.RisPhRch).Concat(this._parent.K0Fact).Concat(this._parent.K0FactAng).Concat(this._parent.RsDlTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPDIS, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPDIS modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPDIS, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPDIS modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PoRch property
        /// </summary>
        private sealed class PoRchProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PoRchProxy(IPDIS modelElement) : 
                    base(modelElement, "PoRch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PoRch;
                }
                set
                {
                    this.ModelElement.PoRch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhStr property
        /// </summary>
        private sealed class PhStrProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhStrProxy(IPDIS modelElement) : 
                    base(modelElement, "PhStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PhStr;
                }
                set
                {
                    this.ModelElement.PhStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GndStr property
        /// </summary>
        private sealed class GndStrProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GndStrProxy(IPDIS modelElement) : 
                    base(modelElement, "GndStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.GndStr;
                }
                set
                {
                    this.ModelElement.GndStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DirMod property
        /// </summary>
        private sealed class DirModProxy : ModelPropertyChange<IPDIS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirModProxy(IPDIS modelElement) : 
                    base(modelElement, "DirMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.DirMod;
                }
                set
                {
                    this.ModelElement.DirMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PctRch property
        /// </summary>
        private sealed class PctRchProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PctRchProxy(IPDIS modelElement) : 
                    base(modelElement, "PctRch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PctRch;
                }
                set
                {
                    this.ModelElement.PctRch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ofs property
        /// </summary>
        private sealed class OfsProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OfsProxy(IPDIS modelElement) : 
                    base(modelElement, "Ofs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Ofs;
                }
                set
                {
                    this.ModelElement.Ofs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PctOfs property
        /// </summary>
        private sealed class PctOfsProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PctOfsProxy(IPDIS modelElement) : 
                    base(modelElement, "PctOfs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PctOfs;
                }
                set
                {
                    this.ModelElement.PctOfs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RisLod property
        /// </summary>
        private sealed class RisLodProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RisLodProxy(IPDIS modelElement) : 
                    base(modelElement, "RisLod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.RisLod;
                }
                set
                {
                    this.ModelElement.RisLod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AngLod property
        /// </summary>
        private sealed class AngLodProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngLodProxy(IPDIS modelElement) : 
                    base(modelElement, "AngLod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.AngLod;
                }
                set
                {
                    this.ModelElement.AngLod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmDlMod property
        /// </summary>
        private sealed class TmDlModProxy : ModelPropertyChange<IPDIS, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmDlModProxy(IPDIS modelElement) : 
                    base(modelElement, "TmDlMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.TmDlMod;
                }
                set
                {
                    this.ModelElement.TmDlMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPDIS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPDIS modelElement) : 
                    base(modelElement, "OpDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhDlMod property
        /// </summary>
        private sealed class PhDlModProxy : ModelPropertyChange<IPDIS, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhDlModProxy(IPDIS modelElement) : 
                    base(modelElement, "PhDlMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.PhDlMod;
                }
                set
                {
                    this.ModelElement.PhDlMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhDlTmms property
        /// </summary>
        private sealed class PhDlTmmsProxy : ModelPropertyChange<IPDIS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhDlTmmsProxy(IPDIS modelElement) : 
                    base(modelElement, "PhDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PhDlTmms;
                }
                set
                {
                    this.ModelElement.PhDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GndDlMod property
        /// </summary>
        private sealed class GndDlModProxy : ModelPropertyChange<IPDIS, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GndDlModProxy(IPDIS modelElement) : 
                    base(modelElement, "GndDlMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.GndDlMod;
                }
                set
                {
                    this.ModelElement.GndDlMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GndDlTmms property
        /// </summary>
        private sealed class GndDlTmmsProxy : ModelPropertyChange<IPDIS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GndDlTmmsProxy(IPDIS modelElement) : 
                    base(modelElement, "GndDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.GndDlTmms;
                }
                set
                {
                    this.ModelElement.GndDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the X1 property
        /// </summary>
        private sealed class X1Proxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X1Proxy(IPDIS modelElement) : 
                    base(modelElement, "X1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.X1;
                }
                set
                {
                    this.ModelElement.X1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LinAng property
        /// </summary>
        private sealed class LinAngProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LinAngProxy(IPDIS modelElement) : 
                    base(modelElement, "LinAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LinAng;
                }
                set
                {
                    this.ModelElement.LinAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RisGndRch property
        /// </summary>
        private sealed class RisGndRchProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RisGndRchProxy(IPDIS modelElement) : 
                    base(modelElement, "RisGndRch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.RisGndRch;
                }
                set
                {
                    this.ModelElement.RisGndRch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RisPhRch property
        /// </summary>
        private sealed class RisPhRchProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RisPhRchProxy(IPDIS modelElement) : 
                    base(modelElement, "RisPhRch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.RisPhRch;
                }
                set
                {
                    this.ModelElement.RisPhRch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the K0Fact property
        /// </summary>
        private sealed class K0FactProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public K0FactProxy(IPDIS modelElement) : 
                    base(modelElement, "K0Fact")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.K0Fact;
                }
                set
                {
                    this.ModelElement.K0Fact = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the K0FactAng property
        /// </summary>
        private sealed class K0FactAngProxy : ModelPropertyChange<IPDIS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public K0FactAngProxy(IPDIS modelElement) : 
                    base(modelElement, "K0FactAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.K0FactAng;
                }
                set
                {
                    this.ModelElement.K0FactAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDlTmms property
        /// </summary>
        private sealed class RsDlTmmsProxy : ModelPropertyChange<IPDIS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDlTmmsProxy(IPDIS modelElement) : 
                    base(modelElement, "RsDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDlTmms;
                }
                set
                {
                    this.ModelElement.RsDlTmms = value;
                }
            }
        }
    }
}

