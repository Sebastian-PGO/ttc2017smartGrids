//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PTRC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PTRC")]
    public partial class PTRC : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPTRC, IModelElement
    {
        
        private static Lazy<ITypedElement> _trReference = new Lazy<ITypedElement>(RetrieveTrReference);
        
        /// <summary>
        /// The backing field for the Tr property
        /// </summary>
        private IACT _tr;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _trModReference = new Lazy<ITypedElement>(RetrieveTrModReference);
        
        /// <summary>
        /// The backing field for the TrMod property
        /// </summary>
        private IING _trMod;
        
        private static Lazy<ITypedElement> _trPlsTmmsReference = new Lazy<ITypedElement>(RetrieveTrPlsTmmsReference);
        
        /// <summary>
        /// The backing field for the TrPlsTmms property
        /// </summary>
        private IING _trPlsTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Tr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Tr
        {
            get
            {
                return this._tr;
            }
            set
            {
                if ((this._tr != value))
                {
                    IACT old = this._tr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrChanging(e);
                    this.OnPropertyChanging("Tr", e, _trReference);
                    this._tr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTr;
                    }
                    this.OnTrChanged(e);
                    this.OnPropertyChanged("Tr", e, _trReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The TrMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING TrMod
        {
            get
            {
                return this._trMod;
            }
            set
            {
                if ((this._trMod != value))
                {
                    IING old = this._trMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrModChanging(e);
                    this.OnPropertyChanging("TrMod", e, _trModReference);
                    this._trMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTrMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTrMod;
                    }
                    this.OnTrModChanged(e);
                    this.OnPropertyChanged("TrMod", e, _trModReference);
                }
            }
        }
        
        /// <summary>
        /// The TrPlsTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING TrPlsTmms
        {
            get
            {
                return this._trPlsTmms;
            }
            set
            {
                if ((this._trPlsTmms != value))
                {
                    IING old = this._trPlsTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrPlsTmmsChanging(e);
                    this.OnPropertyChanging("TrPlsTmms", e, _trPlsTmmsReference);
                    this._trPlsTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTrPlsTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTrPlsTmms;
                    }
                    this.OnTrPlsTmmsChanged(e);
                    this.OnPropertyChanged("TrPlsTmms", e, _trPlsTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PTRCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PTRC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Tr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrChanging;
        
        /// <summary>
        /// Gets fired when the Tr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the TrMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrModChanging;
        
        /// <summary>
        /// Gets fired when the TrMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrModChanged;
        
        /// <summary>
        /// Gets fired before the TrPlsTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrPlsTmmsChanging;
        
        /// <summary>
        /// Gets fired when the TrPlsTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrPlsTmmsChanged;
        
        private static ITypedElement RetrieveTrReference()
        {
            return ((ITypedElement)(((ModelElement)(PTRC.ClassInstance)).Resolve("Tr")));
        }
        
        /// <summary>
        /// Raises the TrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTr(object sender, System.EventArgs eventArgs)
        {
            this.Tr = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PTRC.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PTRC.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveTrModReference()
        {
            return ((ITypedElement)(((ModelElement)(PTRC.ClassInstance)).Resolve("TrMod")));
        }
        
        /// <summary>
        /// Raises the TrModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TrMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrMod(object sender, System.EventArgs eventArgs)
        {
            this.TrMod = null;
        }
        
        private static ITypedElement RetrieveTrPlsTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PTRC.ClassInstance)).Resolve("TrPlsTmms")));
        }
        
        /// <summary>
        /// Raises the TrPlsTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrPlsTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrPlsTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrPlsTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrPlsTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrPlsTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TrPlsTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrPlsTmms(object sender, System.EventArgs eventArgs)
        {
            this.TrPlsTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TR"))
            {
                this.Tr = ((IACT)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "TRMOD"))
            {
                this.TrMod = ((IING)(value));
                return;
            }
            if ((feature == "TRPLSTMMS"))
            {
                this.TrPlsTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Tr"))
            {
                return new TrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "TrMod"))
            {
                return new TrModProxy(this);
            }
            if ((attribute == "TrPlsTmms"))
            {
                return new TrPlsTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Tr"))
            {
                return new TrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "TrMod"))
            {
                return new TrModProxy(this);
            }
            if ((reference == "TrPlsTmms"))
            {
                return new TrPlsTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PTRC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PTRC class
        /// </summary>
        public class PTRCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PTRC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PTRCReferencedElementsCollection(PTRC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Tr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrPlsTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.TrModChanged += this.PropagateValueChanges;
                this._parent.TrPlsTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.TrModChanged -= this.PropagateValueChanges;
                this._parent.TrPlsTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Tr == null))
                {
                    IACT trCasted = item.As<IACT>();
                    if ((trCasted != null))
                    {
                        this._parent.Tr = trCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.TrMod == null))
                {
                    IING trModCasted = item.As<IING>();
                    if ((trModCasted != null))
                    {
                        this._parent.TrMod = trModCasted;
                        return;
                    }
                }
                if ((this._parent.TrPlsTmms == null))
                {
                    IING trPlsTmmsCasted = item.As<IING>();
                    if ((trPlsTmmsCasted != null))
                    {
                        this._parent.TrPlsTmms = trPlsTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Tr = null;
                this._parent.Op = null;
                this._parent.Str = null;
                this._parent.TrMod = null;
                this._parent.TrPlsTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Tr))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.TrMod))
                {
                    return true;
                }
                if ((item == this._parent.TrPlsTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Tr != null))
                {
                    array[arrayIndex] = this._parent.Tr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrMod != null))
                {
                    array[arrayIndex] = this._parent.TrMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrPlsTmms != null))
                {
                    array[arrayIndex] = this._parent.TrPlsTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Tr == item))
                {
                    this._parent.Tr = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.TrMod == item))
                {
                    this._parent.TrMod = null;
                    return true;
                }
                if ((this._parent.TrPlsTmms == item))
                {
                    this._parent.TrPlsTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Tr).Concat(this._parent.Op).Concat(this._parent.Str).Concat(this._parent.TrMod).Concat(this._parent.TrPlsTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tr property
        /// </summary>
        private sealed class TrProxy : ModelPropertyChange<IPTRC, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrProxy(IPTRC modelElement) : 
                    base(modelElement, "Tr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Tr;
                }
                set
                {
                    this.ModelElement.Tr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPTRC, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPTRC modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPTRC, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPTRC modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrMod property
        /// </summary>
        private sealed class TrModProxy : ModelPropertyChange<IPTRC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrModProxy(IPTRC modelElement) : 
                    base(modelElement, "TrMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.TrMod;
                }
                set
                {
                    this.ModelElement.TrMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrPlsTmms property
        /// </summary>
        private sealed class TrPlsTmmsProxy : ModelPropertyChange<IPTRC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrPlsTmmsProxy(IPTRC modelElement) : 
                    base(modelElement, "TrPlsTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.TrPlsTmms;
                }
                set
                {
                    this.ModelElement.TrPlsTmms = value;
                }
            }
        }
    }
}

