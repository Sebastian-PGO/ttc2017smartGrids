//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PMRI class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PMRI")]
    public class PMRI : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPMRI, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        /// <summary>
        /// The backing field for the StrInh property
        /// </summary>
        private ISPS _strInh;
        
        /// <summary>
        /// The backing field for the StrInhTmm property
        /// </summary>
        private IINS _strInhTmm;
        
        /// <summary>
        /// The backing field for the SetA property
        /// </summary>
        private IASG _setA;
        
        /// <summary>
        /// The backing field for the SetTms property
        /// </summary>
        private IING _setTms;
        
        /// <summary>
        /// The backing field for the MaxNumStr property
        /// </summary>
        private IING _maxNumStr;
        
        /// <summary>
        /// The backing field for the MaxWrmStr property
        /// </summary>
        private IING _maxWrmStr;
        
        /// <summary>
        /// The backing field for the MaxStrTmm property
        /// </summary>
        private IING _maxStrTmm;
        
        /// <summary>
        /// The backing field for the EqTmm property
        /// </summary>
        private IING _eqTmm;
        
        /// <summary>
        /// The backing field for the InhTmm property
        /// </summary>
        private IING _inhTmm;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e);
                }
            }
        }
        
        /// <summary>
        /// The StrInh property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS StrInh
        {
            get
            {
                return this._strInh;
            }
            set
            {
                if ((this._strInh != value))
                {
                    ISPS old = this._strInh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrInhChanging(e);
                    this.OnPropertyChanging("StrInh", e);
                    this._strInh = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrInh;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrInh;
                    }
                    this.OnStrInhChanged(e);
                    this.OnPropertyChanged("StrInh", e);
                }
            }
        }
        
        /// <summary>
        /// The StrInhTmm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS StrInhTmm
        {
            get
            {
                return this._strInhTmm;
            }
            set
            {
                if ((this._strInhTmm != value))
                {
                    IINS old = this._strInhTmm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrInhTmmChanging(e);
                    this.OnPropertyChanging("StrInhTmm", e);
                    this._strInhTmm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrInhTmm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrInhTmm;
                    }
                    this.OnStrInhTmmChanged(e);
                    this.OnPropertyChanged("StrInhTmm", e);
                }
            }
        }
        
        /// <summary>
        /// The SetA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG SetA
        {
            get
            {
                return this._setA;
            }
            set
            {
                if ((this._setA != value))
                {
                    IASG old = this._setA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetAChanging(e);
                    this.OnPropertyChanging("SetA", e);
                    this._setA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetA;
                    }
                    this.OnSetAChanged(e);
                    this.OnPropertyChanged("SetA", e);
                }
            }
        }
        
        /// <summary>
        /// The SetTms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SetTms
        {
            get
            {
                return this._setTms;
            }
            set
            {
                if ((this._setTms != value))
                {
                    IING old = this._setTms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetTmsChanging(e);
                    this.OnPropertyChanging("SetTms", e);
                    this._setTms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetTms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetTms;
                    }
                    this.OnSetTmsChanged(e);
                    this.OnPropertyChanged("SetTms", e);
                }
            }
        }
        
        /// <summary>
        /// The MaxNumStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxNumStr
        {
            get
            {
                return this._maxNumStr;
            }
            set
            {
                if ((this._maxNumStr != value))
                {
                    IING old = this._maxNumStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxNumStrChanging(e);
                    this.OnPropertyChanging("MaxNumStr", e);
                    this._maxNumStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxNumStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxNumStr;
                    }
                    this.OnMaxNumStrChanged(e);
                    this.OnPropertyChanged("MaxNumStr", e);
                }
            }
        }
        
        /// <summary>
        /// The MaxWrmStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxWrmStr
        {
            get
            {
                return this._maxWrmStr;
            }
            set
            {
                if ((this._maxWrmStr != value))
                {
                    IING old = this._maxWrmStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxWrmStrChanging(e);
                    this.OnPropertyChanging("MaxWrmStr", e);
                    this._maxWrmStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxWrmStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxWrmStr;
                    }
                    this.OnMaxWrmStrChanged(e);
                    this.OnPropertyChanged("MaxWrmStr", e);
                }
            }
        }
        
        /// <summary>
        /// The MaxStrTmm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxStrTmm
        {
            get
            {
                return this._maxStrTmm;
            }
            set
            {
                if ((this._maxStrTmm != value))
                {
                    IING old = this._maxStrTmm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxStrTmmChanging(e);
                    this.OnPropertyChanging("MaxStrTmm", e);
                    this._maxStrTmm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxStrTmm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxStrTmm;
                    }
                    this.OnMaxStrTmmChanged(e);
                    this.OnPropertyChanged("MaxStrTmm", e);
                }
            }
        }
        
        /// <summary>
        /// The EqTmm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING EqTmm
        {
            get
            {
                return this._eqTmm;
            }
            set
            {
                if ((this._eqTmm != value))
                {
                    IING old = this._eqTmm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEqTmmChanging(e);
                    this.OnPropertyChanging("EqTmm", e);
                    this._eqTmm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEqTmm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEqTmm;
                    }
                    this.OnEqTmmChanged(e);
                    this.OnPropertyChanged("EqTmm", e);
                }
            }
        }
        
        /// <summary>
        /// The InhTmm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING InhTmm
        {
            get
            {
                return this._inhTmm;
            }
            set
            {
                if ((this._inhTmm != value))
                {
                    IING old = this._inhTmm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInhTmmChanging(e);
                    this.OnPropertyChanging("InhTmm", e);
                    this._inhTmm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInhTmm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInhTmm;
                    }
                    this.OnInhTmmChanged(e);
                    this.OnPropertyChanged("InhTmm", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PMRIReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PMRI")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the StrInh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrInhChanging;
        
        /// <summary>
        /// Gets fired when the StrInh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrInhChanged;
        
        /// <summary>
        /// Gets fired before the StrInhTmm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrInhTmmChanging;
        
        /// <summary>
        /// Gets fired when the StrInhTmm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrInhTmmChanged;
        
        /// <summary>
        /// Gets fired before the SetA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetAChanging;
        
        /// <summary>
        /// Gets fired when the SetA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetAChanged;
        
        /// <summary>
        /// Gets fired before the SetTms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetTmsChanging;
        
        /// <summary>
        /// Gets fired when the SetTms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetTmsChanged;
        
        /// <summary>
        /// Gets fired before the MaxNumStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumStrChanging;
        
        /// <summary>
        /// Gets fired when the MaxNumStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumStrChanged;
        
        /// <summary>
        /// Gets fired before the MaxWrmStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxWrmStrChanging;
        
        /// <summary>
        /// Gets fired when the MaxWrmStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxWrmStrChanged;
        
        /// <summary>
        /// Gets fired before the MaxStrTmm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxStrTmmChanging;
        
        /// <summary>
        /// Gets fired when the MaxStrTmm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxStrTmmChanged;
        
        /// <summary>
        /// Gets fired before the EqTmm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EqTmmChanging;
        
        /// <summary>
        /// Gets fired when the EqTmm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EqTmmChanged;
        
        /// <summary>
        /// Gets fired before the InhTmm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InhTmmChanging;
        
        /// <summary>
        /// Gets fired when the InhTmm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InhTmmChanged;
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        /// <summary>
        /// Raises the StrInhChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrInhChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrInhChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrInhChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrInhChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrInhChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrInh property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrInh(object sender, System.EventArgs eventArgs)
        {
            this.StrInh = null;
        }
        
        /// <summary>
        /// Raises the StrInhTmmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrInhTmmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrInhTmmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrInhTmmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrInhTmmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrInhTmmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrInhTmm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrInhTmm(object sender, System.EventArgs eventArgs)
        {
            this.StrInhTmm = null;
        }
        
        /// <summary>
        /// Raises the SetAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetA(object sender, System.EventArgs eventArgs)
        {
            this.SetA = null;
        }
        
        /// <summary>
        /// Raises the SetTmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetTmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetTmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetTmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetTmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetTmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetTms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetTms(object sender, System.EventArgs eventArgs)
        {
            this.SetTms = null;
        }
        
        /// <summary>
        /// Raises the MaxNumStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxNumStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxNumStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxNumStr(object sender, System.EventArgs eventArgs)
        {
            this.MaxNumStr = null;
        }
        
        /// <summary>
        /// Raises the MaxWrmStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxWrmStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxWrmStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxWrmStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxWrmStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxWrmStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxWrmStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxWrmStr(object sender, System.EventArgs eventArgs)
        {
            this.MaxWrmStr = null;
        }
        
        /// <summary>
        /// Raises the MaxStrTmmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxStrTmmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxStrTmmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxStrTmmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxStrTmmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxStrTmmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxStrTmm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxStrTmm(object sender, System.EventArgs eventArgs)
        {
            this.MaxStrTmm = null;
        }
        
        /// <summary>
        /// Raises the EqTmmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEqTmmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EqTmmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EqTmmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEqTmmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EqTmmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EqTmm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEqTmm(object sender, System.EventArgs eventArgs)
        {
            this.EqTmm = null;
        }
        
        /// <summary>
        /// Raises the InhTmmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInhTmmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InhTmmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InhTmmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInhTmmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InhTmmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InhTmm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInhTmm(object sender, System.EventArgs eventArgs)
        {
            this.InhTmm = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "STRINH"))
            {
                this.StrInh = ((ISPS)(value));
                return;
            }
            if ((feature == "STRINHTMM"))
            {
                this.StrInhTmm = ((IINS)(value));
                return;
            }
            if ((feature == "SETA"))
            {
                this.SetA = ((IASG)(value));
                return;
            }
            if ((feature == "SETTMS"))
            {
                this.SetTms = ((IING)(value));
                return;
            }
            if ((feature == "MAXNUMSTR"))
            {
                this.MaxNumStr = ((IING)(value));
                return;
            }
            if ((feature == "MAXWRMSTR"))
            {
                this.MaxWrmStr = ((IING)(value));
                return;
            }
            if ((feature == "MAXSTRTMM"))
            {
                this.MaxStrTmm = ((IING)(value));
                return;
            }
            if ((feature == "EQTMM"))
            {
                this.EqTmm = ((IING)(value));
                return;
            }
            if ((feature == "INHTMM"))
            {
                this.InhTmm = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "StrInh"))
            {
                return new StrInhProxy(this);
            }
            if ((attribute == "StrInhTmm"))
            {
                return new StrInhTmmProxy(this);
            }
            if ((attribute == "SetA"))
            {
                return new SetAProxy(this);
            }
            if ((attribute == "SetTms"))
            {
                return new SetTmsProxy(this);
            }
            if ((attribute == "MaxNumStr"))
            {
                return new MaxNumStrProxy(this);
            }
            if ((attribute == "MaxWrmStr"))
            {
                return new MaxWrmStrProxy(this);
            }
            if ((attribute == "MaxStrTmm"))
            {
                return new MaxStrTmmProxy(this);
            }
            if ((attribute == "EqTmm"))
            {
                return new EqTmmProxy(this);
            }
            if ((attribute == "InhTmm"))
            {
                return new InhTmmProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "StrInh"))
            {
                return new StrInhProxy(this);
            }
            if ((reference == "StrInhTmm"))
            {
                return new StrInhTmmProxy(this);
            }
            if ((reference == "SetA"))
            {
                return new SetAProxy(this);
            }
            if ((reference == "SetTms"))
            {
                return new SetTmsProxy(this);
            }
            if ((reference == "MaxNumStr"))
            {
                return new MaxNumStrProxy(this);
            }
            if ((reference == "MaxWrmStr"))
            {
                return new MaxWrmStrProxy(this);
            }
            if ((reference == "MaxStrTmm"))
            {
                return new MaxStrTmmProxy(this);
            }
            if ((reference == "EqTmm"))
            {
                return new EqTmmProxy(this);
            }
            if ((reference == "InhTmm"))
            {
                return new InhTmmProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PMRI")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PMRI class
        /// </summary>
        public class PMRIReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PMRI _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PMRIReferencedElementsCollection(PMRI parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrInh != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrInhTmm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetTms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxNumStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxWrmStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxStrTmm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EqTmm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InhTmm != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.StrInhChanged += this.PropagateValueChanges;
                this._parent.StrInhTmmChanged += this.PropagateValueChanges;
                this._parent.SetAChanged += this.PropagateValueChanges;
                this._parent.SetTmsChanged += this.PropagateValueChanges;
                this._parent.MaxNumStrChanged += this.PropagateValueChanges;
                this._parent.MaxWrmStrChanged += this.PropagateValueChanges;
                this._parent.MaxStrTmmChanged += this.PropagateValueChanges;
                this._parent.EqTmmChanged += this.PropagateValueChanges;
                this._parent.InhTmmChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.StrInhChanged -= this.PropagateValueChanges;
                this._parent.StrInhTmmChanged -= this.PropagateValueChanges;
                this._parent.SetAChanged -= this.PropagateValueChanges;
                this._parent.SetTmsChanged -= this.PropagateValueChanges;
                this._parent.MaxNumStrChanged -= this.PropagateValueChanges;
                this._parent.MaxWrmStrChanged -= this.PropagateValueChanges;
                this._parent.MaxStrTmmChanged -= this.PropagateValueChanges;
                this._parent.EqTmmChanged -= this.PropagateValueChanges;
                this._parent.InhTmmChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.StrInh == null))
                {
                    ISPS strInhCasted = item.As<ISPS>();
                    if ((strInhCasted != null))
                    {
                        this._parent.StrInh = strInhCasted;
                        return;
                    }
                }
                if ((this._parent.StrInhTmm == null))
                {
                    IINS strInhTmmCasted = item.As<IINS>();
                    if ((strInhTmmCasted != null))
                    {
                        this._parent.StrInhTmm = strInhTmmCasted;
                        return;
                    }
                }
                if ((this._parent.SetA == null))
                {
                    IASG setACasted = item.As<IASG>();
                    if ((setACasted != null))
                    {
                        this._parent.SetA = setACasted;
                        return;
                    }
                }
                if ((this._parent.SetTms == null))
                {
                    IING setTmsCasted = item.As<IING>();
                    if ((setTmsCasted != null))
                    {
                        this._parent.SetTms = setTmsCasted;
                        return;
                    }
                }
                if ((this._parent.MaxNumStr == null))
                {
                    IING maxNumStrCasted = item.As<IING>();
                    if ((maxNumStrCasted != null))
                    {
                        this._parent.MaxNumStr = maxNumStrCasted;
                        return;
                    }
                }
                if ((this._parent.MaxWrmStr == null))
                {
                    IING maxWrmStrCasted = item.As<IING>();
                    if ((maxWrmStrCasted != null))
                    {
                        this._parent.MaxWrmStr = maxWrmStrCasted;
                        return;
                    }
                }
                if ((this._parent.MaxStrTmm == null))
                {
                    IING maxStrTmmCasted = item.As<IING>();
                    if ((maxStrTmmCasted != null))
                    {
                        this._parent.MaxStrTmm = maxStrTmmCasted;
                        return;
                    }
                }
                if ((this._parent.EqTmm == null))
                {
                    IING eqTmmCasted = item.As<IING>();
                    if ((eqTmmCasted != null))
                    {
                        this._parent.EqTmm = eqTmmCasted;
                        return;
                    }
                }
                if ((this._parent.InhTmm == null))
                {
                    IING inhTmmCasted = item.As<IING>();
                    if ((inhTmmCasted != null))
                    {
                        this._parent.InhTmm = inhTmmCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Op = null;
                this._parent.StrInh = null;
                this._parent.StrInhTmm = null;
                this._parent.SetA = null;
                this._parent.SetTms = null;
                this._parent.MaxNumStr = null;
                this._parent.MaxWrmStr = null;
                this._parent.MaxStrTmm = null;
                this._parent.EqTmm = null;
                this._parent.InhTmm = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.StrInh))
                {
                    return true;
                }
                if ((item == this._parent.StrInhTmm))
                {
                    return true;
                }
                if ((item == this._parent.SetA))
                {
                    return true;
                }
                if ((item == this._parent.SetTms))
                {
                    return true;
                }
                if ((item == this._parent.MaxNumStr))
                {
                    return true;
                }
                if ((item == this._parent.MaxWrmStr))
                {
                    return true;
                }
                if ((item == this._parent.MaxStrTmm))
                {
                    return true;
                }
                if ((item == this._parent.EqTmm))
                {
                    return true;
                }
                if ((item == this._parent.InhTmm))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrInh != null))
                {
                    array[arrayIndex] = this._parent.StrInh;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrInhTmm != null))
                {
                    array[arrayIndex] = this._parent.StrInhTmm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetA != null))
                {
                    array[arrayIndex] = this._parent.SetA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetTms != null))
                {
                    array[arrayIndex] = this._parent.SetTms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxNumStr != null))
                {
                    array[arrayIndex] = this._parent.MaxNumStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxWrmStr != null))
                {
                    array[arrayIndex] = this._parent.MaxWrmStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxStrTmm != null))
                {
                    array[arrayIndex] = this._parent.MaxStrTmm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EqTmm != null))
                {
                    array[arrayIndex] = this._parent.EqTmm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InhTmm != null))
                {
                    array[arrayIndex] = this._parent.InhTmm;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.StrInh == item))
                {
                    this._parent.StrInh = null;
                    return true;
                }
                if ((this._parent.StrInhTmm == item))
                {
                    this._parent.StrInhTmm = null;
                    return true;
                }
                if ((this._parent.SetA == item))
                {
                    this._parent.SetA = null;
                    return true;
                }
                if ((this._parent.SetTms == item))
                {
                    this._parent.SetTms = null;
                    return true;
                }
                if ((this._parent.MaxNumStr == item))
                {
                    this._parent.MaxNumStr = null;
                    return true;
                }
                if ((this._parent.MaxWrmStr == item))
                {
                    this._parent.MaxWrmStr = null;
                    return true;
                }
                if ((this._parent.MaxStrTmm == item))
                {
                    this._parent.MaxStrTmm = null;
                    return true;
                }
                if ((this._parent.EqTmm == item))
                {
                    this._parent.EqTmm = null;
                    return true;
                }
                if ((this._parent.InhTmm == item))
                {
                    this._parent.InhTmm = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Op).Concat(this._parent.StrInh).Concat(this._parent.StrInhTmm).Concat(this._parent.SetA).Concat(this._parent.SetTms).Concat(this._parent.MaxNumStr).Concat(this._parent.MaxWrmStr).Concat(this._parent.MaxStrTmm).Concat(this._parent.EqTmm).Concat(this._parent.InhTmm).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPMRI, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrInh property
        /// </summary>
        private sealed class StrInhProxy : ModelPropertyChange<IPMRI, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrInhProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.StrInh;
                }
                set
                {
                    this.ModelElement.StrInh = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrInhChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrInhChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrInhTmm property
        /// </summary>
        private sealed class StrInhTmmProxy : ModelPropertyChange<IPMRI, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrInhTmmProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.StrInhTmm;
                }
                set
                {
                    this.ModelElement.StrInhTmm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrInhTmmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrInhTmmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetA property
        /// </summary>
        private sealed class SetAProxy : ModelPropertyChange<IPMRI, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetAProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.SetA;
                }
                set
                {
                    this.ModelElement.SetA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetTms property
        /// </summary>
        private sealed class SetTmsProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetTmsProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SetTms;
                }
                set
                {
                    this.ModelElement.SetTms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetTmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetTmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxNumStr property
        /// </summary>
        private sealed class MaxNumStrProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxNumStrProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxNumStr;
                }
                set
                {
                    this.ModelElement.MaxNumStr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxNumStrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxNumStrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxWrmStr property
        /// </summary>
        private sealed class MaxWrmStrProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxWrmStrProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxWrmStr;
                }
                set
                {
                    this.ModelElement.MaxWrmStr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxWrmStrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxWrmStrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxStrTmm property
        /// </summary>
        private sealed class MaxStrTmmProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxStrTmmProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxStrTmm;
                }
                set
                {
                    this.ModelElement.MaxStrTmm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxStrTmmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxStrTmmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EqTmm property
        /// </summary>
        private sealed class EqTmmProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EqTmmProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.EqTmm;
                }
                set
                {
                    this.ModelElement.EqTmm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EqTmmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EqTmmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InhTmm property
        /// </summary>
        private sealed class InhTmmProxy : ModelPropertyChange<IPMRI, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InhTmmProxy(IPMRI modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.InhTmm;
                }
                set
                {
                    this.ModelElement.InhTmm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InhTmmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InhTmmChanged -= handler;
            }
        }
    }
}

