//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PHIZ class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PHIZ")]
    public partial class PHIZ : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPHIZ, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _aStrReference = new Lazy<ITypedElement>(RetrieveAStrReference);
        
        /// <summary>
        /// The backing field for the AStr property
        /// </summary>
        private IASG _aStr;
        
        private static Lazy<ITypedElement> _vStrReference = new Lazy<ITypedElement>(RetrieveVStrReference);
        
        /// <summary>
        /// The backing field for the VStr property
        /// </summary>
        private IASG _vStr;
        
        private static Lazy<ITypedElement> _hVStrReference = new Lazy<ITypedElement>(RetrieveHVStrReference);
        
        /// <summary>
        /// The backing field for the HVStr property
        /// </summary>
        private IASG _hVStr;
        
        private static Lazy<ITypedElement> _opDlTmmsReference = new Lazy<ITypedElement>(RetrieveOpDlTmmsReference);
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        private static Lazy<ITypedElement> _rsDlTmmsReference = new Lazy<ITypedElement>(RetrieveRsDlTmmsReference);
        
        /// <summary>
        /// The backing field for the RsDlTmms property
        /// </summary>
        private IING _rsDlTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The AStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG AStr
        {
            get
            {
                return this._aStr;
            }
            set
            {
                if ((this._aStr != value))
                {
                    IASG old = this._aStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAStrChanging(e);
                    this.OnPropertyChanging("AStr", e, _aStrReference);
                    this._aStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAStr;
                    }
                    this.OnAStrChanged(e);
                    this.OnPropertyChanged("AStr", e, _aStrReference);
                }
            }
        }
        
        /// <summary>
        /// The VStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG VStr
        {
            get
            {
                return this._vStr;
            }
            set
            {
                if ((this._vStr != value))
                {
                    IASG old = this._vStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVStrChanging(e);
                    this.OnPropertyChanging("VStr", e, _vStrReference);
                    this._vStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVStr;
                    }
                    this.OnVStrChanged(e);
                    this.OnPropertyChanged("VStr", e, _vStrReference);
                }
            }
        }
        
        /// <summary>
        /// The HVStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HVStr
        {
            get
            {
                return this._hVStr;
            }
            set
            {
                if ((this._hVStr != value))
                {
                    IASG old = this._hVStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHVStrChanging(e);
                    this.OnPropertyChanging("HVStr", e, _hVStrReference);
                    this._hVStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHVStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHVStr;
                    }
                    this.OnHVStrChanged(e);
                    this.OnPropertyChanged("HVStr", e, _hVStrReference);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e, _opDlTmmsReference);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e, _opDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RsDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDlTmms
        {
            get
            {
                return this._rsDlTmms;
            }
            set
            {
                if ((this._rsDlTmms != value))
                {
                    IING old = this._rsDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDlTmmsChanging(e);
                    this.OnPropertyChanging("RsDlTmms", e, _rsDlTmmsReference);
                    this._rsDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDlTmms;
                    }
                    this.OnRsDlTmmsChanged(e);
                    this.OnPropertyChanged("RsDlTmms", e, _rsDlTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PHIZReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PHIZ")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the AStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AStrChanging;
        
        /// <summary>
        /// Gets fired when the AStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AStrChanged;
        
        /// <summary>
        /// Gets fired before the VStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VStrChanging;
        
        /// <summary>
        /// Gets fired when the VStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VStrChanged;
        
        /// <summary>
        /// Gets fired before the HVStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVStrChanging;
        
        /// <summary>
        /// Gets fired when the HVStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HVStrChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RsDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDlTmmsChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveAStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("AStr")));
        }
        
        /// <summary>
        /// Raises the AStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAStr(object sender, System.EventArgs eventArgs)
        {
            this.AStr = null;
        }
        
        private static ITypedElement RetrieveVStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("VStr")));
        }
        
        /// <summary>
        /// Raises the VStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVStr(object sender, System.EventArgs eventArgs)
        {
            this.VStr = null;
        }
        
        private static ITypedElement RetrieveHVStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("HVStr")));
        }
        
        /// <summary>
        /// Raises the HVStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HVStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHVStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HVStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HVStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHVStr(object sender, System.EventArgs eventArgs)
        {
            this.HVStr = null;
        }
        
        private static ITypedElement RetrieveOpDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("OpDlTmms")));
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        private static ITypedElement RetrieveRsDlTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PHIZ.ClassInstance)).Resolve("RsDlTmms")));
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDlTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "ASTR"))
            {
                this.AStr = ((IASG)(value));
                return;
            }
            if ((feature == "VSTR"))
            {
                this.VStr = ((IASG)(value));
                return;
            }
            if ((feature == "HVSTR"))
            {
                this.HVStr = ((IASG)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSDLTMMS"))
            {
                this.RsDlTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "AStr"))
            {
                return new AStrProxy(this);
            }
            if ((attribute == "VStr"))
            {
                return new VStrProxy(this);
            }
            if ((attribute == "HVStr"))
            {
                return new HVStrProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "AStr"))
            {
                return new AStrProxy(this);
            }
            if ((reference == "VStr"))
            {
                return new VStrProxy(this);
            }
            if ((reference == "HVStr"))
            {
                return new HVStrProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "RsDlTmms"))
            {
                return new RsDlTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PHIZ")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PHIZ class
        /// </summary>
        public class PHIZReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PHIZ _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PHIZReferencedElementsCollection(PHIZ parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HVStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.AStrChanged += this.PropagateValueChanges;
                this._parent.VStrChanged += this.PropagateValueChanges;
                this._parent.HVStrChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.AStrChanged -= this.PropagateValueChanges;
                this._parent.VStrChanged -= this.PropagateValueChanges;
                this._parent.HVStrChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.RsDlTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.AStr == null))
                {
                    IASG aStrCasted = item.As<IASG>();
                    if ((aStrCasted != null))
                    {
                        this._parent.AStr = aStrCasted;
                        return;
                    }
                }
                if ((this._parent.VStr == null))
                {
                    IASG vStrCasted = item.As<IASG>();
                    if ((vStrCasted != null))
                    {
                        this._parent.VStr = vStrCasted;
                        return;
                    }
                }
                if ((this._parent.HVStr == null))
                {
                    IASG hVStrCasted = item.As<IASG>();
                    if ((hVStrCasted != null))
                    {
                        this._parent.HVStr = hVStrCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RsDlTmms == null))
                {
                    IING rsDlTmmsCasted = item.As<IING>();
                    if ((rsDlTmmsCasted != null))
                    {
                        this._parent.RsDlTmms = rsDlTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.AStr = null;
                this._parent.VStr = null;
                this._parent.HVStr = null;
                this._parent.OpDlTmms = null;
                this._parent.RsDlTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.AStr))
                {
                    return true;
                }
                if ((item == this._parent.VStr))
                {
                    return true;
                }
                if ((item == this._parent.HVStr))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.RsDlTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AStr != null))
                {
                    array[arrayIndex] = this._parent.AStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VStr != null))
                {
                    array[arrayIndex] = this._parent.VStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HVStr != null))
                {
                    array[arrayIndex] = this._parent.HVStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDlTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.AStr == item))
                {
                    this._parent.AStr = null;
                    return true;
                }
                if ((this._parent.VStr == item))
                {
                    this._parent.VStr = null;
                    return true;
                }
                if ((this._parent.HVStr == item))
                {
                    this._parent.HVStr = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.RsDlTmms == item))
                {
                    this._parent.RsDlTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.AStr).Concat(this._parent.VStr).Concat(this._parent.HVStr).Concat(this._parent.OpDlTmms).Concat(this._parent.RsDlTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPHIZ, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPHIZ modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPHIZ, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPHIZ modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AStr property
        /// </summary>
        private sealed class AStrProxy : ModelPropertyChange<IPHIZ, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AStrProxy(IPHIZ modelElement) : 
                    base(modelElement, "AStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.AStr;
                }
                set
                {
                    this.ModelElement.AStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VStr property
        /// </summary>
        private sealed class VStrProxy : ModelPropertyChange<IPHIZ, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VStrProxy(IPHIZ modelElement) : 
                    base(modelElement, "VStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.VStr;
                }
                set
                {
                    this.ModelElement.VStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HVStr property
        /// </summary>
        private sealed class HVStrProxy : ModelPropertyChange<IPHIZ, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HVStrProxy(IPHIZ modelElement) : 
                    base(modelElement, "HVStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HVStr;
                }
                set
                {
                    this.ModelElement.HVStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPHIZ, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPHIZ modelElement) : 
                    base(modelElement, "OpDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDlTmms property
        /// </summary>
        private sealed class RsDlTmmsProxy : ModelPropertyChange<IPHIZ, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDlTmmsProxy(IPHIZ modelElement) : 
                    base(modelElement, "RsDlTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDlTmms;
                }
                set
                {
                    this.ModelElement.RsDlTmms = value;
                }
            }
        }
    }
}

