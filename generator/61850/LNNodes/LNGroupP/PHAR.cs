//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PHAR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PHAR")]
    public class PHAR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPHAR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        /// <summary>
        /// The backing field for the HaRst property
        /// </summary>
        private IING _haRst;
        
        /// <summary>
        /// The backing field for the PhStr property
        /// </summary>
        private IASG _phStr;
        
        /// <summary>
        /// The backing field for the PhStop property
        /// </summary>
        private IASG _phStop;
        
        /// <summary>
        /// The backing field for the OpDiTmms property
        /// </summary>
        private IING _opDiTmms;
        
        /// <summary>
        /// The backing field for the RsDiTmms property
        /// </summary>
        private IING _rsDiTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e);
                }
            }
        }
        
        /// <summary>
        /// The HaRst property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING HaRst
        {
            get
            {
                return this._haRst;
            }
            set
            {
                if ((this._haRst != value))
                {
                    IING old = this._haRst;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHaRstChanging(e);
                    this.OnPropertyChanging("HaRst", e);
                    this._haRst = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHaRst;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHaRst;
                    }
                    this.OnHaRstChanged(e);
                    this.OnPropertyChanged("HaRst", e);
                }
            }
        }
        
        /// <summary>
        /// The PhStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PhStr
        {
            get
            {
                return this._phStr;
            }
            set
            {
                if ((this._phStr != value))
                {
                    IASG old = this._phStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhStrChanging(e);
                    this.OnPropertyChanging("PhStr", e);
                    this._phStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhStr;
                    }
                    this.OnPhStrChanged(e);
                    this.OnPropertyChanged("PhStr", e);
                }
            }
        }
        
        /// <summary>
        /// The PhStop property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG PhStop
        {
            get
            {
                return this._phStop;
            }
            set
            {
                if ((this._phStop != value))
                {
                    IASG old = this._phStop;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhStopChanging(e);
                    this.OnPropertyChanging("PhStop", e);
                    this._phStop = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhStop;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhStop;
                    }
                    this.OnPhStopChanged(e);
                    this.OnPropertyChanged("PhStop", e);
                }
            }
        }
        
        /// <summary>
        /// The OpDiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDiTmms
        {
            get
            {
                return this._opDiTmms;
            }
            set
            {
                if ((this._opDiTmms != value))
                {
                    IING old = this._opDiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDiTmmsChanging(e);
                    this.OnPropertyChanging("OpDiTmms", e);
                    this._opDiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDiTmms;
                    }
                    this.OnOpDiTmmsChanged(e);
                    this.OnPropertyChanged("OpDiTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The RsDiTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RsDiTmms
        {
            get
            {
                return this._rsDiTmms;
            }
            set
            {
                if ((this._rsDiTmms != value))
                {
                    IING old = this._rsDiTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRsDiTmmsChanging(e);
                    this.OnPropertyChanging("RsDiTmms", e);
                    this._rsDiTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRsDiTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRsDiTmms;
                    }
                    this.OnRsDiTmmsChanged(e);
                    this.OnPropertyChanged("RsDiTmms", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PHARReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PHAR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the HaRst property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRstChanging;
        
        /// <summary>
        /// Gets fired when the HaRst property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HaRstChanged;
        
        /// <summary>
        /// Gets fired before the PhStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStrChanging;
        
        /// <summary>
        /// Gets fired when the PhStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStrChanged;
        
        /// <summary>
        /// Gets fired before the PhStop property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStopChanging;
        
        /// <summary>
        /// Gets fired when the PhStop property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhStopChanged;
        
        /// <summary>
        /// Gets fired before the OpDiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDiTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RsDiTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RsDiTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RsDiTmmsChanged;
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        /// <summary>
        /// Raises the HaRstChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRstChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRstChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HaRstChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHaRstChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HaRstChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HaRst property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHaRst(object sender, System.EventArgs eventArgs)
        {
            this.HaRst = null;
        }
        
        /// <summary>
        /// Raises the PhStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhStr(object sender, System.EventArgs eventArgs)
        {
            this.PhStr = null;
        }
        
        /// <summary>
        /// Raises the PhStopChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStopChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStopChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhStopChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhStopChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhStopChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhStop property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhStop(object sender, System.EventArgs eventArgs)
        {
            this.PhStop = null;
        }
        
        /// <summary>
        /// Raises the OpDiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDiTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDiTmms = null;
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RsDiTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRsDiTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RsDiTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RsDiTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRsDiTmms(object sender, System.EventArgs eventArgs)
        {
            this.RsDiTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "HARST"))
            {
                this.HaRst = ((IING)(value));
                return;
            }
            if ((feature == "PHSTR"))
            {
                this.PhStr = ((IASG)(value));
                return;
            }
            if ((feature == "PHSTOP"))
            {
                this.PhStop = ((IASG)(value));
                return;
            }
            if ((feature == "OPDITMMS"))
            {
                this.OpDiTmms = ((IING)(value));
                return;
            }
            if ((feature == "RSDITMMS"))
            {
                this.RsDiTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "HaRst"))
            {
                return new HaRstProxy(this);
            }
            if ((attribute == "PhStr"))
            {
                return new PhStrProxy(this);
            }
            if ((attribute == "PhStop"))
            {
                return new PhStopProxy(this);
            }
            if ((attribute == "OpDiTmms"))
            {
                return new OpDiTmmsProxy(this);
            }
            if ((attribute == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "HaRst"))
            {
                return new HaRstProxy(this);
            }
            if ((reference == "PhStr"))
            {
                return new PhStrProxy(this);
            }
            if ((reference == "PhStop"))
            {
                return new PhStopProxy(this);
            }
            if ((reference == "OpDiTmms"))
            {
                return new OpDiTmmsProxy(this);
            }
            if ((reference == "RsDiTmms"))
            {
                return new RsDiTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PHAR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PHAR class
        /// </summary>
        public class PHARReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PHAR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PHARReferencedElementsCollection(PHAR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HaRst != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhStop != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDiTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RsDiTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.HaRstChanged += this.PropagateValueChanges;
                this._parent.PhStrChanged += this.PropagateValueChanges;
                this._parent.PhStopChanged += this.PropagateValueChanges;
                this._parent.OpDiTmmsChanged += this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.HaRstChanged -= this.PropagateValueChanges;
                this._parent.PhStrChanged -= this.PropagateValueChanges;
                this._parent.PhStopChanged -= this.PropagateValueChanges;
                this._parent.OpDiTmmsChanged -= this.PropagateValueChanges;
                this._parent.RsDiTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.HaRst == null))
                {
                    IING haRstCasted = item.As<IING>();
                    if ((haRstCasted != null))
                    {
                        this._parent.HaRst = haRstCasted;
                        return;
                    }
                }
                if ((this._parent.PhStr == null))
                {
                    IASG phStrCasted = item.As<IASG>();
                    if ((phStrCasted != null))
                    {
                        this._parent.PhStr = phStrCasted;
                        return;
                    }
                }
                if ((this._parent.PhStop == null))
                {
                    IASG phStopCasted = item.As<IASG>();
                    if ((phStopCasted != null))
                    {
                        this._parent.PhStop = phStopCasted;
                        return;
                    }
                }
                if ((this._parent.OpDiTmms == null))
                {
                    IING opDiTmmsCasted = item.As<IING>();
                    if ((opDiTmmsCasted != null))
                    {
                        this._parent.OpDiTmms = opDiTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RsDiTmms == null))
                {
                    IING rsDiTmmsCasted = item.As<IING>();
                    if ((rsDiTmmsCasted != null))
                    {
                        this._parent.RsDiTmms = rsDiTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.HaRst = null;
                this._parent.PhStr = null;
                this._parent.PhStop = null;
                this._parent.OpDiTmms = null;
                this._parent.RsDiTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.HaRst))
                {
                    return true;
                }
                if ((item == this._parent.PhStr))
                {
                    return true;
                }
                if ((item == this._parent.PhStop))
                {
                    return true;
                }
                if ((item == this._parent.OpDiTmms))
                {
                    return true;
                }
                if ((item == this._parent.RsDiTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HaRst != null))
                {
                    array[arrayIndex] = this._parent.HaRst;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhStr != null))
                {
                    array[arrayIndex] = this._parent.PhStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhStop != null))
                {
                    array[arrayIndex] = this._parent.PhStop;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDiTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RsDiTmms != null))
                {
                    array[arrayIndex] = this._parent.RsDiTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.HaRst == item))
                {
                    this._parent.HaRst = null;
                    return true;
                }
                if ((this._parent.PhStr == item))
                {
                    this._parent.PhStr = null;
                    return true;
                }
                if ((this._parent.PhStop == item))
                {
                    this._parent.PhStop = null;
                    return true;
                }
                if ((this._parent.OpDiTmms == item))
                {
                    this._parent.OpDiTmms = null;
                    return true;
                }
                if ((this._parent.RsDiTmms == item))
                {
                    this._parent.RsDiTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.HaRst).Concat(this._parent.PhStr).Concat(this._parent.PhStop).Concat(this._parent.OpDiTmms).Concat(this._parent.RsDiTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPHAR, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HaRst property
        /// </summary>
        private sealed class HaRstProxy : ModelPropertyChange<IPHAR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HaRstProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.HaRst;
                }
                set
                {
                    this.ModelElement.HaRst = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HaRstChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HaRstChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhStr property
        /// </summary>
        private sealed class PhStrProxy : ModelPropertyChange<IPHAR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhStrProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PhStr;
                }
                set
                {
                    this.ModelElement.PhStr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhStrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhStrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhStop property
        /// </summary>
        private sealed class PhStopProxy : ModelPropertyChange<IPHAR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhStopProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.PhStop;
                }
                set
                {
                    this.ModelElement.PhStop = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhStopChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhStopChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDiTmms property
        /// </summary>
        private sealed class OpDiTmmsProxy : ModelPropertyChange<IPHAR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDiTmmsProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDiTmms;
                }
                set
                {
                    this.ModelElement.OpDiTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpDiTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpDiTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RsDiTmms property
        /// </summary>
        private sealed class RsDiTmmsProxy : ModelPropertyChange<IPHAR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RsDiTmmsProxy(IPHAR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RsDiTmms;
                }
                set
                {
                    this.ModelElement.RsDiTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RsDiTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RsDiTmmsChanged -= handler;
            }
        }
    }
}

