//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PMSS class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PMSS")]
    public partial class PMSS : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPMSS, IModelElement
    {
        
        private static Lazy<ITypedElement> _strReference = new Lazy<ITypedElement>(RetrieveStrReference);
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _setAReference = new Lazy<ITypedElement>(RetrieveSetAReference);
        
        /// <summary>
        /// The backing field for the SetA property
        /// </summary>
        private IASG _setA;
        
        private static Lazy<ITypedElement> _setTmsReference = new Lazy<ITypedElement>(RetrieveSetTmsReference);
        
        /// <summary>
        /// The backing field for the SetTms property
        /// </summary>
        private IING _setTms;
        
        private static Lazy<ITypedElement> _motStrReference = new Lazy<ITypedElement>(RetrieveMotStrReference);
        
        /// <summary>
        /// The backing field for the MotStr property
        /// </summary>
        private IASG _motStr;
        
        private static Lazy<ITypedElement> _lokRotTmsReference = new Lazy<ITypedElement>(RetrieveLokRotTmsReference);
        
        /// <summary>
        /// The backing field for the LokRotTms property
        /// </summary>
        private IING _lokRotTms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e, _strReference);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e, _strReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The SetA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG SetA
        {
            get
            {
                return this._setA;
            }
            set
            {
                if ((this._setA != value))
                {
                    IASG old = this._setA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetAChanging(e);
                    this.OnPropertyChanging("SetA", e, _setAReference);
                    this._setA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetA;
                    }
                    this.OnSetAChanged(e);
                    this.OnPropertyChanged("SetA", e, _setAReference);
                }
            }
        }
        
        /// <summary>
        /// The SetTms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING SetTms
        {
            get
            {
                return this._setTms;
            }
            set
            {
                if ((this._setTms != value))
                {
                    IING old = this._setTms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetTmsChanging(e);
                    this.OnPropertyChanging("SetTms", e, _setTmsReference);
                    this._setTms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSetTms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSetTms;
                    }
                    this.OnSetTmsChanged(e);
                    this.OnPropertyChanged("SetTms", e, _setTmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MotStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MotStr
        {
            get
            {
                return this._motStr;
            }
            set
            {
                if ((this._motStr != value))
                {
                    IASG old = this._motStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMotStrChanging(e);
                    this.OnPropertyChanging("MotStr", e, _motStrReference);
                    this._motStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMotStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMotStr;
                    }
                    this.OnMotStrChanged(e);
                    this.OnPropertyChanged("MotStr", e, _motStrReference);
                }
            }
        }
        
        /// <summary>
        /// The LokRotTms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING LokRotTms
        {
            get
            {
                return this._lokRotTms;
            }
            set
            {
                if ((this._lokRotTms != value))
                {
                    IING old = this._lokRotTms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLokRotTmsChanging(e);
                    this.OnPropertyChanging("LokRotTms", e, _lokRotTmsReference);
                    this._lokRotTms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLokRotTms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLokRotTms;
                    }
                    this.OnLokRotTmsChanged(e);
                    this.OnPropertyChanged("LokRotTms", e, _lokRotTmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PMSSReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PMSS")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the SetA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetAChanging;
        
        /// <summary>
        /// Gets fired when the SetA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetAChanged;
        
        /// <summary>
        /// Gets fired before the SetTms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetTmsChanging;
        
        /// <summary>
        /// Gets fired when the SetTms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetTmsChanged;
        
        /// <summary>
        /// Gets fired before the MotStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotStrChanging;
        
        /// <summary>
        /// Gets fired when the MotStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MotStrChanged;
        
        /// <summary>
        /// Gets fired before the LokRotTms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LokRotTmsChanging;
        
        /// <summary>
        /// Gets fired when the LokRotTms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LokRotTmsChanged;
        
        private static ITypedElement RetrieveStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("Str")));
        }
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveSetAReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("SetA")));
        }
        
        /// <summary>
        /// Raises the SetAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetA(object sender, System.EventArgs eventArgs)
        {
            this.SetA = null;
        }
        
        private static ITypedElement RetrieveSetTmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("SetTms")));
        }
        
        /// <summary>
        /// Raises the SetTmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetTmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetTmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetTmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetTmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetTmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetTms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetTms(object sender, System.EventArgs eventArgs)
        {
            this.SetTms = null;
        }
        
        private static ITypedElement RetrieveMotStrReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("MotStr")));
        }
        
        /// <summary>
        /// Raises the MotStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MotStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMotStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MotStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MotStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMotStr(object sender, System.EventArgs eventArgs)
        {
            this.MotStr = null;
        }
        
        private static ITypedElement RetrieveLokRotTmsReference()
        {
            return ((ITypedElement)(((ModelElement)(PMSS.ClassInstance)).Resolve("LokRotTms")));
        }
        
        /// <summary>
        /// Raises the LokRotTmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLokRotTmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LokRotTmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LokRotTmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLokRotTmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LokRotTmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LokRotTms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLokRotTms(object sender, System.EventArgs eventArgs)
        {
            this.LokRotTms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "SETA"))
            {
                this.SetA = ((IASG)(value));
                return;
            }
            if ((feature == "SETTMS"))
            {
                this.SetTms = ((IING)(value));
                return;
            }
            if ((feature == "MOTSTR"))
            {
                this.MotStr = ((IASG)(value));
                return;
            }
            if ((feature == "LOKROTTMS"))
            {
                this.LokRotTms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "SetA"))
            {
                return new SetAProxy(this);
            }
            if ((attribute == "SetTms"))
            {
                return new SetTmsProxy(this);
            }
            if ((attribute == "MotStr"))
            {
                return new MotStrProxy(this);
            }
            if ((attribute == "LokRotTms"))
            {
                return new LokRotTmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "SetA"))
            {
                return new SetAProxy(this);
            }
            if ((reference == "SetTms"))
            {
                return new SetTmsProxy(this);
            }
            if ((reference == "MotStr"))
            {
                return new MotStrProxy(this);
            }
            if ((reference == "LokRotTms"))
            {
                return new LokRotTmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PMSS")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PMSS class
        /// </summary>
        public class PMSSReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PMSS _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PMSSReferencedElementsCollection(PMSS parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetTms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MotStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LokRotTms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.SetAChanged += this.PropagateValueChanges;
                this._parent.SetTmsChanged += this.PropagateValueChanges;
                this._parent.MotStrChanged += this.PropagateValueChanges;
                this._parent.LokRotTmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.SetAChanged -= this.PropagateValueChanges;
                this._parent.SetTmsChanged -= this.PropagateValueChanges;
                this._parent.MotStrChanged -= this.PropagateValueChanges;
                this._parent.LokRotTmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.SetA == null))
                {
                    IASG setACasted = item.As<IASG>();
                    if ((setACasted != null))
                    {
                        this._parent.SetA = setACasted;
                        return;
                    }
                }
                if ((this._parent.SetTms == null))
                {
                    IING setTmsCasted = item.As<IING>();
                    if ((setTmsCasted != null))
                    {
                        this._parent.SetTms = setTmsCasted;
                        return;
                    }
                }
                if ((this._parent.MotStr == null))
                {
                    IASG motStrCasted = item.As<IASG>();
                    if ((motStrCasted != null))
                    {
                        this._parent.MotStr = motStrCasted;
                        return;
                    }
                }
                if ((this._parent.LokRotTms == null))
                {
                    IING lokRotTmsCasted = item.As<IING>();
                    if ((lokRotTmsCasted != null))
                    {
                        this._parent.LokRotTms = lokRotTmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.SetA = null;
                this._parent.SetTms = null;
                this._parent.MotStr = null;
                this._parent.LokRotTms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.SetA))
                {
                    return true;
                }
                if ((item == this._parent.SetTms))
                {
                    return true;
                }
                if ((item == this._parent.MotStr))
                {
                    return true;
                }
                if ((item == this._parent.LokRotTms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetA != null))
                {
                    array[arrayIndex] = this._parent.SetA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetTms != null))
                {
                    array[arrayIndex] = this._parent.SetTms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MotStr != null))
                {
                    array[arrayIndex] = this._parent.MotStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LokRotTms != null))
                {
                    array[arrayIndex] = this._parent.LokRotTms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.SetA == item))
                {
                    this._parent.SetA = null;
                    return true;
                }
                if ((this._parent.SetTms == item))
                {
                    this._parent.SetTms = null;
                    return true;
                }
                if ((this._parent.MotStr == item))
                {
                    this._parent.MotStr = null;
                    return true;
                }
                if ((this._parent.LokRotTms == item))
                {
                    this._parent.LokRotTms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.SetA).Concat(this._parent.SetTms).Concat(this._parent.MotStr).Concat(this._parent.LokRotTms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPMSS, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPMSS modelElement) : 
                    base(modelElement, "Str")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPMSS, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPMSS modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetA property
        /// </summary>
        private sealed class SetAProxy : ModelPropertyChange<IPMSS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetAProxy(IPMSS modelElement) : 
                    base(modelElement, "SetA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.SetA;
                }
                set
                {
                    this.ModelElement.SetA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetTms property
        /// </summary>
        private sealed class SetTmsProxy : ModelPropertyChange<IPMSS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetTmsProxy(IPMSS modelElement) : 
                    base(modelElement, "SetTms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.SetTms;
                }
                set
                {
                    this.ModelElement.SetTms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MotStr property
        /// </summary>
        private sealed class MotStrProxy : ModelPropertyChange<IPMSS, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MotStrProxy(IPMSS modelElement) : 
                    base(modelElement, "MotStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MotStr;
                }
                set
                {
                    this.ModelElement.MotStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LokRotTms property
        /// </summary>
        private sealed class LokRotTmsProxy : ModelPropertyChange<IPMSS, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LokRotTmsProxy(IPMSS modelElement) : 
                    base(modelElement, "LokRotTms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.LokRotTms;
                }
                set
                {
                    this.ModelElement.LokRotTms = value;
                }
            }
        }
    }
}

