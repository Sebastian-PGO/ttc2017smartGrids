//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP
{
    
    
    /// <summary>
    /// The default implementation of the PSDE class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pP")]
    [XmlNamespacePrefixAttribute("groupP")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupP/PSDE")]
    public class PSDE : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupP.GroupP, IPSDE, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Str property
        /// </summary>
        private IACD _str;
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        /// <summary>
        /// The backing field for the Ang property
        /// </summary>
        private IASG _ang;
        
        /// <summary>
        /// The backing field for the GndStr property
        /// </summary>
        private IASG _gndStr;
        
        /// <summary>
        /// The backing field for the GndOp property
        /// </summary>
        private IASG _gndOp;
        
        /// <summary>
        /// The backing field for the StrDlTmms property
        /// </summary>
        private IING _strDlTmms;
        
        /// <summary>
        /// The backing field for the OpDlTmms property
        /// </summary>
        private IING _opDlTmms;
        
        /// <summary>
        /// The backing field for the DirMod property
        /// </summary>
        private IING _dirMod;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Str property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Str
        {
            get
            {
                return this._str;
            }
            set
            {
                if ((this._str != value))
                {
                    IACD old = this._str;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrChanging(e);
                    this.OnPropertyChanging("Str", e);
                    this._str = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStr;
                    }
                    this.OnStrChanged(e);
                    this.OnPropertyChanged("Str", e);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e);
                }
            }
        }
        
        /// <summary>
        /// The Ang property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Ang
        {
            get
            {
                return this._ang;
            }
            set
            {
                if ((this._ang != value))
                {
                    IASG old = this._ang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngChanging(e);
                    this.OnPropertyChanging("Ang", e);
                    this._ang = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAng;
                    }
                    this.OnAngChanged(e);
                    this.OnPropertyChanged("Ang", e);
                }
            }
        }
        
        /// <summary>
        /// The GndStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG GndStr
        {
            get
            {
                return this._gndStr;
            }
            set
            {
                if ((this._gndStr != value))
                {
                    IASG old = this._gndStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGndStrChanging(e);
                    this.OnPropertyChanging("GndStr", e);
                    this._gndStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGndStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGndStr;
                    }
                    this.OnGndStrChanged(e);
                    this.OnPropertyChanged("GndStr", e);
                }
            }
        }
        
        /// <summary>
        /// The GndOp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG GndOp
        {
            get
            {
                return this._gndOp;
            }
            set
            {
                if ((this._gndOp != value))
                {
                    IASG old = this._gndOp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGndOpChanging(e);
                    this.OnPropertyChanging("GndOp", e);
                    this._gndOp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGndOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGndOp;
                    }
                    this.OnGndOpChanged(e);
                    this.OnPropertyChanged("GndOp", e);
                }
            }
        }
        
        /// <summary>
        /// The StrDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING StrDlTmms
        {
            get
            {
                return this._strDlTmms;
            }
            set
            {
                if ((this._strDlTmms != value))
                {
                    IING old = this._strDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrDlTmmsChanging(e);
                    this.OnPropertyChanging("StrDlTmms", e);
                    this._strDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStrDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStrDlTmms;
                    }
                    this.OnStrDlTmmsChanged(e);
                    this.OnPropertyChanged("StrDlTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The OpDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpDlTmms
        {
            get
            {
                return this._opDlTmms;
            }
            set
            {
                if ((this._opDlTmms != value))
                {
                    IING old = this._opDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpDlTmmsChanging(e);
                    this.OnPropertyChanging("OpDlTmms", e);
                    this._opDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpDlTmms;
                    }
                    this.OnOpDlTmmsChanged(e);
                    this.OnPropertyChanged("OpDlTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The DirMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING DirMod
        {
            get
            {
                return this._dirMod;
            }
            set
            {
                if ((this._dirMod != value))
                {
                    IING old = this._dirMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirModChanging(e);
                    this.OnPropertyChanging("DirMod", e);
                    this._dirMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDirMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDirMod;
                    }
                    this.OnDirModChanged(e);
                    this.OnPropertyChanged("DirMod", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PSDEReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupP/PSDE")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Str property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanging;
        
        /// <summary>
        /// Gets fired when the Str property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the Ang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngChanging;
        
        /// <summary>
        /// Gets fired when the Ang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngChanged;
        
        /// <summary>
        /// Gets fired before the GndStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndStrChanging;
        
        /// <summary>
        /// Gets fired when the GndStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndStrChanged;
        
        /// <summary>
        /// Gets fired before the GndOp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndOpChanging;
        
        /// <summary>
        /// Gets fired when the GndOp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GndOpChanged;
        
        /// <summary>
        /// Gets fired before the StrDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the StrDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the OpDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the OpDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the DirMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirModChanging;
        
        /// <summary>
        /// Gets fired when the DirMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirModChanged;
        
        /// <summary>
        /// Raises the StrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Str property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStr(object sender, System.EventArgs eventArgs)
        {
            this.Str = null;
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        /// <summary>
        /// Raises the AngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ang property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAng(object sender, System.EventArgs eventArgs)
        {
            this.Ang = null;
        }
        
        /// <summary>
        /// Raises the GndStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GndStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GndStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGndStr(object sender, System.EventArgs eventArgs)
        {
            this.GndStr = null;
        }
        
        /// <summary>
        /// Raises the GndOpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndOpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GndOpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGndOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GndOpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GndOp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGndOp(object sender, System.EventArgs eventArgs)
        {
            this.GndOp = null;
        }
        
        /// <summary>
        /// Raises the StrDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StrDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStrDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.StrDlTmms = null;
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.OpDlTmms = null;
        }
        
        /// <summary>
        /// Raises the DirModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DirMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDirMod(object sender, System.EventArgs eventArgs)
        {
            this.DirMod = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STR"))
            {
                this.Str = ((IACD)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "ANG"))
            {
                this.Ang = ((IASG)(value));
                return;
            }
            if ((feature == "GNDSTR"))
            {
                this.GndStr = ((IASG)(value));
                return;
            }
            if ((feature == "GNDOP"))
            {
                this.GndOp = ((IASG)(value));
                return;
            }
            if ((feature == "STRDLTMMS"))
            {
                this.StrDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "OPDLTMMS"))
            {
                this.OpDlTmms = ((IING)(value));
                return;
            }
            if ((feature == "DIRMOD"))
            {
                this.DirMod = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Str"))
            {
                return new StrProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "Ang"))
            {
                return new AngProxy(this);
            }
            if ((attribute == "GndStr"))
            {
                return new GndStrProxy(this);
            }
            if ((attribute == "GndOp"))
            {
                return new GndOpProxy(this);
            }
            if ((attribute == "StrDlTmms"))
            {
                return new StrDlTmmsProxy(this);
            }
            if ((attribute == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((attribute == "DirMod"))
            {
                return new DirModProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Str"))
            {
                return new StrProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "Ang"))
            {
                return new AngProxy(this);
            }
            if ((reference == "GndStr"))
            {
                return new GndStrProxy(this);
            }
            if ((reference == "GndOp"))
            {
                return new GndOpProxy(this);
            }
            if ((reference == "StrDlTmms"))
            {
                return new StrDlTmmsProxy(this);
            }
            if ((reference == "OpDlTmms"))
            {
                return new OpDlTmmsProxy(this);
            }
            if ((reference == "DirMod"))
            {
                return new DirModProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupP/PSDE")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PSDE class
        /// </summary>
        public class PSDEReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PSDE _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PSDEReferencedElementsCollection(PSDE parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Str != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Ang != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GndStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GndOp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StrDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DirMod != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StrChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.AngChanged += this.PropagateValueChanges;
                this._parent.GndStrChanged += this.PropagateValueChanges;
                this._parent.GndOpChanged += this.PropagateValueChanges;
                this._parent.StrDlTmmsChanged += this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged += this.PropagateValueChanges;
                this._parent.DirModChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StrChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.AngChanged -= this.PropagateValueChanges;
                this._parent.GndStrChanged -= this.PropagateValueChanges;
                this._parent.GndOpChanged -= this.PropagateValueChanges;
                this._parent.StrDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.OpDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.DirModChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Str == null))
                {
                    IACD strCasted = item.As<IACD>();
                    if ((strCasted != null))
                    {
                        this._parent.Str = strCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.Ang == null))
                {
                    IASG angCasted = item.As<IASG>();
                    if ((angCasted != null))
                    {
                        this._parent.Ang = angCasted;
                        return;
                    }
                }
                if ((this._parent.GndStr == null))
                {
                    IASG gndStrCasted = item.As<IASG>();
                    if ((gndStrCasted != null))
                    {
                        this._parent.GndStr = gndStrCasted;
                        return;
                    }
                }
                if ((this._parent.GndOp == null))
                {
                    IASG gndOpCasted = item.As<IASG>();
                    if ((gndOpCasted != null))
                    {
                        this._parent.GndOp = gndOpCasted;
                        return;
                    }
                }
                if ((this._parent.StrDlTmms == null))
                {
                    IING strDlTmmsCasted = item.As<IING>();
                    if ((strDlTmmsCasted != null))
                    {
                        this._parent.StrDlTmms = strDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.OpDlTmms == null))
                {
                    IING opDlTmmsCasted = item.As<IING>();
                    if ((opDlTmmsCasted != null))
                    {
                        this._parent.OpDlTmms = opDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.DirMod == null))
                {
                    IING dirModCasted = item.As<IING>();
                    if ((dirModCasted != null))
                    {
                        this._parent.DirMod = dirModCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Str = null;
                this._parent.Op = null;
                this._parent.Ang = null;
                this._parent.GndStr = null;
                this._parent.GndOp = null;
                this._parent.StrDlTmms = null;
                this._parent.OpDlTmms = null;
                this._parent.DirMod = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Str))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.Ang))
                {
                    return true;
                }
                if ((item == this._parent.GndStr))
                {
                    return true;
                }
                if ((item == this._parent.GndOp))
                {
                    return true;
                }
                if ((item == this._parent.StrDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.OpDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.DirMod))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Str != null))
                {
                    array[arrayIndex] = this._parent.Str;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Ang != null))
                {
                    array[arrayIndex] = this._parent.Ang;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GndStr != null))
                {
                    array[arrayIndex] = this._parent.GndStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GndOp != null))
                {
                    array[arrayIndex] = this._parent.GndOp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StrDlTmms != null))
                {
                    array[arrayIndex] = this._parent.StrDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpDlTmms != null))
                {
                    array[arrayIndex] = this._parent.OpDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DirMod != null))
                {
                    array[arrayIndex] = this._parent.DirMod;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Str == item))
                {
                    this._parent.Str = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.Ang == item))
                {
                    this._parent.Ang = null;
                    return true;
                }
                if ((this._parent.GndStr == item))
                {
                    this._parent.GndStr = null;
                    return true;
                }
                if ((this._parent.GndOp == item))
                {
                    this._parent.GndOp = null;
                    return true;
                }
                if ((this._parent.StrDlTmms == item))
                {
                    this._parent.StrDlTmms = null;
                    return true;
                }
                if ((this._parent.OpDlTmms == item))
                {
                    this._parent.OpDlTmms = null;
                    return true;
                }
                if ((this._parent.DirMod == item))
                {
                    this._parent.DirMod = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Str).Concat(this._parent.Op).Concat(this._parent.Ang).Concat(this._parent.GndStr).Concat(this._parent.GndOp).Concat(this._parent.StrDlTmms).Concat(this._parent.OpDlTmms).Concat(this._parent.DirMod).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Str property
        /// </summary>
        private sealed class StrProxy : ModelPropertyChange<IPSDE, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Str;
                }
                set
                {
                    this.ModelElement.Str = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IPSDE, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ang property
        /// </summary>
        private sealed class AngProxy : ModelPropertyChange<IPSDE, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Ang;
                }
                set
                {
                    this.ModelElement.Ang = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GndStr property
        /// </summary>
        private sealed class GndStrProxy : ModelPropertyChange<IPSDE, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GndStrProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.GndStr;
                }
                set
                {
                    this.ModelElement.GndStr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GndStrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GndStrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GndOp property
        /// </summary>
        private sealed class GndOpProxy : ModelPropertyChange<IPSDE, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GndOpProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.GndOp;
                }
                set
                {
                    this.ModelElement.GndOp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GndOpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GndOpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StrDlTmms property
        /// </summary>
        private sealed class StrDlTmmsProxy : ModelPropertyChange<IPSDE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrDlTmmsProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.StrDlTmms;
                }
                set
                {
                    this.ModelElement.StrDlTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrDlTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StrDlTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpDlTmms property
        /// </summary>
        private sealed class OpDlTmmsProxy : ModelPropertyChange<IPSDE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpDlTmmsProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpDlTmms;
                }
                set
                {
                    this.ModelElement.OpDlTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpDlTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpDlTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DirMod property
        /// </summary>
        private sealed class DirModProxy : ModelPropertyChange<IPSDE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirModProxy(IPSDE modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.DirMod;
                }
                set
                {
                    this.ModelElement.DirMod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirModChanged -= handler;
            }
        }
    }
}

