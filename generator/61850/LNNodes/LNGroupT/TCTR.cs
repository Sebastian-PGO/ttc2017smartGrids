//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupT
{
    
    
    /// <summary>
    /// The default implementation of the TCTR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pT")]
    [XmlNamespacePrefixAttribute("groupt")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupT/TCTR")]
    public class TCTR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupT.GroupT, ITCTR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Amp property
        /// </summary>
        private ISAV _amp;
        
        /// <summary>
        /// The backing field for the ARtg property
        /// </summary>
        private IASG _aRtg;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Amp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISAV Amp
        {
            get
            {
                return this._amp;
            }
            set
            {
                if ((this._amp != value))
                {
                    ISAV old = this._amp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmpChanging(e);
                    this.OnPropertyChanging("Amp", e);
                    this._amp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAmp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAmp;
                    }
                    this.OnAmpChanged(e);
                    this.OnPropertyChanged("Amp", e);
                }
            }
        }
        
        /// <summary>
        /// The ARtg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ARtg
        {
            get
            {
                return this._aRtg;
            }
            set
            {
                if ((this._aRtg != value))
                {
                    IASG old = this._aRtg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnARtgChanging(e);
                    this.OnPropertyChanging("ARtg", e);
                    this._aRtg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetARtg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetARtg;
                    }
                    this.OnARtgChanged(e);
                    this.OnPropertyChanged("ARtg", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TCTRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupT/TCTR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Amp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanging;
        
        /// <summary>
        /// Gets fired when the Amp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmpChanged;
        
        /// <summary>
        /// Gets fired before the ARtg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ARtgChanging;
        
        /// <summary>
        /// Gets fired when the ARtg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ARtgChanged;
        
        /// <summary>
        /// Raises the AmpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Amp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAmp(object sender, System.EventArgs eventArgs)
        {
            this.Amp = null;
        }
        
        /// <summary>
        /// Raises the ARtgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnARtgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ARtgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ARtgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnARtgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ARtgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ARtg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetARtg(object sender, System.EventArgs eventArgs)
        {
            this.ARtg = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AMP"))
            {
                this.Amp = ((ISAV)(value));
                return;
            }
            if ((feature == "ARTG"))
            {
                this.ARtg = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((attribute == "ARtg"))
            {
                return new ARtgProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Amp"))
            {
                return new AmpProxy(this);
            }
            if ((reference == "ARtg"))
            {
                return new ARtgProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupT/TCTR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TCTR class
        /// </summary>
        public class TCTRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TCTR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TCTRReferencedElementsCollection(TCTR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Amp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ARtg != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AmpChanged += this.PropagateValueChanges;
                this._parent.ARtgChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AmpChanged -= this.PropagateValueChanges;
                this._parent.ARtgChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Amp == null))
                {
                    ISAV ampCasted = item.As<ISAV>();
                    if ((ampCasted != null))
                    {
                        this._parent.Amp = ampCasted;
                        return;
                    }
                }
                if ((this._parent.ARtg == null))
                {
                    IASG aRtgCasted = item.As<IASG>();
                    if ((aRtgCasted != null))
                    {
                        this._parent.ARtg = aRtgCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Amp = null;
                this._parent.ARtg = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Amp))
                {
                    return true;
                }
                if ((item == this._parent.ARtg))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Amp != null))
                {
                    array[arrayIndex] = this._parent.Amp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ARtg != null))
                {
                    array[arrayIndex] = this._parent.ARtg;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Amp == item))
                {
                    this._parent.Amp = null;
                    return true;
                }
                if ((this._parent.ARtg == item))
                {
                    this._parent.ARtg = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Amp).Concat(this._parent.ARtg).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Amp property
        /// </summary>
        private sealed class AmpProxy : ModelPropertyChange<ITCTR, ISAV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmpProxy(ITCTR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISAV Value
            {
                get
                {
                    return this.ModelElement.Amp;
                }
                set
                {
                    this.ModelElement.Amp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AmpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AmpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ARtg property
        /// </summary>
        private sealed class ARtgProxy : ModelPropertyChange<ITCTR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ARtgProxy(ITCTR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ARtg;
                }
                set
                {
                    this.ModelElement.ARtg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ARtgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ARtgChanged -= handler;
            }
        }
    }
}

