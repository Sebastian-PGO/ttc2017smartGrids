//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupX
{
    
    
    /// <summary>
    /// The default implementation of the GroupX class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pX")]
    [XmlNamespacePrefixAttribute("groupx")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupX/GroupX")]
    public class GroupX : DomainLN, IGroupX, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EEHealth property
        /// </summary>
        private Nullable<HealthStateKind> _eEHealth;
        
        /// <summary>
        /// The backing field for the Loc property
        /// </summary>
        private ISPS _loc;
        
        /// <summary>
        /// The backing field for the EEName property
        /// </summary>
        private IDPL _eEName;
        
        /// <summary>
        /// The backing field for the OpCnt property
        /// </summary>
        private IINS _opCnt;
        
        /// <summary>
        /// The backing field for the Pos property
        /// </summary>
        private IDPC _pos;
        
        /// <summary>
        /// The backing field for the BlkOpn property
        /// </summary>
        private ISPC _blkOpn;
        
        /// <summary>
        /// The backing field for the BlkCls property
        /// </summary>
        private ISPC _blkCls;
        
        /// <summary>
        /// The backing field for the ChaMotEna property
        /// </summary>
        private ISPC _chaMotEna;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The EEHealth property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HealthStateKind> EEHealth
        {
            get
            {
                return this._eEHealth;
            }
            set
            {
                if ((this._eEHealth != value))
                {
                    Nullable<HealthStateKind> old = this._eEHealth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEEHealthChanging(e);
                    this.OnPropertyChanging("EEHealth", e);
                    this._eEHealth = value;
                    this.OnEEHealthChanged(e);
                    this.OnPropertyChanged("EEHealth", e);
                }
            }
        }
        
        /// <summary>
        /// The Loc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Loc
        {
            get
            {
                return this._loc;
            }
            set
            {
                if ((this._loc != value))
                {
                    ISPS old = this._loc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocChanging(e);
                    this.OnPropertyChanging("Loc", e);
                    this._loc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoc;
                    }
                    this.OnLocChanged(e);
                    this.OnPropertyChanged("Loc", e);
                }
            }
        }
        
        /// <summary>
        /// The EEName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPL EEName
        {
            get
            {
                return this._eEName;
            }
            set
            {
                if ((this._eEName != value))
                {
                    IDPL old = this._eEName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEENameChanging(e);
                    this.OnPropertyChanging("EEName", e);
                    this._eEName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEEName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEEName;
                    }
                    this.OnEENameChanged(e);
                    this.OnPropertyChanged("EEName", e);
                }
            }
        }
        
        /// <summary>
        /// The OpCnt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS OpCnt
        {
            get
            {
                return this._opCnt;
            }
            set
            {
                if ((this._opCnt != value))
                {
                    IINS old = this._opCnt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntChanging(e);
                    this.OnPropertyChanging("OpCnt", e);
                    this._opCnt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCnt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCnt;
                    }
                    this.OnOpCntChanged(e);
                    this.OnPropertyChanged("OpCnt", e);
                }
            }
        }
        
        /// <summary>
        /// The Pos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC Pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                if ((this._pos != value))
                {
                    IDPC old = this._pos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPosChanging(e);
                    this.OnPropertyChanging("Pos", e);
                    this._pos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPos;
                    }
                    this.OnPosChanged(e);
                    this.OnPropertyChanged("Pos", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkOpn property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BlkOpn
        {
            get
            {
                return this._blkOpn;
            }
            set
            {
                if ((this._blkOpn != value))
                {
                    ISPC old = this._blkOpn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkOpnChanging(e);
                    this.OnPropertyChanging("BlkOpn", e);
                    this._blkOpn = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkOpn;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkOpn;
                    }
                    this.OnBlkOpnChanged(e);
                    this.OnPropertyChanged("BlkOpn", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkCls property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BlkCls
        {
            get
            {
                return this._blkCls;
            }
            set
            {
                if ((this._blkCls != value))
                {
                    ISPC old = this._blkCls;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkClsChanging(e);
                    this.OnPropertyChanging("BlkCls", e);
                    this._blkCls = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkCls;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkCls;
                    }
                    this.OnBlkClsChanged(e);
                    this.OnPropertyChanged("BlkCls", e);
                }
            }
        }
        
        /// <summary>
        /// The ChaMotEna property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC ChaMotEna
        {
            get
            {
                return this._chaMotEna;
            }
            set
            {
                if ((this._chaMotEna != value))
                {
                    ISPC old = this._chaMotEna;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChaMotEnaChanging(e);
                    this.OnPropertyChanging("ChaMotEna", e);
                    this._chaMotEna = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChaMotEna;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChaMotEna;
                    }
                    this.OnChaMotEnaChanged(e);
                    this.OnPropertyChanged("ChaMotEna", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GroupXReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupX/GroupX")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EEHealth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanging;
        
        /// <summary>
        /// Gets fired when the EEHealth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EEHealthChanged;
        
        /// <summary>
        /// Gets fired before the Loc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocChanging;
        
        /// <summary>
        /// Gets fired when the Loc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocChanged;
        
        /// <summary>
        /// Gets fired before the EEName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanging;
        
        /// <summary>
        /// Gets fired when the EEName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EENameChanged;
        
        /// <summary>
        /// Gets fired before the OpCnt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntChanging;
        
        /// <summary>
        /// Gets fired when the OpCnt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntChanged;
        
        /// <summary>
        /// Gets fired before the Pos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanging;
        
        /// <summary>
        /// Gets fired when the Pos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PosChanged;
        
        /// <summary>
        /// Gets fired before the BlkOpn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkOpnChanging;
        
        /// <summary>
        /// Gets fired when the BlkOpn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkOpnChanged;
        
        /// <summary>
        /// Gets fired before the BlkCls property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkClsChanging;
        
        /// <summary>
        /// Gets fired when the BlkCls property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkClsChanged;
        
        /// <summary>
        /// Gets fired before the ChaMotEna property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChaMotEnaChanging;
        
        /// <summary>
        /// Gets fired when the ChaMotEna property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChaMotEnaChanged;
        
        /// <summary>
        /// Raises the EEHealthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEHealthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEHealthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EEHealthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Loc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoc(object sender, System.EventArgs eventArgs)
        {
            this.Loc = null;
        }
        
        /// <summary>
        /// Raises the EENameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EENameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEENameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EENameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EEName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEEName(object sender, System.EventArgs eventArgs)
        {
            this.EEName = null;
        }
        
        /// <summary>
        /// Raises the OpCntChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCnt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCnt(object sender, System.EventArgs eventArgs)
        {
            this.OpCnt = null;
        }
        
        /// <summary>
        /// Raises the PosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPos(object sender, System.EventArgs eventArgs)
        {
            this.Pos = null;
        }
        
        /// <summary>
        /// Raises the BlkOpnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkOpnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkOpnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkOpnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkOpnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkOpnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkOpn property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkOpn(object sender, System.EventArgs eventArgs)
        {
            this.BlkOpn = null;
        }
        
        /// <summary>
        /// Raises the BlkClsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkClsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkClsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkClsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkClsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkClsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkCls property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkCls(object sender, System.EventArgs eventArgs)
        {
            this.BlkCls = null;
        }
        
        /// <summary>
        /// Raises the ChaMotEnaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChaMotEnaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChaMotEnaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChaMotEnaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChaMotEnaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChaMotEnaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChaMotEna property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChaMotEna(object sender, System.EventArgs eventArgs)
        {
            this.ChaMotEna = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EEHEALTH"))
            {
                return this.EEHealth;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOC"))
            {
                this.Loc = ((ISPS)(value));
                return;
            }
            if ((feature == "EENAME"))
            {
                this.EEName = ((IDPL)(value));
                return;
            }
            if ((feature == "OPCNT"))
            {
                this.OpCnt = ((IINS)(value));
                return;
            }
            if ((feature == "POS"))
            {
                this.Pos = ((IDPC)(value));
                return;
            }
            if ((feature == "BLKOPN"))
            {
                this.BlkOpn = ((ISPC)(value));
                return;
            }
            if ((feature == "BLKCLS"))
            {
                this.BlkCls = ((ISPC)(value));
                return;
            }
            if ((feature == "CHAMOTENA"))
            {
                this.ChaMotEna = ((ISPC)(value));
                return;
            }
            if ((feature == "EEHEALTH"))
            {
                this.EEHealth = ((HealthStateKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Loc"))
            {
                return new LocProxy(this);
            }
            if ((attribute == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((attribute == "OpCnt"))
            {
                return new OpCntProxy(this);
            }
            if ((attribute == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((attribute == "BlkOpn"))
            {
                return new BlkOpnProxy(this);
            }
            if ((attribute == "BlkCls"))
            {
                return new BlkClsProxy(this);
            }
            if ((attribute == "ChaMotEna"))
            {
                return new ChaMotEnaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Loc"))
            {
                return new LocProxy(this);
            }
            if ((reference == "EEName"))
            {
                return new EENameProxy(this);
            }
            if ((reference == "OpCnt"))
            {
                return new OpCntProxy(this);
            }
            if ((reference == "Pos"))
            {
                return new PosProxy(this);
            }
            if ((reference == "BlkOpn"))
            {
                return new BlkOpnProxy(this);
            }
            if ((reference == "BlkCls"))
            {
                return new BlkClsProxy(this);
            }
            if ((reference == "ChaMotEna"))
            {
                return new ChaMotEnaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupX/GroupX")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GroupX class
        /// </summary>
        public class GroupXReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GroupX _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GroupXReferencedElementsCollection(GroupX parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Loc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EEName != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpCnt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Pos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkOpn != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkCls != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChaMotEna != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LocChanged += this.PropagateValueChanges;
                this._parent.EENameChanged += this.PropagateValueChanges;
                this._parent.OpCntChanged += this.PropagateValueChanges;
                this._parent.PosChanged += this.PropagateValueChanges;
                this._parent.BlkOpnChanged += this.PropagateValueChanges;
                this._parent.BlkClsChanged += this.PropagateValueChanges;
                this._parent.ChaMotEnaChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LocChanged -= this.PropagateValueChanges;
                this._parent.EENameChanged -= this.PropagateValueChanges;
                this._parent.OpCntChanged -= this.PropagateValueChanges;
                this._parent.PosChanged -= this.PropagateValueChanges;
                this._parent.BlkOpnChanged -= this.PropagateValueChanges;
                this._parent.BlkClsChanged -= this.PropagateValueChanges;
                this._parent.ChaMotEnaChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Loc == null))
                {
                    ISPS locCasted = item.As<ISPS>();
                    if ((locCasted != null))
                    {
                        this._parent.Loc = locCasted;
                        return;
                    }
                }
                if ((this._parent.EEName == null))
                {
                    IDPL eENameCasted = item.As<IDPL>();
                    if ((eENameCasted != null))
                    {
                        this._parent.EEName = eENameCasted;
                        return;
                    }
                }
                if ((this._parent.OpCnt == null))
                {
                    IINS opCntCasted = item.As<IINS>();
                    if ((opCntCasted != null))
                    {
                        this._parent.OpCnt = opCntCasted;
                        return;
                    }
                }
                if ((this._parent.Pos == null))
                {
                    IDPC posCasted = item.As<IDPC>();
                    if ((posCasted != null))
                    {
                        this._parent.Pos = posCasted;
                        return;
                    }
                }
                if ((this._parent.BlkOpn == null))
                {
                    ISPC blkOpnCasted = item.As<ISPC>();
                    if ((blkOpnCasted != null))
                    {
                        this._parent.BlkOpn = blkOpnCasted;
                        return;
                    }
                }
                if ((this._parent.BlkCls == null))
                {
                    ISPC blkClsCasted = item.As<ISPC>();
                    if ((blkClsCasted != null))
                    {
                        this._parent.BlkCls = blkClsCasted;
                        return;
                    }
                }
                if ((this._parent.ChaMotEna == null))
                {
                    ISPC chaMotEnaCasted = item.As<ISPC>();
                    if ((chaMotEnaCasted != null))
                    {
                        this._parent.ChaMotEna = chaMotEnaCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Loc = null;
                this._parent.EEName = null;
                this._parent.OpCnt = null;
                this._parent.Pos = null;
                this._parent.BlkOpn = null;
                this._parent.BlkCls = null;
                this._parent.ChaMotEna = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Loc))
                {
                    return true;
                }
                if ((item == this._parent.EEName))
                {
                    return true;
                }
                if ((item == this._parent.OpCnt))
                {
                    return true;
                }
                if ((item == this._parent.Pos))
                {
                    return true;
                }
                if ((item == this._parent.BlkOpn))
                {
                    return true;
                }
                if ((item == this._parent.BlkCls))
                {
                    return true;
                }
                if ((item == this._parent.ChaMotEna))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Loc != null))
                {
                    array[arrayIndex] = this._parent.Loc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EEName != null))
                {
                    array[arrayIndex] = this._parent.EEName;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpCnt != null))
                {
                    array[arrayIndex] = this._parent.OpCnt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Pos != null))
                {
                    array[arrayIndex] = this._parent.Pos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkOpn != null))
                {
                    array[arrayIndex] = this._parent.BlkOpn;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkCls != null))
                {
                    array[arrayIndex] = this._parent.BlkCls;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChaMotEna != null))
                {
                    array[arrayIndex] = this._parent.ChaMotEna;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Loc == item))
                {
                    this._parent.Loc = null;
                    return true;
                }
                if ((this._parent.EEName == item))
                {
                    this._parent.EEName = null;
                    return true;
                }
                if ((this._parent.OpCnt == item))
                {
                    this._parent.OpCnt = null;
                    return true;
                }
                if ((this._parent.Pos == item))
                {
                    this._parent.Pos = null;
                    return true;
                }
                if ((this._parent.BlkOpn == item))
                {
                    this._parent.BlkOpn = null;
                    return true;
                }
                if ((this._parent.BlkCls == item))
                {
                    this._parent.BlkCls = null;
                    return true;
                }
                if ((this._parent.ChaMotEna == item))
                {
                    this._parent.ChaMotEna = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Loc).Concat(this._parent.EEName).Concat(this._parent.OpCnt).Concat(this._parent.Pos).Concat(this._parent.BlkOpn).Concat(this._parent.BlkCls).Concat(this._parent.ChaMotEna).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEHealth property
        /// </summary>
        private sealed class EEHealthProxy : ModelPropertyChange<IGroupX, Nullable<HealthStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EEHealthProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HealthStateKind> Value
            {
                get
                {
                    return this.ModelElement.EEHealth;
                }
                set
                {
                    this.ModelElement.EEHealth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EEHealthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Loc property
        /// </summary>
        private sealed class LocProxy : ModelPropertyChange<IGroupX, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Loc;
                }
                set
                {
                    this.ModelElement.Loc = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EEName property
        /// </summary>
        private sealed class EENameProxy : ModelPropertyChange<IGroupX, IDPL>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EENameProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPL Value
            {
                get
                {
                    return this.ModelElement.EEName;
                }
                set
                {
                    this.ModelElement.EEName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EENameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCnt property
        /// </summary>
        private sealed class OpCntProxy : ModelPropertyChange<IGroupX, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.OpCnt;
                }
                set
                {
                    this.ModelElement.OpCnt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pos property
        /// </summary>
        private sealed class PosProxy : ModelPropertyChange<IGroupX, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PosProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.Pos;
                }
                set
                {
                    this.ModelElement.Pos = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PosChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PosChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkOpn property
        /// </summary>
        private sealed class BlkOpnProxy : ModelPropertyChange<IGroupX, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkOpnProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BlkOpn;
                }
                set
                {
                    this.ModelElement.BlkOpn = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkOpnChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkOpnChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkCls property
        /// </summary>
        private sealed class BlkClsProxy : ModelPropertyChange<IGroupX, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkClsProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BlkCls;
                }
                set
                {
                    this.ModelElement.BlkCls = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkClsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkClsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChaMotEna property
        /// </summary>
        private sealed class ChaMotEnaProxy : ModelPropertyChange<IGroupX, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChaMotEnaProxy(IGroupX modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.ChaMotEna;
                }
                set
                {
                    this.ModelElement.ChaMotEna = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChaMotEnaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChaMotEnaChanged -= handler;
            }
        }
    }
}

