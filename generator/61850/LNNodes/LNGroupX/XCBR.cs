//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupX
{
    
    
    /// <summary>
    /// The default implementation of the XCBR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pX")]
    [XmlNamespacePrefixAttribute("groupx")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupX/XCBR")]
    public partial class XCBR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupX.GroupX, IXCBR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the POWCap property
        /// </summary>
        private Nullable<SwitchingCapabilityKind> _pOWCap;
        
        private static Lazy<ITypedElement> _pOWCapAttribute = new Lazy<ITypedElement>(RetrievePOWCapAttribute);
        
        private static Lazy<ITypedElement> _sumSwARsReference = new Lazy<ITypedElement>(RetrieveSumSwARsReference);
        
        /// <summary>
        /// The backing field for the SumSwARs property
        /// </summary>
        private IBCR _sumSwARs;
        
        private static Lazy<ITypedElement> _cBOpCapReference = new Lazy<ITypedElement>(RetrieveCBOpCapReference);
        
        /// <summary>
        /// The backing field for the CBOpCap property
        /// </summary>
        private IINS _cBOpCap;
        
        private static Lazy<ITypedElement> _maxOpCapReference = new Lazy<ITypedElement>(RetrieveMaxOpCapReference);
        
        /// <summary>
        /// The backing field for the MaxOpCap property
        /// </summary>
        private IINS _maxOpCap;
        
        private static Lazy<ITypedElement> _switchControlReference = new Lazy<ITypedElement>(RetrieveSwitchControlReference);
        
        /// <summary>
        /// The backing field for the SwitchControl property
        /// </summary>
        private ICSWI _switchControl;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The POWCap property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SwitchingCapabilityKind> POWCap
        {
            get
            {
                return this._pOWCap;
            }
            set
            {
                if ((this._pOWCap != value))
                {
                    Nullable<SwitchingCapabilityKind> old = this._pOWCap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPOWCapChanging(e);
                    this.OnPropertyChanging("POWCap", e, _pOWCapAttribute);
                    this._pOWCap = value;
                    this.OnPOWCapChanged(e);
                    this.OnPropertyChanged("POWCap", e, _pOWCapAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SumSwARs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBCR SumSwARs
        {
            get
            {
                return this._sumSwARs;
            }
            set
            {
                if ((this._sumSwARs != value))
                {
                    IBCR old = this._sumSwARs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSumSwARsChanging(e);
                    this.OnPropertyChanging("SumSwARs", e, _sumSwARsReference);
                    this._sumSwARs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSumSwARs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSumSwARs;
                    }
                    this.OnSumSwARsChanged(e);
                    this.OnPropertyChanged("SumSwARs", e, _sumSwARsReference);
                }
            }
        }
        
        /// <summary>
        /// The CBOpCap property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS CBOpCap
        {
            get
            {
                return this._cBOpCap;
            }
            set
            {
                if ((this._cBOpCap != value))
                {
                    IINS old = this._cBOpCap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCBOpCapChanging(e);
                    this.OnPropertyChanging("CBOpCap", e, _cBOpCapReference);
                    this._cBOpCap = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCBOpCap;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCBOpCap;
                    }
                    this.OnCBOpCapChanged(e);
                    this.OnPropertyChanged("CBOpCap", e, _cBOpCapReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxOpCap property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS MaxOpCap
        {
            get
            {
                return this._maxOpCap;
            }
            set
            {
                if ((this._maxOpCap != value))
                {
                    IINS old = this._maxOpCap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOpCapChanging(e);
                    this.OnPropertyChanging("MaxOpCap", e, _maxOpCapReference);
                    this._maxOpCap = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxOpCap;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxOpCap;
                    }
                    this.OnMaxOpCapChanged(e);
                    this.OnPropertyChanged("MaxOpCap", e, _maxOpCapReference);
                }
            }
        }
        
        /// <summary>
        /// The SwitchControl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICSWI SwitchControl
        {
            get
            {
                return this._switchControl;
            }
            set
            {
                if ((this._switchControl != value))
                {
                    ICSWI old = this._switchControl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchControlChanging(e);
                    this.OnPropertyChanging("SwitchControl", e, _switchControlReference);
                    this._switchControl = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSwitchControl;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSwitchControl;
                    }
                    this.OnSwitchControlChanged(e);
                    this.OnPropertyChanged("SwitchControl", e, _switchControlReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new XCBRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupX/XCBR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the POWCap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> POWCapChanging;
        
        /// <summary>
        /// Gets fired when the POWCap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> POWCapChanged;
        
        /// <summary>
        /// Gets fired before the SumSwARs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SumSwARsChanging;
        
        /// <summary>
        /// Gets fired when the SumSwARs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SumSwARsChanged;
        
        /// <summary>
        /// Gets fired before the CBOpCap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CBOpCapChanging;
        
        /// <summary>
        /// Gets fired when the CBOpCap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CBOpCapChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpCap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpCap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanged;
        
        /// <summary>
        /// Gets fired before the SwitchControl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchControlChanging;
        
        /// <summary>
        /// Gets fired when the SwitchControl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchControlChanged;
        
        private static ITypedElement RetrievePOWCapAttribute()
        {
            return ((ITypedElement)(((ModelElement)(XCBR.ClassInstance)).Resolve("POWCap")));
        }
        
        /// <summary>
        /// Raises the POWCapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPOWCapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.POWCapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the POWCapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPOWCapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.POWCapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSumSwARsReference()
        {
            return ((ITypedElement)(((ModelElement)(XCBR.ClassInstance)).Resolve("SumSwARs")));
        }
        
        /// <summary>
        /// Raises the SumSwARsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSumSwARsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SumSwARsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SumSwARsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSumSwARsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SumSwARsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SumSwARs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSumSwARs(object sender, System.EventArgs eventArgs)
        {
            this.SumSwARs = null;
        }
        
        private static ITypedElement RetrieveCBOpCapReference()
        {
            return ((ITypedElement)(((ModelElement)(XCBR.ClassInstance)).Resolve("CBOpCap")));
        }
        
        /// <summary>
        /// Raises the CBOpCapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCBOpCapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CBOpCapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CBOpCapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCBOpCapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CBOpCapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CBOpCap property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCBOpCap(object sender, System.EventArgs eventArgs)
        {
            this.CBOpCap = null;
        }
        
        private static ITypedElement RetrieveMaxOpCapReference()
        {
            return ((ITypedElement)(((ModelElement)(XCBR.ClassInstance)).Resolve("MaxOpCap")));
        }
        
        /// <summary>
        /// Raises the MaxOpCapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpCapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpCapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOpCapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOpCapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOpCapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxOpCap property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxOpCap(object sender, System.EventArgs eventArgs)
        {
            this.MaxOpCap = null;
        }
        
        private static ITypedElement RetrieveSwitchControlReference()
        {
            return ((ITypedElement)(((ModelElement)(XCBR.ClassInstance)).Resolve("SwitchControl")));
        }
        
        /// <summary>
        /// Raises the SwitchControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwitchControl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwitchControl(object sender, System.EventArgs eventArgs)
        {
            this.SwitchControl = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POWCAP"))
            {
                return this.POWCap;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUMSWARS"))
            {
                this.SumSwARs = ((IBCR)(value));
                return;
            }
            if ((feature == "CBOPCAP"))
            {
                this.CBOpCap = ((IINS)(value));
                return;
            }
            if ((feature == "MAXOPCAP"))
            {
                this.MaxOpCap = ((IINS)(value));
                return;
            }
            if ((feature == "SWITCHCONTROL"))
            {
                this.SwitchControl = ((ICSWI)(value));
                return;
            }
            if ((feature == "POWCAP"))
            {
                this.POWCap = ((SwitchingCapabilityKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SumSwARs"))
            {
                return new SumSwARsProxy(this);
            }
            if ((attribute == "CBOpCap"))
            {
                return new CBOpCapProxy(this);
            }
            if ((attribute == "MaxOpCap"))
            {
                return new MaxOpCapProxy(this);
            }
            if ((attribute == "SwitchControl"))
            {
                return new SwitchControlProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SumSwARs"))
            {
                return new SumSwARsProxy(this);
            }
            if ((reference == "CBOpCap"))
            {
                return new CBOpCapProxy(this);
            }
            if ((reference == "MaxOpCap"))
            {
                return new MaxOpCapProxy(this);
            }
            if ((reference == "SwitchControl"))
            {
                return new SwitchControlProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupX/XCBR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the XCBR class
        /// </summary>
        public class XCBRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private XCBR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public XCBRReferencedElementsCollection(XCBR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SumSwARs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CBOpCap != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxOpCap != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwitchControl != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SumSwARsChanged += this.PropagateValueChanges;
                this._parent.CBOpCapChanged += this.PropagateValueChanges;
                this._parent.MaxOpCapChanged += this.PropagateValueChanges;
                this._parent.SwitchControlChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SumSwARsChanged -= this.PropagateValueChanges;
                this._parent.CBOpCapChanged -= this.PropagateValueChanges;
                this._parent.MaxOpCapChanged -= this.PropagateValueChanges;
                this._parent.SwitchControlChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SumSwARs == null))
                {
                    IBCR sumSwARsCasted = item.As<IBCR>();
                    if ((sumSwARsCasted != null))
                    {
                        this._parent.SumSwARs = sumSwARsCasted;
                        return;
                    }
                }
                if ((this._parent.CBOpCap == null))
                {
                    IINS cBOpCapCasted = item.As<IINS>();
                    if ((cBOpCapCasted != null))
                    {
                        this._parent.CBOpCap = cBOpCapCasted;
                        return;
                    }
                }
                if ((this._parent.MaxOpCap == null))
                {
                    IINS maxOpCapCasted = item.As<IINS>();
                    if ((maxOpCapCasted != null))
                    {
                        this._parent.MaxOpCap = maxOpCapCasted;
                        return;
                    }
                }
                if ((this._parent.SwitchControl == null))
                {
                    ICSWI switchControlCasted = item.As<ICSWI>();
                    if ((switchControlCasted != null))
                    {
                        this._parent.SwitchControl = switchControlCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SumSwARs = null;
                this._parent.CBOpCap = null;
                this._parent.MaxOpCap = null;
                this._parent.SwitchControl = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SumSwARs))
                {
                    return true;
                }
                if ((item == this._parent.CBOpCap))
                {
                    return true;
                }
                if ((item == this._parent.MaxOpCap))
                {
                    return true;
                }
                if ((item == this._parent.SwitchControl))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SumSwARs != null))
                {
                    array[arrayIndex] = this._parent.SumSwARs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CBOpCap != null))
                {
                    array[arrayIndex] = this._parent.CBOpCap;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxOpCap != null))
                {
                    array[arrayIndex] = this._parent.MaxOpCap;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwitchControl != null))
                {
                    array[arrayIndex] = this._parent.SwitchControl;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SumSwARs == item))
                {
                    this._parent.SumSwARs = null;
                    return true;
                }
                if ((this._parent.CBOpCap == item))
                {
                    this._parent.CBOpCap = null;
                    return true;
                }
                if ((this._parent.MaxOpCap == item))
                {
                    this._parent.MaxOpCap = null;
                    return true;
                }
                if ((this._parent.SwitchControl == item))
                {
                    this._parent.SwitchControl = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SumSwARs).Concat(this._parent.CBOpCap).Concat(this._parent.MaxOpCap).Concat(this._parent.SwitchControl).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the POWCap property
        /// </summary>
        private sealed class POWCapProxy : ModelPropertyChange<IXCBR, Nullable<SwitchingCapabilityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public POWCapProxy(IXCBR modelElement) : 
                    base(modelElement, "POWCap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SwitchingCapabilityKind> Value
            {
                get
                {
                    return this.ModelElement.POWCap;
                }
                set
                {
                    this.ModelElement.POWCap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SumSwARs property
        /// </summary>
        private sealed class SumSwARsProxy : ModelPropertyChange<IXCBR, IBCR>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SumSwARsProxy(IXCBR modelElement) : 
                    base(modelElement, "SumSwARs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBCR Value
            {
                get
                {
                    return this.ModelElement.SumSwARs;
                }
                set
                {
                    this.ModelElement.SumSwARs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CBOpCap property
        /// </summary>
        private sealed class CBOpCapProxy : ModelPropertyChange<IXCBR, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CBOpCapProxy(IXCBR modelElement) : 
                    base(modelElement, "CBOpCap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.CBOpCap;
                }
                set
                {
                    this.ModelElement.CBOpCap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxOpCap property
        /// </summary>
        private sealed class MaxOpCapProxy : ModelPropertyChange<IXCBR, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOpCapProxy(IXCBR modelElement) : 
                    base(modelElement, "MaxOpCap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.MaxOpCap;
                }
                set
                {
                    this.ModelElement.MaxOpCap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwitchControl property
        /// </summary>
        private sealed class SwitchControlProxy : ModelPropertyChange<IXCBR, ICSWI>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchControlProxy(IXCBR modelElement) : 
                    base(modelElement, "SwitchControl")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICSWI Value
            {
                get
                {
                    return this.ModelElement.SwitchControl;
                }
                set
                {
                    this.ModelElement.SwitchControl = value;
                }
            }
        }
    }
}

