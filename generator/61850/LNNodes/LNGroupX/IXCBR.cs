//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.Enumerations;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupC;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupX
{
    
    
    /// <summary>
    /// The public interface for XCBR
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(XCBR))]
    [XmlDefaultImplementationTypeAttribute(typeof(XCBR))]
    public interface IXCBR : IModelElement, IGroupX
    {
        
        /// <summary>
        /// The POWCap property
        /// </summary>
        Nullable<SwitchingCapabilityKind> POWCap
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SumSwARs property
        /// </summary>
        IBCR SumSwARs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CBOpCap property
        /// </summary>
        IINS CBOpCap
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MaxOpCap property
        /// </summary>
        IINS MaxOpCap
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SwitchControl property
        /// </summary>
        ICSWI SwitchControl
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the POWCap property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> POWCapChanging;
        
        /// <summary>
        /// Gets fired when the POWCap property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> POWCapChanged;
        
        /// <summary>
        /// Gets fired before the SumSwARs property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SumSwARsChanging;
        
        /// <summary>
        /// Gets fired when the SumSwARs property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SumSwARsChanged;
        
        /// <summary>
        /// Gets fired before the CBOpCap property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CBOpCapChanging;
        
        /// <summary>
        /// Gets fired when the CBOpCap property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CBOpCapChanged;
        
        /// <summary>
        /// Gets fired before the MaxOpCap property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanging;
        
        /// <summary>
        /// Gets fired when the MaxOpCap property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxOpCapChanged;
        
        /// <summary>
        /// Gets fired before the SwitchControl property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchControlChanging;
        
        /// <summary>
        /// Gets fired when the SwitchControl property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchControlChanged;
    }
}

