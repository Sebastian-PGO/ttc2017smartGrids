//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA
{
    
    
    /// <summary>
    /// The default implementation of the ARCO class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pA")]
    [XmlNamespacePrefixAttribute("groupa")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupA/ARCO")]
    public class ARCO : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA.GroupA, IARCO, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TapChg property
        /// </summary>
        private IBSC _tapChg;
        
        /// <summary>
        /// The backing field for the VOvSt property
        /// </summary>
        private ISPS _vOvSt;
        
        /// <summary>
        /// The backing field for the NeutAlm property
        /// </summary>
        private ISPS _neutAlm;
        
        /// <summary>
        /// The backing field for the DschBlk property
        /// </summary>
        private ISPS _dschBlk;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The TapChg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBSC TapChg
        {
            get
            {
                return this._tapChg;
            }
            set
            {
                if ((this._tapChg != value))
                {
                    IBSC old = this._tapChg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapChgChanging(e);
                    this.OnPropertyChanging("TapChg", e);
                    this._tapChg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapChg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapChg;
                    }
                    this.OnTapChgChanged(e);
                    this.OnPropertyChanged("TapChg", e);
                }
            }
        }
        
        /// <summary>
        /// The VOvSt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS VOvSt
        {
            get
            {
                return this._vOvSt;
            }
            set
            {
                if ((this._vOvSt != value))
                {
                    ISPS old = this._vOvSt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVOvStChanging(e);
                    this.OnPropertyChanging("VOvSt", e);
                    this._vOvSt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVOvSt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVOvSt;
                    }
                    this.OnVOvStChanged(e);
                    this.OnPropertyChanged("VOvSt", e);
                }
            }
        }
        
        /// <summary>
        /// The NeutAlm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS NeutAlm
        {
            get
            {
                return this._neutAlm;
            }
            set
            {
                if ((this._neutAlm != value))
                {
                    ISPS old = this._neutAlm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutAlmChanging(e);
                    this.OnPropertyChanging("NeutAlm", e);
                    this._neutAlm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNeutAlm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNeutAlm;
                    }
                    this.OnNeutAlmChanged(e);
                    this.OnPropertyChanged("NeutAlm", e);
                }
            }
        }
        
        /// <summary>
        /// The DschBlk property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS DschBlk
        {
            get
            {
                return this._dschBlk;
            }
            set
            {
                if ((this._dschBlk != value))
                {
                    ISPS old = this._dschBlk;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDschBlkChanging(e);
                    this.OnPropertyChanging("DschBlk", e);
                    this._dschBlk = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDschBlk;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDschBlk;
                    }
                    this.OnDschBlkChanged(e);
                    this.OnPropertyChanged("DschBlk", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ARCOReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupA/ARCO")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TapChg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanging;
        
        /// <summary>
        /// Gets fired when the TapChg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanged;
        
        /// <summary>
        /// Gets fired before the VOvSt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VOvStChanging;
        
        /// <summary>
        /// Gets fired when the VOvSt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VOvStChanged;
        
        /// <summary>
        /// Gets fired before the NeutAlm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutAlmChanging;
        
        /// <summary>
        /// Gets fired when the NeutAlm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutAlmChanged;
        
        /// <summary>
        /// Gets fired before the DschBlk property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DschBlkChanging;
        
        /// <summary>
        /// Gets fired when the DschBlk property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DschBlkChanged;
        
        /// <summary>
        /// Raises the TapChgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapChgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapChg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapChg(object sender, System.EventArgs eventArgs)
        {
            this.TapChg = null;
        }
        
        /// <summary>
        /// Raises the VOvStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVOvStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VOvStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VOvStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVOvStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VOvStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VOvSt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVOvSt(object sender, System.EventArgs eventArgs)
        {
            this.VOvSt = null;
        }
        
        /// <summary>
        /// Raises the NeutAlmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutAlmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutAlmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutAlmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutAlmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutAlmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NeutAlm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNeutAlm(object sender, System.EventArgs eventArgs)
        {
            this.NeutAlm = null;
        }
        
        /// <summary>
        /// Raises the DschBlkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDschBlkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DschBlkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DschBlkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDschBlkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DschBlkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DschBlk property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDschBlk(object sender, System.EventArgs eventArgs)
        {
            this.DschBlk = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TAPCHG"))
            {
                this.TapChg = ((IBSC)(value));
                return;
            }
            if ((feature == "VOVST"))
            {
                this.VOvSt = ((ISPS)(value));
                return;
            }
            if ((feature == "NEUTALM"))
            {
                this.NeutAlm = ((ISPS)(value));
                return;
            }
            if ((feature == "DSCHBLK"))
            {
                this.DschBlk = ((ISPS)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((attribute == "VOvSt"))
            {
                return new VOvStProxy(this);
            }
            if ((attribute == "NeutAlm"))
            {
                return new NeutAlmProxy(this);
            }
            if ((attribute == "DschBlk"))
            {
                return new DschBlkProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((reference == "VOvSt"))
            {
                return new VOvStProxy(this);
            }
            if ((reference == "NeutAlm"))
            {
                return new NeutAlmProxy(this);
            }
            if ((reference == "DschBlk"))
            {
                return new DschBlkProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupA/ARCO")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ARCO class
        /// </summary>
        public class ARCOReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ARCO _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ARCOReferencedElementsCollection(ARCO parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TapChg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VOvSt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NeutAlm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DschBlk != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapChgChanged += this.PropagateValueChanges;
                this._parent.VOvStChanged += this.PropagateValueChanges;
                this._parent.NeutAlmChanged += this.PropagateValueChanges;
                this._parent.DschBlkChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapChgChanged -= this.PropagateValueChanges;
                this._parent.VOvStChanged -= this.PropagateValueChanges;
                this._parent.NeutAlmChanged -= this.PropagateValueChanges;
                this._parent.DschBlkChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TapChg == null))
                {
                    IBSC tapChgCasted = item.As<IBSC>();
                    if ((tapChgCasted != null))
                    {
                        this._parent.TapChg = tapChgCasted;
                        return;
                    }
                }
                if ((this._parent.VOvSt == null))
                {
                    ISPS vOvStCasted = item.As<ISPS>();
                    if ((vOvStCasted != null))
                    {
                        this._parent.VOvSt = vOvStCasted;
                        return;
                    }
                }
                if ((this._parent.NeutAlm == null))
                {
                    ISPS neutAlmCasted = item.As<ISPS>();
                    if ((neutAlmCasted != null))
                    {
                        this._parent.NeutAlm = neutAlmCasted;
                        return;
                    }
                }
                if ((this._parent.DschBlk == null))
                {
                    ISPS dschBlkCasted = item.As<ISPS>();
                    if ((dschBlkCasted != null))
                    {
                        this._parent.DschBlk = dschBlkCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapChg = null;
                this._parent.VOvSt = null;
                this._parent.NeutAlm = null;
                this._parent.DschBlk = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TapChg))
                {
                    return true;
                }
                if ((item == this._parent.VOvSt))
                {
                    return true;
                }
                if ((item == this._parent.NeutAlm))
                {
                    return true;
                }
                if ((item == this._parent.DschBlk))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TapChg != null))
                {
                    array[arrayIndex] = this._parent.TapChg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VOvSt != null))
                {
                    array[arrayIndex] = this._parent.VOvSt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NeutAlm != null))
                {
                    array[arrayIndex] = this._parent.NeutAlm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DschBlk != null))
                {
                    array[arrayIndex] = this._parent.DschBlk;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TapChg == item))
                {
                    this._parent.TapChg = null;
                    return true;
                }
                if ((this._parent.VOvSt == item))
                {
                    this._parent.VOvSt = null;
                    return true;
                }
                if ((this._parent.NeutAlm == item))
                {
                    this._parent.NeutAlm = null;
                    return true;
                }
                if ((this._parent.DschBlk == item))
                {
                    this._parent.DschBlk = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapChg).Concat(this._parent.VOvSt).Concat(this._parent.NeutAlm).Concat(this._parent.DschBlk).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapChg property
        /// </summary>
        private sealed class TapChgProxy : ModelPropertyChange<IARCO, IBSC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapChgProxy(IARCO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBSC Value
            {
                get
                {
                    return this.ModelElement.TapChg;
                }
                set
                {
                    this.ModelElement.TapChg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapChgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapChgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VOvSt property
        /// </summary>
        private sealed class VOvStProxy : ModelPropertyChange<IARCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VOvStProxy(IARCO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.VOvSt;
                }
                set
                {
                    this.ModelElement.VOvSt = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VOvStChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VOvStChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NeutAlm property
        /// </summary>
        private sealed class NeutAlmProxy : ModelPropertyChange<IARCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutAlmProxy(IARCO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.NeutAlm;
                }
                set
                {
                    this.ModelElement.NeutAlm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutAlmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutAlmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DschBlk property
        /// </summary>
        private sealed class DschBlkProxy : ModelPropertyChange<IARCO, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DschBlkProxy(IARCO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.DschBlk;
                }
                set
                {
                    this.ModelElement.DschBlk = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DschBlkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DschBlkChanged -= handler;
            }
        }
    }
}

