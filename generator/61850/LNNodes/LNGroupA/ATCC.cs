//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA
{
    
    
    /// <summary>
    /// The default implementation of the ATCC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pA")]
    [XmlNamespacePrefixAttribute("groupa")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupA/ATCC")]
    public class ATCC : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupA.GroupA, IATCC, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TapChg property
        /// </summary>
        private IBSC _tapChg;
        
        /// <summary>
        /// The backing field for the TapPos property
        /// </summary>
        private IISC _tapPos;
        
        /// <summary>
        /// The backing field for the ParOp property
        /// </summary>
        private IDPC _parOp;
        
        /// <summary>
        /// The backing field for the LTCBlk property
        /// </summary>
        private ISPC _lTCBlk;
        
        /// <summary>
        /// The backing field for the LTCDragRs property
        /// </summary>
        private ISPC _lTCDragRs;
        
        /// <summary>
        /// The backing field for the VRed1 property
        /// </summary>
        private ISPC _vRed1;
        
        /// <summary>
        /// The backing field for the VRed2 property
        /// </summary>
        private ISPC _vRed2;
        
        /// <summary>
        /// The backing field for the CtlV property
        /// </summary>
        private IMV _ctlV;
        
        /// <summary>
        /// The backing field for the LodA property
        /// </summary>
        private IMV _lodA;
        
        /// <summary>
        /// The backing field for the CircA property
        /// </summary>
        private IMV _circA;
        
        /// <summary>
        /// The backing field for the PhAng property
        /// </summary>
        private IMV _phAng;
        
        /// <summary>
        /// The backing field for the HiCtlV property
        /// </summary>
        private IMV _hiCtlV;
        
        /// <summary>
        /// The backing field for the LoCtlV property
        /// </summary>
        private IMV _loCtlV;
        
        /// <summary>
        /// The backing field for the HiDmdA property
        /// </summary>
        private IMV _hiDmdA;
        
        /// <summary>
        /// The backing field for the HiTapPos property
        /// </summary>
        private IINS _hiTapPos;
        
        /// <summary>
        /// The backing field for the LoTapPos property
        /// </summary>
        private IINS _loTapPos;
        
        /// <summary>
        /// The backing field for the BndCtr property
        /// </summary>
        private IASG _bndCtr;
        
        /// <summary>
        /// The backing field for the BndWid property
        /// </summary>
        private IASG _bndWid;
        
        /// <summary>
        /// The backing field for the CtlDlTmms property
        /// </summary>
        private IASG _ctlDlTmms;
        
        /// <summary>
        /// The backing field for the LDCR property
        /// </summary>
        private IASG _lDCR;
        
        /// <summary>
        /// The backing field for the LDCX property
        /// </summary>
        private IASG _lDCX;
        
        /// <summary>
        /// The backing field for the BlkLV property
        /// </summary>
        private IASG _blkLV;
        
        /// <summary>
        /// The backing field for the BlkRV property
        /// </summary>
        private IASG _blkRV;
        
        /// <summary>
        /// The backing field for the RnbkRV property
        /// </summary>
        private IASG _rnbkRV;
        
        /// <summary>
        /// The backing field for the LimLodA property
        /// </summary>
        private IASG _limLodA;
        
        /// <summary>
        /// The backing field for the LDC property
        /// </summary>
        private ISPG _lDC;
        
        /// <summary>
        /// The backing field for the TmDlChr property
        /// </summary>
        private ISPG _tmDlChr;
        
        /// <summary>
        /// The backing field for the LDCZ property
        /// </summary>
        private IASG _lDCZ;
        
        /// <summary>
        /// The backing field for the VRedVal property
        /// </summary>
        private IASG _vRedVal;
        
        /// <summary>
        /// The backing field for the TapBlkR property
        /// </summary>
        private IASG _tapBlkR;
        
        /// <summary>
        /// The backing field for the TapBlkL property
        /// </summary>
        private IASG _tapBlkL;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The TapChg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IBSC TapChg
        {
            get
            {
                return this._tapChg;
            }
            set
            {
                if ((this._tapChg != value))
                {
                    IBSC old = this._tapChg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapChgChanging(e);
                    this.OnPropertyChanging("TapChg", e);
                    this._tapChg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapChg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapChg;
                    }
                    this.OnTapChgChanged(e);
                    this.OnPropertyChanged("TapChg", e);
                }
            }
        }
        
        /// <summary>
        /// The TapPos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IISC TapPos
        {
            get
            {
                return this._tapPos;
            }
            set
            {
                if ((this._tapPos != value))
                {
                    IISC old = this._tapPos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapPosChanging(e);
                    this.OnPropertyChanging("TapPos", e);
                    this._tapPos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapPos;
                    }
                    this.OnTapPosChanged(e);
                    this.OnPropertyChanged("TapPos", e);
                }
            }
        }
        
        /// <summary>
        /// The ParOp property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IDPC ParOp
        {
            get
            {
                return this._parOp;
            }
            set
            {
                if ((this._parOp != value))
                {
                    IDPC old = this._parOp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParOpChanging(e);
                    this.OnPropertyChanging("ParOp", e);
                    this._parOp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetParOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetParOp;
                    }
                    this.OnParOpChanged(e);
                    this.OnPropertyChanged("ParOp", e);
                }
            }
        }
        
        /// <summary>
        /// The LTCBlk property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC LTCBlk
        {
            get
            {
                return this._lTCBlk;
            }
            set
            {
                if ((this._lTCBlk != value))
                {
                    ISPC old = this._lTCBlk;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLTCBlkChanging(e);
                    this.OnPropertyChanging("LTCBlk", e);
                    this._lTCBlk = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLTCBlk;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLTCBlk;
                    }
                    this.OnLTCBlkChanged(e);
                    this.OnPropertyChanged("LTCBlk", e);
                }
            }
        }
        
        /// <summary>
        /// The LTCDragRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC LTCDragRs
        {
            get
            {
                return this._lTCDragRs;
            }
            set
            {
                if ((this._lTCDragRs != value))
                {
                    ISPC old = this._lTCDragRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLTCDragRsChanging(e);
                    this.OnPropertyChanging("LTCDragRs", e);
                    this._lTCDragRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLTCDragRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLTCDragRs;
                    }
                    this.OnLTCDragRsChanged(e);
                    this.OnPropertyChanged("LTCDragRs", e);
                }
            }
        }
        
        /// <summary>
        /// The VRed1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC VRed1
        {
            get
            {
                return this._vRed1;
            }
            set
            {
                if ((this._vRed1 != value))
                {
                    ISPC old = this._vRed1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVRed1Changing(e);
                    this.OnPropertyChanging("VRed1", e);
                    this._vRed1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVRed1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVRed1;
                    }
                    this.OnVRed1Changed(e);
                    this.OnPropertyChanged("VRed1", e);
                }
            }
        }
        
        /// <summary>
        /// The VRed2 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC VRed2
        {
            get
            {
                return this._vRed2;
            }
            set
            {
                if ((this._vRed2 != value))
                {
                    ISPC old = this._vRed2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVRed2Changing(e);
                    this.OnPropertyChanging("VRed2", e);
                    this._vRed2 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVRed2;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVRed2;
                    }
                    this.OnVRed2Changed(e);
                    this.OnPropertyChanged("VRed2", e);
                }
            }
        }
        
        /// <summary>
        /// The CtlV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV CtlV
        {
            get
            {
                return this._ctlV;
            }
            set
            {
                if ((this._ctlV != value))
                {
                    IMV old = this._ctlV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlVChanging(e);
                    this.OnPropertyChanging("CtlV", e);
                    this._ctlV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCtlV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCtlV;
                    }
                    this.OnCtlVChanged(e);
                    this.OnPropertyChanged("CtlV", e);
                }
            }
        }
        
        /// <summary>
        /// The LodA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV LodA
        {
            get
            {
                return this._lodA;
            }
            set
            {
                if ((this._lodA != value))
                {
                    IMV old = this._lodA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLodAChanging(e);
                    this.OnPropertyChanging("LodA", e);
                    this._lodA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLodA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLodA;
                    }
                    this.OnLodAChanged(e);
                    this.OnPropertyChanged("LodA", e);
                }
            }
        }
        
        /// <summary>
        /// The CircA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV CircA
        {
            get
            {
                return this._circA;
            }
            set
            {
                if ((this._circA != value))
                {
                    IMV old = this._circA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCircAChanging(e);
                    this.OnPropertyChanging("CircA", e);
                    this._circA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCircA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCircA;
                    }
                    this.OnCircAChanged(e);
                    this.OnPropertyChanged("CircA", e);
                }
            }
        }
        
        /// <summary>
        /// The PhAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV PhAng
        {
            get
            {
                return this._phAng;
            }
            set
            {
                if ((this._phAng != value))
                {
                    IMV old = this._phAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhAngChanging(e);
                    this.OnPropertyChanging("PhAng", e);
                    this._phAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhAng;
                    }
                    this.OnPhAngChanged(e);
                    this.OnPropertyChanged("PhAng", e);
                }
            }
        }
        
        /// <summary>
        /// The HiCtlV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HiCtlV
        {
            get
            {
                return this._hiCtlV;
            }
            set
            {
                if ((this._hiCtlV != value))
                {
                    IMV old = this._hiCtlV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiCtlVChanging(e);
                    this.OnPropertyChanging("HiCtlV", e);
                    this._hiCtlV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiCtlV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiCtlV;
                    }
                    this.OnHiCtlVChanged(e);
                    this.OnPropertyChanged("HiCtlV", e);
                }
            }
        }
        
        /// <summary>
        /// The LoCtlV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV LoCtlV
        {
            get
            {
                return this._loCtlV;
            }
            set
            {
                if ((this._loCtlV != value))
                {
                    IMV old = this._loCtlV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoCtlVChanging(e);
                    this.OnPropertyChanging("LoCtlV", e);
                    this._loCtlV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoCtlV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoCtlV;
                    }
                    this.OnLoCtlVChanged(e);
                    this.OnPropertyChanged("LoCtlV", e);
                }
            }
        }
        
        /// <summary>
        /// The HiDmdA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV HiDmdA
        {
            get
            {
                return this._hiDmdA;
            }
            set
            {
                if ((this._hiDmdA != value))
                {
                    IMV old = this._hiDmdA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiDmdAChanging(e);
                    this.OnPropertyChanging("HiDmdA", e);
                    this._hiDmdA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiDmdA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiDmdA;
                    }
                    this.OnHiDmdAChanged(e);
                    this.OnPropertyChanged("HiDmdA", e);
                }
            }
        }
        
        /// <summary>
        /// The HiTapPos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS HiTapPos
        {
            get
            {
                return this._hiTapPos;
            }
            set
            {
                if ((this._hiTapPos != value))
                {
                    IINS old = this._hiTapPos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiTapPosChanging(e);
                    this.OnPropertyChanging("HiTapPos", e);
                    this._hiTapPos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiTapPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiTapPos;
                    }
                    this.OnHiTapPosChanged(e);
                    this.OnPropertyChanged("HiTapPos", e);
                }
            }
        }
        
        /// <summary>
        /// The LoTapPos property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS LoTapPos
        {
            get
            {
                return this._loTapPos;
            }
            set
            {
                if ((this._loTapPos != value))
                {
                    IINS old = this._loTapPos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoTapPosChanging(e);
                    this.OnPropertyChanging("LoTapPos", e);
                    this._loTapPos = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoTapPos;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoTapPos;
                    }
                    this.OnLoTapPosChanged(e);
                    this.OnPropertyChanged("LoTapPos", e);
                }
            }
        }
        
        /// <summary>
        /// The BndCtr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BndCtr
        {
            get
            {
                return this._bndCtr;
            }
            set
            {
                if ((this._bndCtr != value))
                {
                    IASG old = this._bndCtr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBndCtrChanging(e);
                    this.OnPropertyChanging("BndCtr", e);
                    this._bndCtr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBndCtr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBndCtr;
                    }
                    this.OnBndCtrChanged(e);
                    this.OnPropertyChanged("BndCtr", e);
                }
            }
        }
        
        /// <summary>
        /// The BndWid property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BndWid
        {
            get
            {
                return this._bndWid;
            }
            set
            {
                if ((this._bndWid != value))
                {
                    IASG old = this._bndWid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBndWidChanging(e);
                    this.OnPropertyChanging("BndWid", e);
                    this._bndWid = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBndWid;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBndWid;
                    }
                    this.OnBndWidChanged(e);
                    this.OnPropertyChanged("BndWid", e);
                }
            }
        }
        
        /// <summary>
        /// The CtlDlTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG CtlDlTmms
        {
            get
            {
                return this._ctlDlTmms;
            }
            set
            {
                if ((this._ctlDlTmms != value))
                {
                    IASG old = this._ctlDlTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtlDlTmmsChanging(e);
                    this.OnPropertyChanging("CtlDlTmms", e);
                    this._ctlDlTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCtlDlTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCtlDlTmms;
                    }
                    this.OnCtlDlTmmsChanged(e);
                    this.OnPropertyChanged("CtlDlTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The LDCR property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LDCR
        {
            get
            {
                return this._lDCR;
            }
            set
            {
                if ((this._lDCR != value))
                {
                    IASG old = this._lDCR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLDCRChanging(e);
                    this.OnPropertyChanging("LDCR", e);
                    this._lDCR = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLDCR;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLDCR;
                    }
                    this.OnLDCRChanged(e);
                    this.OnPropertyChanged("LDCR", e);
                }
            }
        }
        
        /// <summary>
        /// The LDCX property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LDCX
        {
            get
            {
                return this._lDCX;
            }
            set
            {
                if ((this._lDCX != value))
                {
                    IASG old = this._lDCX;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLDCXChanging(e);
                    this.OnPropertyChanging("LDCX", e);
                    this._lDCX = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLDCX;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLDCX;
                    }
                    this.OnLDCXChanged(e);
                    this.OnPropertyChanged("LDCX", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkLV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BlkLV
        {
            get
            {
                return this._blkLV;
            }
            set
            {
                if ((this._blkLV != value))
                {
                    IASG old = this._blkLV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkLVChanging(e);
                    this.OnPropertyChanging("BlkLV", e);
                    this._blkLV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkLV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkLV;
                    }
                    this.OnBlkLVChanged(e);
                    this.OnPropertyChanged("BlkLV", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkRV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BlkRV
        {
            get
            {
                return this._blkRV;
            }
            set
            {
                if ((this._blkRV != value))
                {
                    IASG old = this._blkRV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkRVChanging(e);
                    this.OnPropertyChanging("BlkRV", e);
                    this._blkRV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkRV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkRV;
                    }
                    this.OnBlkRVChanged(e);
                    this.OnPropertyChanged("BlkRV", e);
                }
            }
        }
        
        /// <summary>
        /// The RnbkRV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG RnbkRV
        {
            get
            {
                return this._rnbkRV;
            }
            set
            {
                if ((this._rnbkRV != value))
                {
                    IASG old = this._rnbkRV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRnbkRVChanging(e);
                    this.OnPropertyChanging("RnbkRV", e);
                    this._rnbkRV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRnbkRV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRnbkRV;
                    }
                    this.OnRnbkRVChanged(e);
                    this.OnPropertyChanged("RnbkRV", e);
                }
            }
        }
        
        /// <summary>
        /// The LimLodA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LimLodA
        {
            get
            {
                return this._limLodA;
            }
            set
            {
                if ((this._limLodA != value))
                {
                    IASG old = this._limLodA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLimLodAChanging(e);
                    this.OnPropertyChanging("LimLodA", e);
                    this._limLodA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLimLodA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLimLodA;
                    }
                    this.OnLimLodAChanged(e);
                    this.OnPropertyChanged("LimLodA", e);
                }
            }
        }
        
        /// <summary>
        /// The LDC property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG LDC
        {
            get
            {
                return this._lDC;
            }
            set
            {
                if ((this._lDC != value))
                {
                    ISPG old = this._lDC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLDCChanging(e);
                    this.OnPropertyChanging("LDC", e);
                    this._lDC = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLDC;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLDC;
                    }
                    this.OnLDCChanged(e);
                    this.OnPropertyChanged("LDC", e);
                }
            }
        }
        
        /// <summary>
        /// The TmDlChr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPG TmDlChr
        {
            get
            {
                return this._tmDlChr;
            }
            set
            {
                if ((this._tmDlChr != value))
                {
                    ISPG old = this._tmDlChr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTmDlChrChanging(e);
                    this.OnPropertyChanging("TmDlChr", e);
                    this._tmDlChr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTmDlChr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTmDlChr;
                    }
                    this.OnTmDlChrChanged(e);
                    this.OnPropertyChanged("TmDlChr", e);
                }
            }
        }
        
        /// <summary>
        /// The LDCZ property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LDCZ
        {
            get
            {
                return this._lDCZ;
            }
            set
            {
                if ((this._lDCZ != value))
                {
                    IASG old = this._lDCZ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLDCZChanging(e);
                    this.OnPropertyChanging("LDCZ", e);
                    this._lDCZ = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLDCZ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLDCZ;
                    }
                    this.OnLDCZChanged(e);
                    this.OnPropertyChanged("LDCZ", e);
                }
            }
        }
        
        /// <summary>
        /// The VRedVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG VRedVal
        {
            get
            {
                return this._vRedVal;
            }
            set
            {
                if ((this._vRedVal != value))
                {
                    IASG old = this._vRedVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVRedValChanging(e);
                    this.OnPropertyChanging("VRedVal", e);
                    this._vRedVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVRedVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVRedVal;
                    }
                    this.OnVRedValChanged(e);
                    this.OnPropertyChanged("VRedVal", e);
                }
            }
        }
        
        /// <summary>
        /// The TapBlkR property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG TapBlkR
        {
            get
            {
                return this._tapBlkR;
            }
            set
            {
                if ((this._tapBlkR != value))
                {
                    IASG old = this._tapBlkR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapBlkRChanging(e);
                    this.OnPropertyChanging("TapBlkR", e);
                    this._tapBlkR = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapBlkR;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapBlkR;
                    }
                    this.OnTapBlkRChanged(e);
                    this.OnPropertyChanged("TapBlkR", e);
                }
            }
        }
        
        /// <summary>
        /// The TapBlkL property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG TapBlkL
        {
            get
            {
                return this._tapBlkL;
            }
            set
            {
                if ((this._tapBlkL != value))
                {
                    IASG old = this._tapBlkL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapBlkLChanging(e);
                    this.OnPropertyChanging("TapBlkL", e);
                    this._tapBlkL = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTapBlkL;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTapBlkL;
                    }
                    this.OnTapBlkLChanged(e);
                    this.OnPropertyChanged("TapBlkL", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ATCCReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupA/ATCC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TapChg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanging;
        
        /// <summary>
        /// Gets fired when the TapChg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapChgChanged;
        
        /// <summary>
        /// Gets fired before the TapPos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapPosChanging;
        
        /// <summary>
        /// Gets fired when the TapPos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapPosChanged;
        
        /// <summary>
        /// Gets fired before the ParOp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParOpChanging;
        
        /// <summary>
        /// Gets fired when the ParOp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParOpChanged;
        
        /// <summary>
        /// Gets fired before the LTCBlk property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LTCBlkChanging;
        
        /// <summary>
        /// Gets fired when the LTCBlk property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LTCBlkChanged;
        
        /// <summary>
        /// Gets fired before the LTCDragRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LTCDragRsChanging;
        
        /// <summary>
        /// Gets fired when the LTCDragRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LTCDragRsChanged;
        
        /// <summary>
        /// Gets fired before the VRed1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRed1Changing;
        
        /// <summary>
        /// Gets fired when the VRed1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRed1Changed;
        
        /// <summary>
        /// Gets fired before the VRed2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRed2Changing;
        
        /// <summary>
        /// Gets fired when the VRed2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRed2Changed;
        
        /// <summary>
        /// Gets fired before the CtlV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlVChanging;
        
        /// <summary>
        /// Gets fired when the CtlV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlVChanged;
        
        /// <summary>
        /// Gets fired before the LodA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodAChanging;
        
        /// <summary>
        /// Gets fired when the LodA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LodAChanged;
        
        /// <summary>
        /// Gets fired before the CircA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CircAChanging;
        
        /// <summary>
        /// Gets fired when the CircA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CircAChanged;
        
        /// <summary>
        /// Gets fired before the PhAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhAngChanging;
        
        /// <summary>
        /// Gets fired when the PhAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhAngChanged;
        
        /// <summary>
        /// Gets fired before the HiCtlV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiCtlVChanging;
        
        /// <summary>
        /// Gets fired when the HiCtlV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiCtlVChanged;
        
        /// <summary>
        /// Gets fired before the LoCtlV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoCtlVChanging;
        
        /// <summary>
        /// Gets fired when the LoCtlV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoCtlVChanged;
        
        /// <summary>
        /// Gets fired before the HiDmdA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiDmdAChanging;
        
        /// <summary>
        /// Gets fired when the HiDmdA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiDmdAChanged;
        
        /// <summary>
        /// Gets fired before the HiTapPos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiTapPosChanging;
        
        /// <summary>
        /// Gets fired when the HiTapPos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiTapPosChanged;
        
        /// <summary>
        /// Gets fired before the LoTapPos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoTapPosChanging;
        
        /// <summary>
        /// Gets fired when the LoTapPos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoTapPosChanged;
        
        /// <summary>
        /// Gets fired before the BndCtr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BndCtrChanging;
        
        /// <summary>
        /// Gets fired when the BndCtr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BndCtrChanged;
        
        /// <summary>
        /// Gets fired before the BndWid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BndWidChanging;
        
        /// <summary>
        /// Gets fired when the BndWid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BndWidChanged;
        
        /// <summary>
        /// Gets fired before the CtlDlTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlDlTmmsChanging;
        
        /// <summary>
        /// Gets fired when the CtlDlTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtlDlTmmsChanged;
        
        /// <summary>
        /// Gets fired before the LDCR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCRChanging;
        
        /// <summary>
        /// Gets fired when the LDCR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCRChanged;
        
        /// <summary>
        /// Gets fired before the LDCX property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCXChanging;
        
        /// <summary>
        /// Gets fired when the LDCX property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCXChanged;
        
        /// <summary>
        /// Gets fired before the BlkLV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkLVChanging;
        
        /// <summary>
        /// Gets fired when the BlkLV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkLVChanged;
        
        /// <summary>
        /// Gets fired before the BlkRV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkRVChanging;
        
        /// <summary>
        /// Gets fired when the BlkRV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkRVChanged;
        
        /// <summary>
        /// Gets fired before the RnbkRV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RnbkRVChanging;
        
        /// <summary>
        /// Gets fired when the RnbkRV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RnbkRVChanged;
        
        /// <summary>
        /// Gets fired before the LimLodA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimLodAChanging;
        
        /// <summary>
        /// Gets fired when the LimLodA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimLodAChanged;
        
        /// <summary>
        /// Gets fired before the LDC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCChanging;
        
        /// <summary>
        /// Gets fired when the LDC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCChanged;
        
        /// <summary>
        /// Gets fired before the TmDlChr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmDlChrChanging;
        
        /// <summary>
        /// Gets fired when the TmDlChr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TmDlChrChanged;
        
        /// <summary>
        /// Gets fired before the LDCZ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCZChanging;
        
        /// <summary>
        /// Gets fired when the LDCZ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LDCZChanged;
        
        /// <summary>
        /// Gets fired before the VRedVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRedValChanging;
        
        /// <summary>
        /// Gets fired when the VRedVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRedValChanged;
        
        /// <summary>
        /// Gets fired before the TapBlkR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapBlkRChanging;
        
        /// <summary>
        /// Gets fired when the TapBlkR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapBlkRChanged;
        
        /// <summary>
        /// Gets fired before the TapBlkL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapBlkLChanging;
        
        /// <summary>
        /// Gets fired when the TapBlkL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapBlkLChanged;
        
        /// <summary>
        /// Raises the TapChgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapChgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapChgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapChgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapChg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapChg(object sender, System.EventArgs eventArgs)
        {
            this.TapChg = null;
        }
        
        /// <summary>
        /// Raises the TapPosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapPosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapPosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapPosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapPos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapPos(object sender, System.EventArgs eventArgs)
        {
            this.TapPos = null;
        }
        
        /// <summary>
        /// Raises the ParOpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParOpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParOpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParOpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParOp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParOp(object sender, System.EventArgs eventArgs)
        {
            this.ParOp = null;
        }
        
        /// <summary>
        /// Raises the LTCBlkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLTCBlkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LTCBlkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LTCBlkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLTCBlkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LTCBlkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LTCBlk property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLTCBlk(object sender, System.EventArgs eventArgs)
        {
            this.LTCBlk = null;
        }
        
        /// <summary>
        /// Raises the LTCDragRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLTCDragRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LTCDragRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LTCDragRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLTCDragRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LTCDragRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LTCDragRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLTCDragRs(object sender, System.EventArgs eventArgs)
        {
            this.LTCDragRs = null;
        }
        
        /// <summary>
        /// Raises the VRed1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRed1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRed1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VRed1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRed1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRed1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VRed1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVRed1(object sender, System.EventArgs eventArgs)
        {
            this.VRed1 = null;
        }
        
        /// <summary>
        /// Raises the VRed2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRed2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRed2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VRed2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRed2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRed2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VRed2 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVRed2(object sender, System.EventArgs eventArgs)
        {
            this.VRed2 = null;
        }
        
        /// <summary>
        /// Raises the CtlVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CtlV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCtlV(object sender, System.EventArgs eventArgs)
        {
            this.CtlV = null;
        }
        
        /// <summary>
        /// Raises the LodAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LodAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLodAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LodAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LodA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLodA(object sender, System.EventArgs eventArgs)
        {
            this.LodA = null;
        }
        
        /// <summary>
        /// Raises the CircAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCircAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CircAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CircAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCircAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CircAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CircA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCircA(object sender, System.EventArgs eventArgs)
        {
            this.CircA = null;
        }
        
        /// <summary>
        /// Raises the PhAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhAng(object sender, System.EventArgs eventArgs)
        {
            this.PhAng = null;
        }
        
        /// <summary>
        /// Raises the HiCtlVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiCtlVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiCtlVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiCtlVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiCtlVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiCtlVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiCtlV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiCtlV(object sender, System.EventArgs eventArgs)
        {
            this.HiCtlV = null;
        }
        
        /// <summary>
        /// Raises the LoCtlVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoCtlVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoCtlVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoCtlVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoCtlVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoCtlVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoCtlV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoCtlV(object sender, System.EventArgs eventArgs)
        {
            this.LoCtlV = null;
        }
        
        /// <summary>
        /// Raises the HiDmdAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiDmdAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiDmdAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiDmdAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiDmdAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiDmdAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiDmdA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiDmdA(object sender, System.EventArgs eventArgs)
        {
            this.HiDmdA = null;
        }
        
        /// <summary>
        /// Raises the HiTapPosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiTapPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiTapPosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiTapPosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiTapPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiTapPosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiTapPos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiTapPos(object sender, System.EventArgs eventArgs)
        {
            this.HiTapPos = null;
        }
        
        /// <summary>
        /// Raises the LoTapPosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoTapPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoTapPosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoTapPosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoTapPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoTapPosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoTapPos property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoTapPos(object sender, System.EventArgs eventArgs)
        {
            this.LoTapPos = null;
        }
        
        /// <summary>
        /// Raises the BndCtrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBndCtrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BndCtrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BndCtrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBndCtrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BndCtrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BndCtr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBndCtr(object sender, System.EventArgs eventArgs)
        {
            this.BndCtr = null;
        }
        
        /// <summary>
        /// Raises the BndWidChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBndWidChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BndWidChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BndWidChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBndWidChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BndWidChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BndWid property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBndWid(object sender, System.EventArgs eventArgs)
        {
            this.BndWid = null;
        }
        
        /// <summary>
        /// Raises the CtlDlTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlDlTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlDlTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtlDlTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtlDlTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtlDlTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CtlDlTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCtlDlTmms(object sender, System.EventArgs eventArgs)
        {
            this.CtlDlTmms = null;
        }
        
        /// <summary>
        /// Raises the LDCRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LDCRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LDCR property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLDCR(object sender, System.EventArgs eventArgs)
        {
            this.LDCR = null;
        }
        
        /// <summary>
        /// Raises the LDCXChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCXChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LDCXChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCXChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LDCX property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLDCX(object sender, System.EventArgs eventArgs)
        {
            this.LDCX = null;
        }
        
        /// <summary>
        /// Raises the BlkLVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkLVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkLVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkLVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkLVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkLVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkLV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkLV(object sender, System.EventArgs eventArgs)
        {
            this.BlkLV = null;
        }
        
        /// <summary>
        /// Raises the BlkRVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkRVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkRVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkRVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkRVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkRVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkRV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkRV(object sender, System.EventArgs eventArgs)
        {
            this.BlkRV = null;
        }
        
        /// <summary>
        /// Raises the RnbkRVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRnbkRVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RnbkRVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RnbkRVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRnbkRVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RnbkRVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RnbkRV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRnbkRV(object sender, System.EventArgs eventArgs)
        {
            this.RnbkRV = null;
        }
        
        /// <summary>
        /// Raises the LimLodAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimLodAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimLodAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LimLodAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimLodAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimLodAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LimLodA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLimLodA(object sender, System.EventArgs eventArgs)
        {
            this.LimLodA = null;
        }
        
        /// <summary>
        /// Raises the LDCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LDCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LDC property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLDC(object sender, System.EventArgs eventArgs)
        {
            this.LDC = null;
        }
        
        /// <summary>
        /// Raises the TmDlChrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmDlChrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmDlChrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TmDlChrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTmDlChrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TmDlChrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TmDlChr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTmDlChr(object sender, System.EventArgs eventArgs)
        {
            this.TmDlChr = null;
        }
        
        /// <summary>
        /// Raises the LDCZChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCZChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCZChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LDCZChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLDCZChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LDCZChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LDCZ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLDCZ(object sender, System.EventArgs eventArgs)
        {
            this.LDCZ = null;
        }
        
        /// <summary>
        /// Raises the VRedValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRedValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRedValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VRedValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRedValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRedValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VRedVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVRedVal(object sender, System.EventArgs eventArgs)
        {
            this.VRedVal = null;
        }
        
        /// <summary>
        /// Raises the TapBlkRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapBlkRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapBlkRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapBlkRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapBlkRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapBlkRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapBlkR property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapBlkR(object sender, System.EventArgs eventArgs)
        {
            this.TapBlkR = null;
        }
        
        /// <summary>
        /// Raises the TapBlkLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapBlkLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapBlkLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapBlkLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapBlkLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapBlkLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TapBlkL property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTapBlkL(object sender, System.EventArgs eventArgs)
        {
            this.TapBlkL = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TAPCHG"))
            {
                this.TapChg = ((IBSC)(value));
                return;
            }
            if ((feature == "TAPPOS"))
            {
                this.TapPos = ((IISC)(value));
                return;
            }
            if ((feature == "PAROP"))
            {
                this.ParOp = ((IDPC)(value));
                return;
            }
            if ((feature == "LTCBLK"))
            {
                this.LTCBlk = ((ISPC)(value));
                return;
            }
            if ((feature == "LTCDRAGRS"))
            {
                this.LTCDragRs = ((ISPC)(value));
                return;
            }
            if ((feature == "VRED1"))
            {
                this.VRed1 = ((ISPC)(value));
                return;
            }
            if ((feature == "VRED2"))
            {
                this.VRed2 = ((ISPC)(value));
                return;
            }
            if ((feature == "CTLV"))
            {
                this.CtlV = ((IMV)(value));
                return;
            }
            if ((feature == "LODA"))
            {
                this.LodA = ((IMV)(value));
                return;
            }
            if ((feature == "CIRCA"))
            {
                this.CircA = ((IMV)(value));
                return;
            }
            if ((feature == "PHANG"))
            {
                this.PhAng = ((IMV)(value));
                return;
            }
            if ((feature == "HICTLV"))
            {
                this.HiCtlV = ((IMV)(value));
                return;
            }
            if ((feature == "LOCTLV"))
            {
                this.LoCtlV = ((IMV)(value));
                return;
            }
            if ((feature == "HIDMDA"))
            {
                this.HiDmdA = ((IMV)(value));
                return;
            }
            if ((feature == "HITAPPOS"))
            {
                this.HiTapPos = ((IINS)(value));
                return;
            }
            if ((feature == "LOTAPPOS"))
            {
                this.LoTapPos = ((IINS)(value));
                return;
            }
            if ((feature == "BNDCTR"))
            {
                this.BndCtr = ((IASG)(value));
                return;
            }
            if ((feature == "BNDWID"))
            {
                this.BndWid = ((IASG)(value));
                return;
            }
            if ((feature == "CTLDLTMMS"))
            {
                this.CtlDlTmms = ((IASG)(value));
                return;
            }
            if ((feature == "LDCR"))
            {
                this.LDCR = ((IASG)(value));
                return;
            }
            if ((feature == "LDCX"))
            {
                this.LDCX = ((IASG)(value));
                return;
            }
            if ((feature == "BLKLV"))
            {
                this.BlkLV = ((IASG)(value));
                return;
            }
            if ((feature == "BLKRV"))
            {
                this.BlkRV = ((IASG)(value));
                return;
            }
            if ((feature == "RNBKRV"))
            {
                this.RnbkRV = ((IASG)(value));
                return;
            }
            if ((feature == "LIMLODA"))
            {
                this.LimLodA = ((IASG)(value));
                return;
            }
            if ((feature == "LDC"))
            {
                this.LDC = ((ISPG)(value));
                return;
            }
            if ((feature == "TMDLCHR"))
            {
                this.TmDlChr = ((ISPG)(value));
                return;
            }
            if ((feature == "LDCZ"))
            {
                this.LDCZ = ((IASG)(value));
                return;
            }
            if ((feature == "VREDVAL"))
            {
                this.VRedVal = ((IASG)(value));
                return;
            }
            if ((feature == "TAPBLKR"))
            {
                this.TapBlkR = ((IASG)(value));
                return;
            }
            if ((feature == "TAPBLKL"))
            {
                this.TapBlkL = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((attribute == "TapPos"))
            {
                return new TapPosProxy(this);
            }
            if ((attribute == "ParOp"))
            {
                return new ParOpProxy(this);
            }
            if ((attribute == "LTCBlk"))
            {
                return new LTCBlkProxy(this);
            }
            if ((attribute == "LTCDragRs"))
            {
                return new LTCDragRsProxy(this);
            }
            if ((attribute == "VRed1"))
            {
                return new VRed1Proxy(this);
            }
            if ((attribute == "VRed2"))
            {
                return new VRed2Proxy(this);
            }
            if ((attribute == "CtlV"))
            {
                return new CtlVProxy(this);
            }
            if ((attribute == "LodA"))
            {
                return new LodAProxy(this);
            }
            if ((attribute == "CircA"))
            {
                return new CircAProxy(this);
            }
            if ((attribute == "PhAng"))
            {
                return new PhAngProxy(this);
            }
            if ((attribute == "HiCtlV"))
            {
                return new HiCtlVProxy(this);
            }
            if ((attribute == "LoCtlV"))
            {
                return new LoCtlVProxy(this);
            }
            if ((attribute == "HiDmdA"))
            {
                return new HiDmdAProxy(this);
            }
            if ((attribute == "HiTapPos"))
            {
                return new HiTapPosProxy(this);
            }
            if ((attribute == "LoTapPos"))
            {
                return new LoTapPosProxy(this);
            }
            if ((attribute == "BndCtr"))
            {
                return new BndCtrProxy(this);
            }
            if ((attribute == "BndWid"))
            {
                return new BndWidProxy(this);
            }
            if ((attribute == "CtlDlTmms"))
            {
                return new CtlDlTmmsProxy(this);
            }
            if ((attribute == "LDCR"))
            {
                return new LDCRProxy(this);
            }
            if ((attribute == "LDCX"))
            {
                return new LDCXProxy(this);
            }
            if ((attribute == "BlkLV"))
            {
                return new BlkLVProxy(this);
            }
            if ((attribute == "BlkRV"))
            {
                return new BlkRVProxy(this);
            }
            if ((attribute == "RnbkRV"))
            {
                return new RnbkRVProxy(this);
            }
            if ((attribute == "LimLodA"))
            {
                return new LimLodAProxy(this);
            }
            if ((attribute == "LDC"))
            {
                return new LDCProxy(this);
            }
            if ((attribute == "TmDlChr"))
            {
                return new TmDlChrProxy(this);
            }
            if ((attribute == "LDCZ"))
            {
                return new LDCZProxy(this);
            }
            if ((attribute == "VRedVal"))
            {
                return new VRedValProxy(this);
            }
            if ((attribute == "TapBlkR"))
            {
                return new TapBlkRProxy(this);
            }
            if ((attribute == "TapBlkL"))
            {
                return new TapBlkLProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TapChg"))
            {
                return new TapChgProxy(this);
            }
            if ((reference == "TapPos"))
            {
                return new TapPosProxy(this);
            }
            if ((reference == "ParOp"))
            {
                return new ParOpProxy(this);
            }
            if ((reference == "LTCBlk"))
            {
                return new LTCBlkProxy(this);
            }
            if ((reference == "LTCDragRs"))
            {
                return new LTCDragRsProxy(this);
            }
            if ((reference == "VRed1"))
            {
                return new VRed1Proxy(this);
            }
            if ((reference == "VRed2"))
            {
                return new VRed2Proxy(this);
            }
            if ((reference == "CtlV"))
            {
                return new CtlVProxy(this);
            }
            if ((reference == "LodA"))
            {
                return new LodAProxy(this);
            }
            if ((reference == "CircA"))
            {
                return new CircAProxy(this);
            }
            if ((reference == "PhAng"))
            {
                return new PhAngProxy(this);
            }
            if ((reference == "HiCtlV"))
            {
                return new HiCtlVProxy(this);
            }
            if ((reference == "LoCtlV"))
            {
                return new LoCtlVProxy(this);
            }
            if ((reference == "HiDmdA"))
            {
                return new HiDmdAProxy(this);
            }
            if ((reference == "HiTapPos"))
            {
                return new HiTapPosProxy(this);
            }
            if ((reference == "LoTapPos"))
            {
                return new LoTapPosProxy(this);
            }
            if ((reference == "BndCtr"))
            {
                return new BndCtrProxy(this);
            }
            if ((reference == "BndWid"))
            {
                return new BndWidProxy(this);
            }
            if ((reference == "CtlDlTmms"))
            {
                return new CtlDlTmmsProxy(this);
            }
            if ((reference == "LDCR"))
            {
                return new LDCRProxy(this);
            }
            if ((reference == "LDCX"))
            {
                return new LDCXProxy(this);
            }
            if ((reference == "BlkLV"))
            {
                return new BlkLVProxy(this);
            }
            if ((reference == "BlkRV"))
            {
                return new BlkRVProxy(this);
            }
            if ((reference == "RnbkRV"))
            {
                return new RnbkRVProxy(this);
            }
            if ((reference == "LimLodA"))
            {
                return new LimLodAProxy(this);
            }
            if ((reference == "LDC"))
            {
                return new LDCProxy(this);
            }
            if ((reference == "TmDlChr"))
            {
                return new TmDlChrProxy(this);
            }
            if ((reference == "LDCZ"))
            {
                return new LDCZProxy(this);
            }
            if ((reference == "VRedVal"))
            {
                return new VRedValProxy(this);
            }
            if ((reference == "TapBlkR"))
            {
                return new TapBlkRProxy(this);
            }
            if ((reference == "TapBlkL"))
            {
                return new TapBlkLProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupA/ATCC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ATCC class
        /// </summary>
        public class ATCCReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ATCC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ATCCReferencedElementsCollection(ATCC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TapChg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TapPos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ParOp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LTCBlk != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LTCDragRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VRed1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VRed2 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CtlV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LodA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CircA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiCtlV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoCtlV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiDmdA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiTapPos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoTapPos != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BndCtr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BndWid != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CtlDlTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LDCR != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LDCX != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkLV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkRV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RnbkRV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LimLodA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LDC != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TmDlChr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LDCZ != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VRedVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TapBlkR != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TapBlkL != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapChgChanged += this.PropagateValueChanges;
                this._parent.TapPosChanged += this.PropagateValueChanges;
                this._parent.ParOpChanged += this.PropagateValueChanges;
                this._parent.LTCBlkChanged += this.PropagateValueChanges;
                this._parent.LTCDragRsChanged += this.PropagateValueChanges;
                this._parent.VRed1Changed += this.PropagateValueChanges;
                this._parent.VRed2Changed += this.PropagateValueChanges;
                this._parent.CtlVChanged += this.PropagateValueChanges;
                this._parent.LodAChanged += this.PropagateValueChanges;
                this._parent.CircAChanged += this.PropagateValueChanges;
                this._parent.PhAngChanged += this.PropagateValueChanges;
                this._parent.HiCtlVChanged += this.PropagateValueChanges;
                this._parent.LoCtlVChanged += this.PropagateValueChanges;
                this._parent.HiDmdAChanged += this.PropagateValueChanges;
                this._parent.HiTapPosChanged += this.PropagateValueChanges;
                this._parent.LoTapPosChanged += this.PropagateValueChanges;
                this._parent.BndCtrChanged += this.PropagateValueChanges;
                this._parent.BndWidChanged += this.PropagateValueChanges;
                this._parent.CtlDlTmmsChanged += this.PropagateValueChanges;
                this._parent.LDCRChanged += this.PropagateValueChanges;
                this._parent.LDCXChanged += this.PropagateValueChanges;
                this._parent.BlkLVChanged += this.PropagateValueChanges;
                this._parent.BlkRVChanged += this.PropagateValueChanges;
                this._parent.RnbkRVChanged += this.PropagateValueChanges;
                this._parent.LimLodAChanged += this.PropagateValueChanges;
                this._parent.LDCChanged += this.PropagateValueChanges;
                this._parent.TmDlChrChanged += this.PropagateValueChanges;
                this._parent.LDCZChanged += this.PropagateValueChanges;
                this._parent.VRedValChanged += this.PropagateValueChanges;
                this._parent.TapBlkRChanged += this.PropagateValueChanges;
                this._parent.TapBlkLChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapChgChanged -= this.PropagateValueChanges;
                this._parent.TapPosChanged -= this.PropagateValueChanges;
                this._parent.ParOpChanged -= this.PropagateValueChanges;
                this._parent.LTCBlkChanged -= this.PropagateValueChanges;
                this._parent.LTCDragRsChanged -= this.PropagateValueChanges;
                this._parent.VRed1Changed -= this.PropagateValueChanges;
                this._parent.VRed2Changed -= this.PropagateValueChanges;
                this._parent.CtlVChanged -= this.PropagateValueChanges;
                this._parent.LodAChanged -= this.PropagateValueChanges;
                this._parent.CircAChanged -= this.PropagateValueChanges;
                this._parent.PhAngChanged -= this.PropagateValueChanges;
                this._parent.HiCtlVChanged -= this.PropagateValueChanges;
                this._parent.LoCtlVChanged -= this.PropagateValueChanges;
                this._parent.HiDmdAChanged -= this.PropagateValueChanges;
                this._parent.HiTapPosChanged -= this.PropagateValueChanges;
                this._parent.LoTapPosChanged -= this.PropagateValueChanges;
                this._parent.BndCtrChanged -= this.PropagateValueChanges;
                this._parent.BndWidChanged -= this.PropagateValueChanges;
                this._parent.CtlDlTmmsChanged -= this.PropagateValueChanges;
                this._parent.LDCRChanged -= this.PropagateValueChanges;
                this._parent.LDCXChanged -= this.PropagateValueChanges;
                this._parent.BlkLVChanged -= this.PropagateValueChanges;
                this._parent.BlkRVChanged -= this.PropagateValueChanges;
                this._parent.RnbkRVChanged -= this.PropagateValueChanges;
                this._parent.LimLodAChanged -= this.PropagateValueChanges;
                this._parent.LDCChanged -= this.PropagateValueChanges;
                this._parent.TmDlChrChanged -= this.PropagateValueChanges;
                this._parent.LDCZChanged -= this.PropagateValueChanges;
                this._parent.VRedValChanged -= this.PropagateValueChanges;
                this._parent.TapBlkRChanged -= this.PropagateValueChanges;
                this._parent.TapBlkLChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TapChg == null))
                {
                    IBSC tapChgCasted = item.As<IBSC>();
                    if ((tapChgCasted != null))
                    {
                        this._parent.TapChg = tapChgCasted;
                        return;
                    }
                }
                if ((this._parent.TapPos == null))
                {
                    IISC tapPosCasted = item.As<IISC>();
                    if ((tapPosCasted != null))
                    {
                        this._parent.TapPos = tapPosCasted;
                        return;
                    }
                }
                if ((this._parent.ParOp == null))
                {
                    IDPC parOpCasted = item.As<IDPC>();
                    if ((parOpCasted != null))
                    {
                        this._parent.ParOp = parOpCasted;
                        return;
                    }
                }
                if ((this._parent.LTCBlk == null))
                {
                    ISPC lTCBlkCasted = item.As<ISPC>();
                    if ((lTCBlkCasted != null))
                    {
                        this._parent.LTCBlk = lTCBlkCasted;
                        return;
                    }
                }
                if ((this._parent.LTCDragRs == null))
                {
                    ISPC lTCDragRsCasted = item.As<ISPC>();
                    if ((lTCDragRsCasted != null))
                    {
                        this._parent.LTCDragRs = lTCDragRsCasted;
                        return;
                    }
                }
                if ((this._parent.VRed1 == null))
                {
                    ISPC vRed1Casted = item.As<ISPC>();
                    if ((vRed1Casted != null))
                    {
                        this._parent.VRed1 = vRed1Casted;
                        return;
                    }
                }
                if ((this._parent.VRed2 == null))
                {
                    ISPC vRed2Casted = item.As<ISPC>();
                    if ((vRed2Casted != null))
                    {
                        this._parent.VRed2 = vRed2Casted;
                        return;
                    }
                }
                if ((this._parent.CtlV == null))
                {
                    IMV ctlVCasted = item.As<IMV>();
                    if ((ctlVCasted != null))
                    {
                        this._parent.CtlV = ctlVCasted;
                        return;
                    }
                }
                if ((this._parent.LodA == null))
                {
                    IMV lodACasted = item.As<IMV>();
                    if ((lodACasted != null))
                    {
                        this._parent.LodA = lodACasted;
                        return;
                    }
                }
                if ((this._parent.CircA == null))
                {
                    IMV circACasted = item.As<IMV>();
                    if ((circACasted != null))
                    {
                        this._parent.CircA = circACasted;
                        return;
                    }
                }
                if ((this._parent.PhAng == null))
                {
                    IMV phAngCasted = item.As<IMV>();
                    if ((phAngCasted != null))
                    {
                        this._parent.PhAng = phAngCasted;
                        return;
                    }
                }
                if ((this._parent.HiCtlV == null))
                {
                    IMV hiCtlVCasted = item.As<IMV>();
                    if ((hiCtlVCasted != null))
                    {
                        this._parent.HiCtlV = hiCtlVCasted;
                        return;
                    }
                }
                if ((this._parent.LoCtlV == null))
                {
                    IMV loCtlVCasted = item.As<IMV>();
                    if ((loCtlVCasted != null))
                    {
                        this._parent.LoCtlV = loCtlVCasted;
                        return;
                    }
                }
                if ((this._parent.HiDmdA == null))
                {
                    IMV hiDmdACasted = item.As<IMV>();
                    if ((hiDmdACasted != null))
                    {
                        this._parent.HiDmdA = hiDmdACasted;
                        return;
                    }
                }
                if ((this._parent.HiTapPos == null))
                {
                    IINS hiTapPosCasted = item.As<IINS>();
                    if ((hiTapPosCasted != null))
                    {
                        this._parent.HiTapPos = hiTapPosCasted;
                        return;
                    }
                }
                if ((this._parent.LoTapPos == null))
                {
                    IINS loTapPosCasted = item.As<IINS>();
                    if ((loTapPosCasted != null))
                    {
                        this._parent.LoTapPos = loTapPosCasted;
                        return;
                    }
                }
                if ((this._parent.BndCtr == null))
                {
                    IASG bndCtrCasted = item.As<IASG>();
                    if ((bndCtrCasted != null))
                    {
                        this._parent.BndCtr = bndCtrCasted;
                        return;
                    }
                }
                if ((this._parent.BndWid == null))
                {
                    IASG bndWidCasted = item.As<IASG>();
                    if ((bndWidCasted != null))
                    {
                        this._parent.BndWid = bndWidCasted;
                        return;
                    }
                }
                if ((this._parent.CtlDlTmms == null))
                {
                    IASG ctlDlTmmsCasted = item.As<IASG>();
                    if ((ctlDlTmmsCasted != null))
                    {
                        this._parent.CtlDlTmms = ctlDlTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.LDCR == null))
                {
                    IASG lDCRCasted = item.As<IASG>();
                    if ((lDCRCasted != null))
                    {
                        this._parent.LDCR = lDCRCasted;
                        return;
                    }
                }
                if ((this._parent.LDCX == null))
                {
                    IASG lDCXCasted = item.As<IASG>();
                    if ((lDCXCasted != null))
                    {
                        this._parent.LDCX = lDCXCasted;
                        return;
                    }
                }
                if ((this._parent.BlkLV == null))
                {
                    IASG blkLVCasted = item.As<IASG>();
                    if ((blkLVCasted != null))
                    {
                        this._parent.BlkLV = blkLVCasted;
                        return;
                    }
                }
                if ((this._parent.BlkRV == null))
                {
                    IASG blkRVCasted = item.As<IASG>();
                    if ((blkRVCasted != null))
                    {
                        this._parent.BlkRV = blkRVCasted;
                        return;
                    }
                }
                if ((this._parent.RnbkRV == null))
                {
                    IASG rnbkRVCasted = item.As<IASG>();
                    if ((rnbkRVCasted != null))
                    {
                        this._parent.RnbkRV = rnbkRVCasted;
                        return;
                    }
                }
                if ((this._parent.LimLodA == null))
                {
                    IASG limLodACasted = item.As<IASG>();
                    if ((limLodACasted != null))
                    {
                        this._parent.LimLodA = limLodACasted;
                        return;
                    }
                }
                if ((this._parent.LDC == null))
                {
                    ISPG lDCCasted = item.As<ISPG>();
                    if ((lDCCasted != null))
                    {
                        this._parent.LDC = lDCCasted;
                        return;
                    }
                }
                if ((this._parent.TmDlChr == null))
                {
                    ISPG tmDlChrCasted = item.As<ISPG>();
                    if ((tmDlChrCasted != null))
                    {
                        this._parent.TmDlChr = tmDlChrCasted;
                        return;
                    }
                }
                if ((this._parent.LDCZ == null))
                {
                    IASG lDCZCasted = item.As<IASG>();
                    if ((lDCZCasted != null))
                    {
                        this._parent.LDCZ = lDCZCasted;
                        return;
                    }
                }
                if ((this._parent.VRedVal == null))
                {
                    IASG vRedValCasted = item.As<IASG>();
                    if ((vRedValCasted != null))
                    {
                        this._parent.VRedVal = vRedValCasted;
                        return;
                    }
                }
                if ((this._parent.TapBlkR == null))
                {
                    IASG tapBlkRCasted = item.As<IASG>();
                    if ((tapBlkRCasted != null))
                    {
                        this._parent.TapBlkR = tapBlkRCasted;
                        return;
                    }
                }
                if ((this._parent.TapBlkL == null))
                {
                    IASG tapBlkLCasted = item.As<IASG>();
                    if ((tapBlkLCasted != null))
                    {
                        this._parent.TapBlkL = tapBlkLCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapChg = null;
                this._parent.TapPos = null;
                this._parent.ParOp = null;
                this._parent.LTCBlk = null;
                this._parent.LTCDragRs = null;
                this._parent.VRed1 = null;
                this._parent.VRed2 = null;
                this._parent.CtlV = null;
                this._parent.LodA = null;
                this._parent.CircA = null;
                this._parent.PhAng = null;
                this._parent.HiCtlV = null;
                this._parent.LoCtlV = null;
                this._parent.HiDmdA = null;
                this._parent.HiTapPos = null;
                this._parent.LoTapPos = null;
                this._parent.BndCtr = null;
                this._parent.BndWid = null;
                this._parent.CtlDlTmms = null;
                this._parent.LDCR = null;
                this._parent.LDCX = null;
                this._parent.BlkLV = null;
                this._parent.BlkRV = null;
                this._parent.RnbkRV = null;
                this._parent.LimLodA = null;
                this._parent.LDC = null;
                this._parent.TmDlChr = null;
                this._parent.LDCZ = null;
                this._parent.VRedVal = null;
                this._parent.TapBlkR = null;
                this._parent.TapBlkL = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TapChg))
                {
                    return true;
                }
                if ((item == this._parent.TapPos))
                {
                    return true;
                }
                if ((item == this._parent.ParOp))
                {
                    return true;
                }
                if ((item == this._parent.LTCBlk))
                {
                    return true;
                }
                if ((item == this._parent.LTCDragRs))
                {
                    return true;
                }
                if ((item == this._parent.VRed1))
                {
                    return true;
                }
                if ((item == this._parent.VRed2))
                {
                    return true;
                }
                if ((item == this._parent.CtlV))
                {
                    return true;
                }
                if ((item == this._parent.LodA))
                {
                    return true;
                }
                if ((item == this._parent.CircA))
                {
                    return true;
                }
                if ((item == this._parent.PhAng))
                {
                    return true;
                }
                if ((item == this._parent.HiCtlV))
                {
                    return true;
                }
                if ((item == this._parent.LoCtlV))
                {
                    return true;
                }
                if ((item == this._parent.HiDmdA))
                {
                    return true;
                }
                if ((item == this._parent.HiTapPos))
                {
                    return true;
                }
                if ((item == this._parent.LoTapPos))
                {
                    return true;
                }
                if ((item == this._parent.BndCtr))
                {
                    return true;
                }
                if ((item == this._parent.BndWid))
                {
                    return true;
                }
                if ((item == this._parent.CtlDlTmms))
                {
                    return true;
                }
                if ((item == this._parent.LDCR))
                {
                    return true;
                }
                if ((item == this._parent.LDCX))
                {
                    return true;
                }
                if ((item == this._parent.BlkLV))
                {
                    return true;
                }
                if ((item == this._parent.BlkRV))
                {
                    return true;
                }
                if ((item == this._parent.RnbkRV))
                {
                    return true;
                }
                if ((item == this._parent.LimLodA))
                {
                    return true;
                }
                if ((item == this._parent.LDC))
                {
                    return true;
                }
                if ((item == this._parent.TmDlChr))
                {
                    return true;
                }
                if ((item == this._parent.LDCZ))
                {
                    return true;
                }
                if ((item == this._parent.VRedVal))
                {
                    return true;
                }
                if ((item == this._parent.TapBlkR))
                {
                    return true;
                }
                if ((item == this._parent.TapBlkL))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TapChg != null))
                {
                    array[arrayIndex] = this._parent.TapChg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TapPos != null))
                {
                    array[arrayIndex] = this._parent.TapPos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ParOp != null))
                {
                    array[arrayIndex] = this._parent.ParOp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LTCBlk != null))
                {
                    array[arrayIndex] = this._parent.LTCBlk;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LTCDragRs != null))
                {
                    array[arrayIndex] = this._parent.LTCDragRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VRed1 != null))
                {
                    array[arrayIndex] = this._parent.VRed1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VRed2 != null))
                {
                    array[arrayIndex] = this._parent.VRed2;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CtlV != null))
                {
                    array[arrayIndex] = this._parent.CtlV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LodA != null))
                {
                    array[arrayIndex] = this._parent.LodA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CircA != null))
                {
                    array[arrayIndex] = this._parent.CircA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhAng != null))
                {
                    array[arrayIndex] = this._parent.PhAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiCtlV != null))
                {
                    array[arrayIndex] = this._parent.HiCtlV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoCtlV != null))
                {
                    array[arrayIndex] = this._parent.LoCtlV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiDmdA != null))
                {
                    array[arrayIndex] = this._parent.HiDmdA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiTapPos != null))
                {
                    array[arrayIndex] = this._parent.HiTapPos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoTapPos != null))
                {
                    array[arrayIndex] = this._parent.LoTapPos;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BndCtr != null))
                {
                    array[arrayIndex] = this._parent.BndCtr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BndWid != null))
                {
                    array[arrayIndex] = this._parent.BndWid;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CtlDlTmms != null))
                {
                    array[arrayIndex] = this._parent.CtlDlTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LDCR != null))
                {
                    array[arrayIndex] = this._parent.LDCR;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LDCX != null))
                {
                    array[arrayIndex] = this._parent.LDCX;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkLV != null))
                {
                    array[arrayIndex] = this._parent.BlkLV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkRV != null))
                {
                    array[arrayIndex] = this._parent.BlkRV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RnbkRV != null))
                {
                    array[arrayIndex] = this._parent.RnbkRV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LimLodA != null))
                {
                    array[arrayIndex] = this._parent.LimLodA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LDC != null))
                {
                    array[arrayIndex] = this._parent.LDC;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TmDlChr != null))
                {
                    array[arrayIndex] = this._parent.TmDlChr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LDCZ != null))
                {
                    array[arrayIndex] = this._parent.LDCZ;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VRedVal != null))
                {
                    array[arrayIndex] = this._parent.VRedVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TapBlkR != null))
                {
                    array[arrayIndex] = this._parent.TapBlkR;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TapBlkL != null))
                {
                    array[arrayIndex] = this._parent.TapBlkL;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TapChg == item))
                {
                    this._parent.TapChg = null;
                    return true;
                }
                if ((this._parent.TapPos == item))
                {
                    this._parent.TapPos = null;
                    return true;
                }
                if ((this._parent.ParOp == item))
                {
                    this._parent.ParOp = null;
                    return true;
                }
                if ((this._parent.LTCBlk == item))
                {
                    this._parent.LTCBlk = null;
                    return true;
                }
                if ((this._parent.LTCDragRs == item))
                {
                    this._parent.LTCDragRs = null;
                    return true;
                }
                if ((this._parent.VRed1 == item))
                {
                    this._parent.VRed1 = null;
                    return true;
                }
                if ((this._parent.VRed2 == item))
                {
                    this._parent.VRed2 = null;
                    return true;
                }
                if ((this._parent.CtlV == item))
                {
                    this._parent.CtlV = null;
                    return true;
                }
                if ((this._parent.LodA == item))
                {
                    this._parent.LodA = null;
                    return true;
                }
                if ((this._parent.CircA == item))
                {
                    this._parent.CircA = null;
                    return true;
                }
                if ((this._parent.PhAng == item))
                {
                    this._parent.PhAng = null;
                    return true;
                }
                if ((this._parent.HiCtlV == item))
                {
                    this._parent.HiCtlV = null;
                    return true;
                }
                if ((this._parent.LoCtlV == item))
                {
                    this._parent.LoCtlV = null;
                    return true;
                }
                if ((this._parent.HiDmdA == item))
                {
                    this._parent.HiDmdA = null;
                    return true;
                }
                if ((this._parent.HiTapPos == item))
                {
                    this._parent.HiTapPos = null;
                    return true;
                }
                if ((this._parent.LoTapPos == item))
                {
                    this._parent.LoTapPos = null;
                    return true;
                }
                if ((this._parent.BndCtr == item))
                {
                    this._parent.BndCtr = null;
                    return true;
                }
                if ((this._parent.BndWid == item))
                {
                    this._parent.BndWid = null;
                    return true;
                }
                if ((this._parent.CtlDlTmms == item))
                {
                    this._parent.CtlDlTmms = null;
                    return true;
                }
                if ((this._parent.LDCR == item))
                {
                    this._parent.LDCR = null;
                    return true;
                }
                if ((this._parent.LDCX == item))
                {
                    this._parent.LDCX = null;
                    return true;
                }
                if ((this._parent.BlkLV == item))
                {
                    this._parent.BlkLV = null;
                    return true;
                }
                if ((this._parent.BlkRV == item))
                {
                    this._parent.BlkRV = null;
                    return true;
                }
                if ((this._parent.RnbkRV == item))
                {
                    this._parent.RnbkRV = null;
                    return true;
                }
                if ((this._parent.LimLodA == item))
                {
                    this._parent.LimLodA = null;
                    return true;
                }
                if ((this._parent.LDC == item))
                {
                    this._parent.LDC = null;
                    return true;
                }
                if ((this._parent.TmDlChr == item))
                {
                    this._parent.TmDlChr = null;
                    return true;
                }
                if ((this._parent.LDCZ == item))
                {
                    this._parent.LDCZ = null;
                    return true;
                }
                if ((this._parent.VRedVal == item))
                {
                    this._parent.VRedVal = null;
                    return true;
                }
                if ((this._parent.TapBlkR == item))
                {
                    this._parent.TapBlkR = null;
                    return true;
                }
                if ((this._parent.TapBlkL == item))
                {
                    this._parent.TapBlkL = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapChg).Concat(this._parent.TapPos).Concat(this._parent.ParOp).Concat(this._parent.LTCBlk).Concat(this._parent.LTCDragRs).Concat(this._parent.VRed1).Concat(this._parent.VRed2).Concat(this._parent.CtlV).Concat(this._parent.LodA).Concat(this._parent.CircA).Concat(this._parent.PhAng).Concat(this._parent.HiCtlV).Concat(this._parent.LoCtlV).Concat(this._parent.HiDmdA).Concat(this._parent.HiTapPos).Concat(this._parent.LoTapPos).Concat(this._parent.BndCtr).Concat(this._parent.BndWid).Concat(this._parent.CtlDlTmms).Concat(this._parent.LDCR).Concat(this._parent.LDCX).Concat(this._parent.BlkLV).Concat(this._parent.BlkRV).Concat(this._parent.RnbkRV).Concat(this._parent.LimLodA).Concat(this._parent.LDC).Concat(this._parent.TmDlChr).Concat(this._parent.LDCZ).Concat(this._parent.VRedVal).Concat(this._parent.TapBlkR).Concat(this._parent.TapBlkL).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapChg property
        /// </summary>
        private sealed class TapChgProxy : ModelPropertyChange<IATCC, IBSC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapChgProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBSC Value
            {
                get
                {
                    return this.ModelElement.TapChg;
                }
                set
                {
                    this.ModelElement.TapChg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapChgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapChgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapPos property
        /// </summary>
        private sealed class TapPosProxy : ModelPropertyChange<IATCC, IISC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapPosProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IISC Value
            {
                get
                {
                    return this.ModelElement.TapPos;
                }
                set
                {
                    this.ModelElement.TapPos = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapPosChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapPosChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParOp property
        /// </summary>
        private sealed class ParOpProxy : ModelPropertyChange<IATCC, IDPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParOpProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDPC Value
            {
                get
                {
                    return this.ModelElement.ParOp;
                }
                set
                {
                    this.ModelElement.ParOp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParOpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParOpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LTCBlk property
        /// </summary>
        private sealed class LTCBlkProxy : ModelPropertyChange<IATCC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LTCBlkProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.LTCBlk;
                }
                set
                {
                    this.ModelElement.LTCBlk = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LTCBlkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LTCBlkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LTCDragRs property
        /// </summary>
        private sealed class LTCDragRsProxy : ModelPropertyChange<IATCC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LTCDragRsProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.LTCDragRs;
                }
                set
                {
                    this.ModelElement.LTCDragRs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LTCDragRsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LTCDragRsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VRed1 property
        /// </summary>
        private sealed class VRed1Proxy : ModelPropertyChange<IATCC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VRed1Proxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.VRed1;
                }
                set
                {
                    this.ModelElement.VRed1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRed1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRed1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VRed2 property
        /// </summary>
        private sealed class VRed2Proxy : ModelPropertyChange<IATCC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VRed2Proxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.VRed2;
                }
                set
                {
                    this.ModelElement.VRed2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRed2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRed2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CtlV property
        /// </summary>
        private sealed class CtlVProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.CtlV;
                }
                set
                {
                    this.ModelElement.CtlV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtlVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtlVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LodA property
        /// </summary>
        private sealed class LodAProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LodAProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.LodA;
                }
                set
                {
                    this.ModelElement.LodA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LodAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LodAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CircA property
        /// </summary>
        private sealed class CircAProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CircAProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.CircA;
                }
                set
                {
                    this.ModelElement.CircA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CircAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CircAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhAng property
        /// </summary>
        private sealed class PhAngProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhAngProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.PhAng;
                }
                set
                {
                    this.ModelElement.PhAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiCtlV property
        /// </summary>
        private sealed class HiCtlVProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiCtlVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HiCtlV;
                }
                set
                {
                    this.ModelElement.HiCtlV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiCtlVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiCtlVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoCtlV property
        /// </summary>
        private sealed class LoCtlVProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoCtlVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.LoCtlV;
                }
                set
                {
                    this.ModelElement.LoCtlV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoCtlVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoCtlVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiDmdA property
        /// </summary>
        private sealed class HiDmdAProxy : ModelPropertyChange<IATCC, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiDmdAProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.HiDmdA;
                }
                set
                {
                    this.ModelElement.HiDmdA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiDmdAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiDmdAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiTapPos property
        /// </summary>
        private sealed class HiTapPosProxy : ModelPropertyChange<IATCC, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiTapPosProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.HiTapPos;
                }
                set
                {
                    this.ModelElement.HiTapPos = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiTapPosChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiTapPosChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoTapPos property
        /// </summary>
        private sealed class LoTapPosProxy : ModelPropertyChange<IATCC, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoTapPosProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.LoTapPos;
                }
                set
                {
                    this.ModelElement.LoTapPos = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoTapPosChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoTapPosChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BndCtr property
        /// </summary>
        private sealed class BndCtrProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BndCtrProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BndCtr;
                }
                set
                {
                    this.ModelElement.BndCtr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BndCtrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BndCtrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BndWid property
        /// </summary>
        private sealed class BndWidProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BndWidProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BndWid;
                }
                set
                {
                    this.ModelElement.BndWid = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BndWidChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BndWidChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CtlDlTmms property
        /// </summary>
        private sealed class CtlDlTmmsProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtlDlTmmsProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.CtlDlTmms;
                }
                set
                {
                    this.ModelElement.CtlDlTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtlDlTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtlDlTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LDCR property
        /// </summary>
        private sealed class LDCRProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LDCRProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LDCR;
                }
                set
                {
                    this.ModelElement.LDCR = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCRChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCRChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LDCX property
        /// </summary>
        private sealed class LDCXProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LDCXProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LDCX;
                }
                set
                {
                    this.ModelElement.LDCX = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCXChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCXChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkLV property
        /// </summary>
        private sealed class BlkLVProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkLVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BlkLV;
                }
                set
                {
                    this.ModelElement.BlkLV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkLVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkLVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkRV property
        /// </summary>
        private sealed class BlkRVProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkRVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BlkRV;
                }
                set
                {
                    this.ModelElement.BlkRV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkRVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkRVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RnbkRV property
        /// </summary>
        private sealed class RnbkRVProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RnbkRVProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.RnbkRV;
                }
                set
                {
                    this.ModelElement.RnbkRV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RnbkRVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RnbkRVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LimLodA property
        /// </summary>
        private sealed class LimLodAProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LimLodAProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LimLodA;
                }
                set
                {
                    this.ModelElement.LimLodA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LimLodAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LimLodAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LDC property
        /// </summary>
        private sealed class LDCProxy : ModelPropertyChange<IATCC, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LDCProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.LDC;
                }
                set
                {
                    this.ModelElement.LDC = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TmDlChr property
        /// </summary>
        private sealed class TmDlChrProxy : ModelPropertyChange<IATCC, ISPG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TmDlChrProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPG Value
            {
                get
                {
                    return this.ModelElement.TmDlChr;
                }
                set
                {
                    this.ModelElement.TmDlChr = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TmDlChrChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TmDlChrChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LDCZ property
        /// </summary>
        private sealed class LDCZProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LDCZProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LDCZ;
                }
                set
                {
                    this.ModelElement.LDCZ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCZChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LDCZChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VRedVal property
        /// </summary>
        private sealed class VRedValProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VRedValProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.VRedVal;
                }
                set
                {
                    this.ModelElement.VRedVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRedValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VRedValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapBlkR property
        /// </summary>
        private sealed class TapBlkRProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapBlkRProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.TapBlkR;
                }
                set
                {
                    this.ModelElement.TapBlkR = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapBlkRChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapBlkRChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TapBlkL property
        /// </summary>
        private sealed class TapBlkLProxy : ModelPropertyChange<IATCC, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapBlkLProxy(IATCC modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.TapBlkL;
                }
                set
                {
                    this.ModelElement.TapBlkL = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapBlkLChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TapBlkLChanged -= handler;
            }
        }
    }
}

