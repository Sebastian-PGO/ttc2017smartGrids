//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RADR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RADR")]
    public class RADR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRADR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        /// <summary>
        /// The backing field for the ChTrg property
        /// </summary>
        private ISPS _chTrg;
        
        /// <summary>
        /// The backing field for the ChNum property
        /// </summary>
        private IING _chNum;
        
        /// <summary>
        /// The backing field for the TrGMod property
        /// </summary>
        private IING _trGMod;
        
        /// <summary>
        /// The backing field for the LevMod property
        /// </summary>
        private IING _levMod;
        
        /// <summary>
        /// The backing field for the HiTrgLev property
        /// </summary>
        private IASG _hiTrgLev;
        
        /// <summary>
        /// The backing field for the LoTrgLev property
        /// </summary>
        private IASG _loTrgLev;
        
        /// <summary>
        /// The backing field for the PreTmms property
        /// </summary>
        private IING _preTmms;
        
        /// <summary>
        /// The backing field for the PstTmms property
        /// </summary>
        private IING _pstTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e);
                }
            }
        }
        
        /// <summary>
        /// The ChTrg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS ChTrg
        {
            get
            {
                return this._chTrg;
            }
            set
            {
                if ((this._chTrg != value))
                {
                    ISPS old = this._chTrg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChTrgChanging(e);
                    this.OnPropertyChanging("ChTrg", e);
                    this._chTrg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChTrg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChTrg;
                    }
                    this.OnChTrgChanged(e);
                    this.OnPropertyChanged("ChTrg", e);
                }
            }
        }
        
        /// <summary>
        /// The ChNum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ChNum
        {
            get
            {
                return this._chNum;
            }
            set
            {
                if ((this._chNum != value))
                {
                    IING old = this._chNum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChNumChanging(e);
                    this.OnPropertyChanging("ChNum", e);
                    this._chNum = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChNum;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChNum;
                    }
                    this.OnChNumChanged(e);
                    this.OnPropertyChanged("ChNum", e);
                }
            }
        }
        
        /// <summary>
        /// The TrGMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING TrGMod
        {
            get
            {
                return this._trGMod;
            }
            set
            {
                if ((this._trGMod != value))
                {
                    IING old = this._trGMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrGModChanging(e);
                    this.OnPropertyChanging("TrGMod", e);
                    this._trGMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTrGMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTrGMod;
                    }
                    this.OnTrGModChanged(e);
                    this.OnPropertyChanged("TrGMod", e);
                }
            }
        }
        
        /// <summary>
        /// The LevMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING LevMod
        {
            get
            {
                return this._levMod;
            }
            set
            {
                if ((this._levMod != value))
                {
                    IING old = this._levMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLevModChanging(e);
                    this.OnPropertyChanging("LevMod", e);
                    this._levMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLevMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLevMod;
                    }
                    this.OnLevModChanged(e);
                    this.OnPropertyChanged("LevMod", e);
                }
            }
        }
        
        /// <summary>
        /// The HiTrgLev property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG HiTrgLev
        {
            get
            {
                return this._hiTrgLev;
            }
            set
            {
                if ((this._hiTrgLev != value))
                {
                    IASG old = this._hiTrgLev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHiTrgLevChanging(e);
                    this.OnPropertyChanging("HiTrgLev", e);
                    this._hiTrgLev = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHiTrgLev;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHiTrgLev;
                    }
                    this.OnHiTrgLevChanged(e);
                    this.OnPropertyChanged("HiTrgLev", e);
                }
            }
        }
        
        /// <summary>
        /// The LoTrgLev property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LoTrgLev
        {
            get
            {
                return this._loTrgLev;
            }
            set
            {
                if ((this._loTrgLev != value))
                {
                    IASG old = this._loTrgLev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoTrgLevChanging(e);
                    this.OnPropertyChanging("LoTrgLev", e);
                    this._loTrgLev = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLoTrgLev;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLoTrgLev;
                    }
                    this.OnLoTrgLevChanged(e);
                    this.OnPropertyChanged("LoTrgLev", e);
                }
            }
        }
        
        /// <summary>
        /// The PreTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PreTmms
        {
            get
            {
                return this._preTmms;
            }
            set
            {
                if ((this._preTmms != value))
                {
                    IING old = this._preTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreTmmsChanging(e);
                    this.OnPropertyChanging("PreTmms", e);
                    this._preTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPreTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPreTmms;
                    }
                    this.OnPreTmmsChanged(e);
                    this.OnPropertyChanged("PreTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The PstTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PstTmms
        {
            get
            {
                return this._pstTmms;
            }
            set
            {
                if ((this._pstTmms != value))
                {
                    IING old = this._pstTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPstTmmsChanging(e);
                    this.OnPropertyChanging("PstTmms", e);
                    this._pstTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPstTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPstTmms;
                    }
                    this.OnPstTmmsChanged(e);
                    this.OnPropertyChanged("PstTmms", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RADRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RADR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the ChTrg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChTrgChanging;
        
        /// <summary>
        /// Gets fired when the ChTrg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChTrgChanged;
        
        /// <summary>
        /// Gets fired before the ChNum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChNumChanging;
        
        /// <summary>
        /// Gets fired when the ChNum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChNumChanged;
        
        /// <summary>
        /// Gets fired before the TrGMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrGModChanging;
        
        /// <summary>
        /// Gets fired when the TrGMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrGModChanged;
        
        /// <summary>
        /// Gets fired before the LevMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevModChanging;
        
        /// <summary>
        /// Gets fired when the LevMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevModChanged;
        
        /// <summary>
        /// Gets fired before the HiTrgLev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiTrgLevChanging;
        
        /// <summary>
        /// Gets fired when the HiTrgLev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HiTrgLevChanged;
        
        /// <summary>
        /// Gets fired before the LoTrgLev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoTrgLevChanging;
        
        /// <summary>
        /// Gets fired when the LoTrgLev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoTrgLevChanged;
        
        /// <summary>
        /// Gets fired before the PreTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PreTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreTmmsChanged;
        
        /// <summary>
        /// Gets fired before the PstTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PstTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PstTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PstTmmsChanged;
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        /// <summary>
        /// Raises the ChTrgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChTrgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChTrgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChTrgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChTrgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChTrgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChTrg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChTrg(object sender, System.EventArgs eventArgs)
        {
            this.ChTrg = null;
        }
        
        /// <summary>
        /// Raises the ChNumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChNumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChNumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChNumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChNumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChNumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChNum property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChNum(object sender, System.EventArgs eventArgs)
        {
            this.ChNum = null;
        }
        
        /// <summary>
        /// Raises the TrGModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrGModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrGModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrGModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrGModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrGModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TrGMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrGMod(object sender, System.EventArgs eventArgs)
        {
            this.TrGMod = null;
        }
        
        /// <summary>
        /// Raises the LevModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LevModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LevMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLevMod(object sender, System.EventArgs eventArgs)
        {
            this.LevMod = null;
        }
        
        /// <summary>
        /// Raises the HiTrgLevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiTrgLevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiTrgLevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HiTrgLevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHiTrgLevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HiTrgLevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HiTrgLev property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHiTrgLev(object sender, System.EventArgs eventArgs)
        {
            this.HiTrgLev = null;
        }
        
        /// <summary>
        /// Raises the LoTrgLevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoTrgLevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoTrgLevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoTrgLevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoTrgLevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoTrgLevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoTrgLev property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoTrgLev(object sender, System.EventArgs eventArgs)
        {
            this.LoTrgLev = null;
        }
        
        /// <summary>
        /// Raises the PreTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PreTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPreTmms(object sender, System.EventArgs eventArgs)
        {
            this.PreTmms = null;
        }
        
        /// <summary>
        /// Raises the PstTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPstTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PstTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PstTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPstTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PstTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PstTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPstTmms(object sender, System.EventArgs eventArgs)
        {
            this.PstTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "CHTRG"))
            {
                this.ChTrg = ((ISPS)(value));
                return;
            }
            if ((feature == "CHNUM"))
            {
                this.ChNum = ((IING)(value));
                return;
            }
            if ((feature == "TRGMOD"))
            {
                this.TrGMod = ((IING)(value));
                return;
            }
            if ((feature == "LEVMOD"))
            {
                this.LevMod = ((IING)(value));
                return;
            }
            if ((feature == "HITRGLEV"))
            {
                this.HiTrgLev = ((IASG)(value));
                return;
            }
            if ((feature == "LOTRGLEV"))
            {
                this.LoTrgLev = ((IASG)(value));
                return;
            }
            if ((feature == "PRETMMS"))
            {
                this.PreTmms = ((IING)(value));
                return;
            }
            if ((feature == "PSTTMMS"))
            {
                this.PstTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "ChTrg"))
            {
                return new ChTrgProxy(this);
            }
            if ((attribute == "ChNum"))
            {
                return new ChNumProxy(this);
            }
            if ((attribute == "TrGMod"))
            {
                return new TrGModProxy(this);
            }
            if ((attribute == "LevMod"))
            {
                return new LevModProxy(this);
            }
            if ((attribute == "HiTrgLev"))
            {
                return new HiTrgLevProxy(this);
            }
            if ((attribute == "LoTrgLev"))
            {
                return new LoTrgLevProxy(this);
            }
            if ((attribute == "PreTmms"))
            {
                return new PreTmmsProxy(this);
            }
            if ((attribute == "PstTmms"))
            {
                return new PstTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "ChTrg"))
            {
                return new ChTrgProxy(this);
            }
            if ((reference == "ChNum"))
            {
                return new ChNumProxy(this);
            }
            if ((reference == "TrGMod"))
            {
                return new TrGModProxy(this);
            }
            if ((reference == "LevMod"))
            {
                return new LevModProxy(this);
            }
            if ((reference == "HiTrgLev"))
            {
                return new HiTrgLevProxy(this);
            }
            if ((reference == "LoTrgLev"))
            {
                return new LoTrgLevProxy(this);
            }
            if ((reference == "PreTmms"))
            {
                return new PreTmmsProxy(this);
            }
            if ((reference == "PstTmms"))
            {
                return new PstTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RADR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RADR class
        /// </summary>
        public class RADRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RADR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RADRReferencedElementsCollection(RADR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChTrg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChNum != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrGMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LevMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HiTrgLev != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoTrgLev != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PreTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PstTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.ChTrgChanged += this.PropagateValueChanges;
                this._parent.ChNumChanged += this.PropagateValueChanges;
                this._parent.TrGModChanged += this.PropagateValueChanges;
                this._parent.LevModChanged += this.PropagateValueChanges;
                this._parent.HiTrgLevChanged += this.PropagateValueChanges;
                this._parent.LoTrgLevChanged += this.PropagateValueChanges;
                this._parent.PreTmmsChanged += this.PropagateValueChanges;
                this._parent.PstTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.ChTrgChanged -= this.PropagateValueChanges;
                this._parent.ChNumChanged -= this.PropagateValueChanges;
                this._parent.TrGModChanged -= this.PropagateValueChanges;
                this._parent.LevModChanged -= this.PropagateValueChanges;
                this._parent.HiTrgLevChanged -= this.PropagateValueChanges;
                this._parent.LoTrgLevChanged -= this.PropagateValueChanges;
                this._parent.PreTmmsChanged -= this.PropagateValueChanges;
                this._parent.PstTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.ChTrg == null))
                {
                    ISPS chTrgCasted = item.As<ISPS>();
                    if ((chTrgCasted != null))
                    {
                        this._parent.ChTrg = chTrgCasted;
                        return;
                    }
                }
                if ((this._parent.ChNum == null))
                {
                    IING chNumCasted = item.As<IING>();
                    if ((chNumCasted != null))
                    {
                        this._parent.ChNum = chNumCasted;
                        return;
                    }
                }
                if ((this._parent.TrGMod == null))
                {
                    IING trGModCasted = item.As<IING>();
                    if ((trGModCasted != null))
                    {
                        this._parent.TrGMod = trGModCasted;
                        return;
                    }
                }
                if ((this._parent.LevMod == null))
                {
                    IING levModCasted = item.As<IING>();
                    if ((levModCasted != null))
                    {
                        this._parent.LevMod = levModCasted;
                        return;
                    }
                }
                if ((this._parent.HiTrgLev == null))
                {
                    IASG hiTrgLevCasted = item.As<IASG>();
                    if ((hiTrgLevCasted != null))
                    {
                        this._parent.HiTrgLev = hiTrgLevCasted;
                        return;
                    }
                }
                if ((this._parent.LoTrgLev == null))
                {
                    IASG loTrgLevCasted = item.As<IASG>();
                    if ((loTrgLevCasted != null))
                    {
                        this._parent.LoTrgLev = loTrgLevCasted;
                        return;
                    }
                }
                if ((this._parent.PreTmms == null))
                {
                    IING preTmmsCasted = item.As<IING>();
                    if ((preTmmsCasted != null))
                    {
                        this._parent.PreTmms = preTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.PstTmms == null))
                {
                    IING pstTmmsCasted = item.As<IING>();
                    if ((pstTmmsCasted != null))
                    {
                        this._parent.PstTmms = pstTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.ChTrg = null;
                this._parent.ChNum = null;
                this._parent.TrGMod = null;
                this._parent.LevMod = null;
                this._parent.HiTrgLev = null;
                this._parent.LoTrgLev = null;
                this._parent.PreTmms = null;
                this._parent.PstTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.ChTrg))
                {
                    return true;
                }
                if ((item == this._parent.ChNum))
                {
                    return true;
                }
                if ((item == this._parent.TrGMod))
                {
                    return true;
                }
                if ((item == this._parent.LevMod))
                {
                    return true;
                }
                if ((item == this._parent.HiTrgLev))
                {
                    return true;
                }
                if ((item == this._parent.LoTrgLev))
                {
                    return true;
                }
                if ((item == this._parent.PreTmms))
                {
                    return true;
                }
                if ((item == this._parent.PstTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChTrg != null))
                {
                    array[arrayIndex] = this._parent.ChTrg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChNum != null))
                {
                    array[arrayIndex] = this._parent.ChNum;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrGMod != null))
                {
                    array[arrayIndex] = this._parent.TrGMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LevMod != null))
                {
                    array[arrayIndex] = this._parent.LevMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HiTrgLev != null))
                {
                    array[arrayIndex] = this._parent.HiTrgLev;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoTrgLev != null))
                {
                    array[arrayIndex] = this._parent.LoTrgLev;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PreTmms != null))
                {
                    array[arrayIndex] = this._parent.PreTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PstTmms != null))
                {
                    array[arrayIndex] = this._parent.PstTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.ChTrg == item))
                {
                    this._parent.ChTrg = null;
                    return true;
                }
                if ((this._parent.ChNum == item))
                {
                    this._parent.ChNum = null;
                    return true;
                }
                if ((this._parent.TrGMod == item))
                {
                    this._parent.TrGMod = null;
                    return true;
                }
                if ((this._parent.LevMod == item))
                {
                    this._parent.LevMod = null;
                    return true;
                }
                if ((this._parent.HiTrgLev == item))
                {
                    this._parent.HiTrgLev = null;
                    return true;
                }
                if ((this._parent.LoTrgLev == item))
                {
                    this._parent.LoTrgLev = null;
                    return true;
                }
                if ((this._parent.PreTmms == item))
                {
                    this._parent.PreTmms = null;
                    return true;
                }
                if ((this._parent.PstTmms == item))
                {
                    this._parent.PstTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.ChTrg).Concat(this._parent.ChNum).Concat(this._parent.TrGMod).Concat(this._parent.LevMod).Concat(this._parent.HiTrgLev).Concat(this._parent.LoTrgLev).Concat(this._parent.PreTmms).Concat(this._parent.PstTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRADR, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntRsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntRsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChTrg property
        /// </summary>
        private sealed class ChTrgProxy : ModelPropertyChange<IRADR, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChTrgProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.ChTrg;
                }
                set
                {
                    this.ModelElement.ChTrg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChTrgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChTrgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChNum property
        /// </summary>
        private sealed class ChNumProxy : ModelPropertyChange<IRADR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChNumProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ChNum;
                }
                set
                {
                    this.ModelElement.ChNum = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChNumChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChNumChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrGMod property
        /// </summary>
        private sealed class TrGModProxy : ModelPropertyChange<IRADR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrGModProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.TrGMod;
                }
                set
                {
                    this.ModelElement.TrGMod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TrGModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TrGModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LevMod property
        /// </summary>
        private sealed class LevModProxy : ModelPropertyChange<IRADR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LevModProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.LevMod;
                }
                set
                {
                    this.ModelElement.LevMod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LevModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LevModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HiTrgLev property
        /// </summary>
        private sealed class HiTrgLevProxy : ModelPropertyChange<IRADR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HiTrgLevProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.HiTrgLev;
                }
                set
                {
                    this.ModelElement.HiTrgLev = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiTrgLevChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HiTrgLevChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoTrgLev property
        /// </summary>
        private sealed class LoTrgLevProxy : ModelPropertyChange<IRADR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoTrgLevProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LoTrgLev;
                }
                set
                {
                    this.ModelElement.LoTrgLev = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoTrgLevChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoTrgLevChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PreTmms property
        /// </summary>
        private sealed class PreTmmsProxy : ModelPropertyChange<IRADR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreTmmsProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PreTmms;
                }
                set
                {
                    this.ModelElement.PreTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PstTmms property
        /// </summary>
        private sealed class PstTmmsProxy : ModelPropertyChange<IRADR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PstTmmsProxy(IRADR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PstTmms;
                }
                set
                {
                    this.ModelElement.PstTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PstTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PstTmmsChanged -= handler;
            }
        }
    }
}

