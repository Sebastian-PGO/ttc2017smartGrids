//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RDIR class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RDIR")]
    public class RDIR : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRDIR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private IACD _dir;
        
        /// <summary>
        /// The backing field for the ChrAng property
        /// </summary>
        private IASG _chrAng;
        
        /// <summary>
        /// The backing field for the MinFwdAng property
        /// </summary>
        private IASG _minFwdAng;
        
        /// <summary>
        /// The backing field for the MinRvAng property
        /// </summary>
        private IASG _minRvAng;
        
        /// <summary>
        /// The backing field for the MaxFwdAng property
        /// </summary>
        private IASG _maxFwdAng;
        
        /// <summary>
        /// The backing field for the MaxRvAng property
        /// </summary>
        private IASG _maxRvAng;
        
        /// <summary>
        /// The backing field for the BlkValA property
        /// </summary>
        private IASG _blkValA;
        
        /// <summary>
        /// The backing field for the BlkValV property
        /// </summary>
        private IASG _blkValV;
        
        /// <summary>
        /// The backing field for the PolQty property
        /// </summary>
        private IING _polQty;
        
        /// <summary>
        /// The backing field for the MinPPV property
        /// </summary>
        private IASG _minPPV;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Dir property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACD Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    IACD old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDir;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDir;
                    }
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// The ChrAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG ChrAng
        {
            get
            {
                return this._chrAng;
            }
            set
            {
                if ((this._chrAng != value))
                {
                    IASG old = this._chrAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChrAngChanging(e);
                    this.OnPropertyChanging("ChrAng", e);
                    this._chrAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChrAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChrAng;
                    }
                    this.OnChrAngChanged(e);
                    this.OnPropertyChanged("ChrAng", e);
                }
            }
        }
        
        /// <summary>
        /// The MinFwdAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MinFwdAng
        {
            get
            {
                return this._minFwdAng;
            }
            set
            {
                if ((this._minFwdAng != value))
                {
                    IASG old = this._minFwdAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinFwdAngChanging(e);
                    this.OnPropertyChanging("MinFwdAng", e);
                    this._minFwdAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinFwdAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinFwdAng;
                    }
                    this.OnMinFwdAngChanged(e);
                    this.OnPropertyChanged("MinFwdAng", e);
                }
            }
        }
        
        /// <summary>
        /// The MinRvAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MinRvAng
        {
            get
            {
                return this._minRvAng;
            }
            set
            {
                if ((this._minRvAng != value))
                {
                    IASG old = this._minRvAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinRvAngChanging(e);
                    this.OnPropertyChanging("MinRvAng", e);
                    this._minRvAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinRvAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinRvAng;
                    }
                    this.OnMinRvAngChanged(e);
                    this.OnPropertyChanged("MinRvAng", e);
                }
            }
        }
        
        /// <summary>
        /// The MaxFwdAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MaxFwdAng
        {
            get
            {
                return this._maxFwdAng;
            }
            set
            {
                if ((this._maxFwdAng != value))
                {
                    IASG old = this._maxFwdAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxFwdAngChanging(e);
                    this.OnPropertyChanging("MaxFwdAng", e);
                    this._maxFwdAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxFwdAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxFwdAng;
                    }
                    this.OnMaxFwdAngChanged(e);
                    this.OnPropertyChanged("MaxFwdAng", e);
                }
            }
        }
        
        /// <summary>
        /// The MaxRvAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MaxRvAng
        {
            get
            {
                return this._maxRvAng;
            }
            set
            {
                if ((this._maxRvAng != value))
                {
                    IASG old = this._maxRvAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxRvAngChanging(e);
                    this.OnPropertyChanging("MaxRvAng", e);
                    this._maxRvAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxRvAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxRvAng;
                    }
                    this.OnMaxRvAngChanged(e);
                    this.OnPropertyChanged("MaxRvAng", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkValA property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BlkValA
        {
            get
            {
                return this._blkValA;
            }
            set
            {
                if ((this._blkValA != value))
                {
                    IASG old = this._blkValA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkValAChanging(e);
                    this.OnPropertyChanging("BlkValA", e);
                    this._blkValA = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkValA;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkValA;
                    }
                    this.OnBlkValAChanged(e);
                    this.OnPropertyChanged("BlkValA", e);
                }
            }
        }
        
        /// <summary>
        /// The BlkValV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG BlkValV
        {
            get
            {
                return this._blkValV;
            }
            set
            {
                if ((this._blkValV != value))
                {
                    IASG old = this._blkValV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkValVChanging(e);
                    this.OnPropertyChanging("BlkValV", e);
                    this._blkValV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkValV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkValV;
                    }
                    this.OnBlkValVChanged(e);
                    this.OnPropertyChanged("BlkValV", e);
                }
            }
        }
        
        /// <summary>
        /// The PolQty property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PolQty
        {
            get
            {
                return this._polQty;
            }
            set
            {
                if ((this._polQty != value))
                {
                    IING old = this._polQty;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPolQtyChanging(e);
                    this.OnPropertyChanging("PolQty", e);
                    this._polQty = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPolQty;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPolQty;
                    }
                    this.OnPolQtyChanged(e);
                    this.OnPropertyChanged("PolQty", e);
                }
            }
        }
        
        /// <summary>
        /// The MinPPV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG MinPPV
        {
            get
            {
                return this._minPPV;
            }
            set
            {
                if ((this._minPPV != value))
                {
                    IASG old = this._minPPV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinPPVChanging(e);
                    this.OnPropertyChanging("MinPPV", e);
                    this._minPPV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMinPPV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMinPPV;
                    }
                    this.OnMinPPVChanged(e);
                    this.OnPropertyChanged("MinPPV", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RDIRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RDIR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Gets fired before the ChrAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChrAngChanging;
        
        /// <summary>
        /// Gets fired when the ChrAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChrAngChanged;
        
        /// <summary>
        /// Gets fired before the MinFwdAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFwdAngChanging;
        
        /// <summary>
        /// Gets fired when the MinFwdAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFwdAngChanged;
        
        /// <summary>
        /// Gets fired before the MinRvAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinRvAngChanging;
        
        /// <summary>
        /// Gets fired when the MinRvAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinRvAngChanged;
        
        /// <summary>
        /// Gets fired before the MaxFwdAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxFwdAngChanging;
        
        /// <summary>
        /// Gets fired when the MaxFwdAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxFwdAngChanged;
        
        /// <summary>
        /// Gets fired before the MaxRvAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxRvAngChanging;
        
        /// <summary>
        /// Gets fired when the MaxRvAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxRvAngChanged;
        
        /// <summary>
        /// Gets fired before the BlkValA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValAChanging;
        
        /// <summary>
        /// Gets fired when the BlkValA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValAChanged;
        
        /// <summary>
        /// Gets fired before the BlkValV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValVChanging;
        
        /// <summary>
        /// Gets fired when the BlkValV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkValVChanged;
        
        /// <summary>
        /// Gets fired before the PolQty property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PolQtyChanging;
        
        /// <summary>
        /// Gets fired when the PolQty property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PolQtyChanged;
        
        /// <summary>
        /// Gets fired before the MinPPV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPPVChanging;
        
        /// <summary>
        /// Gets fired when the MinPPV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPPVChanged;
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Dir property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDir(object sender, System.EventArgs eventArgs)
        {
            this.Dir = null;
        }
        
        /// <summary>
        /// Raises the ChrAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChrAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChrAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChrAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChrAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChrAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChrAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChrAng(object sender, System.EventArgs eventArgs)
        {
            this.ChrAng = null;
        }
        
        /// <summary>
        /// Raises the MinFwdAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFwdAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFwdAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinFwdAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFwdAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFwdAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinFwdAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinFwdAng(object sender, System.EventArgs eventArgs)
        {
            this.MinFwdAng = null;
        }
        
        /// <summary>
        /// Raises the MinRvAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinRvAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinRvAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinRvAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinRvAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinRvAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinRvAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinRvAng(object sender, System.EventArgs eventArgs)
        {
            this.MinRvAng = null;
        }
        
        /// <summary>
        /// Raises the MaxFwdAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxFwdAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxFwdAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxFwdAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxFwdAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxFwdAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxFwdAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxFwdAng(object sender, System.EventArgs eventArgs)
        {
            this.MaxFwdAng = null;
        }
        
        /// <summary>
        /// Raises the MaxRvAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxRvAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxRvAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxRvAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxRvAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxRvAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxRvAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxRvAng(object sender, System.EventArgs eventArgs)
        {
            this.MaxRvAng = null;
        }
        
        /// <summary>
        /// Raises the BlkValAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkValAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkValA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkValA(object sender, System.EventArgs eventArgs)
        {
            this.BlkValA = null;
        }
        
        /// <summary>
        /// Raises the BlkValVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkValVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkValVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkValVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkValV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkValV(object sender, System.EventArgs eventArgs)
        {
            this.BlkValV = null;
        }
        
        /// <summary>
        /// Raises the PolQtyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPolQtyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PolQtyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PolQtyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPolQtyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PolQtyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PolQty property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPolQty(object sender, System.EventArgs eventArgs)
        {
            this.PolQty = null;
        }
        
        /// <summary>
        /// Raises the MinPPVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPPVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPPVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinPPVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPPVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPPVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MinPPV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMinPPV(object sender, System.EventArgs eventArgs)
        {
            this.MinPPV = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DIR"))
            {
                this.Dir = ((IACD)(value));
                return;
            }
            if ((feature == "CHRANG"))
            {
                this.ChrAng = ((IASG)(value));
                return;
            }
            if ((feature == "MINFWDANG"))
            {
                this.MinFwdAng = ((IASG)(value));
                return;
            }
            if ((feature == "MINRVANG"))
            {
                this.MinRvAng = ((IASG)(value));
                return;
            }
            if ((feature == "MAXFWDANG"))
            {
                this.MaxFwdAng = ((IASG)(value));
                return;
            }
            if ((feature == "MAXRVANG"))
            {
                this.MaxRvAng = ((IASG)(value));
                return;
            }
            if ((feature == "BLKVALA"))
            {
                this.BlkValA = ((IASG)(value));
                return;
            }
            if ((feature == "BLKVALV"))
            {
                this.BlkValV = ((IASG)(value));
                return;
            }
            if ((feature == "POLQTY"))
            {
                this.PolQty = ((IING)(value));
                return;
            }
            if ((feature == "MINPPV"))
            {
                this.MinPPV = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Dir"))
            {
                return new DirProxy(this);
            }
            if ((attribute == "ChrAng"))
            {
                return new ChrAngProxy(this);
            }
            if ((attribute == "MinFwdAng"))
            {
                return new MinFwdAngProxy(this);
            }
            if ((attribute == "MinRvAng"))
            {
                return new MinRvAngProxy(this);
            }
            if ((attribute == "MaxFwdAng"))
            {
                return new MaxFwdAngProxy(this);
            }
            if ((attribute == "MaxRvAng"))
            {
                return new MaxRvAngProxy(this);
            }
            if ((attribute == "BlkValA"))
            {
                return new BlkValAProxy(this);
            }
            if ((attribute == "BlkValV"))
            {
                return new BlkValVProxy(this);
            }
            if ((attribute == "PolQty"))
            {
                return new PolQtyProxy(this);
            }
            if ((attribute == "MinPPV"))
            {
                return new MinPPVProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Dir"))
            {
                return new DirProxy(this);
            }
            if ((reference == "ChrAng"))
            {
                return new ChrAngProxy(this);
            }
            if ((reference == "MinFwdAng"))
            {
                return new MinFwdAngProxy(this);
            }
            if ((reference == "MinRvAng"))
            {
                return new MinRvAngProxy(this);
            }
            if ((reference == "MaxFwdAng"))
            {
                return new MaxFwdAngProxy(this);
            }
            if ((reference == "MaxRvAng"))
            {
                return new MaxRvAngProxy(this);
            }
            if ((reference == "BlkValA"))
            {
                return new BlkValAProxy(this);
            }
            if ((reference == "BlkValV"))
            {
                return new BlkValVProxy(this);
            }
            if ((reference == "PolQty"))
            {
                return new PolQtyProxy(this);
            }
            if ((reference == "MinPPV"))
            {
                return new MinPPVProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RDIR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RDIR class
        /// </summary>
        public class RDIRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RDIR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RDIRReferencedElementsCollection(RDIR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Dir != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChrAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinFwdAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinRvAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxFwdAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxRvAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkValA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkValV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PolQty != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MinPPV != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DirChanged += this.PropagateValueChanges;
                this._parent.ChrAngChanged += this.PropagateValueChanges;
                this._parent.MinFwdAngChanged += this.PropagateValueChanges;
                this._parent.MinRvAngChanged += this.PropagateValueChanges;
                this._parent.MaxFwdAngChanged += this.PropagateValueChanges;
                this._parent.MaxRvAngChanged += this.PropagateValueChanges;
                this._parent.BlkValAChanged += this.PropagateValueChanges;
                this._parent.BlkValVChanged += this.PropagateValueChanges;
                this._parent.PolQtyChanged += this.PropagateValueChanges;
                this._parent.MinPPVChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DirChanged -= this.PropagateValueChanges;
                this._parent.ChrAngChanged -= this.PropagateValueChanges;
                this._parent.MinFwdAngChanged -= this.PropagateValueChanges;
                this._parent.MinRvAngChanged -= this.PropagateValueChanges;
                this._parent.MaxFwdAngChanged -= this.PropagateValueChanges;
                this._parent.MaxRvAngChanged -= this.PropagateValueChanges;
                this._parent.BlkValAChanged -= this.PropagateValueChanges;
                this._parent.BlkValVChanged -= this.PropagateValueChanges;
                this._parent.PolQtyChanged -= this.PropagateValueChanges;
                this._parent.MinPPVChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Dir == null))
                {
                    IACD dirCasted = item.As<IACD>();
                    if ((dirCasted != null))
                    {
                        this._parent.Dir = dirCasted;
                        return;
                    }
                }
                if ((this._parent.ChrAng == null))
                {
                    IASG chrAngCasted = item.As<IASG>();
                    if ((chrAngCasted != null))
                    {
                        this._parent.ChrAng = chrAngCasted;
                        return;
                    }
                }
                if ((this._parent.MinFwdAng == null))
                {
                    IASG minFwdAngCasted = item.As<IASG>();
                    if ((minFwdAngCasted != null))
                    {
                        this._parent.MinFwdAng = minFwdAngCasted;
                        return;
                    }
                }
                if ((this._parent.MinRvAng == null))
                {
                    IASG minRvAngCasted = item.As<IASG>();
                    if ((minRvAngCasted != null))
                    {
                        this._parent.MinRvAng = minRvAngCasted;
                        return;
                    }
                }
                if ((this._parent.MaxFwdAng == null))
                {
                    IASG maxFwdAngCasted = item.As<IASG>();
                    if ((maxFwdAngCasted != null))
                    {
                        this._parent.MaxFwdAng = maxFwdAngCasted;
                        return;
                    }
                }
                if ((this._parent.MaxRvAng == null))
                {
                    IASG maxRvAngCasted = item.As<IASG>();
                    if ((maxRvAngCasted != null))
                    {
                        this._parent.MaxRvAng = maxRvAngCasted;
                        return;
                    }
                }
                if ((this._parent.BlkValA == null))
                {
                    IASG blkValACasted = item.As<IASG>();
                    if ((blkValACasted != null))
                    {
                        this._parent.BlkValA = blkValACasted;
                        return;
                    }
                }
                if ((this._parent.BlkValV == null))
                {
                    IASG blkValVCasted = item.As<IASG>();
                    if ((blkValVCasted != null))
                    {
                        this._parent.BlkValV = blkValVCasted;
                        return;
                    }
                }
                if ((this._parent.PolQty == null))
                {
                    IING polQtyCasted = item.As<IING>();
                    if ((polQtyCasted != null))
                    {
                        this._parent.PolQty = polQtyCasted;
                        return;
                    }
                }
                if ((this._parent.MinPPV == null))
                {
                    IASG minPPVCasted = item.As<IASG>();
                    if ((minPPVCasted != null))
                    {
                        this._parent.MinPPV = minPPVCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Dir = null;
                this._parent.ChrAng = null;
                this._parent.MinFwdAng = null;
                this._parent.MinRvAng = null;
                this._parent.MaxFwdAng = null;
                this._parent.MaxRvAng = null;
                this._parent.BlkValA = null;
                this._parent.BlkValV = null;
                this._parent.PolQty = null;
                this._parent.MinPPV = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Dir))
                {
                    return true;
                }
                if ((item == this._parent.ChrAng))
                {
                    return true;
                }
                if ((item == this._parent.MinFwdAng))
                {
                    return true;
                }
                if ((item == this._parent.MinRvAng))
                {
                    return true;
                }
                if ((item == this._parent.MaxFwdAng))
                {
                    return true;
                }
                if ((item == this._parent.MaxRvAng))
                {
                    return true;
                }
                if ((item == this._parent.BlkValA))
                {
                    return true;
                }
                if ((item == this._parent.BlkValV))
                {
                    return true;
                }
                if ((item == this._parent.PolQty))
                {
                    return true;
                }
                if ((item == this._parent.MinPPV))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Dir != null))
                {
                    array[arrayIndex] = this._parent.Dir;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChrAng != null))
                {
                    array[arrayIndex] = this._parent.ChrAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinFwdAng != null))
                {
                    array[arrayIndex] = this._parent.MinFwdAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinRvAng != null))
                {
                    array[arrayIndex] = this._parent.MinRvAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxFwdAng != null))
                {
                    array[arrayIndex] = this._parent.MaxFwdAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxRvAng != null))
                {
                    array[arrayIndex] = this._parent.MaxRvAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkValA != null))
                {
                    array[arrayIndex] = this._parent.BlkValA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkValV != null))
                {
                    array[arrayIndex] = this._parent.BlkValV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PolQty != null))
                {
                    array[arrayIndex] = this._parent.PolQty;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MinPPV != null))
                {
                    array[arrayIndex] = this._parent.MinPPV;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Dir == item))
                {
                    this._parent.Dir = null;
                    return true;
                }
                if ((this._parent.ChrAng == item))
                {
                    this._parent.ChrAng = null;
                    return true;
                }
                if ((this._parent.MinFwdAng == item))
                {
                    this._parent.MinFwdAng = null;
                    return true;
                }
                if ((this._parent.MinRvAng == item))
                {
                    this._parent.MinRvAng = null;
                    return true;
                }
                if ((this._parent.MaxFwdAng == item))
                {
                    this._parent.MaxFwdAng = null;
                    return true;
                }
                if ((this._parent.MaxRvAng == item))
                {
                    this._parent.MaxRvAng = null;
                    return true;
                }
                if ((this._parent.BlkValA == item))
                {
                    this._parent.BlkValA = null;
                    return true;
                }
                if ((this._parent.BlkValV == item))
                {
                    this._parent.BlkValV = null;
                    return true;
                }
                if ((this._parent.PolQty == item))
                {
                    this._parent.PolQty = null;
                    return true;
                }
                if ((this._parent.MinPPV == item))
                {
                    this._parent.MinPPV = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Dir).Concat(this._parent.ChrAng).Concat(this._parent.MinFwdAng).Concat(this._parent.MinRvAng).Concat(this._parent.MaxFwdAng).Concat(this._parent.MaxRvAng).Concat(this._parent.BlkValA).Concat(this._parent.BlkValV).Concat(this._parent.PolQty).Concat(this._parent.MinPPV).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IRDIR, IACD>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACD Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChrAng property
        /// </summary>
        private sealed class ChrAngProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChrAngProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.ChrAng;
                }
                set
                {
                    this.ModelElement.ChrAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChrAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChrAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinFwdAng property
        /// </summary>
        private sealed class MinFwdAngProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinFwdAngProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MinFwdAng;
                }
                set
                {
                    this.ModelElement.MinFwdAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinFwdAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinFwdAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinRvAng property
        /// </summary>
        private sealed class MinRvAngProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinRvAngProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MinRvAng;
                }
                set
                {
                    this.ModelElement.MinRvAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinRvAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinRvAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxFwdAng property
        /// </summary>
        private sealed class MaxFwdAngProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxFwdAngProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MaxFwdAng;
                }
                set
                {
                    this.ModelElement.MaxFwdAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxFwdAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxFwdAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxRvAng property
        /// </summary>
        private sealed class MaxRvAngProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxRvAngProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MaxRvAng;
                }
                set
                {
                    this.ModelElement.MaxRvAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxRvAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxRvAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkValA property
        /// </summary>
        private sealed class BlkValAProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkValAProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BlkValA;
                }
                set
                {
                    this.ModelElement.BlkValA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkValAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkValAChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkValV property
        /// </summary>
        private sealed class BlkValVProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkValVProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.BlkValV;
                }
                set
                {
                    this.ModelElement.BlkValV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkValVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BlkValVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PolQty property
        /// </summary>
        private sealed class PolQtyProxy : ModelPropertyChange<IRDIR, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PolQtyProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PolQty;
                }
                set
                {
                    this.ModelElement.PolQty = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PolQtyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PolQtyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MinPPV property
        /// </summary>
        private sealed class MinPPVProxy : ModelPropertyChange<IRDIR, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinPPVProxy(IRDIR modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.MinPPV;
                }
                set
                {
                    this.ModelElement.MinPPV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinPPVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinPPVChanged -= handler;
            }
        }
    }
}

