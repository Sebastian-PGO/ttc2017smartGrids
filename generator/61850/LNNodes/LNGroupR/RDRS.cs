//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RDRS class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RDRS")]
    public partial class RDRS : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRDRS, IModelElement
    {
        
        private static Lazy<ITypedElement> _autoUpLodReference = new Lazy<ITypedElement>(RetrieveAutoUpLodReference);
        
        /// <summary>
        /// The backing field for the AutoUpLod property
        /// </summary>
        private ISPC _autoUpLod;
        
        private static Lazy<ITypedElement> _dltRcdReference = new Lazy<ITypedElement>(RetrieveDltRcdReference);
        
        /// <summary>
        /// The backing field for the DltRcd property
        /// </summary>
        private ISPC _dltRcd;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The AutoUpLod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC AutoUpLod
        {
            get
            {
                return this._autoUpLod;
            }
            set
            {
                if ((this._autoUpLod != value))
                {
                    ISPC old = this._autoUpLod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoUpLodChanging(e);
                    this.OnPropertyChanging("AutoUpLod", e, _autoUpLodReference);
                    this._autoUpLod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAutoUpLod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAutoUpLod;
                    }
                    this.OnAutoUpLodChanged(e);
                    this.OnPropertyChanged("AutoUpLod", e, _autoUpLodReference);
                }
            }
        }
        
        /// <summary>
        /// The DltRcd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC DltRcd
        {
            get
            {
                return this._dltRcd;
            }
            set
            {
                if ((this._dltRcd != value))
                {
                    ISPC old = this._dltRcd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDltRcdChanging(e);
                    this.OnPropertyChanging("DltRcd", e, _dltRcdReference);
                    this._dltRcd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDltRcd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDltRcd;
                    }
                    this.OnDltRcdChanged(e);
                    this.OnPropertyChanged("DltRcd", e, _dltRcdReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RDRSReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RDRS")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AutoUpLod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoUpLodChanging;
        
        /// <summary>
        /// Gets fired when the AutoUpLod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoUpLodChanged;
        
        /// <summary>
        /// Gets fired before the DltRcd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DltRcdChanging;
        
        /// <summary>
        /// Gets fired when the DltRcd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DltRcdChanged;
        
        private static ITypedElement RetrieveAutoUpLodReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRS.ClassInstance)).Resolve("AutoUpLod")));
        }
        
        /// <summary>
        /// Raises the AutoUpLodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoUpLodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoUpLodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoUpLodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoUpLodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoUpLodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AutoUpLod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAutoUpLod(object sender, System.EventArgs eventArgs)
        {
            this.AutoUpLod = null;
        }
        
        private static ITypedElement RetrieveDltRcdReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRS.ClassInstance)).Resolve("DltRcd")));
        }
        
        /// <summary>
        /// Raises the DltRcdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDltRcdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DltRcdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DltRcdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDltRcdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DltRcdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DltRcd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDltRcd(object sender, System.EventArgs eventArgs)
        {
            this.DltRcd = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AUTOUPLOD"))
            {
                this.AutoUpLod = ((ISPC)(value));
                return;
            }
            if ((feature == "DLTRCD"))
            {
                this.DltRcd = ((ISPC)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AutoUpLod"))
            {
                return new AutoUpLodProxy(this);
            }
            if ((attribute == "DltRcd"))
            {
                return new DltRcdProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AutoUpLod"))
            {
                return new AutoUpLodProxy(this);
            }
            if ((reference == "DltRcd"))
            {
                return new DltRcdProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RDRS")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RDRS class
        /// </summary>
        public class RDRSReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RDRS _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RDRSReferencedElementsCollection(RDRS parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AutoUpLod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DltRcd != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AutoUpLodChanged += this.PropagateValueChanges;
                this._parent.DltRcdChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AutoUpLodChanged -= this.PropagateValueChanges;
                this._parent.DltRcdChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AutoUpLod == null))
                {
                    ISPC autoUpLodCasted = item.As<ISPC>();
                    if ((autoUpLodCasted != null))
                    {
                        this._parent.AutoUpLod = autoUpLodCasted;
                        return;
                    }
                }
                if ((this._parent.DltRcd == null))
                {
                    ISPC dltRcdCasted = item.As<ISPC>();
                    if ((dltRcdCasted != null))
                    {
                        this._parent.DltRcd = dltRcdCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AutoUpLod = null;
                this._parent.DltRcd = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AutoUpLod))
                {
                    return true;
                }
                if ((item == this._parent.DltRcd))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AutoUpLod != null))
                {
                    array[arrayIndex] = this._parent.AutoUpLod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DltRcd != null))
                {
                    array[arrayIndex] = this._parent.DltRcd;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AutoUpLod == item))
                {
                    this._parent.AutoUpLod = null;
                    return true;
                }
                if ((this._parent.DltRcd == item))
                {
                    this._parent.DltRcd = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AutoUpLod).Concat(this._parent.DltRcd).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AutoUpLod property
        /// </summary>
        private sealed class AutoUpLodProxy : ModelPropertyChange<IRDRS, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoUpLodProxy(IRDRS modelElement) : 
                    base(modelElement, "AutoUpLod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.AutoUpLod;
                }
                set
                {
                    this.ModelElement.AutoUpLod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DltRcd property
        /// </summary>
        private sealed class DltRcdProxy : ModelPropertyChange<IRDRS, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DltRcdProxy(IRDRS modelElement) : 
                    base(modelElement, "DltRcd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.DltRcd;
                }
                set
                {
                    this.ModelElement.DltRcd = value;
                }
            }
        }
    }
}

