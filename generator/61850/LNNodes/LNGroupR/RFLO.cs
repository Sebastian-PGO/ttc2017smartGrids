//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RFLO class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RFLO")]
    public class RFLO : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRFLO, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        /// <summary>
        /// The backing field for the FltZ property
        /// </summary>
        private ICMV _fltZ;
        
        /// <summary>
        /// The backing field for the FltDiskm property
        /// </summary>
        private IMV _fltDiskm;
        
        /// <summary>
        /// The backing field for the FltLoop property
        /// </summary>
        private IINS _fltLoop;
        
        /// <summary>
        /// The backing field for the LinLenKm property
        /// </summary>
        private IASG _linLenKm;
        
        /// <summary>
        /// The backing field for the R1 property
        /// </summary>
        private IASG _r1;
        
        /// <summary>
        /// The backing field for the X1 property
        /// </summary>
        private IASG _x1;
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private IASG _r0;
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private IASG _x0;
        
        /// <summary>
        /// The backing field for the Z1Mod property
        /// </summary>
        private IASG _z1Mod;
        
        /// <summary>
        /// The backing field for the Z1Ang property
        /// </summary>
        private IASG _z1Ang;
        
        /// <summary>
        /// The backing field for the Z0Mod property
        /// </summary>
        private IASG _z0Mod;
        
        /// <summary>
        /// The backing field for the Z0Ang property
        /// </summary>
        private IASG _z0Ang;
        
        /// <summary>
        /// The backing field for the Rm0 property
        /// </summary>
        private IASG _rm0;
        
        /// <summary>
        /// The backing field for the Xm0 property
        /// </summary>
        private IASG _xm0;
        
        /// <summary>
        /// The backing field for the Zm0Mod property
        /// </summary>
        private IASG _zm0Mod;
        
        /// <summary>
        /// The backing field for the Zm0Ang property
        /// </summary>
        private IASG _zm0Ang;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e);
                }
            }
        }
        
        /// <summary>
        /// The FltZ property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ICMV FltZ
        {
            get
            {
                return this._fltZ;
            }
            set
            {
                if ((this._fltZ != value))
                {
                    ICMV old = this._fltZ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFltZChanging(e);
                    this.OnPropertyChanging("FltZ", e);
                    this._fltZ = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFltZ;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFltZ;
                    }
                    this.OnFltZChanged(e);
                    this.OnPropertyChanged("FltZ", e);
                }
            }
        }
        
        /// <summary>
        /// The FltDiskm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV FltDiskm
        {
            get
            {
                return this._fltDiskm;
            }
            set
            {
                if ((this._fltDiskm != value))
                {
                    IMV old = this._fltDiskm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFltDiskmChanging(e);
                    this.OnPropertyChanging("FltDiskm", e);
                    this._fltDiskm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFltDiskm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFltDiskm;
                    }
                    this.OnFltDiskmChanged(e);
                    this.OnPropertyChanged("FltDiskm", e);
                }
            }
        }
        
        /// <summary>
        /// The FltLoop property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS FltLoop
        {
            get
            {
                return this._fltLoop;
            }
            set
            {
                if ((this._fltLoop != value))
                {
                    IINS old = this._fltLoop;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFltLoopChanging(e);
                    this.OnPropertyChanging("FltLoop", e);
                    this._fltLoop = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFltLoop;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFltLoop;
                    }
                    this.OnFltLoopChanged(e);
                    this.OnPropertyChanged("FltLoop", e);
                }
            }
        }
        
        /// <summary>
        /// The LinLenKm property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LinLenKm
        {
            get
            {
                return this._linLenKm;
            }
            set
            {
                if ((this._linLenKm != value))
                {
                    IASG old = this._linLenKm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLinLenKmChanging(e);
                    this.OnPropertyChanging("LinLenKm", e);
                    this._linLenKm = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLinLenKm;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLinLenKm;
                    }
                    this.OnLinLenKmChanged(e);
                    this.OnPropertyChanged("LinLenKm", e);
                }
            }
        }
        
        /// <summary>
        /// The R1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG R1
        {
            get
            {
                return this._r1;
            }
            set
            {
                if ((this._r1 != value))
                {
                    IASG old = this._r1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR1Changing(e);
                    this.OnPropertyChanging("R1", e);
                    this._r1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetR1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetR1;
                    }
                    this.OnR1Changed(e);
                    this.OnPropertyChanged("R1", e);
                }
            }
        }
        
        /// <summary>
        /// The X1 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG X1
        {
            get
            {
                return this._x1;
            }
            set
            {
                if ((this._x1 != value))
                {
                    IASG old = this._x1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX1Changing(e);
                    this.OnPropertyChanging("X1", e);
                    this._x1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetX1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetX1;
                    }
                    this.OnX1Changed(e);
                    this.OnPropertyChanged("X1", e);
                }
            }
        }
        
        /// <summary>
        /// The R0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    IASG old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e);
                    this._r0 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetR0;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetR0;
                    }
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e);
                }
            }
        }
        
        /// <summary>
        /// The X0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    IASG old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e);
                    this._x0 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetX0;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetX0;
                    }
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e);
                }
            }
        }
        
        /// <summary>
        /// The Z1Mod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Z1Mod
        {
            get
            {
                return this._z1Mod;
            }
            set
            {
                if ((this._z1Mod != value))
                {
                    IASG old = this._z1Mod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZ1ModChanging(e);
                    this.OnPropertyChanging("Z1Mod", e);
                    this._z1Mod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZ1Mod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZ1Mod;
                    }
                    this.OnZ1ModChanged(e);
                    this.OnPropertyChanged("Z1Mod", e);
                }
            }
        }
        
        /// <summary>
        /// The Z1Ang property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Z1Ang
        {
            get
            {
                return this._z1Ang;
            }
            set
            {
                if ((this._z1Ang != value))
                {
                    IASG old = this._z1Ang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZ1AngChanging(e);
                    this.OnPropertyChanging("Z1Ang", e);
                    this._z1Ang = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZ1Ang;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZ1Ang;
                    }
                    this.OnZ1AngChanged(e);
                    this.OnPropertyChanged("Z1Ang", e);
                }
            }
        }
        
        /// <summary>
        /// The Z0Mod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Z0Mod
        {
            get
            {
                return this._z0Mod;
            }
            set
            {
                if ((this._z0Mod != value))
                {
                    IASG old = this._z0Mod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZ0ModChanging(e);
                    this.OnPropertyChanging("Z0Mod", e);
                    this._z0Mod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZ0Mod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZ0Mod;
                    }
                    this.OnZ0ModChanged(e);
                    this.OnPropertyChanged("Z0Mod", e);
                }
            }
        }
        
        /// <summary>
        /// The Z0Ang property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Z0Ang
        {
            get
            {
                return this._z0Ang;
            }
            set
            {
                if ((this._z0Ang != value))
                {
                    IASG old = this._z0Ang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZ0AngChanging(e);
                    this.OnPropertyChanging("Z0Ang", e);
                    this._z0Ang = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZ0Ang;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZ0Ang;
                    }
                    this.OnZ0AngChanged(e);
                    this.OnPropertyChanged("Z0Ang", e);
                }
            }
        }
        
        /// <summary>
        /// The Rm0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Rm0
        {
            get
            {
                return this._rm0;
            }
            set
            {
                if ((this._rm0 != value))
                {
                    IASG old = this._rm0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRm0Changing(e);
                    this.OnPropertyChanging("Rm0", e);
                    this._rm0 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRm0;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRm0;
                    }
                    this.OnRm0Changed(e);
                    this.OnPropertyChanged("Rm0", e);
                }
            }
        }
        
        /// <summary>
        /// The Xm0 property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Xm0
        {
            get
            {
                return this._xm0;
            }
            set
            {
                if ((this._xm0 != value))
                {
                    IASG old = this._xm0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXm0Changing(e);
                    this.OnPropertyChanging("Xm0", e);
                    this._xm0 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetXm0;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetXm0;
                    }
                    this.OnXm0Changed(e);
                    this.OnPropertyChanged("Xm0", e);
                }
            }
        }
        
        /// <summary>
        /// The Zm0Mod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Zm0Mod
        {
            get
            {
                return this._zm0Mod;
            }
            set
            {
                if ((this._zm0Mod != value))
                {
                    IASG old = this._zm0Mod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZm0ModChanging(e);
                    this.OnPropertyChanging("Zm0Mod", e);
                    this._zm0Mod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZm0Mod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZm0Mod;
                    }
                    this.OnZm0ModChanged(e);
                    this.OnPropertyChanged("Zm0Mod", e);
                }
            }
        }
        
        /// <summary>
        /// The Zm0Ang property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG Zm0Ang
        {
            get
            {
                return this._zm0Ang;
            }
            set
            {
                if ((this._zm0Ang != value))
                {
                    IASG old = this._zm0Ang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZm0AngChanging(e);
                    this.OnPropertyChanging("Zm0Ang", e);
                    this._zm0Ang = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetZm0Ang;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetZm0Ang;
                    }
                    this.OnZm0AngChanged(e);
                    this.OnPropertyChanged("Zm0Ang", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RFLOReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RFLO")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the FltZ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltZChanging;
        
        /// <summary>
        /// Gets fired when the FltZ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltZChanged;
        
        /// <summary>
        /// Gets fired before the FltDiskm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltDiskmChanging;
        
        /// <summary>
        /// Gets fired when the FltDiskm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltDiskmChanged;
        
        /// <summary>
        /// Gets fired before the FltLoop property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltLoopChanging;
        
        /// <summary>
        /// Gets fired when the FltLoop property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltLoopChanged;
        
        /// <summary>
        /// Gets fired before the LinLenKm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinLenKmChanging;
        
        /// <summary>
        /// Gets fired when the LinLenKm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LinLenKmChanged;
        
        /// <summary>
        /// Gets fired before the R1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R1Changing;
        
        /// <summary>
        /// Gets fired when the R1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R1Changed;
        
        /// <summary>
        /// Gets fired before the X1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X1Changing;
        
        /// <summary>
        /// Gets fired when the X1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X1Changed;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the Z1Mod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z1ModChanging;
        
        /// <summary>
        /// Gets fired when the Z1Mod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z1ModChanged;
        
        /// <summary>
        /// Gets fired before the Z1Ang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z1AngChanging;
        
        /// <summary>
        /// Gets fired when the Z1Ang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z1AngChanged;
        
        /// <summary>
        /// Gets fired before the Z0Mod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z0ModChanging;
        
        /// <summary>
        /// Gets fired when the Z0Mod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z0ModChanged;
        
        /// <summary>
        /// Gets fired before the Z0Ang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z0AngChanging;
        
        /// <summary>
        /// Gets fired when the Z0Ang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Z0AngChanged;
        
        /// <summary>
        /// Gets fired before the Rm0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rm0Changing;
        
        /// <summary>
        /// Gets fired when the Rm0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rm0Changed;
        
        /// <summary>
        /// Gets fired before the Xm0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Xm0Changing;
        
        /// <summary>
        /// Gets fired when the Xm0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Xm0Changed;
        
        /// <summary>
        /// Gets fired before the Zm0Mod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Zm0ModChanging;
        
        /// <summary>
        /// Gets fired when the Zm0Mod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Zm0ModChanged;
        
        /// <summary>
        /// Gets fired before the Zm0Ang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Zm0AngChanging;
        
        /// <summary>
        /// Gets fired when the Zm0Ang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Zm0AngChanged;
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        /// <summary>
        /// Raises the FltZChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltZChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltZChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FltZChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltZChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltZChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FltZ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFltZ(object sender, System.EventArgs eventArgs)
        {
            this.FltZ = null;
        }
        
        /// <summary>
        /// Raises the FltDiskmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltDiskmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltDiskmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FltDiskmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltDiskmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltDiskmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FltDiskm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFltDiskm(object sender, System.EventArgs eventArgs)
        {
            this.FltDiskm = null;
        }
        
        /// <summary>
        /// Raises the FltLoopChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltLoopChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltLoopChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FltLoopChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltLoopChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltLoopChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FltLoop property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFltLoop(object sender, System.EventArgs eventArgs)
        {
            this.FltLoop = null;
        }
        
        /// <summary>
        /// Raises the LinLenKmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinLenKmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinLenKmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LinLenKmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLinLenKmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LinLenKmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LinLenKm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLinLenKm(object sender, System.EventArgs eventArgs)
        {
            this.LinLenKm = null;
        }
        
        /// <summary>
        /// Raises the R1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the R1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetR1(object sender, System.EventArgs eventArgs)
        {
            this.R1 = null;
        }
        
        /// <summary>
        /// Raises the X1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the X1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetX1(object sender, System.EventArgs eventArgs)
        {
            this.X1 = null;
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the R0 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetR0(object sender, System.EventArgs eventArgs)
        {
            this.R0 = null;
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the X0 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetX0(object sender, System.EventArgs eventArgs)
        {
            this.X0 = null;
        }
        
        /// <summary>
        /// Raises the Z1ModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ1ModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z1ModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Z1ModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ1ModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z1ModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Z1Mod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZ1Mod(object sender, System.EventArgs eventArgs)
        {
            this.Z1Mod = null;
        }
        
        /// <summary>
        /// Raises the Z1AngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ1AngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z1AngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Z1AngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ1AngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z1AngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Z1Ang property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZ1Ang(object sender, System.EventArgs eventArgs)
        {
            this.Z1Ang = null;
        }
        
        /// <summary>
        /// Raises the Z0ModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ0ModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z0ModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Z0ModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ0ModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z0ModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Z0Mod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZ0Mod(object sender, System.EventArgs eventArgs)
        {
            this.Z0Mod = null;
        }
        
        /// <summary>
        /// Raises the Z0AngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ0AngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z0AngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Z0AngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZ0AngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Z0AngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Z0Ang property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZ0Ang(object sender, System.EventArgs eventArgs)
        {
            this.Z0Ang = null;
        }
        
        /// <summary>
        /// Raises the Rm0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRm0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rm0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Rm0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRm0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rm0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rm0 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRm0(object sender, System.EventArgs eventArgs)
        {
            this.Rm0 = null;
        }
        
        /// <summary>
        /// Raises the Xm0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXm0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Xm0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Xm0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXm0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Xm0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Xm0 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetXm0(object sender, System.EventArgs eventArgs)
        {
            this.Xm0 = null;
        }
        
        /// <summary>
        /// Raises the Zm0ModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZm0ModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Zm0ModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Zm0ModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZm0ModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Zm0ModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Zm0Mod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZm0Mod(object sender, System.EventArgs eventArgs)
        {
            this.Zm0Mod = null;
        }
        
        /// <summary>
        /// Raises the Zm0AngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZm0AngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Zm0AngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Zm0AngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZm0AngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Zm0AngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Zm0Ang property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetZm0Ang(object sender, System.EventArgs eventArgs)
        {
            this.Zm0Ang = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "FLTZ"))
            {
                this.FltZ = ((ICMV)(value));
                return;
            }
            if ((feature == "FLTDISKM"))
            {
                this.FltDiskm = ((IMV)(value));
                return;
            }
            if ((feature == "FLTLOOP"))
            {
                this.FltLoop = ((IINS)(value));
                return;
            }
            if ((feature == "LINLENKM"))
            {
                this.LinLenKm = ((IASG)(value));
                return;
            }
            if ((feature == "R1"))
            {
                this.R1 = ((IASG)(value));
                return;
            }
            if ((feature == "X1"))
            {
                this.X1 = ((IASG)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((IASG)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((IASG)(value));
                return;
            }
            if ((feature == "Z1MOD"))
            {
                this.Z1Mod = ((IASG)(value));
                return;
            }
            if ((feature == "Z1ANG"))
            {
                this.Z1Ang = ((IASG)(value));
                return;
            }
            if ((feature == "Z0MOD"))
            {
                this.Z0Mod = ((IASG)(value));
                return;
            }
            if ((feature == "Z0ANG"))
            {
                this.Z0Ang = ((IASG)(value));
                return;
            }
            if ((feature == "RM0"))
            {
                this.Rm0 = ((IASG)(value));
                return;
            }
            if ((feature == "XM0"))
            {
                this.Xm0 = ((IASG)(value));
                return;
            }
            if ((feature == "ZM0MOD"))
            {
                this.Zm0Mod = ((IASG)(value));
                return;
            }
            if ((feature == "ZM0ANG"))
            {
                this.Zm0Ang = ((IASG)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "FltZ"))
            {
                return new FltZProxy(this);
            }
            if ((attribute == "FltDiskm"))
            {
                return new FltDiskmProxy(this);
            }
            if ((attribute == "FltLoop"))
            {
                return new FltLoopProxy(this);
            }
            if ((attribute == "LinLenKm"))
            {
                return new LinLenKmProxy(this);
            }
            if ((attribute == "R1"))
            {
                return new R1Proxy(this);
            }
            if ((attribute == "X1"))
            {
                return new X1Proxy(this);
            }
            if ((attribute == "R0"))
            {
                return new R0Proxy(this);
            }
            if ((attribute == "X0"))
            {
                return new X0Proxy(this);
            }
            if ((attribute == "Z1Mod"))
            {
                return new Z1ModProxy(this);
            }
            if ((attribute == "Z1Ang"))
            {
                return new Z1AngProxy(this);
            }
            if ((attribute == "Z0Mod"))
            {
                return new Z0ModProxy(this);
            }
            if ((attribute == "Z0Ang"))
            {
                return new Z0AngProxy(this);
            }
            if ((attribute == "Rm0"))
            {
                return new Rm0Proxy(this);
            }
            if ((attribute == "Xm0"))
            {
                return new Xm0Proxy(this);
            }
            if ((attribute == "Zm0Mod"))
            {
                return new Zm0ModProxy(this);
            }
            if ((attribute == "Zm0Ang"))
            {
                return new Zm0AngProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "FltZ"))
            {
                return new FltZProxy(this);
            }
            if ((reference == "FltDiskm"))
            {
                return new FltDiskmProxy(this);
            }
            if ((reference == "FltLoop"))
            {
                return new FltLoopProxy(this);
            }
            if ((reference == "LinLenKm"))
            {
                return new LinLenKmProxy(this);
            }
            if ((reference == "R1"))
            {
                return new R1Proxy(this);
            }
            if ((reference == "X1"))
            {
                return new X1Proxy(this);
            }
            if ((reference == "R0"))
            {
                return new R0Proxy(this);
            }
            if ((reference == "X0"))
            {
                return new X0Proxy(this);
            }
            if ((reference == "Z1Mod"))
            {
                return new Z1ModProxy(this);
            }
            if ((reference == "Z1Ang"))
            {
                return new Z1AngProxy(this);
            }
            if ((reference == "Z0Mod"))
            {
                return new Z0ModProxy(this);
            }
            if ((reference == "Z0Ang"))
            {
                return new Z0AngProxy(this);
            }
            if ((reference == "Rm0"))
            {
                return new Rm0Proxy(this);
            }
            if ((reference == "Xm0"))
            {
                return new Xm0Proxy(this);
            }
            if ((reference == "Zm0Mod"))
            {
                return new Zm0ModProxy(this);
            }
            if ((reference == "Zm0Ang"))
            {
                return new Zm0AngProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RFLO")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RFLO class
        /// </summary>
        public class RFLOReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RFLO _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RFLOReferencedElementsCollection(RFLO parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FltZ != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FltDiskm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FltLoop != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LinLenKm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.R1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.X1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.R0 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.X0 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Z1Mod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Z1Ang != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Z0Mod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Z0Ang != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rm0 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Xm0 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Zm0Mod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Zm0Ang != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.FltZChanged += this.PropagateValueChanges;
                this._parent.FltDiskmChanged += this.PropagateValueChanges;
                this._parent.FltLoopChanged += this.PropagateValueChanges;
                this._parent.LinLenKmChanged += this.PropagateValueChanges;
                this._parent.R1Changed += this.PropagateValueChanges;
                this._parent.X1Changed += this.PropagateValueChanges;
                this._parent.R0Changed += this.PropagateValueChanges;
                this._parent.X0Changed += this.PropagateValueChanges;
                this._parent.Z1ModChanged += this.PropagateValueChanges;
                this._parent.Z1AngChanged += this.PropagateValueChanges;
                this._parent.Z0ModChanged += this.PropagateValueChanges;
                this._parent.Z0AngChanged += this.PropagateValueChanges;
                this._parent.Rm0Changed += this.PropagateValueChanges;
                this._parent.Xm0Changed += this.PropagateValueChanges;
                this._parent.Zm0ModChanged += this.PropagateValueChanges;
                this._parent.Zm0AngChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.FltZChanged -= this.PropagateValueChanges;
                this._parent.FltDiskmChanged -= this.PropagateValueChanges;
                this._parent.FltLoopChanged -= this.PropagateValueChanges;
                this._parent.LinLenKmChanged -= this.PropagateValueChanges;
                this._parent.R1Changed -= this.PropagateValueChanges;
                this._parent.X1Changed -= this.PropagateValueChanges;
                this._parent.R0Changed -= this.PropagateValueChanges;
                this._parent.X0Changed -= this.PropagateValueChanges;
                this._parent.Z1ModChanged -= this.PropagateValueChanges;
                this._parent.Z1AngChanged -= this.PropagateValueChanges;
                this._parent.Z0ModChanged -= this.PropagateValueChanges;
                this._parent.Z0AngChanged -= this.PropagateValueChanges;
                this._parent.Rm0Changed -= this.PropagateValueChanges;
                this._parent.Xm0Changed -= this.PropagateValueChanges;
                this._parent.Zm0ModChanged -= this.PropagateValueChanges;
                this._parent.Zm0AngChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.FltZ == null))
                {
                    ICMV fltZCasted = item.As<ICMV>();
                    if ((fltZCasted != null))
                    {
                        this._parent.FltZ = fltZCasted;
                        return;
                    }
                }
                if ((this._parent.FltDiskm == null))
                {
                    IMV fltDiskmCasted = item.As<IMV>();
                    if ((fltDiskmCasted != null))
                    {
                        this._parent.FltDiskm = fltDiskmCasted;
                        return;
                    }
                }
                if ((this._parent.FltLoop == null))
                {
                    IINS fltLoopCasted = item.As<IINS>();
                    if ((fltLoopCasted != null))
                    {
                        this._parent.FltLoop = fltLoopCasted;
                        return;
                    }
                }
                if ((this._parent.LinLenKm == null))
                {
                    IASG linLenKmCasted = item.As<IASG>();
                    if ((linLenKmCasted != null))
                    {
                        this._parent.LinLenKm = linLenKmCasted;
                        return;
                    }
                }
                if ((this._parent.R1 == null))
                {
                    IASG r1Casted = item.As<IASG>();
                    if ((r1Casted != null))
                    {
                        this._parent.R1 = r1Casted;
                        return;
                    }
                }
                if ((this._parent.X1 == null))
                {
                    IASG x1Casted = item.As<IASG>();
                    if ((x1Casted != null))
                    {
                        this._parent.X1 = x1Casted;
                        return;
                    }
                }
                if ((this._parent.R0 == null))
                {
                    IASG r0Casted = item.As<IASG>();
                    if ((r0Casted != null))
                    {
                        this._parent.R0 = r0Casted;
                        return;
                    }
                }
                if ((this._parent.X0 == null))
                {
                    IASG x0Casted = item.As<IASG>();
                    if ((x0Casted != null))
                    {
                        this._parent.X0 = x0Casted;
                        return;
                    }
                }
                if ((this._parent.Z1Mod == null))
                {
                    IASG z1ModCasted = item.As<IASG>();
                    if ((z1ModCasted != null))
                    {
                        this._parent.Z1Mod = z1ModCasted;
                        return;
                    }
                }
                if ((this._parent.Z1Ang == null))
                {
                    IASG z1AngCasted = item.As<IASG>();
                    if ((z1AngCasted != null))
                    {
                        this._parent.Z1Ang = z1AngCasted;
                        return;
                    }
                }
                if ((this._parent.Z0Mod == null))
                {
                    IASG z0ModCasted = item.As<IASG>();
                    if ((z0ModCasted != null))
                    {
                        this._parent.Z0Mod = z0ModCasted;
                        return;
                    }
                }
                if ((this._parent.Z0Ang == null))
                {
                    IASG z0AngCasted = item.As<IASG>();
                    if ((z0AngCasted != null))
                    {
                        this._parent.Z0Ang = z0AngCasted;
                        return;
                    }
                }
                if ((this._parent.Rm0 == null))
                {
                    IASG rm0Casted = item.As<IASG>();
                    if ((rm0Casted != null))
                    {
                        this._parent.Rm0 = rm0Casted;
                        return;
                    }
                }
                if ((this._parent.Xm0 == null))
                {
                    IASG xm0Casted = item.As<IASG>();
                    if ((xm0Casted != null))
                    {
                        this._parent.Xm0 = xm0Casted;
                        return;
                    }
                }
                if ((this._parent.Zm0Mod == null))
                {
                    IASG zm0ModCasted = item.As<IASG>();
                    if ((zm0ModCasted != null))
                    {
                        this._parent.Zm0Mod = zm0ModCasted;
                        return;
                    }
                }
                if ((this._parent.Zm0Ang == null))
                {
                    IASG zm0AngCasted = item.As<IASG>();
                    if ((zm0AngCasted != null))
                    {
                        this._parent.Zm0Ang = zm0AngCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.FltZ = null;
                this._parent.FltDiskm = null;
                this._parent.FltLoop = null;
                this._parent.LinLenKm = null;
                this._parent.R1 = null;
                this._parent.X1 = null;
                this._parent.R0 = null;
                this._parent.X0 = null;
                this._parent.Z1Mod = null;
                this._parent.Z1Ang = null;
                this._parent.Z0Mod = null;
                this._parent.Z0Ang = null;
                this._parent.Rm0 = null;
                this._parent.Xm0 = null;
                this._parent.Zm0Mod = null;
                this._parent.Zm0Ang = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.FltZ))
                {
                    return true;
                }
                if ((item == this._parent.FltDiskm))
                {
                    return true;
                }
                if ((item == this._parent.FltLoop))
                {
                    return true;
                }
                if ((item == this._parent.LinLenKm))
                {
                    return true;
                }
                if ((item == this._parent.R1))
                {
                    return true;
                }
                if ((item == this._parent.X1))
                {
                    return true;
                }
                if ((item == this._parent.R0))
                {
                    return true;
                }
                if ((item == this._parent.X0))
                {
                    return true;
                }
                if ((item == this._parent.Z1Mod))
                {
                    return true;
                }
                if ((item == this._parent.Z1Ang))
                {
                    return true;
                }
                if ((item == this._parent.Z0Mod))
                {
                    return true;
                }
                if ((item == this._parent.Z0Ang))
                {
                    return true;
                }
                if ((item == this._parent.Rm0))
                {
                    return true;
                }
                if ((item == this._parent.Xm0))
                {
                    return true;
                }
                if ((item == this._parent.Zm0Mod))
                {
                    return true;
                }
                if ((item == this._parent.Zm0Ang))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FltZ != null))
                {
                    array[arrayIndex] = this._parent.FltZ;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FltDiskm != null))
                {
                    array[arrayIndex] = this._parent.FltDiskm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FltLoop != null))
                {
                    array[arrayIndex] = this._parent.FltLoop;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LinLenKm != null))
                {
                    array[arrayIndex] = this._parent.LinLenKm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.R1 != null))
                {
                    array[arrayIndex] = this._parent.R1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.X1 != null))
                {
                    array[arrayIndex] = this._parent.X1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.R0 != null))
                {
                    array[arrayIndex] = this._parent.R0;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.X0 != null))
                {
                    array[arrayIndex] = this._parent.X0;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Z1Mod != null))
                {
                    array[arrayIndex] = this._parent.Z1Mod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Z1Ang != null))
                {
                    array[arrayIndex] = this._parent.Z1Ang;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Z0Mod != null))
                {
                    array[arrayIndex] = this._parent.Z0Mod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Z0Ang != null))
                {
                    array[arrayIndex] = this._parent.Z0Ang;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rm0 != null))
                {
                    array[arrayIndex] = this._parent.Rm0;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Xm0 != null))
                {
                    array[arrayIndex] = this._parent.Xm0;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Zm0Mod != null))
                {
                    array[arrayIndex] = this._parent.Zm0Mod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Zm0Ang != null))
                {
                    array[arrayIndex] = this._parent.Zm0Ang;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.FltZ == item))
                {
                    this._parent.FltZ = null;
                    return true;
                }
                if ((this._parent.FltDiskm == item))
                {
                    this._parent.FltDiskm = null;
                    return true;
                }
                if ((this._parent.FltLoop == item))
                {
                    this._parent.FltLoop = null;
                    return true;
                }
                if ((this._parent.LinLenKm == item))
                {
                    this._parent.LinLenKm = null;
                    return true;
                }
                if ((this._parent.R1 == item))
                {
                    this._parent.R1 = null;
                    return true;
                }
                if ((this._parent.X1 == item))
                {
                    this._parent.X1 = null;
                    return true;
                }
                if ((this._parent.R0 == item))
                {
                    this._parent.R0 = null;
                    return true;
                }
                if ((this._parent.X0 == item))
                {
                    this._parent.X0 = null;
                    return true;
                }
                if ((this._parent.Z1Mod == item))
                {
                    this._parent.Z1Mod = null;
                    return true;
                }
                if ((this._parent.Z1Ang == item))
                {
                    this._parent.Z1Ang = null;
                    return true;
                }
                if ((this._parent.Z0Mod == item))
                {
                    this._parent.Z0Mod = null;
                    return true;
                }
                if ((this._parent.Z0Ang == item))
                {
                    this._parent.Z0Ang = null;
                    return true;
                }
                if ((this._parent.Rm0 == item))
                {
                    this._parent.Rm0 = null;
                    return true;
                }
                if ((this._parent.Xm0 == item))
                {
                    this._parent.Xm0 = null;
                    return true;
                }
                if ((this._parent.Zm0Mod == item))
                {
                    this._parent.Zm0Mod = null;
                    return true;
                }
                if ((this._parent.Zm0Ang == item))
                {
                    this._parent.Zm0Ang = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.FltZ).Concat(this._parent.FltDiskm).Concat(this._parent.FltLoop).Concat(this._parent.LinLenKm).Concat(this._parent.R1).Concat(this._parent.X1).Concat(this._parent.R0).Concat(this._parent.X0).Concat(this._parent.Z1Mod).Concat(this._parent.Z1Ang).Concat(this._parent.Z0Mod).Concat(this._parent.Z0Ang).Concat(this._parent.Rm0).Concat(this._parent.Xm0).Concat(this._parent.Zm0Mod).Concat(this._parent.Zm0Ang).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRFLO, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntRsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpCntRsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FltZ property
        /// </summary>
        private sealed class FltZProxy : ModelPropertyChange<IRFLO, ICMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FltZProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICMV Value
            {
                get
                {
                    return this.ModelElement.FltZ;
                }
                set
                {
                    this.ModelElement.FltZ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltZChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltZChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FltDiskm property
        /// </summary>
        private sealed class FltDiskmProxy : ModelPropertyChange<IRFLO, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FltDiskmProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.FltDiskm;
                }
                set
                {
                    this.ModelElement.FltDiskm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltDiskmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltDiskmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FltLoop property
        /// </summary>
        private sealed class FltLoopProxy : ModelPropertyChange<IRFLO, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FltLoopProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.FltLoop;
                }
                set
                {
                    this.ModelElement.FltLoop = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltLoopChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FltLoopChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LinLenKm property
        /// </summary>
        private sealed class LinLenKmProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LinLenKmProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LinLenKm;
                }
                set
                {
                    this.ModelElement.LinLenKm = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LinLenKmChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LinLenKmChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the R1 property
        /// </summary>
        private sealed class R1Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R1Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.R1;
                }
                set
                {
                    this.ModelElement.R1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the X1 property
        /// </summary>
        private sealed class X1Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X1Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.X1;
                }
                set
                {
                    this.ModelElement.X1 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X1Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X1Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the R0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the X0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Z1Mod property
        /// </summary>
        private sealed class Z1ModProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Z1ModProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Z1Mod;
                }
                set
                {
                    this.ModelElement.Z1Mod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z1ModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z1ModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Z1Ang property
        /// </summary>
        private sealed class Z1AngProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Z1AngProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Z1Ang;
                }
                set
                {
                    this.ModelElement.Z1Ang = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z1AngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z1AngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Z0Mod property
        /// </summary>
        private sealed class Z0ModProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Z0ModProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Z0Mod;
                }
                set
                {
                    this.ModelElement.Z0Mod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z0ModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z0ModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Z0Ang property
        /// </summary>
        private sealed class Z0AngProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Z0AngProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Z0Ang;
                }
                set
                {
                    this.ModelElement.Z0Ang = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z0AngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Z0AngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Rm0 property
        /// </summary>
        private sealed class Rm0Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Rm0Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Rm0;
                }
                set
                {
                    this.ModelElement.Rm0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Rm0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Rm0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Xm0 property
        /// </summary>
        private sealed class Xm0Proxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Xm0Proxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Xm0;
                }
                set
                {
                    this.ModelElement.Xm0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Xm0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Xm0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Zm0Mod property
        /// </summary>
        private sealed class Zm0ModProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Zm0ModProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Zm0Mod;
                }
                set
                {
                    this.ModelElement.Zm0Mod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Zm0ModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Zm0ModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Zm0Ang property
        /// </summary>
        private sealed class Zm0AngProxy : ModelPropertyChange<IRFLO, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Zm0AngProxy(IRFLO modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.Zm0Ang;
                }
                set
                {
                    this.ModelElement.Zm0Ang = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Zm0AngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Zm0AngChanged -= handler;
            }
        }
    }
}

