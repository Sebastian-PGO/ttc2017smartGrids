//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RDRE class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RDRE")]
    public partial class RDRE : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRDRE, IModelElement
    {
        
        private static Lazy<ITypedElement> _opCntRsReference = new Lazy<ITypedElement>(RetrieveOpCntRsReference);
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        private static Lazy<ITypedElement> _rcdTrgReference = new Lazy<ITypedElement>(RetrieveRcdTrgReference);
        
        /// <summary>
        /// The backing field for the RcdTrg property
        /// </summary>
        private ISPC _rcdTrg;
        
        private static Lazy<ITypedElement> _memRsReference = new Lazy<ITypedElement>(RetrieveMemRsReference);
        
        /// <summary>
        /// The backing field for the MemRs property
        /// </summary>
        private ISPC _memRs;
        
        private static Lazy<ITypedElement> _memClrReference = new Lazy<ITypedElement>(RetrieveMemClrReference);
        
        /// <summary>
        /// The backing field for the MemClr property
        /// </summary>
        private ISPC _memClr;
        
        private static Lazy<ITypedElement> _rcdMadeReference = new Lazy<ITypedElement>(RetrieveRcdMadeReference);
        
        /// <summary>
        /// The backing field for the RcdMade property
        /// </summary>
        private ISPS _rcdMade;
        
        private static Lazy<ITypedElement> _fltNumReference = new Lazy<ITypedElement>(RetrieveFltNumReference);
        
        /// <summary>
        /// The backing field for the FltNum property
        /// </summary>
        private IINS _fltNum;
        
        private static Lazy<ITypedElement> _griFltNumReference = new Lazy<ITypedElement>(RetrieveGriFltNumReference);
        
        /// <summary>
        /// The backing field for the GriFltNum property
        /// </summary>
        private IINS _griFltNum;
        
        private static Lazy<ITypedElement> _rcdStrReference = new Lazy<ITypedElement>(RetrieveRcdStrReference);
        
        /// <summary>
        /// The backing field for the RcdStr property
        /// </summary>
        private ISPS _rcdStr;
        
        private static Lazy<ITypedElement> _memUsedReference = new Lazy<ITypedElement>(RetrieveMemUsedReference);
        
        /// <summary>
        /// The backing field for the MemUsed property
        /// </summary>
        private IINS _memUsed;
        
        private static Lazy<ITypedElement> _trgModReference = new Lazy<ITypedElement>(RetrieveTrgModReference);
        
        /// <summary>
        /// The backing field for the TrgMod property
        /// </summary>
        private IING _trgMod;
        
        private static Lazy<ITypedElement> _levModReference = new Lazy<ITypedElement>(RetrieveLevModReference);
        
        /// <summary>
        /// The backing field for the LevMod property
        /// </summary>
        private IING _levMod;
        
        private static Lazy<ITypedElement> _preTmmsReference = new Lazy<ITypedElement>(RetrievePreTmmsReference);
        
        /// <summary>
        /// The backing field for the PreTmms property
        /// </summary>
        private IING _preTmms;
        
        private static Lazy<ITypedElement> _pstTmmsReference = new Lazy<ITypedElement>(RetrievePstTmmsReference);
        
        /// <summary>
        /// The backing field for the PstTmms property
        /// </summary>
        private IING _pstTmms;
        
        private static Lazy<ITypedElement> _memFullReference = new Lazy<ITypedElement>(RetrieveMemFullReference);
        
        /// <summary>
        /// The backing field for the MemFull property
        /// </summary>
        private IING _memFull;
        
        private static Lazy<ITypedElement> _maxNumRcdReference = new Lazy<ITypedElement>(RetrieveMaxNumRcdReference);
        
        /// <summary>
        /// The backing field for the MaxNumRcd property
        /// </summary>
        private IING _maxNumRcd;
        
        private static Lazy<ITypedElement> _reTrgModReference = new Lazy<ITypedElement>(RetrieveReTrgModReference);
        
        /// <summary>
        /// The backing field for the ReTrgMod property
        /// </summary>
        private IING _reTrgMod;
        
        private static Lazy<ITypedElement> _perTrgTmsReference = new Lazy<ITypedElement>(RetrievePerTrgTmsReference);
        
        /// <summary>
        /// The backing field for the PerTrgTms property
        /// </summary>
        private IING _perTrgTms;
        
        private static Lazy<ITypedElement> _exclTmmsReference = new Lazy<ITypedElement>(RetrieveExclTmmsReference);
        
        /// <summary>
        /// The backing field for the ExclTmms property
        /// </summary>
        private IING _exclTmms;
        
        private static Lazy<ITypedElement> _opModReference = new Lazy<ITypedElement>(RetrieveOpModReference);
        
        /// <summary>
        /// The backing field for the OpMod property
        /// </summary>
        private IING _opMod;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e, _opCntRsReference);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e, _opCntRsReference);
                }
            }
        }
        
        /// <summary>
        /// The RcdTrg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC RcdTrg
        {
            get
            {
                return this._rcdTrg;
            }
            set
            {
                if ((this._rcdTrg != value))
                {
                    ISPC old = this._rcdTrg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRcdTrgChanging(e);
                    this.OnPropertyChanging("RcdTrg", e, _rcdTrgReference);
                    this._rcdTrg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRcdTrg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRcdTrg;
                    }
                    this.OnRcdTrgChanged(e);
                    this.OnPropertyChanged("RcdTrg", e, _rcdTrgReference);
                }
            }
        }
        
        /// <summary>
        /// The MemRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC MemRs
        {
            get
            {
                return this._memRs;
            }
            set
            {
                if ((this._memRs != value))
                {
                    ISPC old = this._memRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMemRsChanging(e);
                    this.OnPropertyChanging("MemRs", e, _memRsReference);
                    this._memRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMemRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMemRs;
                    }
                    this.OnMemRsChanged(e);
                    this.OnPropertyChanged("MemRs", e, _memRsReference);
                }
            }
        }
        
        /// <summary>
        /// The MemClr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC MemClr
        {
            get
            {
                return this._memClr;
            }
            set
            {
                if ((this._memClr != value))
                {
                    ISPC old = this._memClr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMemClrChanging(e);
                    this.OnPropertyChanging("MemClr", e, _memClrReference);
                    this._memClr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMemClr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMemClr;
                    }
                    this.OnMemClrChanged(e);
                    this.OnPropertyChanged("MemClr", e, _memClrReference);
                }
            }
        }
        
        /// <summary>
        /// The RcdMade property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS RcdMade
        {
            get
            {
                return this._rcdMade;
            }
            set
            {
                if ((this._rcdMade != value))
                {
                    ISPS old = this._rcdMade;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRcdMadeChanging(e);
                    this.OnPropertyChanging("RcdMade", e, _rcdMadeReference);
                    this._rcdMade = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRcdMade;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRcdMade;
                    }
                    this.OnRcdMadeChanged(e);
                    this.OnPropertyChanged("RcdMade", e, _rcdMadeReference);
                }
            }
        }
        
        /// <summary>
        /// The FltNum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS FltNum
        {
            get
            {
                return this._fltNum;
            }
            set
            {
                if ((this._fltNum != value))
                {
                    IINS old = this._fltNum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFltNumChanging(e);
                    this.OnPropertyChanging("FltNum", e, _fltNumReference);
                    this._fltNum = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFltNum;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFltNum;
                    }
                    this.OnFltNumChanged(e);
                    this.OnPropertyChanged("FltNum", e, _fltNumReference);
                }
            }
        }
        
        /// <summary>
        /// The GriFltNum property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS GriFltNum
        {
            get
            {
                return this._griFltNum;
            }
            set
            {
                if ((this._griFltNum != value))
                {
                    IINS old = this._griFltNum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGriFltNumChanging(e);
                    this.OnPropertyChanging("GriFltNum", e, _griFltNumReference);
                    this._griFltNum = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetGriFltNum;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetGriFltNum;
                    }
                    this.OnGriFltNumChanged(e);
                    this.OnPropertyChanged("GriFltNum", e, _griFltNumReference);
                }
            }
        }
        
        /// <summary>
        /// The RcdStr property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS RcdStr
        {
            get
            {
                return this._rcdStr;
            }
            set
            {
                if ((this._rcdStr != value))
                {
                    ISPS old = this._rcdStr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRcdStrChanging(e);
                    this.OnPropertyChanging("RcdStr", e, _rcdStrReference);
                    this._rcdStr = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRcdStr;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRcdStr;
                    }
                    this.OnRcdStrChanged(e);
                    this.OnPropertyChanged("RcdStr", e, _rcdStrReference);
                }
            }
        }
        
        /// <summary>
        /// The MemUsed property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS MemUsed
        {
            get
            {
                return this._memUsed;
            }
            set
            {
                if ((this._memUsed != value))
                {
                    IINS old = this._memUsed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMemUsedChanging(e);
                    this.OnPropertyChanging("MemUsed", e, _memUsedReference);
                    this._memUsed = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMemUsed;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMemUsed;
                    }
                    this.OnMemUsedChanged(e);
                    this.OnPropertyChanged("MemUsed", e, _memUsedReference);
                }
            }
        }
        
        /// <summary>
        /// The TrgMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING TrgMod
        {
            get
            {
                return this._trgMod;
            }
            set
            {
                if ((this._trgMod != value))
                {
                    IING old = this._trgMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrgModChanging(e);
                    this.OnPropertyChanging("TrgMod", e, _trgModReference);
                    this._trgMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTrgMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTrgMod;
                    }
                    this.OnTrgModChanged(e);
                    this.OnPropertyChanged("TrgMod", e, _trgModReference);
                }
            }
        }
        
        /// <summary>
        /// The LevMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING LevMod
        {
            get
            {
                return this._levMod;
            }
            set
            {
                if ((this._levMod != value))
                {
                    IING old = this._levMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLevModChanging(e);
                    this.OnPropertyChanging("LevMod", e, _levModReference);
                    this._levMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLevMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLevMod;
                    }
                    this.OnLevModChanged(e);
                    this.OnPropertyChanged("LevMod", e, _levModReference);
                }
            }
        }
        
        /// <summary>
        /// The PreTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PreTmms
        {
            get
            {
                return this._preTmms;
            }
            set
            {
                if ((this._preTmms != value))
                {
                    IING old = this._preTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreTmmsChanging(e);
                    this.OnPropertyChanging("PreTmms", e, _preTmmsReference);
                    this._preTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPreTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPreTmms;
                    }
                    this.OnPreTmmsChanged(e);
                    this.OnPropertyChanged("PreTmms", e, _preTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The PstTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PstTmms
        {
            get
            {
                return this._pstTmms;
            }
            set
            {
                if ((this._pstTmms != value))
                {
                    IING old = this._pstTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPstTmmsChanging(e);
                    this.OnPropertyChanging("PstTmms", e, _pstTmmsReference);
                    this._pstTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPstTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPstTmms;
                    }
                    this.OnPstTmmsChanged(e);
                    this.OnPropertyChanged("PstTmms", e, _pstTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The MemFull property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MemFull
        {
            get
            {
                return this._memFull;
            }
            set
            {
                if ((this._memFull != value))
                {
                    IING old = this._memFull;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMemFullChanging(e);
                    this.OnPropertyChanging("MemFull", e, _memFullReference);
                    this._memFull = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMemFull;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMemFull;
                    }
                    this.OnMemFullChanged(e);
                    this.OnPropertyChanged("MemFull", e, _memFullReference);
                }
            }
        }
        
        /// <summary>
        /// The MaxNumRcd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING MaxNumRcd
        {
            get
            {
                return this._maxNumRcd;
            }
            set
            {
                if ((this._maxNumRcd != value))
                {
                    IING old = this._maxNumRcd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxNumRcdChanging(e);
                    this.OnPropertyChanging("MaxNumRcd", e, _maxNumRcdReference);
                    this._maxNumRcd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMaxNumRcd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMaxNumRcd;
                    }
                    this.OnMaxNumRcdChanged(e);
                    this.OnPropertyChanged("MaxNumRcd", e, _maxNumRcdReference);
                }
            }
        }
        
        /// <summary>
        /// The ReTrgMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ReTrgMod
        {
            get
            {
                return this._reTrgMod;
            }
            set
            {
                if ((this._reTrgMod != value))
                {
                    IING old = this._reTrgMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReTrgModChanging(e);
                    this.OnPropertyChanging("ReTrgMod", e, _reTrgModReference);
                    this._reTrgMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReTrgMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReTrgMod;
                    }
                    this.OnReTrgModChanged(e);
                    this.OnPropertyChanged("ReTrgMod", e, _reTrgModReference);
                }
            }
        }
        
        /// <summary>
        /// The PerTrgTms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PerTrgTms
        {
            get
            {
                return this._perTrgTms;
            }
            set
            {
                if ((this._perTrgTms != value))
                {
                    IING old = this._perTrgTms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPerTrgTmsChanging(e);
                    this.OnPropertyChanging("PerTrgTms", e, _perTrgTmsReference);
                    this._perTrgTms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPerTrgTms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPerTrgTms;
                    }
                    this.OnPerTrgTmsChanged(e);
                    this.OnPropertyChanged("PerTrgTms", e, _perTrgTmsReference);
                }
            }
        }
        
        /// <summary>
        /// The ExclTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING ExclTmms
        {
            get
            {
                return this._exclTmms;
            }
            set
            {
                if ((this._exclTmms != value))
                {
                    IING old = this._exclTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExclTmmsChanging(e);
                    this.OnPropertyChanging("ExclTmms", e, _exclTmmsReference);
                    this._exclTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetExclTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetExclTmms;
                    }
                    this.OnExclTmmsChanged(e);
                    this.OnPropertyChanged("ExclTmms", e, _exclTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The OpMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING OpMod
        {
            get
            {
                return this._opMod;
            }
            set
            {
                if ((this._opMod != value))
                {
                    IING old = this._opMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpModChanging(e);
                    this.OnPropertyChanging("OpMod", e, _opModReference);
                    this._opMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpMod;
                    }
                    this.OnOpModChanged(e);
                    this.OnPropertyChanged("OpMod", e, _opModReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RDREReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RDRE")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the RcdTrg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdTrgChanging;
        
        /// <summary>
        /// Gets fired when the RcdTrg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdTrgChanged;
        
        /// <summary>
        /// Gets fired before the MemRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemRsChanging;
        
        /// <summary>
        /// Gets fired when the MemRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemRsChanged;
        
        /// <summary>
        /// Gets fired before the MemClr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemClrChanging;
        
        /// <summary>
        /// Gets fired when the MemClr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemClrChanged;
        
        /// <summary>
        /// Gets fired before the RcdMade property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdMadeChanging;
        
        /// <summary>
        /// Gets fired when the RcdMade property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdMadeChanged;
        
        /// <summary>
        /// Gets fired before the FltNum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltNumChanging;
        
        /// <summary>
        /// Gets fired when the FltNum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FltNumChanged;
        
        /// <summary>
        /// Gets fired before the GriFltNum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GriFltNumChanging;
        
        /// <summary>
        /// Gets fired when the GriFltNum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GriFltNumChanged;
        
        /// <summary>
        /// Gets fired before the RcdStr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdStrChanging;
        
        /// <summary>
        /// Gets fired when the RcdStr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RcdStrChanged;
        
        /// <summary>
        /// Gets fired before the MemUsed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemUsedChanging;
        
        /// <summary>
        /// Gets fired when the MemUsed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemUsedChanged;
        
        /// <summary>
        /// Gets fired before the TrgMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgModChanging;
        
        /// <summary>
        /// Gets fired when the TrgMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgModChanged;
        
        /// <summary>
        /// Gets fired before the LevMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevModChanging;
        
        /// <summary>
        /// Gets fired when the LevMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevModChanged;
        
        /// <summary>
        /// Gets fired before the PreTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PreTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreTmmsChanged;
        
        /// <summary>
        /// Gets fired before the PstTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PstTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PstTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PstTmmsChanged;
        
        /// <summary>
        /// Gets fired before the MemFull property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemFullChanging;
        
        /// <summary>
        /// Gets fired when the MemFull property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemFullChanged;
        
        /// <summary>
        /// Gets fired before the MaxNumRcd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumRcdChanging;
        
        /// <summary>
        /// Gets fired when the MaxNumRcd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxNumRcdChanged;
        
        /// <summary>
        /// Gets fired before the ReTrgMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReTrgModChanging;
        
        /// <summary>
        /// Gets fired when the ReTrgMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReTrgModChanged;
        
        /// <summary>
        /// Gets fired before the PerTrgTms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerTrgTmsChanging;
        
        /// <summary>
        /// Gets fired when the PerTrgTms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerTrgTmsChanged;
        
        /// <summary>
        /// Gets fired before the ExclTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExclTmmsChanging;
        
        /// <summary>
        /// Gets fired when the ExclTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExclTmmsChanged;
        
        /// <summary>
        /// Gets fired before the OpMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpModChanging;
        
        /// <summary>
        /// Gets fired when the OpMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpModChanged;
        
        private static ITypedElement RetrieveOpCntRsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("OpCntRs")));
        }
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        private static ITypedElement RetrieveRcdTrgReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("RcdTrg")));
        }
        
        /// <summary>
        /// Raises the RcdTrgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdTrgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdTrgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RcdTrgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdTrgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdTrgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RcdTrg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRcdTrg(object sender, System.EventArgs eventArgs)
        {
            this.RcdTrg = null;
        }
        
        private static ITypedElement RetrieveMemRsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("MemRs")));
        }
        
        /// <summary>
        /// Raises the MemRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MemRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MemRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMemRs(object sender, System.EventArgs eventArgs)
        {
            this.MemRs = null;
        }
        
        private static ITypedElement RetrieveMemClrReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("MemClr")));
        }
        
        /// <summary>
        /// Raises the MemClrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemClrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemClrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MemClrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemClrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemClrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MemClr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMemClr(object sender, System.EventArgs eventArgs)
        {
            this.MemClr = null;
        }
        
        private static ITypedElement RetrieveRcdMadeReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("RcdMade")));
        }
        
        /// <summary>
        /// Raises the RcdMadeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdMadeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdMadeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RcdMadeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdMadeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdMadeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RcdMade property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRcdMade(object sender, System.EventArgs eventArgs)
        {
            this.RcdMade = null;
        }
        
        private static ITypedElement RetrieveFltNumReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("FltNum")));
        }
        
        /// <summary>
        /// Raises the FltNumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltNumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltNumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FltNumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFltNumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FltNumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FltNum property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFltNum(object sender, System.EventArgs eventArgs)
        {
            this.FltNum = null;
        }
        
        private static ITypedElement RetrieveGriFltNumReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("GriFltNum")));
        }
        
        /// <summary>
        /// Raises the GriFltNumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGriFltNumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GriFltNumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GriFltNumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGriFltNumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GriFltNumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GriFltNum property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGriFltNum(object sender, System.EventArgs eventArgs)
        {
            this.GriFltNum = null;
        }
        
        private static ITypedElement RetrieveRcdStrReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("RcdStr")));
        }
        
        /// <summary>
        /// Raises the RcdStrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdStrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdStrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RcdStrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRcdStrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RcdStrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RcdStr property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRcdStr(object sender, System.EventArgs eventArgs)
        {
            this.RcdStr = null;
        }
        
        private static ITypedElement RetrieveMemUsedReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("MemUsed")));
        }
        
        /// <summary>
        /// Raises the MemUsedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemUsedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemUsedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MemUsedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemUsedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemUsedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MemUsed property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMemUsed(object sender, System.EventArgs eventArgs)
        {
            this.MemUsed = null;
        }
        
        private static ITypedElement RetrieveTrgModReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("TrgMod")));
        }
        
        /// <summary>
        /// Raises the TrgModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrgModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TrgMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrgMod(object sender, System.EventArgs eventArgs)
        {
            this.TrgMod = null;
        }
        
        private static ITypedElement RetrieveLevModReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("LevMod")));
        }
        
        /// <summary>
        /// Raises the LevModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LevModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LevMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLevMod(object sender, System.EventArgs eventArgs)
        {
            this.LevMod = null;
        }
        
        private static ITypedElement RetrievePreTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("PreTmms")));
        }
        
        /// <summary>
        /// Raises the PreTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PreTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPreTmms(object sender, System.EventArgs eventArgs)
        {
            this.PreTmms = null;
        }
        
        private static ITypedElement RetrievePstTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("PstTmms")));
        }
        
        /// <summary>
        /// Raises the PstTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPstTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PstTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PstTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPstTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PstTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PstTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPstTmms(object sender, System.EventArgs eventArgs)
        {
            this.PstTmms = null;
        }
        
        private static ITypedElement RetrieveMemFullReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("MemFull")));
        }
        
        /// <summary>
        /// Raises the MemFullChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemFullChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemFullChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MemFullChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemFullChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemFullChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MemFull property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMemFull(object sender, System.EventArgs eventArgs)
        {
            this.MemFull = null;
        }
        
        private static ITypedElement RetrieveMaxNumRcdReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("MaxNumRcd")));
        }
        
        /// <summary>
        /// Raises the MaxNumRcdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumRcdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumRcdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxNumRcdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxNumRcdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxNumRcdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaxNumRcd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaxNumRcd(object sender, System.EventArgs eventArgs)
        {
            this.MaxNumRcd = null;
        }
        
        private static ITypedElement RetrieveReTrgModReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("ReTrgMod")));
        }
        
        /// <summary>
        /// Raises the ReTrgModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReTrgModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReTrgModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReTrgModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReTrgModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReTrgModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReTrgMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReTrgMod(object sender, System.EventArgs eventArgs)
        {
            this.ReTrgMod = null;
        }
        
        private static ITypedElement RetrievePerTrgTmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("PerTrgTms")));
        }
        
        /// <summary>
        /// Raises the PerTrgTmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerTrgTmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerTrgTmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PerTrgTmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerTrgTmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerTrgTmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PerTrgTms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPerTrgTms(object sender, System.EventArgs eventArgs)
        {
            this.PerTrgTms = null;
        }
        
        private static ITypedElement RetrieveExclTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("ExclTmms")));
        }
        
        /// <summary>
        /// Raises the ExclTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExclTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExclTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExclTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExclTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExclTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ExclTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExclTmms(object sender, System.EventArgs eventArgs)
        {
            this.ExclTmms = null;
        }
        
        private static ITypedElement RetrieveOpModReference()
        {
            return ((ITypedElement)(((ModelElement)(RDRE.ClassInstance)).Resolve("OpMod")));
        }
        
        /// <summary>
        /// Raises the OpModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpMod(object sender, System.EventArgs eventArgs)
        {
            this.OpMod = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "RCDTRG"))
            {
                this.RcdTrg = ((ISPC)(value));
                return;
            }
            if ((feature == "MEMRS"))
            {
                this.MemRs = ((ISPC)(value));
                return;
            }
            if ((feature == "MEMCLR"))
            {
                this.MemClr = ((ISPC)(value));
                return;
            }
            if ((feature == "RCDMADE"))
            {
                this.RcdMade = ((ISPS)(value));
                return;
            }
            if ((feature == "FLTNUM"))
            {
                this.FltNum = ((IINS)(value));
                return;
            }
            if ((feature == "GRIFLTNUM"))
            {
                this.GriFltNum = ((IINS)(value));
                return;
            }
            if ((feature == "RCDSTR"))
            {
                this.RcdStr = ((ISPS)(value));
                return;
            }
            if ((feature == "MEMUSED"))
            {
                this.MemUsed = ((IINS)(value));
                return;
            }
            if ((feature == "TRGMOD"))
            {
                this.TrgMod = ((IING)(value));
                return;
            }
            if ((feature == "LEVMOD"))
            {
                this.LevMod = ((IING)(value));
                return;
            }
            if ((feature == "PRETMMS"))
            {
                this.PreTmms = ((IING)(value));
                return;
            }
            if ((feature == "PSTTMMS"))
            {
                this.PstTmms = ((IING)(value));
                return;
            }
            if ((feature == "MEMFULL"))
            {
                this.MemFull = ((IING)(value));
                return;
            }
            if ((feature == "MAXNUMRCD"))
            {
                this.MaxNumRcd = ((IING)(value));
                return;
            }
            if ((feature == "RETRGMOD"))
            {
                this.ReTrgMod = ((IING)(value));
                return;
            }
            if ((feature == "PERTRGTMS"))
            {
                this.PerTrgTms = ((IING)(value));
                return;
            }
            if ((feature == "EXCLTMMS"))
            {
                this.ExclTmms = ((IING)(value));
                return;
            }
            if ((feature == "OPMOD"))
            {
                this.OpMod = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "RcdTrg"))
            {
                return new RcdTrgProxy(this);
            }
            if ((attribute == "MemRs"))
            {
                return new MemRsProxy(this);
            }
            if ((attribute == "MemClr"))
            {
                return new MemClrProxy(this);
            }
            if ((attribute == "RcdMade"))
            {
                return new RcdMadeProxy(this);
            }
            if ((attribute == "FltNum"))
            {
                return new FltNumProxy(this);
            }
            if ((attribute == "GriFltNum"))
            {
                return new GriFltNumProxy(this);
            }
            if ((attribute == "RcdStr"))
            {
                return new RcdStrProxy(this);
            }
            if ((attribute == "MemUsed"))
            {
                return new MemUsedProxy(this);
            }
            if ((attribute == "TrgMod"))
            {
                return new TrgModProxy(this);
            }
            if ((attribute == "LevMod"))
            {
                return new LevModProxy(this);
            }
            if ((attribute == "PreTmms"))
            {
                return new PreTmmsProxy(this);
            }
            if ((attribute == "PstTmms"))
            {
                return new PstTmmsProxy(this);
            }
            if ((attribute == "MemFull"))
            {
                return new MemFullProxy(this);
            }
            if ((attribute == "MaxNumRcd"))
            {
                return new MaxNumRcdProxy(this);
            }
            if ((attribute == "ReTrgMod"))
            {
                return new ReTrgModProxy(this);
            }
            if ((attribute == "PerTrgTms"))
            {
                return new PerTrgTmsProxy(this);
            }
            if ((attribute == "ExclTmms"))
            {
                return new ExclTmmsProxy(this);
            }
            if ((attribute == "OpMod"))
            {
                return new OpModProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "RcdTrg"))
            {
                return new RcdTrgProxy(this);
            }
            if ((reference == "MemRs"))
            {
                return new MemRsProxy(this);
            }
            if ((reference == "MemClr"))
            {
                return new MemClrProxy(this);
            }
            if ((reference == "RcdMade"))
            {
                return new RcdMadeProxy(this);
            }
            if ((reference == "FltNum"))
            {
                return new FltNumProxy(this);
            }
            if ((reference == "GriFltNum"))
            {
                return new GriFltNumProxy(this);
            }
            if ((reference == "RcdStr"))
            {
                return new RcdStrProxy(this);
            }
            if ((reference == "MemUsed"))
            {
                return new MemUsedProxy(this);
            }
            if ((reference == "TrgMod"))
            {
                return new TrgModProxy(this);
            }
            if ((reference == "LevMod"))
            {
                return new LevModProxy(this);
            }
            if ((reference == "PreTmms"))
            {
                return new PreTmmsProxy(this);
            }
            if ((reference == "PstTmms"))
            {
                return new PstTmmsProxy(this);
            }
            if ((reference == "MemFull"))
            {
                return new MemFullProxy(this);
            }
            if ((reference == "MaxNumRcd"))
            {
                return new MaxNumRcdProxy(this);
            }
            if ((reference == "ReTrgMod"))
            {
                return new ReTrgModProxy(this);
            }
            if ((reference == "PerTrgTms"))
            {
                return new PerTrgTmsProxy(this);
            }
            if ((reference == "ExclTmms"))
            {
                return new ExclTmmsProxy(this);
            }
            if ((reference == "OpMod"))
            {
                return new OpModProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RDRE")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RDRE class
        /// </summary>
        public class RDREReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RDRE _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RDREReferencedElementsCollection(RDRE parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RcdTrg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MemRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MemClr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RcdMade != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FltNum != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GriFltNum != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RcdStr != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MemUsed != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TrgMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LevMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PreTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PstTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MemFull != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaxNumRcd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReTrgMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PerTrgTms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ExclTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpMod != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.RcdTrgChanged += this.PropagateValueChanges;
                this._parent.MemRsChanged += this.PropagateValueChanges;
                this._parent.MemClrChanged += this.PropagateValueChanges;
                this._parent.RcdMadeChanged += this.PropagateValueChanges;
                this._parent.FltNumChanged += this.PropagateValueChanges;
                this._parent.GriFltNumChanged += this.PropagateValueChanges;
                this._parent.RcdStrChanged += this.PropagateValueChanges;
                this._parent.MemUsedChanged += this.PropagateValueChanges;
                this._parent.TrgModChanged += this.PropagateValueChanges;
                this._parent.LevModChanged += this.PropagateValueChanges;
                this._parent.PreTmmsChanged += this.PropagateValueChanges;
                this._parent.PstTmmsChanged += this.PropagateValueChanges;
                this._parent.MemFullChanged += this.PropagateValueChanges;
                this._parent.MaxNumRcdChanged += this.PropagateValueChanges;
                this._parent.ReTrgModChanged += this.PropagateValueChanges;
                this._parent.PerTrgTmsChanged += this.PropagateValueChanges;
                this._parent.ExclTmmsChanged += this.PropagateValueChanges;
                this._parent.OpModChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.RcdTrgChanged -= this.PropagateValueChanges;
                this._parent.MemRsChanged -= this.PropagateValueChanges;
                this._parent.MemClrChanged -= this.PropagateValueChanges;
                this._parent.RcdMadeChanged -= this.PropagateValueChanges;
                this._parent.FltNumChanged -= this.PropagateValueChanges;
                this._parent.GriFltNumChanged -= this.PropagateValueChanges;
                this._parent.RcdStrChanged -= this.PropagateValueChanges;
                this._parent.MemUsedChanged -= this.PropagateValueChanges;
                this._parent.TrgModChanged -= this.PropagateValueChanges;
                this._parent.LevModChanged -= this.PropagateValueChanges;
                this._parent.PreTmmsChanged -= this.PropagateValueChanges;
                this._parent.PstTmmsChanged -= this.PropagateValueChanges;
                this._parent.MemFullChanged -= this.PropagateValueChanges;
                this._parent.MaxNumRcdChanged -= this.PropagateValueChanges;
                this._parent.ReTrgModChanged -= this.PropagateValueChanges;
                this._parent.PerTrgTmsChanged -= this.PropagateValueChanges;
                this._parent.ExclTmmsChanged -= this.PropagateValueChanges;
                this._parent.OpModChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.RcdTrg == null))
                {
                    ISPC rcdTrgCasted = item.As<ISPC>();
                    if ((rcdTrgCasted != null))
                    {
                        this._parent.RcdTrg = rcdTrgCasted;
                        return;
                    }
                }
                if ((this._parent.MemRs == null))
                {
                    ISPC memRsCasted = item.As<ISPC>();
                    if ((memRsCasted != null))
                    {
                        this._parent.MemRs = memRsCasted;
                        return;
                    }
                }
                if ((this._parent.MemClr == null))
                {
                    ISPC memClrCasted = item.As<ISPC>();
                    if ((memClrCasted != null))
                    {
                        this._parent.MemClr = memClrCasted;
                        return;
                    }
                }
                if ((this._parent.RcdMade == null))
                {
                    ISPS rcdMadeCasted = item.As<ISPS>();
                    if ((rcdMadeCasted != null))
                    {
                        this._parent.RcdMade = rcdMadeCasted;
                        return;
                    }
                }
                if ((this._parent.FltNum == null))
                {
                    IINS fltNumCasted = item.As<IINS>();
                    if ((fltNumCasted != null))
                    {
                        this._parent.FltNum = fltNumCasted;
                        return;
                    }
                }
                if ((this._parent.GriFltNum == null))
                {
                    IINS griFltNumCasted = item.As<IINS>();
                    if ((griFltNumCasted != null))
                    {
                        this._parent.GriFltNum = griFltNumCasted;
                        return;
                    }
                }
                if ((this._parent.RcdStr == null))
                {
                    ISPS rcdStrCasted = item.As<ISPS>();
                    if ((rcdStrCasted != null))
                    {
                        this._parent.RcdStr = rcdStrCasted;
                        return;
                    }
                }
                if ((this._parent.MemUsed == null))
                {
                    IINS memUsedCasted = item.As<IINS>();
                    if ((memUsedCasted != null))
                    {
                        this._parent.MemUsed = memUsedCasted;
                        return;
                    }
                }
                if ((this._parent.TrgMod == null))
                {
                    IING trgModCasted = item.As<IING>();
                    if ((trgModCasted != null))
                    {
                        this._parent.TrgMod = trgModCasted;
                        return;
                    }
                }
                if ((this._parent.LevMod == null))
                {
                    IING levModCasted = item.As<IING>();
                    if ((levModCasted != null))
                    {
                        this._parent.LevMod = levModCasted;
                        return;
                    }
                }
                if ((this._parent.PreTmms == null))
                {
                    IING preTmmsCasted = item.As<IING>();
                    if ((preTmmsCasted != null))
                    {
                        this._parent.PreTmms = preTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.PstTmms == null))
                {
                    IING pstTmmsCasted = item.As<IING>();
                    if ((pstTmmsCasted != null))
                    {
                        this._parent.PstTmms = pstTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.MemFull == null))
                {
                    IING memFullCasted = item.As<IING>();
                    if ((memFullCasted != null))
                    {
                        this._parent.MemFull = memFullCasted;
                        return;
                    }
                }
                if ((this._parent.MaxNumRcd == null))
                {
                    IING maxNumRcdCasted = item.As<IING>();
                    if ((maxNumRcdCasted != null))
                    {
                        this._parent.MaxNumRcd = maxNumRcdCasted;
                        return;
                    }
                }
                if ((this._parent.ReTrgMod == null))
                {
                    IING reTrgModCasted = item.As<IING>();
                    if ((reTrgModCasted != null))
                    {
                        this._parent.ReTrgMod = reTrgModCasted;
                        return;
                    }
                }
                if ((this._parent.PerTrgTms == null))
                {
                    IING perTrgTmsCasted = item.As<IING>();
                    if ((perTrgTmsCasted != null))
                    {
                        this._parent.PerTrgTms = perTrgTmsCasted;
                        return;
                    }
                }
                if ((this._parent.ExclTmms == null))
                {
                    IING exclTmmsCasted = item.As<IING>();
                    if ((exclTmmsCasted != null))
                    {
                        this._parent.ExclTmms = exclTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.OpMod == null))
                {
                    IING opModCasted = item.As<IING>();
                    if ((opModCasted != null))
                    {
                        this._parent.OpMod = opModCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.RcdTrg = null;
                this._parent.MemRs = null;
                this._parent.MemClr = null;
                this._parent.RcdMade = null;
                this._parent.FltNum = null;
                this._parent.GriFltNum = null;
                this._parent.RcdStr = null;
                this._parent.MemUsed = null;
                this._parent.TrgMod = null;
                this._parent.LevMod = null;
                this._parent.PreTmms = null;
                this._parent.PstTmms = null;
                this._parent.MemFull = null;
                this._parent.MaxNumRcd = null;
                this._parent.ReTrgMod = null;
                this._parent.PerTrgTms = null;
                this._parent.ExclTmms = null;
                this._parent.OpMod = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.RcdTrg))
                {
                    return true;
                }
                if ((item == this._parent.MemRs))
                {
                    return true;
                }
                if ((item == this._parent.MemClr))
                {
                    return true;
                }
                if ((item == this._parent.RcdMade))
                {
                    return true;
                }
                if ((item == this._parent.FltNum))
                {
                    return true;
                }
                if ((item == this._parent.GriFltNum))
                {
                    return true;
                }
                if ((item == this._parent.RcdStr))
                {
                    return true;
                }
                if ((item == this._parent.MemUsed))
                {
                    return true;
                }
                if ((item == this._parent.TrgMod))
                {
                    return true;
                }
                if ((item == this._parent.LevMod))
                {
                    return true;
                }
                if ((item == this._parent.PreTmms))
                {
                    return true;
                }
                if ((item == this._parent.PstTmms))
                {
                    return true;
                }
                if ((item == this._parent.MemFull))
                {
                    return true;
                }
                if ((item == this._parent.MaxNumRcd))
                {
                    return true;
                }
                if ((item == this._parent.ReTrgMod))
                {
                    return true;
                }
                if ((item == this._parent.PerTrgTms))
                {
                    return true;
                }
                if ((item == this._parent.ExclTmms))
                {
                    return true;
                }
                if ((item == this._parent.OpMod))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RcdTrg != null))
                {
                    array[arrayIndex] = this._parent.RcdTrg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MemRs != null))
                {
                    array[arrayIndex] = this._parent.MemRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MemClr != null))
                {
                    array[arrayIndex] = this._parent.MemClr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RcdMade != null))
                {
                    array[arrayIndex] = this._parent.RcdMade;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FltNum != null))
                {
                    array[arrayIndex] = this._parent.FltNum;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GriFltNum != null))
                {
                    array[arrayIndex] = this._parent.GriFltNum;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RcdStr != null))
                {
                    array[arrayIndex] = this._parent.RcdStr;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MemUsed != null))
                {
                    array[arrayIndex] = this._parent.MemUsed;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TrgMod != null))
                {
                    array[arrayIndex] = this._parent.TrgMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LevMod != null))
                {
                    array[arrayIndex] = this._parent.LevMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PreTmms != null))
                {
                    array[arrayIndex] = this._parent.PreTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PstTmms != null))
                {
                    array[arrayIndex] = this._parent.PstTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MemFull != null))
                {
                    array[arrayIndex] = this._parent.MemFull;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaxNumRcd != null))
                {
                    array[arrayIndex] = this._parent.MaxNumRcd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReTrgMod != null))
                {
                    array[arrayIndex] = this._parent.ReTrgMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PerTrgTms != null))
                {
                    array[arrayIndex] = this._parent.PerTrgTms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ExclTmms != null))
                {
                    array[arrayIndex] = this._parent.ExclTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpMod != null))
                {
                    array[arrayIndex] = this._parent.OpMod;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.RcdTrg == item))
                {
                    this._parent.RcdTrg = null;
                    return true;
                }
                if ((this._parent.MemRs == item))
                {
                    this._parent.MemRs = null;
                    return true;
                }
                if ((this._parent.MemClr == item))
                {
                    this._parent.MemClr = null;
                    return true;
                }
                if ((this._parent.RcdMade == item))
                {
                    this._parent.RcdMade = null;
                    return true;
                }
                if ((this._parent.FltNum == item))
                {
                    this._parent.FltNum = null;
                    return true;
                }
                if ((this._parent.GriFltNum == item))
                {
                    this._parent.GriFltNum = null;
                    return true;
                }
                if ((this._parent.RcdStr == item))
                {
                    this._parent.RcdStr = null;
                    return true;
                }
                if ((this._parent.MemUsed == item))
                {
                    this._parent.MemUsed = null;
                    return true;
                }
                if ((this._parent.TrgMod == item))
                {
                    this._parent.TrgMod = null;
                    return true;
                }
                if ((this._parent.LevMod == item))
                {
                    this._parent.LevMod = null;
                    return true;
                }
                if ((this._parent.PreTmms == item))
                {
                    this._parent.PreTmms = null;
                    return true;
                }
                if ((this._parent.PstTmms == item))
                {
                    this._parent.PstTmms = null;
                    return true;
                }
                if ((this._parent.MemFull == item))
                {
                    this._parent.MemFull = null;
                    return true;
                }
                if ((this._parent.MaxNumRcd == item))
                {
                    this._parent.MaxNumRcd = null;
                    return true;
                }
                if ((this._parent.ReTrgMod == item))
                {
                    this._parent.ReTrgMod = null;
                    return true;
                }
                if ((this._parent.PerTrgTms == item))
                {
                    this._parent.PerTrgTms = null;
                    return true;
                }
                if ((this._parent.ExclTmms == item))
                {
                    this._parent.ExclTmms = null;
                    return true;
                }
                if ((this._parent.OpMod == item))
                {
                    this._parent.OpMod = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.RcdTrg).Concat(this._parent.MemRs).Concat(this._parent.MemClr).Concat(this._parent.RcdMade).Concat(this._parent.FltNum).Concat(this._parent.GriFltNum).Concat(this._parent.RcdStr).Concat(this._parent.MemUsed).Concat(this._parent.TrgMod).Concat(this._parent.LevMod).Concat(this._parent.PreTmms).Concat(this._parent.PstTmms).Concat(this._parent.MemFull).Concat(this._parent.MaxNumRcd).Concat(this._parent.ReTrgMod).Concat(this._parent.PerTrgTms).Concat(this._parent.ExclTmms).Concat(this._parent.OpMod).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRDRE, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRDRE modelElement) : 
                    base(modelElement, "OpCntRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RcdTrg property
        /// </summary>
        private sealed class RcdTrgProxy : ModelPropertyChange<IRDRE, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RcdTrgProxy(IRDRE modelElement) : 
                    base(modelElement, "RcdTrg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.RcdTrg;
                }
                set
                {
                    this.ModelElement.RcdTrg = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MemRs property
        /// </summary>
        private sealed class MemRsProxy : ModelPropertyChange<IRDRE, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MemRsProxy(IRDRE modelElement) : 
                    base(modelElement, "MemRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.MemRs;
                }
                set
                {
                    this.ModelElement.MemRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MemClr property
        /// </summary>
        private sealed class MemClrProxy : ModelPropertyChange<IRDRE, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MemClrProxy(IRDRE modelElement) : 
                    base(modelElement, "MemClr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.MemClr;
                }
                set
                {
                    this.ModelElement.MemClr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RcdMade property
        /// </summary>
        private sealed class RcdMadeProxy : ModelPropertyChange<IRDRE, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RcdMadeProxy(IRDRE modelElement) : 
                    base(modelElement, "RcdMade")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.RcdMade;
                }
                set
                {
                    this.ModelElement.RcdMade = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FltNum property
        /// </summary>
        private sealed class FltNumProxy : ModelPropertyChange<IRDRE, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FltNumProxy(IRDRE modelElement) : 
                    base(modelElement, "FltNum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.FltNum;
                }
                set
                {
                    this.ModelElement.FltNum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GriFltNum property
        /// </summary>
        private sealed class GriFltNumProxy : ModelPropertyChange<IRDRE, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GriFltNumProxy(IRDRE modelElement) : 
                    base(modelElement, "GriFltNum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.GriFltNum;
                }
                set
                {
                    this.ModelElement.GriFltNum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RcdStr property
        /// </summary>
        private sealed class RcdStrProxy : ModelPropertyChange<IRDRE, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RcdStrProxy(IRDRE modelElement) : 
                    base(modelElement, "RcdStr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.RcdStr;
                }
                set
                {
                    this.ModelElement.RcdStr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MemUsed property
        /// </summary>
        private sealed class MemUsedProxy : ModelPropertyChange<IRDRE, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MemUsedProxy(IRDRE modelElement) : 
                    base(modelElement, "MemUsed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.MemUsed;
                }
                set
                {
                    this.ModelElement.MemUsed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrgMod property
        /// </summary>
        private sealed class TrgModProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrgModProxy(IRDRE modelElement) : 
                    base(modelElement, "TrgMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.TrgMod;
                }
                set
                {
                    this.ModelElement.TrgMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LevMod property
        /// </summary>
        private sealed class LevModProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LevModProxy(IRDRE modelElement) : 
                    base(modelElement, "LevMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.LevMod;
                }
                set
                {
                    this.ModelElement.LevMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PreTmms property
        /// </summary>
        private sealed class PreTmmsProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreTmmsProxy(IRDRE modelElement) : 
                    base(modelElement, "PreTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PreTmms;
                }
                set
                {
                    this.ModelElement.PreTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PstTmms property
        /// </summary>
        private sealed class PstTmmsProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PstTmmsProxy(IRDRE modelElement) : 
                    base(modelElement, "PstTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PstTmms;
                }
                set
                {
                    this.ModelElement.PstTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MemFull property
        /// </summary>
        private sealed class MemFullProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MemFullProxy(IRDRE modelElement) : 
                    base(modelElement, "MemFull")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MemFull;
                }
                set
                {
                    this.ModelElement.MemFull = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaxNumRcd property
        /// </summary>
        private sealed class MaxNumRcdProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxNumRcdProxy(IRDRE modelElement) : 
                    base(modelElement, "MaxNumRcd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.MaxNumRcd;
                }
                set
                {
                    this.ModelElement.MaxNumRcd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReTrgMod property
        /// </summary>
        private sealed class ReTrgModProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReTrgModProxy(IRDRE modelElement) : 
                    base(modelElement, "ReTrgMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ReTrgMod;
                }
                set
                {
                    this.ModelElement.ReTrgMod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PerTrgTms property
        /// </summary>
        private sealed class PerTrgTmsProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PerTrgTmsProxy(IRDRE modelElement) : 
                    base(modelElement, "PerTrgTms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PerTrgTms;
                }
                set
                {
                    this.ModelElement.PerTrgTms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ExclTmms property
        /// </summary>
        private sealed class ExclTmmsProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExclTmmsProxy(IRDRE modelElement) : 
                    base(modelElement, "ExclTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.ExclTmms;
                }
                set
                {
                    this.ModelElement.ExclTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpMod property
        /// </summary>
        private sealed class OpModProxy : ModelPropertyChange<IRDRE, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpModProxy(IRDRE modelElement) : 
                    base(modelElement, "OpMod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.OpMod;
                }
                set
                {
                    this.ModelElement.OpMod = value;
                }
            }
        }
    }
}

