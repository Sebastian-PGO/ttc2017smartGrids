//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RREC class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RREC")]
    public partial class RREC : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRREC, IModelElement
    {
        
        private static Lazy<ITypedElement> _opCntRsReference = new Lazy<ITypedElement>(RetrieveOpCntRsReference);
        
        /// <summary>
        /// The backing field for the OpCntRs property
        /// </summary>
        private IINC _opCntRs;
        
        private static Lazy<ITypedElement> _blkRecReference = new Lazy<ITypedElement>(RetrieveBlkRecReference);
        
        /// <summary>
        /// The backing field for the BlkRec property
        /// </summary>
        private ISPC _blkRec;
        
        private static Lazy<ITypedElement> _chkRecReference = new Lazy<ITypedElement>(RetrieveChkRecReference);
        
        /// <summary>
        /// The backing field for the ChkRec property
        /// </summary>
        private ISPC _chkRec;
        
        private static Lazy<ITypedElement> _autoReference = new Lazy<ITypedElement>(RetrieveAutoReference);
        
        /// <summary>
        /// The backing field for the Auto property
        /// </summary>
        private ISPS _auto;
        
        private static Lazy<ITypedElement> _opReference = new Lazy<ITypedElement>(RetrieveOpReference);
        
        /// <summary>
        /// The backing field for the Op property
        /// </summary>
        private IACT _op;
        
        private static Lazy<ITypedElement> _autoRecStReference = new Lazy<ITypedElement>(RetrieveAutoRecStReference);
        
        /// <summary>
        /// The backing field for the AutoRecSt property
        /// </summary>
        private IINS _autoRecSt;
        
        private static Lazy<ITypedElement> _rec1TmmsReference = new Lazy<ITypedElement>(RetrieveRec1TmmsReference);
        
        /// <summary>
        /// The backing field for the Rec1Tmms property
        /// </summary>
        private IING _rec1Tmms;
        
        private static Lazy<ITypedElement> _rec2TmmsReference = new Lazy<ITypedElement>(RetrieveRec2TmmsReference);
        
        /// <summary>
        /// The backing field for the Rec2Tmms property
        /// </summary>
        private IING _rec2Tmms;
        
        private static Lazy<ITypedElement> _rec3TmmsReference = new Lazy<ITypedElement>(RetrieveRec3TmmsReference);
        
        /// <summary>
        /// The backing field for the Rec3Tmms property
        /// </summary>
        private IING _rec3Tmms;
        
        private static Lazy<ITypedElement> _plsTmmsReference = new Lazy<ITypedElement>(RetrievePlsTmmsReference);
        
        /// <summary>
        /// The backing field for the PlsTmms property
        /// </summary>
        private IING _plsTmms;
        
        private static Lazy<ITypedElement> _rclTmmsReference = new Lazy<ITypedElement>(RetrieveRclTmmsReference);
        
        /// <summary>
        /// The backing field for the RclTmms property
        /// </summary>
        private IING _rclTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OpCntRs property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINC OpCntRs
        {
            get
            {
                return this._opCntRs;
            }
            set
            {
                if ((this._opCntRs != value))
                {
                    IINC old = this._opCntRs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpCntRsChanging(e);
                    this.OnPropertyChanging("OpCntRs", e, _opCntRsReference);
                    this._opCntRs = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpCntRs;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpCntRs;
                    }
                    this.OnOpCntRsChanged(e);
                    this.OnPropertyChanged("OpCntRs", e, _opCntRsReference);
                }
            }
        }
        
        /// <summary>
        /// The BlkRec property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC BlkRec
        {
            get
            {
                return this._blkRec;
            }
            set
            {
                if ((this._blkRec != value))
                {
                    ISPC old = this._blkRec;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlkRecChanging(e);
                    this.OnPropertyChanging("BlkRec", e, _blkRecReference);
                    this._blkRec = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBlkRec;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBlkRec;
                    }
                    this.OnBlkRecChanged(e);
                    this.OnPropertyChanged("BlkRec", e, _blkRecReference);
                }
            }
        }
        
        /// <summary>
        /// The ChkRec property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC ChkRec
        {
            get
            {
                return this._chkRec;
            }
            set
            {
                if ((this._chkRec != value))
                {
                    ISPC old = this._chkRec;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChkRecChanging(e);
                    this.OnPropertyChanging("ChkRec", e, _chkRecReference);
                    this._chkRec = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetChkRec;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetChkRec;
                    }
                    this.OnChkRecChanged(e);
                    this.OnPropertyChanged("ChkRec", e, _chkRecReference);
                }
            }
        }
        
        /// <summary>
        /// The Auto property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Auto
        {
            get
            {
                return this._auto;
            }
            set
            {
                if ((this._auto != value))
                {
                    ISPS old = this._auto;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoChanging(e);
                    this.OnPropertyChanging("Auto", e, _autoReference);
                    this._auto = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAuto;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAuto;
                    }
                    this.OnAutoChanged(e);
                    this.OnPropertyChanged("Auto", e, _autoReference);
                }
            }
        }
        
        /// <summary>
        /// The Op property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IACT Op
        {
            get
            {
                return this._op;
            }
            set
            {
                if ((this._op != value))
                {
                    IACT old = this._op;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpChanging(e);
                    this.OnPropertyChanging("Op", e, _opReference);
                    this._op = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOp;
                    }
                    this.OnOpChanged(e);
                    this.OnPropertyChanged("Op", e, _opReference);
                }
            }
        }
        
        /// <summary>
        /// The AutoRecSt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IINS AutoRecSt
        {
            get
            {
                return this._autoRecSt;
            }
            set
            {
                if ((this._autoRecSt != value))
                {
                    IINS old = this._autoRecSt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoRecStChanging(e);
                    this.OnPropertyChanging("AutoRecSt", e, _autoRecStReference);
                    this._autoRecSt = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAutoRecSt;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAutoRecSt;
                    }
                    this.OnAutoRecStChanged(e);
                    this.OnPropertyChanged("AutoRecSt", e, _autoRecStReference);
                }
            }
        }
        
        /// <summary>
        /// The Rec1Tmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING Rec1Tmms
        {
            get
            {
                return this._rec1Tmms;
            }
            set
            {
                if ((this._rec1Tmms != value))
                {
                    IING old = this._rec1Tmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRec1TmmsChanging(e);
                    this.OnPropertyChanging("Rec1Tmms", e, _rec1TmmsReference);
                    this._rec1Tmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRec1Tmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRec1Tmms;
                    }
                    this.OnRec1TmmsChanged(e);
                    this.OnPropertyChanged("Rec1Tmms", e, _rec1TmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The Rec2Tmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING Rec2Tmms
        {
            get
            {
                return this._rec2Tmms;
            }
            set
            {
                if ((this._rec2Tmms != value))
                {
                    IING old = this._rec2Tmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRec2TmmsChanging(e);
                    this.OnPropertyChanging("Rec2Tmms", e, _rec2TmmsReference);
                    this._rec2Tmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRec2Tmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRec2Tmms;
                    }
                    this.OnRec2TmmsChanged(e);
                    this.OnPropertyChanged("Rec2Tmms", e, _rec2TmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The Rec3Tmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING Rec3Tmms
        {
            get
            {
                return this._rec3Tmms;
            }
            set
            {
                if ((this._rec3Tmms != value))
                {
                    IING old = this._rec3Tmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRec3TmmsChanging(e);
                    this.OnPropertyChanging("Rec3Tmms", e, _rec3TmmsReference);
                    this._rec3Tmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRec3Tmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRec3Tmms;
                    }
                    this.OnRec3TmmsChanged(e);
                    this.OnPropertyChanged("Rec3Tmms", e, _rec3TmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The PlsTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PlsTmms
        {
            get
            {
                return this._plsTmms;
            }
            set
            {
                if ((this._plsTmms != value))
                {
                    IING old = this._plsTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlsTmmsChanging(e);
                    this.OnPropertyChanging("PlsTmms", e, _plsTmmsReference);
                    this._plsTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPlsTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPlsTmms;
                    }
                    this.OnPlsTmmsChanged(e);
                    this.OnPropertyChanged("PlsTmms", e, _plsTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// The RclTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING RclTmms
        {
            get
            {
                return this._rclTmms;
            }
            set
            {
                if ((this._rclTmms != value))
                {
                    IING old = this._rclTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRclTmmsChanging(e);
                    this.OnPropertyChanging("RclTmms", e, _rclTmmsReference);
                    this._rclTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRclTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRclTmms;
                    }
                    this.OnRclTmmsChanged(e);
                    this.OnPropertyChanged("RclTmms", e, _rclTmmsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RRECReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RREC")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpCntRs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanging;
        
        /// <summary>
        /// Gets fired when the OpCntRs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpCntRsChanged;
        
        /// <summary>
        /// Gets fired before the BlkRec property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkRecChanging;
        
        /// <summary>
        /// Gets fired when the BlkRec property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlkRecChanged;
        
        /// <summary>
        /// Gets fired before the ChkRec property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChkRecChanging;
        
        /// <summary>
        /// Gets fired when the ChkRec property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChkRecChanged;
        
        /// <summary>
        /// Gets fired before the Auto property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoChanging;
        
        /// <summary>
        /// Gets fired when the Auto property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoChanged;
        
        /// <summary>
        /// Gets fired before the Op property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanging;
        
        /// <summary>
        /// Gets fired when the Op property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpChanged;
        
        /// <summary>
        /// Gets fired before the AutoRecSt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoRecStChanging;
        
        /// <summary>
        /// Gets fired when the AutoRecSt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoRecStChanged;
        
        /// <summary>
        /// Gets fired before the Rec1Tmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec1TmmsChanging;
        
        /// <summary>
        /// Gets fired when the Rec1Tmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec1TmmsChanged;
        
        /// <summary>
        /// Gets fired before the Rec2Tmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec2TmmsChanging;
        
        /// <summary>
        /// Gets fired when the Rec2Tmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec2TmmsChanged;
        
        /// <summary>
        /// Gets fired before the Rec3Tmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec3TmmsChanging;
        
        /// <summary>
        /// Gets fired when the Rec3Tmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Rec3TmmsChanged;
        
        /// <summary>
        /// Gets fired before the PlsTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlsTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PlsTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlsTmmsChanged;
        
        /// <summary>
        /// Gets fired before the RclTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RclTmmsChanging;
        
        /// <summary>
        /// Gets fired when the RclTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RclTmmsChanged;
        
        private static ITypedElement RetrieveOpCntRsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("OpCntRs")));
        }
        
        /// <summary>
        /// Raises the OpCntRsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpCntRsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpCntRsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpCntRsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpCntRs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpCntRs(object sender, System.EventArgs eventArgs)
        {
            this.OpCntRs = null;
        }
        
        private static ITypedElement RetrieveBlkRecReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("BlkRec")));
        }
        
        /// <summary>
        /// Raises the BlkRecChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkRecChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkRecChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlkRecChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlkRecChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlkRecChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BlkRec property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBlkRec(object sender, System.EventArgs eventArgs)
        {
            this.BlkRec = null;
        }
        
        private static ITypedElement RetrieveChkRecReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("ChkRec")));
        }
        
        /// <summary>
        /// Raises the ChkRecChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChkRecChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChkRecChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChkRecChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChkRecChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChkRecChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChkRec property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChkRec(object sender, System.EventArgs eventArgs)
        {
            this.ChkRec = null;
        }
        
        private static ITypedElement RetrieveAutoReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("Auto")));
        }
        
        /// <summary>
        /// Raises the AutoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Auto property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAuto(object sender, System.EventArgs eventArgs)
        {
            this.Auto = null;
        }
        
        private static ITypedElement RetrieveOpReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("Op")));
        }
        
        /// <summary>
        /// Raises the OpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Op property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOp(object sender, System.EventArgs eventArgs)
        {
            this.Op = null;
        }
        
        private static ITypedElement RetrieveAutoRecStReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("AutoRecSt")));
        }
        
        /// <summary>
        /// Raises the AutoRecStChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoRecStChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoRecStChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoRecStChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoRecStChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoRecStChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AutoRecSt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAutoRecSt(object sender, System.EventArgs eventArgs)
        {
            this.AutoRecSt = null;
        }
        
        private static ITypedElement RetrieveRec1TmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("Rec1Tmms")));
        }
        
        /// <summary>
        /// Raises the Rec1TmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec1TmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec1TmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Rec1TmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec1TmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec1TmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rec1Tmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRec1Tmms(object sender, System.EventArgs eventArgs)
        {
            this.Rec1Tmms = null;
        }
        
        private static ITypedElement RetrieveRec2TmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("Rec2Tmms")));
        }
        
        /// <summary>
        /// Raises the Rec2TmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec2TmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec2TmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Rec2TmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec2TmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec2TmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rec2Tmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRec2Tmms(object sender, System.EventArgs eventArgs)
        {
            this.Rec2Tmms = null;
        }
        
        private static ITypedElement RetrieveRec3TmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("Rec3Tmms")));
        }
        
        /// <summary>
        /// Raises the Rec3TmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec3TmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec3TmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Rec3TmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRec3TmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Rec3TmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rec3Tmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRec3Tmms(object sender, System.EventArgs eventArgs)
        {
            this.Rec3Tmms = null;
        }
        
        private static ITypedElement RetrievePlsTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("PlsTmms")));
        }
        
        /// <summary>
        /// Raises the PlsTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlsTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlsTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlsTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlsTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlsTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PlsTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPlsTmms(object sender, System.EventArgs eventArgs)
        {
            this.PlsTmms = null;
        }
        
        private static ITypedElement RetrieveRclTmmsReference()
        {
            return ((ITypedElement)(((ModelElement)(RREC.ClassInstance)).Resolve("RclTmms")));
        }
        
        /// <summary>
        /// Raises the RclTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRclTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RclTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RclTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRclTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RclTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RclTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRclTmms(object sender, System.EventArgs eventArgs)
        {
            this.RclTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPCNTRS"))
            {
                this.OpCntRs = ((IINC)(value));
                return;
            }
            if ((feature == "BLKREC"))
            {
                this.BlkRec = ((ISPC)(value));
                return;
            }
            if ((feature == "CHKREC"))
            {
                this.ChkRec = ((ISPC)(value));
                return;
            }
            if ((feature == "AUTO"))
            {
                this.Auto = ((ISPS)(value));
                return;
            }
            if ((feature == "OP"))
            {
                this.Op = ((IACT)(value));
                return;
            }
            if ((feature == "AUTORECST"))
            {
                this.AutoRecSt = ((IINS)(value));
                return;
            }
            if ((feature == "REC1TMMS"))
            {
                this.Rec1Tmms = ((IING)(value));
                return;
            }
            if ((feature == "REC2TMMS"))
            {
                this.Rec2Tmms = ((IING)(value));
                return;
            }
            if ((feature == "REC3TMMS"))
            {
                this.Rec3Tmms = ((IING)(value));
                return;
            }
            if ((feature == "PLSTMMS"))
            {
                this.PlsTmms = ((IING)(value));
                return;
            }
            if ((feature == "RCLTMMS"))
            {
                this.RclTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((attribute == "BlkRec"))
            {
                return new BlkRecProxy(this);
            }
            if ((attribute == "ChkRec"))
            {
                return new ChkRecProxy(this);
            }
            if ((attribute == "Auto"))
            {
                return new AutoProxy(this);
            }
            if ((attribute == "Op"))
            {
                return new OpProxy(this);
            }
            if ((attribute == "AutoRecSt"))
            {
                return new AutoRecStProxy(this);
            }
            if ((attribute == "Rec1Tmms"))
            {
                return new Rec1TmmsProxy(this);
            }
            if ((attribute == "Rec2Tmms"))
            {
                return new Rec2TmmsProxy(this);
            }
            if ((attribute == "Rec3Tmms"))
            {
                return new Rec3TmmsProxy(this);
            }
            if ((attribute == "PlsTmms"))
            {
                return new PlsTmmsProxy(this);
            }
            if ((attribute == "RclTmms"))
            {
                return new RclTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpCntRs"))
            {
                return new OpCntRsProxy(this);
            }
            if ((reference == "BlkRec"))
            {
                return new BlkRecProxy(this);
            }
            if ((reference == "ChkRec"))
            {
                return new ChkRecProxy(this);
            }
            if ((reference == "Auto"))
            {
                return new AutoProxy(this);
            }
            if ((reference == "Op"))
            {
                return new OpProxy(this);
            }
            if ((reference == "AutoRecSt"))
            {
                return new AutoRecStProxy(this);
            }
            if ((reference == "Rec1Tmms"))
            {
                return new Rec1TmmsProxy(this);
            }
            if ((reference == "Rec2Tmms"))
            {
                return new Rec2TmmsProxy(this);
            }
            if ((reference == "Rec3Tmms"))
            {
                return new Rec3TmmsProxy(this);
            }
            if ((reference == "PlsTmms"))
            {
                return new PlsTmmsProxy(this);
            }
            if ((reference == "RclTmms"))
            {
                return new RclTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RREC")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RREC class
        /// </summary>
        public class RRECReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RREC _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RRECReferencedElementsCollection(RREC parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpCntRs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BlkRec != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChkRec != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Auto != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Op != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoRecSt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rec1Tmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rec2Tmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rec3Tmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PlsTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RclTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpCntRsChanged += this.PropagateValueChanges;
                this._parent.BlkRecChanged += this.PropagateValueChanges;
                this._parent.ChkRecChanged += this.PropagateValueChanges;
                this._parent.AutoChanged += this.PropagateValueChanges;
                this._parent.OpChanged += this.PropagateValueChanges;
                this._parent.AutoRecStChanged += this.PropagateValueChanges;
                this._parent.Rec1TmmsChanged += this.PropagateValueChanges;
                this._parent.Rec2TmmsChanged += this.PropagateValueChanges;
                this._parent.Rec3TmmsChanged += this.PropagateValueChanges;
                this._parent.PlsTmmsChanged += this.PropagateValueChanges;
                this._parent.RclTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpCntRsChanged -= this.PropagateValueChanges;
                this._parent.BlkRecChanged -= this.PropagateValueChanges;
                this._parent.ChkRecChanged -= this.PropagateValueChanges;
                this._parent.AutoChanged -= this.PropagateValueChanges;
                this._parent.OpChanged -= this.PropagateValueChanges;
                this._parent.AutoRecStChanged -= this.PropagateValueChanges;
                this._parent.Rec1TmmsChanged -= this.PropagateValueChanges;
                this._parent.Rec2TmmsChanged -= this.PropagateValueChanges;
                this._parent.Rec3TmmsChanged -= this.PropagateValueChanges;
                this._parent.PlsTmmsChanged -= this.PropagateValueChanges;
                this._parent.RclTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpCntRs == null))
                {
                    IINC opCntRsCasted = item.As<IINC>();
                    if ((opCntRsCasted != null))
                    {
                        this._parent.OpCntRs = opCntRsCasted;
                        return;
                    }
                }
                if ((this._parent.BlkRec == null))
                {
                    ISPC blkRecCasted = item.As<ISPC>();
                    if ((blkRecCasted != null))
                    {
                        this._parent.BlkRec = blkRecCasted;
                        return;
                    }
                }
                if ((this._parent.ChkRec == null))
                {
                    ISPC chkRecCasted = item.As<ISPC>();
                    if ((chkRecCasted != null))
                    {
                        this._parent.ChkRec = chkRecCasted;
                        return;
                    }
                }
                if ((this._parent.Auto == null))
                {
                    ISPS autoCasted = item.As<ISPS>();
                    if ((autoCasted != null))
                    {
                        this._parent.Auto = autoCasted;
                        return;
                    }
                }
                if ((this._parent.Op == null))
                {
                    IACT opCasted = item.As<IACT>();
                    if ((opCasted != null))
                    {
                        this._parent.Op = opCasted;
                        return;
                    }
                }
                if ((this._parent.AutoRecSt == null))
                {
                    IINS autoRecStCasted = item.As<IINS>();
                    if ((autoRecStCasted != null))
                    {
                        this._parent.AutoRecSt = autoRecStCasted;
                        return;
                    }
                }
                if ((this._parent.Rec1Tmms == null))
                {
                    IING rec1TmmsCasted = item.As<IING>();
                    if ((rec1TmmsCasted != null))
                    {
                        this._parent.Rec1Tmms = rec1TmmsCasted;
                        return;
                    }
                }
                if ((this._parent.Rec2Tmms == null))
                {
                    IING rec2TmmsCasted = item.As<IING>();
                    if ((rec2TmmsCasted != null))
                    {
                        this._parent.Rec2Tmms = rec2TmmsCasted;
                        return;
                    }
                }
                if ((this._parent.Rec3Tmms == null))
                {
                    IING rec3TmmsCasted = item.As<IING>();
                    if ((rec3TmmsCasted != null))
                    {
                        this._parent.Rec3Tmms = rec3TmmsCasted;
                        return;
                    }
                }
                if ((this._parent.PlsTmms == null))
                {
                    IING plsTmmsCasted = item.As<IING>();
                    if ((plsTmmsCasted != null))
                    {
                        this._parent.PlsTmms = plsTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.RclTmms == null))
                {
                    IING rclTmmsCasted = item.As<IING>();
                    if ((rclTmmsCasted != null))
                    {
                        this._parent.RclTmms = rclTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpCntRs = null;
                this._parent.BlkRec = null;
                this._parent.ChkRec = null;
                this._parent.Auto = null;
                this._parent.Op = null;
                this._parent.AutoRecSt = null;
                this._parent.Rec1Tmms = null;
                this._parent.Rec2Tmms = null;
                this._parent.Rec3Tmms = null;
                this._parent.PlsTmms = null;
                this._parent.RclTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpCntRs))
                {
                    return true;
                }
                if ((item == this._parent.BlkRec))
                {
                    return true;
                }
                if ((item == this._parent.ChkRec))
                {
                    return true;
                }
                if ((item == this._parent.Auto))
                {
                    return true;
                }
                if ((item == this._parent.Op))
                {
                    return true;
                }
                if ((item == this._parent.AutoRecSt))
                {
                    return true;
                }
                if ((item == this._parent.Rec1Tmms))
                {
                    return true;
                }
                if ((item == this._parent.Rec2Tmms))
                {
                    return true;
                }
                if ((item == this._parent.Rec3Tmms))
                {
                    return true;
                }
                if ((item == this._parent.PlsTmms))
                {
                    return true;
                }
                if ((item == this._parent.RclTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpCntRs != null))
                {
                    array[arrayIndex] = this._parent.OpCntRs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BlkRec != null))
                {
                    array[arrayIndex] = this._parent.BlkRec;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChkRec != null))
                {
                    array[arrayIndex] = this._parent.ChkRec;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Auto != null))
                {
                    array[arrayIndex] = this._parent.Auto;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Op != null))
                {
                    array[arrayIndex] = this._parent.Op;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoRecSt != null))
                {
                    array[arrayIndex] = this._parent.AutoRecSt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rec1Tmms != null))
                {
                    array[arrayIndex] = this._parent.Rec1Tmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rec2Tmms != null))
                {
                    array[arrayIndex] = this._parent.Rec2Tmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rec3Tmms != null))
                {
                    array[arrayIndex] = this._parent.Rec3Tmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PlsTmms != null))
                {
                    array[arrayIndex] = this._parent.PlsTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RclTmms != null))
                {
                    array[arrayIndex] = this._parent.RclTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpCntRs == item))
                {
                    this._parent.OpCntRs = null;
                    return true;
                }
                if ((this._parent.BlkRec == item))
                {
                    this._parent.BlkRec = null;
                    return true;
                }
                if ((this._parent.ChkRec == item))
                {
                    this._parent.ChkRec = null;
                    return true;
                }
                if ((this._parent.Auto == item))
                {
                    this._parent.Auto = null;
                    return true;
                }
                if ((this._parent.Op == item))
                {
                    this._parent.Op = null;
                    return true;
                }
                if ((this._parent.AutoRecSt == item))
                {
                    this._parent.AutoRecSt = null;
                    return true;
                }
                if ((this._parent.Rec1Tmms == item))
                {
                    this._parent.Rec1Tmms = null;
                    return true;
                }
                if ((this._parent.Rec2Tmms == item))
                {
                    this._parent.Rec2Tmms = null;
                    return true;
                }
                if ((this._parent.Rec3Tmms == item))
                {
                    this._parent.Rec3Tmms = null;
                    return true;
                }
                if ((this._parent.PlsTmms == item))
                {
                    this._parent.PlsTmms = null;
                    return true;
                }
                if ((this._parent.RclTmms == item))
                {
                    this._parent.RclTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpCntRs).Concat(this._parent.BlkRec).Concat(this._parent.ChkRec).Concat(this._parent.Auto).Concat(this._parent.Op).Concat(this._parent.AutoRecSt).Concat(this._parent.Rec1Tmms).Concat(this._parent.Rec2Tmms).Concat(this._parent.Rec3Tmms).Concat(this._parent.PlsTmms).Concat(this._parent.RclTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpCntRs property
        /// </summary>
        private sealed class OpCntRsProxy : ModelPropertyChange<IRREC, IINC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpCntRsProxy(IRREC modelElement) : 
                    base(modelElement, "OpCntRs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINC Value
            {
                get
                {
                    return this.ModelElement.OpCntRs;
                }
                set
                {
                    this.ModelElement.OpCntRs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BlkRec property
        /// </summary>
        private sealed class BlkRecProxy : ModelPropertyChange<IRREC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlkRecProxy(IRREC modelElement) : 
                    base(modelElement, "BlkRec")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.BlkRec;
                }
                set
                {
                    this.ModelElement.BlkRec = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChkRec property
        /// </summary>
        private sealed class ChkRecProxy : ModelPropertyChange<IRREC, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChkRecProxy(IRREC modelElement) : 
                    base(modelElement, "ChkRec")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.ChkRec;
                }
                set
                {
                    this.ModelElement.ChkRec = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Auto property
        /// </summary>
        private sealed class AutoProxy : ModelPropertyChange<IRREC, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoProxy(IRREC modelElement) : 
                    base(modelElement, "Auto")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Auto;
                }
                set
                {
                    this.ModelElement.Auto = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Op property
        /// </summary>
        private sealed class OpProxy : ModelPropertyChange<IRREC, IACT>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpProxy(IRREC modelElement) : 
                    base(modelElement, "Op")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IACT Value
            {
                get
                {
                    return this.ModelElement.Op;
                }
                set
                {
                    this.ModelElement.Op = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AutoRecSt property
        /// </summary>
        private sealed class AutoRecStProxy : ModelPropertyChange<IRREC, IINS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoRecStProxy(IRREC modelElement) : 
                    base(modelElement, "AutoRecSt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IINS Value
            {
                get
                {
                    return this.ModelElement.AutoRecSt;
                }
                set
                {
                    this.ModelElement.AutoRecSt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Rec1Tmms property
        /// </summary>
        private sealed class Rec1TmmsProxy : ModelPropertyChange<IRREC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Rec1TmmsProxy(IRREC modelElement) : 
                    base(modelElement, "Rec1Tmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.Rec1Tmms;
                }
                set
                {
                    this.ModelElement.Rec1Tmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Rec2Tmms property
        /// </summary>
        private sealed class Rec2TmmsProxy : ModelPropertyChange<IRREC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Rec2TmmsProxy(IRREC modelElement) : 
                    base(modelElement, "Rec2Tmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.Rec2Tmms;
                }
                set
                {
                    this.ModelElement.Rec2Tmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Rec3Tmms property
        /// </summary>
        private sealed class Rec3TmmsProxy : ModelPropertyChange<IRREC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Rec3TmmsProxy(IRREC modelElement) : 
                    base(modelElement, "Rec3Tmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.Rec3Tmms;
                }
                set
                {
                    this.ModelElement.Rec3Tmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PlsTmms property
        /// </summary>
        private sealed class PlsTmmsProxy : ModelPropertyChange<IRREC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlsTmmsProxy(IRREC modelElement) : 
                    base(modelElement, "PlsTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PlsTmms;
                }
                set
                {
                    this.ModelElement.PlsTmms = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RclTmms property
        /// </summary>
        private sealed class RclTmmsProxy : ModelPropertyChange<IRREC, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RclTmmsProxy(IRREC modelElement) : 
                    base(modelElement, "RclTmms")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.RclTmms;
                }
                set
                {
                    this.ModelElement.RclTmms = value;
                }
            }
        }
    }
}

