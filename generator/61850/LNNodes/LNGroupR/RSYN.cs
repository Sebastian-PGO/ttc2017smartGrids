//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.SubstationStandard.Dataclasses;
using TTC2017.SmartGrids.SubstationStandard.LNNodes.DomainLNs;

namespace TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR
{
    
    
    /// <summary>
    /// The default implementation of the RSYN class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard/grou" +
        "pR")]
    [XmlNamespacePrefixAttribute("groupr")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
        "Nodes/LNGroupR/RSYN")]
    public class RSYN : TTC2017.SmartGrids.SubstationStandard.LNNodes.LNGroupR.GroupR, IRSYN, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RHz property
        /// </summary>
        private ISPC _rHz;
        
        /// <summary>
        /// The backing field for the LHz property
        /// </summary>
        private ISPC _lHz;
        
        /// <summary>
        /// The backing field for the RV property
        /// </summary>
        private ISPC _rV;
        
        /// <summary>
        /// The backing field for the LV property
        /// </summary>
        private ISPC _lV;
        
        /// <summary>
        /// The backing field for the Rel property
        /// </summary>
        private ISPS _rel;
        
        /// <summary>
        /// The backing field for the Vlnd property
        /// </summary>
        private ISPS _vlnd;
        
        /// <summary>
        /// The backing field for the AngInd property
        /// </summary>
        private ISPS _angInd;
        
        /// <summary>
        /// The backing field for the HzInd property
        /// </summary>
        private ISPS _hzInd;
        
        /// <summary>
        /// The backing field for the SynPrg property
        /// </summary>
        private ISPS _synPrg;
        
        /// <summary>
        /// The backing field for the DifVClc property
        /// </summary>
        private IMV _difVClc;
        
        /// <summary>
        /// The backing field for the DifAngClc property
        /// </summary>
        private IMV _difAngClc;
        
        /// <summary>
        /// The backing field for the DifV property
        /// </summary>
        private IASG _difV;
        
        /// <summary>
        /// The backing field for the DifHz property
        /// </summary>
        private IASG _difHz;
        
        /// <summary>
        /// The backing field for the DifAng property
        /// </summary>
        private IASG _difAng;
        
        /// <summary>
        /// The backing field for the LivDeaMod property
        /// </summary>
        private IING _livDeaMod;
        
        /// <summary>
        /// The backing field for the DeaLinVal property
        /// </summary>
        private IASG _deaLinVal;
        
        /// <summary>
        /// The backing field for the LivLinVal property
        /// </summary>
        private IASG _livLinVal;
        
        /// <summary>
        /// The backing field for the DeaBusVal property
        /// </summary>
        private IASG _deaBusVal;
        
        /// <summary>
        /// The backing field for the PlsTmms property
        /// </summary>
        private IING _plsTmms;
        
        /// <summary>
        /// The backing field for the BkrTmms property
        /// </summary>
        private IING _bkrTmms;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The RHz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC RHz
        {
            get
            {
                return this._rHz;
            }
            set
            {
                if ((this._rHz != value))
                {
                    ISPC old = this._rHz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRHzChanging(e);
                    this.OnPropertyChanging("RHz", e);
                    this._rHz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRHz;
                    }
                    this.OnRHzChanged(e);
                    this.OnPropertyChanged("RHz", e);
                }
            }
        }
        
        /// <summary>
        /// The LHz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC LHz
        {
            get
            {
                return this._lHz;
            }
            set
            {
                if ((this._lHz != value))
                {
                    ISPC old = this._lHz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLHzChanging(e);
                    this.OnPropertyChanging("LHz", e);
                    this._lHz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLHz;
                    }
                    this.OnLHzChanged(e);
                    this.OnPropertyChanged("LHz", e);
                }
            }
        }
        
        /// <summary>
        /// The RV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC RV
        {
            get
            {
                return this._rV;
            }
            set
            {
                if ((this._rV != value))
                {
                    ISPC old = this._rV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRVChanging(e);
                    this.OnPropertyChanging("RV", e);
                    this._rV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRV;
                    }
                    this.OnRVChanged(e);
                    this.OnPropertyChanged("RV", e);
                }
            }
        }
        
        /// <summary>
        /// The LV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPC LV
        {
            get
            {
                return this._lV;
            }
            set
            {
                if ((this._lV != value))
                {
                    ISPC old = this._lV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLVChanging(e);
                    this.OnPropertyChanging("LV", e);
                    this._lV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLV;
                    }
                    this.OnLVChanged(e);
                    this.OnPropertyChanged("LV", e);
                }
            }
        }
        
        /// <summary>
        /// The Rel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Rel
        {
            get
            {
                return this._rel;
            }
            set
            {
                if ((this._rel != value))
                {
                    ISPS old = this._rel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelChanging(e);
                    this.OnPropertyChanging("Rel", e);
                    this._rel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRel;
                    }
                    this.OnRelChanged(e);
                    this.OnPropertyChanged("Rel", e);
                }
            }
        }
        
        /// <summary>
        /// The Vlnd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS Vlnd
        {
            get
            {
                return this._vlnd;
            }
            set
            {
                if ((this._vlnd != value))
                {
                    ISPS old = this._vlnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVlndChanging(e);
                    this.OnPropertyChanging("Vlnd", e);
                    this._vlnd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetVlnd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetVlnd;
                    }
                    this.OnVlndChanged(e);
                    this.OnPropertyChanged("Vlnd", e);
                }
            }
        }
        
        /// <summary>
        /// The AngInd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS AngInd
        {
            get
            {
                return this._angInd;
            }
            set
            {
                if ((this._angInd != value))
                {
                    ISPS old = this._angInd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngIndChanging(e);
                    this.OnPropertyChanging("AngInd", e);
                    this._angInd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAngInd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAngInd;
                    }
                    this.OnAngIndChanged(e);
                    this.OnPropertyChanged("AngInd", e);
                }
            }
        }
        
        /// <summary>
        /// The HzInd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS HzInd
        {
            get
            {
                return this._hzInd;
            }
            set
            {
                if ((this._hzInd != value))
                {
                    ISPS old = this._hzInd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHzIndChanging(e);
                    this.OnPropertyChanging("HzInd", e);
                    this._hzInd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetHzInd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetHzInd;
                    }
                    this.OnHzIndChanged(e);
                    this.OnPropertyChanged("HzInd", e);
                }
            }
        }
        
        /// <summary>
        /// The SynPrg property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISPS SynPrg
        {
            get
            {
                return this._synPrg;
            }
            set
            {
                if ((this._synPrg != value))
                {
                    ISPS old = this._synPrg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSynPrgChanging(e);
                    this.OnPropertyChanging("SynPrg", e);
                    this._synPrg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSynPrg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSynPrg;
                    }
                    this.OnSynPrgChanged(e);
                    this.OnPropertyChanged("SynPrg", e);
                }
            }
        }
        
        /// <summary>
        /// The DifVClc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV DifVClc
        {
            get
            {
                return this._difVClc;
            }
            set
            {
                if ((this._difVClc != value))
                {
                    IMV old = this._difVClc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifVClcChanging(e);
                    this.OnPropertyChanging("DifVClc", e);
                    this._difVClc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifVClc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifVClc;
                    }
                    this.OnDifVClcChanged(e);
                    this.OnPropertyChanged("DifVClc", e);
                }
            }
        }
        
        /// <summary>
        /// The DifAngClc property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IMV DifAngClc
        {
            get
            {
                return this._difAngClc;
            }
            set
            {
                if ((this._difAngClc != value))
                {
                    IMV old = this._difAngClc;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifAngClcChanging(e);
                    this.OnPropertyChanging("DifAngClc", e);
                    this._difAngClc = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifAngClc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifAngClc;
                    }
                    this.OnDifAngClcChanged(e);
                    this.OnPropertyChanged("DifAngClc", e);
                }
            }
        }
        
        /// <summary>
        /// The DifV property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DifV
        {
            get
            {
                return this._difV;
            }
            set
            {
                if ((this._difV != value))
                {
                    IASG old = this._difV;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifVChanging(e);
                    this.OnPropertyChanging("DifV", e);
                    this._difV = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifV;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifV;
                    }
                    this.OnDifVChanged(e);
                    this.OnPropertyChanged("DifV", e);
                }
            }
        }
        
        /// <summary>
        /// The DifHz property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DifHz
        {
            get
            {
                return this._difHz;
            }
            set
            {
                if ((this._difHz != value))
                {
                    IASG old = this._difHz;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifHzChanging(e);
                    this.OnPropertyChanging("DifHz", e);
                    this._difHz = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifHz;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifHz;
                    }
                    this.OnDifHzChanged(e);
                    this.OnPropertyChanged("DifHz", e);
                }
            }
        }
        
        /// <summary>
        /// The DifAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DifAng
        {
            get
            {
                return this._difAng;
            }
            set
            {
                if ((this._difAng != value))
                {
                    IASG old = this._difAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDifAngChanging(e);
                    this.OnPropertyChanging("DifAng", e);
                    this._difAng = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDifAng;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDifAng;
                    }
                    this.OnDifAngChanged(e);
                    this.OnPropertyChanged("DifAng", e);
                }
            }
        }
        
        /// <summary>
        /// The LivDeaMod property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING LivDeaMod
        {
            get
            {
                return this._livDeaMod;
            }
            set
            {
                if ((this._livDeaMod != value))
                {
                    IING old = this._livDeaMod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLivDeaModChanging(e);
                    this.OnPropertyChanging("LivDeaMod", e);
                    this._livDeaMod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLivDeaMod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLivDeaMod;
                    }
                    this.OnLivDeaModChanged(e);
                    this.OnPropertyChanged("LivDeaMod", e);
                }
            }
        }
        
        /// <summary>
        /// The DeaLinVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DeaLinVal
        {
            get
            {
                return this._deaLinVal;
            }
            set
            {
                if ((this._deaLinVal != value))
                {
                    IASG old = this._deaLinVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeaLinValChanging(e);
                    this.OnPropertyChanging("DeaLinVal", e);
                    this._deaLinVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDeaLinVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDeaLinVal;
                    }
                    this.OnDeaLinValChanged(e);
                    this.OnPropertyChanged("DeaLinVal", e);
                }
            }
        }
        
        /// <summary>
        /// The LivLinVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG LivLinVal
        {
            get
            {
                return this._livLinVal;
            }
            set
            {
                if ((this._livLinVal != value))
                {
                    IASG old = this._livLinVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLivLinValChanging(e);
                    this.OnPropertyChanging("LivLinVal", e);
                    this._livLinVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLivLinVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLivLinVal;
                    }
                    this.OnLivLinValChanged(e);
                    this.OnPropertyChanged("LivLinVal", e);
                }
            }
        }
        
        /// <summary>
        /// The DeaBusVal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IASG DeaBusVal
        {
            get
            {
                return this._deaBusVal;
            }
            set
            {
                if ((this._deaBusVal != value))
                {
                    IASG old = this._deaBusVal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeaBusValChanging(e);
                    this.OnPropertyChanging("DeaBusVal", e);
                    this._deaBusVal = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDeaBusVal;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDeaBusVal;
                    }
                    this.OnDeaBusValChanged(e);
                    this.OnPropertyChanged("DeaBusVal", e);
                }
            }
        }
        
        /// <summary>
        /// The PlsTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING PlsTmms
        {
            get
            {
                return this._plsTmms;
            }
            set
            {
                if ((this._plsTmms != value))
                {
                    IING old = this._plsTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlsTmmsChanging(e);
                    this.OnPropertyChanging("PlsTmms", e);
                    this._plsTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPlsTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPlsTmms;
                    }
                    this.OnPlsTmmsChanged(e);
                    this.OnPropertyChanged("PlsTmms", e);
                }
            }
        }
        
        /// <summary>
        /// The BkrTmms property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IING BkrTmms
        {
            get
            {
                return this._bkrTmms;
            }
            set
            {
                if ((this._bkrTmms != value))
                {
                    IING old = this._bkrTmms;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBkrTmmsChanging(e);
                    this.OnPropertyChanging("BkrTmms", e);
                    this._bkrTmms = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBkrTmms;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBkrTmms;
                    }
                    this.OnBkrTmmsChanged(e);
                    this.OnPropertyChanged("BkrTmms", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RSYNReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                            "Nodes/LNGroupR/RSYN")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RHz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RHzChanging;
        
        /// <summary>
        /// Gets fired when the RHz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RHzChanged;
        
        /// <summary>
        /// Gets fired before the LHz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LHzChanging;
        
        /// <summary>
        /// Gets fired when the LHz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LHzChanged;
        
        /// <summary>
        /// Gets fired before the RV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RVChanging;
        
        /// <summary>
        /// Gets fired when the RV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RVChanged;
        
        /// <summary>
        /// Gets fired before the LV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LVChanging;
        
        /// <summary>
        /// Gets fired when the LV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LVChanged;
        
        /// <summary>
        /// Gets fired before the Rel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelChanging;
        
        /// <summary>
        /// Gets fired when the Rel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelChanged;
        
        /// <summary>
        /// Gets fired before the Vlnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VlndChanging;
        
        /// <summary>
        /// Gets fired when the Vlnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VlndChanged;
        
        /// <summary>
        /// Gets fired before the AngInd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngIndChanging;
        
        /// <summary>
        /// Gets fired when the AngInd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngIndChanged;
        
        /// <summary>
        /// Gets fired before the HzInd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzIndChanging;
        
        /// <summary>
        /// Gets fired when the HzInd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HzIndChanged;
        
        /// <summary>
        /// Gets fired before the SynPrg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SynPrgChanging;
        
        /// <summary>
        /// Gets fired when the SynPrg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SynPrgChanged;
        
        /// <summary>
        /// Gets fired before the DifVClc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifVClcChanging;
        
        /// <summary>
        /// Gets fired when the DifVClc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifVClcChanged;
        
        /// <summary>
        /// Gets fired before the DifAngClc property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAngClcChanging;
        
        /// <summary>
        /// Gets fired when the DifAngClc property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAngClcChanged;
        
        /// <summary>
        /// Gets fired before the DifV property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifVChanging;
        
        /// <summary>
        /// Gets fired when the DifV property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifVChanged;
        
        /// <summary>
        /// Gets fired before the DifHz property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifHzChanging;
        
        /// <summary>
        /// Gets fired when the DifHz property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifHzChanged;
        
        /// <summary>
        /// Gets fired before the DifAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAngChanging;
        
        /// <summary>
        /// Gets fired when the DifAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DifAngChanged;
        
        /// <summary>
        /// Gets fired before the LivDeaMod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LivDeaModChanging;
        
        /// <summary>
        /// Gets fired when the LivDeaMod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LivDeaModChanged;
        
        /// <summary>
        /// Gets fired before the DeaLinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeaLinValChanging;
        
        /// <summary>
        /// Gets fired when the DeaLinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeaLinValChanged;
        
        /// <summary>
        /// Gets fired before the LivLinVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LivLinValChanging;
        
        /// <summary>
        /// Gets fired when the LivLinVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LivLinValChanged;
        
        /// <summary>
        /// Gets fired before the DeaBusVal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeaBusValChanging;
        
        /// <summary>
        /// Gets fired when the DeaBusVal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeaBusValChanged;
        
        /// <summary>
        /// Gets fired before the PlsTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlsTmmsChanging;
        
        /// <summary>
        /// Gets fired when the PlsTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlsTmmsChanged;
        
        /// <summary>
        /// Gets fired before the BkrTmms property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BkrTmmsChanging;
        
        /// <summary>
        /// Gets fired when the BkrTmms property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BkrTmmsChanged;
        
        /// <summary>
        /// Raises the RHzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RHzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RHzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RHzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RHz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRHz(object sender, System.EventArgs eventArgs)
        {
            this.RHz = null;
        }
        
        /// <summary>
        /// Raises the LHzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LHzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LHzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LHzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LHz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLHz(object sender, System.EventArgs eventArgs)
        {
            this.LHz = null;
        }
        
        /// <summary>
        /// Raises the RVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRV(object sender, System.EventArgs eventArgs)
        {
            this.RV = null;
        }
        
        /// <summary>
        /// Raises the LVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLV(object sender, System.EventArgs eventArgs)
        {
            this.LV = null;
        }
        
        /// <summary>
        /// Raises the RelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Rel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRel(object sender, System.EventArgs eventArgs)
        {
            this.Rel = null;
        }
        
        /// <summary>
        /// Raises the VlndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVlndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VlndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VlndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVlndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VlndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Vlnd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVlnd(object sender, System.EventArgs eventArgs)
        {
            this.Vlnd = null;
        }
        
        /// <summary>
        /// Raises the AngIndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngIndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngIndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngIndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngIndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngIndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngInd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngInd(object sender, System.EventArgs eventArgs)
        {
            this.AngInd = null;
        }
        
        /// <summary>
        /// Raises the HzIndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzIndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzIndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HzIndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHzIndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HzIndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HzInd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHzInd(object sender, System.EventArgs eventArgs)
        {
            this.HzInd = null;
        }
        
        /// <summary>
        /// Raises the SynPrgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynPrgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SynPrgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SynPrgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynPrgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SynPrgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SynPrg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSynPrg(object sender, System.EventArgs eventArgs)
        {
            this.SynPrg = null;
        }
        
        /// <summary>
        /// Raises the DifVClcChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifVClcChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifVClcChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifVClcChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifVClcChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifVClcChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifVClc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifVClc(object sender, System.EventArgs eventArgs)
        {
            this.DifVClc = null;
        }
        
        /// <summary>
        /// Raises the DifAngClcChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAngClcChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAngClcChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifAngClcChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAngClcChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAngClcChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifAngClc property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifAngClc(object sender, System.EventArgs eventArgs)
        {
            this.DifAngClc = null;
        }
        
        /// <summary>
        /// Raises the DifVChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifVChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifVChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifVChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifV property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifV(object sender, System.EventArgs eventArgs)
        {
            this.DifV = null;
        }
        
        /// <summary>
        /// Raises the DifHzChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifHzChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifHzChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifHzChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifHzChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifHzChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifHz property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifHz(object sender, System.EventArgs eventArgs)
        {
            this.DifHz = null;
        }
        
        /// <summary>
        /// Raises the DifAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DifAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDifAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DifAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DifAng property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDifAng(object sender, System.EventArgs eventArgs)
        {
            this.DifAng = null;
        }
        
        /// <summary>
        /// Raises the LivDeaModChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLivDeaModChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LivDeaModChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LivDeaModChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLivDeaModChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LivDeaModChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LivDeaMod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLivDeaMod(object sender, System.EventArgs eventArgs)
        {
            this.LivDeaMod = null;
        }
        
        /// <summary>
        /// Raises the DeaLinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeaLinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeaLinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeaLinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeaLinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeaLinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DeaLinVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeaLinVal(object sender, System.EventArgs eventArgs)
        {
            this.DeaLinVal = null;
        }
        
        /// <summary>
        /// Raises the LivLinValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLivLinValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LivLinValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LivLinValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLivLinValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LivLinValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LivLinVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLivLinVal(object sender, System.EventArgs eventArgs)
        {
            this.LivLinVal = null;
        }
        
        /// <summary>
        /// Raises the DeaBusValChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeaBusValChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeaBusValChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeaBusValChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeaBusValChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeaBusValChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DeaBusVal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeaBusVal(object sender, System.EventArgs eventArgs)
        {
            this.DeaBusVal = null;
        }
        
        /// <summary>
        /// Raises the PlsTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlsTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlsTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlsTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlsTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlsTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PlsTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPlsTmms(object sender, System.EventArgs eventArgs)
        {
            this.PlsTmms = null;
        }
        
        /// <summary>
        /// Raises the BkrTmmsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBkrTmmsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BkrTmmsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BkrTmmsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBkrTmmsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BkrTmmsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BkrTmms property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBkrTmms(object sender, System.EventArgs eventArgs)
        {
            this.BkrTmms = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RHZ"))
            {
                this.RHz = ((ISPC)(value));
                return;
            }
            if ((feature == "LHZ"))
            {
                this.LHz = ((ISPC)(value));
                return;
            }
            if ((feature == "RV"))
            {
                this.RV = ((ISPC)(value));
                return;
            }
            if ((feature == "LV"))
            {
                this.LV = ((ISPC)(value));
                return;
            }
            if ((feature == "REL"))
            {
                this.Rel = ((ISPS)(value));
                return;
            }
            if ((feature == "VLND"))
            {
                this.Vlnd = ((ISPS)(value));
                return;
            }
            if ((feature == "ANGIND"))
            {
                this.AngInd = ((ISPS)(value));
                return;
            }
            if ((feature == "HZIND"))
            {
                this.HzInd = ((ISPS)(value));
                return;
            }
            if ((feature == "SYNPRG"))
            {
                this.SynPrg = ((ISPS)(value));
                return;
            }
            if ((feature == "DIFVCLC"))
            {
                this.DifVClc = ((IMV)(value));
                return;
            }
            if ((feature == "DIFANGCLC"))
            {
                this.DifAngClc = ((IMV)(value));
                return;
            }
            if ((feature == "DIFV"))
            {
                this.DifV = ((IASG)(value));
                return;
            }
            if ((feature == "DIFHZ"))
            {
                this.DifHz = ((IASG)(value));
                return;
            }
            if ((feature == "DIFANG"))
            {
                this.DifAng = ((IASG)(value));
                return;
            }
            if ((feature == "LIVDEAMOD"))
            {
                this.LivDeaMod = ((IING)(value));
                return;
            }
            if ((feature == "DEALINVAL"))
            {
                this.DeaLinVal = ((IASG)(value));
                return;
            }
            if ((feature == "LIVLINVAL"))
            {
                this.LivLinVal = ((IASG)(value));
                return;
            }
            if ((feature == "DEABUSVAL"))
            {
                this.DeaBusVal = ((IASG)(value));
                return;
            }
            if ((feature == "PLSTMMS"))
            {
                this.PlsTmms = ((IING)(value));
                return;
            }
            if ((feature == "BKRTMMS"))
            {
                this.BkrTmms = ((IING)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RHz"))
            {
                return new RHzProxy(this);
            }
            if ((attribute == "LHz"))
            {
                return new LHzProxy(this);
            }
            if ((attribute == "RV"))
            {
                return new RVProxy(this);
            }
            if ((attribute == "LV"))
            {
                return new LVProxy(this);
            }
            if ((attribute == "Rel"))
            {
                return new RelProxy(this);
            }
            if ((attribute == "Vlnd"))
            {
                return new VlndProxy(this);
            }
            if ((attribute == "AngInd"))
            {
                return new AngIndProxy(this);
            }
            if ((attribute == "HzInd"))
            {
                return new HzIndProxy(this);
            }
            if ((attribute == "SynPrg"))
            {
                return new SynPrgProxy(this);
            }
            if ((attribute == "DifVClc"))
            {
                return new DifVClcProxy(this);
            }
            if ((attribute == "DifAngClc"))
            {
                return new DifAngClcProxy(this);
            }
            if ((attribute == "DifV"))
            {
                return new DifVProxy(this);
            }
            if ((attribute == "DifHz"))
            {
                return new DifHzProxy(this);
            }
            if ((attribute == "DifAng"))
            {
                return new DifAngProxy(this);
            }
            if ((attribute == "LivDeaMod"))
            {
                return new LivDeaModProxy(this);
            }
            if ((attribute == "DeaLinVal"))
            {
                return new DeaLinValProxy(this);
            }
            if ((attribute == "LivLinVal"))
            {
                return new LivLinValProxy(this);
            }
            if ((attribute == "DeaBusVal"))
            {
                return new DeaBusValProxy(this);
            }
            if ((attribute == "PlsTmms"))
            {
                return new PlsTmmsProxy(this);
            }
            if ((attribute == "BkrTmms"))
            {
                return new BkrTmmsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RHz"))
            {
                return new RHzProxy(this);
            }
            if ((reference == "LHz"))
            {
                return new LHzProxy(this);
            }
            if ((reference == "RV"))
            {
                return new RVProxy(this);
            }
            if ((reference == "LV"))
            {
                return new LVProxy(this);
            }
            if ((reference == "Rel"))
            {
                return new RelProxy(this);
            }
            if ((reference == "Vlnd"))
            {
                return new VlndProxy(this);
            }
            if ((reference == "AngInd"))
            {
                return new AngIndProxy(this);
            }
            if ((reference == "HzInd"))
            {
                return new HzIndProxy(this);
            }
            if ((reference == "SynPrg"))
            {
                return new SynPrgProxy(this);
            }
            if ((reference == "DifVClc"))
            {
                return new DifVClcProxy(this);
            }
            if ((reference == "DifAngClc"))
            {
                return new DifAngClcProxy(this);
            }
            if ((reference == "DifV"))
            {
                return new DifVProxy(this);
            }
            if ((reference == "DifHz"))
            {
                return new DifHzProxy(this);
            }
            if ((reference == "DifAng"))
            {
                return new DifAngProxy(this);
            }
            if ((reference == "LivDeaMod"))
            {
                return new LivDeaModProxy(this);
            }
            if ((reference == "DeaLinVal"))
            {
                return new DeaLinValProxy(this);
            }
            if ((reference == "LivLinVal"))
            {
                return new LivLinValProxy(this);
            }
            if ((reference == "DeaBusVal"))
            {
                return new DeaBusValProxy(this);
            }
            if ((reference == "PlsTmms"))
            {
                return new PlsTmmsProxy(this);
            }
            if ((reference == "BkrTmms"))
            {
                return new BkrTmmsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/substationStandard#//LN" +
                        "Nodes/LNGroupR/RSYN")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RSYN class
        /// </summary>
        public class RSYNReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RSYN _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RSYNReferencedElementsCollection(RSYN parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RHz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LHz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Rel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Vlnd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngInd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HzInd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SynPrg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifVClc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifAngClc != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifV != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifHz != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DifAng != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LivDeaMod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeaLinVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LivLinVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeaBusVal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PlsTmms != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BkrTmms != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RHzChanged += this.PropagateValueChanges;
                this._parent.LHzChanged += this.PropagateValueChanges;
                this._parent.RVChanged += this.PropagateValueChanges;
                this._parent.LVChanged += this.PropagateValueChanges;
                this._parent.RelChanged += this.PropagateValueChanges;
                this._parent.VlndChanged += this.PropagateValueChanges;
                this._parent.AngIndChanged += this.PropagateValueChanges;
                this._parent.HzIndChanged += this.PropagateValueChanges;
                this._parent.SynPrgChanged += this.PropagateValueChanges;
                this._parent.DifVClcChanged += this.PropagateValueChanges;
                this._parent.DifAngClcChanged += this.PropagateValueChanges;
                this._parent.DifVChanged += this.PropagateValueChanges;
                this._parent.DifHzChanged += this.PropagateValueChanges;
                this._parent.DifAngChanged += this.PropagateValueChanges;
                this._parent.LivDeaModChanged += this.PropagateValueChanges;
                this._parent.DeaLinValChanged += this.PropagateValueChanges;
                this._parent.LivLinValChanged += this.PropagateValueChanges;
                this._parent.DeaBusValChanged += this.PropagateValueChanges;
                this._parent.PlsTmmsChanged += this.PropagateValueChanges;
                this._parent.BkrTmmsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RHzChanged -= this.PropagateValueChanges;
                this._parent.LHzChanged -= this.PropagateValueChanges;
                this._parent.RVChanged -= this.PropagateValueChanges;
                this._parent.LVChanged -= this.PropagateValueChanges;
                this._parent.RelChanged -= this.PropagateValueChanges;
                this._parent.VlndChanged -= this.PropagateValueChanges;
                this._parent.AngIndChanged -= this.PropagateValueChanges;
                this._parent.HzIndChanged -= this.PropagateValueChanges;
                this._parent.SynPrgChanged -= this.PropagateValueChanges;
                this._parent.DifVClcChanged -= this.PropagateValueChanges;
                this._parent.DifAngClcChanged -= this.PropagateValueChanges;
                this._parent.DifVChanged -= this.PropagateValueChanges;
                this._parent.DifHzChanged -= this.PropagateValueChanges;
                this._parent.DifAngChanged -= this.PropagateValueChanges;
                this._parent.LivDeaModChanged -= this.PropagateValueChanges;
                this._parent.DeaLinValChanged -= this.PropagateValueChanges;
                this._parent.LivLinValChanged -= this.PropagateValueChanges;
                this._parent.DeaBusValChanged -= this.PropagateValueChanges;
                this._parent.PlsTmmsChanged -= this.PropagateValueChanges;
                this._parent.BkrTmmsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RHz == null))
                {
                    ISPC rHzCasted = item.As<ISPC>();
                    if ((rHzCasted != null))
                    {
                        this._parent.RHz = rHzCasted;
                        return;
                    }
                }
                if ((this._parent.LHz == null))
                {
                    ISPC lHzCasted = item.As<ISPC>();
                    if ((lHzCasted != null))
                    {
                        this._parent.LHz = lHzCasted;
                        return;
                    }
                }
                if ((this._parent.RV == null))
                {
                    ISPC rVCasted = item.As<ISPC>();
                    if ((rVCasted != null))
                    {
                        this._parent.RV = rVCasted;
                        return;
                    }
                }
                if ((this._parent.LV == null))
                {
                    ISPC lVCasted = item.As<ISPC>();
                    if ((lVCasted != null))
                    {
                        this._parent.LV = lVCasted;
                        return;
                    }
                }
                if ((this._parent.Rel == null))
                {
                    ISPS relCasted = item.As<ISPS>();
                    if ((relCasted != null))
                    {
                        this._parent.Rel = relCasted;
                        return;
                    }
                }
                if ((this._parent.Vlnd == null))
                {
                    ISPS vlndCasted = item.As<ISPS>();
                    if ((vlndCasted != null))
                    {
                        this._parent.Vlnd = vlndCasted;
                        return;
                    }
                }
                if ((this._parent.AngInd == null))
                {
                    ISPS angIndCasted = item.As<ISPS>();
                    if ((angIndCasted != null))
                    {
                        this._parent.AngInd = angIndCasted;
                        return;
                    }
                }
                if ((this._parent.HzInd == null))
                {
                    ISPS hzIndCasted = item.As<ISPS>();
                    if ((hzIndCasted != null))
                    {
                        this._parent.HzInd = hzIndCasted;
                        return;
                    }
                }
                if ((this._parent.SynPrg == null))
                {
                    ISPS synPrgCasted = item.As<ISPS>();
                    if ((synPrgCasted != null))
                    {
                        this._parent.SynPrg = synPrgCasted;
                        return;
                    }
                }
                if ((this._parent.DifVClc == null))
                {
                    IMV difVClcCasted = item.As<IMV>();
                    if ((difVClcCasted != null))
                    {
                        this._parent.DifVClc = difVClcCasted;
                        return;
                    }
                }
                if ((this._parent.DifAngClc == null))
                {
                    IMV difAngClcCasted = item.As<IMV>();
                    if ((difAngClcCasted != null))
                    {
                        this._parent.DifAngClc = difAngClcCasted;
                        return;
                    }
                }
                if ((this._parent.DifV == null))
                {
                    IASG difVCasted = item.As<IASG>();
                    if ((difVCasted != null))
                    {
                        this._parent.DifV = difVCasted;
                        return;
                    }
                }
                if ((this._parent.DifHz == null))
                {
                    IASG difHzCasted = item.As<IASG>();
                    if ((difHzCasted != null))
                    {
                        this._parent.DifHz = difHzCasted;
                        return;
                    }
                }
                if ((this._parent.DifAng == null))
                {
                    IASG difAngCasted = item.As<IASG>();
                    if ((difAngCasted != null))
                    {
                        this._parent.DifAng = difAngCasted;
                        return;
                    }
                }
                if ((this._parent.LivDeaMod == null))
                {
                    IING livDeaModCasted = item.As<IING>();
                    if ((livDeaModCasted != null))
                    {
                        this._parent.LivDeaMod = livDeaModCasted;
                        return;
                    }
                }
                if ((this._parent.DeaLinVal == null))
                {
                    IASG deaLinValCasted = item.As<IASG>();
                    if ((deaLinValCasted != null))
                    {
                        this._parent.DeaLinVal = deaLinValCasted;
                        return;
                    }
                }
                if ((this._parent.LivLinVal == null))
                {
                    IASG livLinValCasted = item.As<IASG>();
                    if ((livLinValCasted != null))
                    {
                        this._parent.LivLinVal = livLinValCasted;
                        return;
                    }
                }
                if ((this._parent.DeaBusVal == null))
                {
                    IASG deaBusValCasted = item.As<IASG>();
                    if ((deaBusValCasted != null))
                    {
                        this._parent.DeaBusVal = deaBusValCasted;
                        return;
                    }
                }
                if ((this._parent.PlsTmms == null))
                {
                    IING plsTmmsCasted = item.As<IING>();
                    if ((plsTmmsCasted != null))
                    {
                        this._parent.PlsTmms = plsTmmsCasted;
                        return;
                    }
                }
                if ((this._parent.BkrTmms == null))
                {
                    IING bkrTmmsCasted = item.As<IING>();
                    if ((bkrTmmsCasted != null))
                    {
                        this._parent.BkrTmms = bkrTmmsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RHz = null;
                this._parent.LHz = null;
                this._parent.RV = null;
                this._parent.LV = null;
                this._parent.Rel = null;
                this._parent.Vlnd = null;
                this._parent.AngInd = null;
                this._parent.HzInd = null;
                this._parent.SynPrg = null;
                this._parent.DifVClc = null;
                this._parent.DifAngClc = null;
                this._parent.DifV = null;
                this._parent.DifHz = null;
                this._parent.DifAng = null;
                this._parent.LivDeaMod = null;
                this._parent.DeaLinVal = null;
                this._parent.LivLinVal = null;
                this._parent.DeaBusVal = null;
                this._parent.PlsTmms = null;
                this._parent.BkrTmms = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RHz))
                {
                    return true;
                }
                if ((item == this._parent.LHz))
                {
                    return true;
                }
                if ((item == this._parent.RV))
                {
                    return true;
                }
                if ((item == this._parent.LV))
                {
                    return true;
                }
                if ((item == this._parent.Rel))
                {
                    return true;
                }
                if ((item == this._parent.Vlnd))
                {
                    return true;
                }
                if ((item == this._parent.AngInd))
                {
                    return true;
                }
                if ((item == this._parent.HzInd))
                {
                    return true;
                }
                if ((item == this._parent.SynPrg))
                {
                    return true;
                }
                if ((item == this._parent.DifVClc))
                {
                    return true;
                }
                if ((item == this._parent.DifAngClc))
                {
                    return true;
                }
                if ((item == this._parent.DifV))
                {
                    return true;
                }
                if ((item == this._parent.DifHz))
                {
                    return true;
                }
                if ((item == this._parent.DifAng))
                {
                    return true;
                }
                if ((item == this._parent.LivDeaMod))
                {
                    return true;
                }
                if ((item == this._parent.DeaLinVal))
                {
                    return true;
                }
                if ((item == this._parent.LivLinVal))
                {
                    return true;
                }
                if ((item == this._parent.DeaBusVal))
                {
                    return true;
                }
                if ((item == this._parent.PlsTmms))
                {
                    return true;
                }
                if ((item == this._parent.BkrTmms))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RHz != null))
                {
                    array[arrayIndex] = this._parent.RHz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LHz != null))
                {
                    array[arrayIndex] = this._parent.LHz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RV != null))
                {
                    array[arrayIndex] = this._parent.RV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LV != null))
                {
                    array[arrayIndex] = this._parent.LV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Rel != null))
                {
                    array[arrayIndex] = this._parent.Rel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Vlnd != null))
                {
                    array[arrayIndex] = this._parent.Vlnd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngInd != null))
                {
                    array[arrayIndex] = this._parent.AngInd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HzInd != null))
                {
                    array[arrayIndex] = this._parent.HzInd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SynPrg != null))
                {
                    array[arrayIndex] = this._parent.SynPrg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifVClc != null))
                {
                    array[arrayIndex] = this._parent.DifVClc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifAngClc != null))
                {
                    array[arrayIndex] = this._parent.DifAngClc;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifV != null))
                {
                    array[arrayIndex] = this._parent.DifV;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifHz != null))
                {
                    array[arrayIndex] = this._parent.DifHz;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DifAng != null))
                {
                    array[arrayIndex] = this._parent.DifAng;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LivDeaMod != null))
                {
                    array[arrayIndex] = this._parent.LivDeaMod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeaLinVal != null))
                {
                    array[arrayIndex] = this._parent.DeaLinVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LivLinVal != null))
                {
                    array[arrayIndex] = this._parent.LivLinVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeaBusVal != null))
                {
                    array[arrayIndex] = this._parent.DeaBusVal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PlsTmms != null))
                {
                    array[arrayIndex] = this._parent.PlsTmms;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BkrTmms != null))
                {
                    array[arrayIndex] = this._parent.BkrTmms;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RHz == item))
                {
                    this._parent.RHz = null;
                    return true;
                }
                if ((this._parent.LHz == item))
                {
                    this._parent.LHz = null;
                    return true;
                }
                if ((this._parent.RV == item))
                {
                    this._parent.RV = null;
                    return true;
                }
                if ((this._parent.LV == item))
                {
                    this._parent.LV = null;
                    return true;
                }
                if ((this._parent.Rel == item))
                {
                    this._parent.Rel = null;
                    return true;
                }
                if ((this._parent.Vlnd == item))
                {
                    this._parent.Vlnd = null;
                    return true;
                }
                if ((this._parent.AngInd == item))
                {
                    this._parent.AngInd = null;
                    return true;
                }
                if ((this._parent.HzInd == item))
                {
                    this._parent.HzInd = null;
                    return true;
                }
                if ((this._parent.SynPrg == item))
                {
                    this._parent.SynPrg = null;
                    return true;
                }
                if ((this._parent.DifVClc == item))
                {
                    this._parent.DifVClc = null;
                    return true;
                }
                if ((this._parent.DifAngClc == item))
                {
                    this._parent.DifAngClc = null;
                    return true;
                }
                if ((this._parent.DifV == item))
                {
                    this._parent.DifV = null;
                    return true;
                }
                if ((this._parent.DifHz == item))
                {
                    this._parent.DifHz = null;
                    return true;
                }
                if ((this._parent.DifAng == item))
                {
                    this._parent.DifAng = null;
                    return true;
                }
                if ((this._parent.LivDeaMod == item))
                {
                    this._parent.LivDeaMod = null;
                    return true;
                }
                if ((this._parent.DeaLinVal == item))
                {
                    this._parent.DeaLinVal = null;
                    return true;
                }
                if ((this._parent.LivLinVal == item))
                {
                    this._parent.LivLinVal = null;
                    return true;
                }
                if ((this._parent.DeaBusVal == item))
                {
                    this._parent.DeaBusVal = null;
                    return true;
                }
                if ((this._parent.PlsTmms == item))
                {
                    this._parent.PlsTmms = null;
                    return true;
                }
                if ((this._parent.BkrTmms == item))
                {
                    this._parent.BkrTmms = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RHz).Concat(this._parent.LHz).Concat(this._parent.RV).Concat(this._parent.LV).Concat(this._parent.Rel).Concat(this._parent.Vlnd).Concat(this._parent.AngInd).Concat(this._parent.HzInd).Concat(this._parent.SynPrg).Concat(this._parent.DifVClc).Concat(this._parent.DifAngClc).Concat(this._parent.DifV).Concat(this._parent.DifHz).Concat(this._parent.DifAng).Concat(this._parent.LivDeaMod).Concat(this._parent.DeaLinVal).Concat(this._parent.LivLinVal).Concat(this._parent.DeaBusVal).Concat(this._parent.PlsTmms).Concat(this._parent.BkrTmms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RHz property
        /// </summary>
        private sealed class RHzProxy : ModelPropertyChange<IRSYN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RHzProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.RHz;
                }
                set
                {
                    this.ModelElement.RHz = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RHzChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RHzChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LHz property
        /// </summary>
        private sealed class LHzProxy : ModelPropertyChange<IRSYN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LHzProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.LHz;
                }
                set
                {
                    this.ModelElement.LHz = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LHzChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LHzChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RV property
        /// </summary>
        private sealed class RVProxy : ModelPropertyChange<IRSYN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RVProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.RV;
                }
                set
                {
                    this.ModelElement.RV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LV property
        /// </summary>
        private sealed class LVProxy : ModelPropertyChange<IRSYN, ISPC>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LVProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPC Value
            {
                get
                {
                    return this.ModelElement.LV;
                }
                set
                {
                    this.ModelElement.LV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Rel property
        /// </summary>
        private sealed class RelProxy : ModelPropertyChange<IRSYN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RelProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Rel;
                }
                set
                {
                    this.ModelElement.Rel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Vlnd property
        /// </summary>
        private sealed class VlndProxy : ModelPropertyChange<IRSYN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VlndProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.Vlnd;
                }
                set
                {
                    this.ModelElement.Vlnd = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VlndChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VlndChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AngInd property
        /// </summary>
        private sealed class AngIndProxy : ModelPropertyChange<IRSYN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngIndProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.AngInd;
                }
                set
                {
                    this.ModelElement.AngInd = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngIndChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngIndChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HzInd property
        /// </summary>
        private sealed class HzIndProxy : ModelPropertyChange<IRSYN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HzIndProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.HzInd;
                }
                set
                {
                    this.ModelElement.HzInd = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzIndChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HzIndChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SynPrg property
        /// </summary>
        private sealed class SynPrgProxy : ModelPropertyChange<IRSYN, ISPS>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SynPrgProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISPS Value
            {
                get
                {
                    return this.ModelElement.SynPrg;
                }
                set
                {
                    this.ModelElement.SynPrg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynPrgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynPrgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifVClc property
        /// </summary>
        private sealed class DifVClcProxy : ModelPropertyChange<IRSYN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifVClcProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.DifVClc;
                }
                set
                {
                    this.ModelElement.DifVClc = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifVClcChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifVClcChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifAngClc property
        /// </summary>
        private sealed class DifAngClcProxy : ModelPropertyChange<IRSYN, IMV>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifAngClcProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMV Value
            {
                get
                {
                    return this.ModelElement.DifAngClc;
                }
                set
                {
                    this.ModelElement.DifAngClc = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifAngClcChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifAngClcChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifV property
        /// </summary>
        private sealed class DifVProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifVProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DifV;
                }
                set
                {
                    this.ModelElement.DifV = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifVChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifVChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifHz property
        /// </summary>
        private sealed class DifHzProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifHzProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DifHz;
                }
                set
                {
                    this.ModelElement.DifHz = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifHzChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifHzChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DifAng property
        /// </summary>
        private sealed class DifAngProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DifAngProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DifAng;
                }
                set
                {
                    this.ModelElement.DifAng = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifAngChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DifAngChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LivDeaMod property
        /// </summary>
        private sealed class LivDeaModProxy : ModelPropertyChange<IRSYN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LivDeaModProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.LivDeaMod;
                }
                set
                {
                    this.ModelElement.LivDeaMod = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LivDeaModChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LivDeaModChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeaLinVal property
        /// </summary>
        private sealed class DeaLinValProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeaLinValProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DeaLinVal;
                }
                set
                {
                    this.ModelElement.DeaLinVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeaLinValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeaLinValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LivLinVal property
        /// </summary>
        private sealed class LivLinValProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LivLinValProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.LivLinVal;
                }
                set
                {
                    this.ModelElement.LivLinVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LivLinValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LivLinValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeaBusVal property
        /// </summary>
        private sealed class DeaBusValProxy : ModelPropertyChange<IRSYN, IASG>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeaBusValProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IASG Value
            {
                get
                {
                    return this.ModelElement.DeaBusVal;
                }
                set
                {
                    this.ModelElement.DeaBusVal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeaBusValChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeaBusValChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PlsTmms property
        /// </summary>
        private sealed class PlsTmmsProxy : ModelPropertyChange<IRSYN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlsTmmsProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.PlsTmms;
                }
                set
                {
                    this.ModelElement.PlsTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlsTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlsTmmsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BkrTmms property
        /// </summary>
        private sealed class BkrTmmsProxy : ModelPropertyChange<IRSYN, IING>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BkrTmmsProxy(IRSYN modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IING Value
            {
                get
                {
                    return this.ModelElement.BkrTmms;
                }
                set
                {
                    this.ModelElement.BkrTmms = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BkrTmmsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BkrTmmsChanged -= handler;
            }
        }
    }
}

