//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;

namespace TTC2017.SmartGrids.CIM.PackageDependencies
{
    
    
    /// <summary>
    /// The default implementation of the PackageDependenciesCIMVeresion class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PackageDependencies")]
    [XmlNamespacePrefixAttribute("cimPackageDependencies")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//PackageDependencies/PackageDependencie" +
        "sCIMVeresion")]
    [DebuggerDisplayAttribute("PackageDependenciesCIMVeresion {UUID}")]
    public class PackageDependenciesCIMVeresion : Element, IPackageDependenciesCIMVeresion, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Date property
        /// </summary>
        private DateTime _date;
        
        /// <summary>
        /// The backing field for the Vesion property
        /// </summary>
        private string _vesion;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The date property
        /// </summary>
        [XmlElementNameAttribute("date")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    DateTime old = this._date;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateChanging(e);
                    this.OnPropertyChanging("Date", e);
                    this._date = value;
                    this.OnDateChanged(e);
                    this.OnPropertyChanged("Date", e);
                }
            }
        }
        
        /// <summary>
        /// The vesion property
        /// </summary>
        [XmlElementNameAttribute("vesion")]
        [XmlAttributeAttribute(true)]
        public virtual string Vesion
        {
            get
            {
                return this._vesion;
            }
            set
            {
                if ((this._vesion != value))
                {
                    string old = this._vesion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVesionChanging(e);
                    this.OnPropertyChanging("Vesion", e);
                    this._vesion = value;
                    this.OnVesionChanged(e);
                    this.OnPropertyChanged("Vesion", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//PackageDependencies/PackageDependencie" +
                            "sCIMVeresion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Date property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanging;
        
        /// <summary>
        /// Gets fired when the Date property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanged;
        
        /// <summary>
        /// Gets fired before the Vesion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VesionChanging;
        
        /// <summary>
        /// Gets fired when the Vesion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VesionChanged;
        
        /// <summary>
        /// Raises the DateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VesionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVesionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VesionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VesionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVesionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VesionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DATE"))
            {
                return this.Date;
            }
            if ((attribute == "VESION"))
            {
                return this.Vesion;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DATE"))
            {
                this.Date = ((DateTime)(value));
                return;
            }
            if ((feature == "VESION"))
            {
                this.Vesion = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//PackageDependencies/PackageDependencie" +
                        "sCIMVeresion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the date property
        /// </summary>
        private sealed class DateProxy : ModelPropertyChange<IPackageDependenciesCIMVeresion, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateProxy(IPackageDependenciesCIMVeresion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.Date;
                }
                set
                {
                    this.ModelElement.Date = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vesion property
        /// </summary>
        private sealed class VesionProxy : ModelPropertyChange<IPackageDependenciesCIMVeresion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VesionProxy(IPackageDependenciesCIMVeresion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Vesion;
                }
                set
                {
                    this.ModelElement.Vesion = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VesionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VesionChanged -= handler;
            }
        }
    }
}

