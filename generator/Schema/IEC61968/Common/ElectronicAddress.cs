//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the ElectronicAddress class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ElectronicAddress")]
    [DebuggerDisplayAttribute("ElectronicAddress {UUID}")]
    public partial class ElectronicAddress : Element, IElectronicAddress, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Lan property
        /// </summary>
        private string _lan;
        
        private static Lazy<ITypedElement> _lanAttribute = new Lazy<ITypedElement>(RetrieveLanAttribute);
        
        /// <summary>
        /// The backing field for the Email property
        /// </summary>
        private string _email;
        
        private static Lazy<ITypedElement> _emailAttribute = new Lazy<ITypedElement>(RetrieveEmailAttribute);
        
        /// <summary>
        /// The backing field for the UserID property
        /// </summary>
        private string _userID;
        
        private static Lazy<ITypedElement> _userIDAttribute = new Lazy<ITypedElement>(RetrieveUserIDAttribute);
        
        /// <summary>
        /// The backing field for the Web property
        /// </summary>
        private string _web;
        
        private static Lazy<ITypedElement> _webAttribute = new Lazy<ITypedElement>(RetrieveWebAttribute);
        
        /// <summary>
        /// The backing field for the Password property
        /// </summary>
        private string _password;
        
        private static Lazy<ITypedElement> _passwordAttribute = new Lazy<ITypedElement>(RetrievePasswordAttribute);
        
        /// <summary>
        /// The backing field for the Radio property
        /// </summary>
        private string _radio;
        
        private static Lazy<ITypedElement> _radioAttribute = new Lazy<ITypedElement>(RetrieveRadioAttribute);
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The lan property
        /// </summary>
        [XmlElementNameAttribute("lan")]
        [XmlAttributeAttribute(true)]
        public virtual string Lan
        {
            get
            {
                return this._lan;
            }
            set
            {
                if ((this._lan != value))
                {
                    string old = this._lan;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLanChanging(e);
                    this.OnPropertyChanging("Lan", e, _lanAttribute);
                    this._lan = value;
                    this.OnLanChanged(e);
                    this.OnPropertyChanged("Lan", e, _lanAttribute);
                }
            }
        }
        
        /// <summary>
        /// The email property
        /// </summary>
        [XmlElementNameAttribute("email")]
        [XmlAttributeAttribute(true)]
        public virtual string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    string old = this._email;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEmailChanging(e);
                    this.OnPropertyChanging("Email", e, _emailAttribute);
                    this._email = value;
                    this.OnEmailChanged(e);
                    this.OnPropertyChanged("Email", e, _emailAttribute);
                }
            }
        }
        
        /// <summary>
        /// The userID property
        /// </summary>
        [XmlElementNameAttribute("userID")]
        [XmlAttributeAttribute(true)]
        public virtual string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    string old = this._userID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUserIDChanging(e);
                    this.OnPropertyChanging("UserID", e, _userIDAttribute);
                    this._userID = value;
                    this.OnUserIDChanged(e);
                    this.OnPropertyChanged("UserID", e, _userIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The web property
        /// </summary>
        [XmlElementNameAttribute("web")]
        [XmlAttributeAttribute(true)]
        public virtual string Web
        {
            get
            {
                return this._web;
            }
            set
            {
                if ((this._web != value))
                {
                    string old = this._web;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWebChanging(e);
                    this.OnPropertyChanging("Web", e, _webAttribute);
                    this._web = value;
                    this.OnWebChanged(e);
                    this.OnPropertyChanged("Web", e, _webAttribute);
                }
            }
        }
        
        /// <summary>
        /// The password property
        /// </summary>
        [XmlElementNameAttribute("password")]
        [XmlAttributeAttribute(true)]
        public virtual string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    string old = this._password;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPasswordChanging(e);
                    this.OnPropertyChanging("Password", e, _passwordAttribute);
                    this._password = value;
                    this.OnPasswordChanged(e);
                    this.OnPropertyChanged("Password", e, _passwordAttribute);
                }
            }
        }
        
        /// <summary>
        /// The radio property
        /// </summary>
        [XmlElementNameAttribute("radio")]
        [XmlAttributeAttribute(true)]
        public virtual string Radio
        {
            get
            {
                return this._radio;
            }
            set
            {
                if ((this._radio != value))
                {
                    string old = this._radio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRadioChanging(e);
                    this.OnPropertyChanging("Radio", e, _radioAttribute);
                    this._radio = value;
                    this.OnRadioChanged(e);
                    this.OnPropertyChanged("Radio", e, _radioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElectronicAddressReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ElectronicAddress")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Lan property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LanChanging;
        
        /// <summary>
        /// Gets fired when the Lan property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LanChanged;
        
        /// <summary>
        /// Gets fired before the Email property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmailChanging;
        
        /// <summary>
        /// Gets fired when the Email property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmailChanged;
        
        /// <summary>
        /// Gets fired before the UserID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserIDChanging;
        
        /// <summary>
        /// Gets fired when the UserID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UserIDChanged;
        
        /// <summary>
        /// Gets fired before the Web property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WebChanging;
        
        /// <summary>
        /// Gets fired when the Web property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WebChanged;
        
        /// <summary>
        /// Gets fired before the Password property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PasswordChanging;
        
        /// <summary>
        /// Gets fired when the Password property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PasswordChanged;
        
        /// <summary>
        /// Gets fired before the Radio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RadioChanging;
        
        /// <summary>
        /// Gets fired when the Radio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RadioChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveLanAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("lan")));
        }
        
        /// <summary>
        /// Raises the LanChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLanChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LanChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LanChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLanChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LanChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEmailAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("email")));
        }
        
        /// <summary>
        /// Raises the EmailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUserIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("userID")));
        }
        
        /// <summary>
        /// Raises the UserIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UserIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UserIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWebAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("web")));
        }
        
        /// <summary>
        /// Raises the WebChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWebChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WebChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WebChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWebChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WebChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePasswordAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("password")));
        }
        
        /// <summary>
        /// Raises the PasswordChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPasswordChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PasswordChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PasswordChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPasswordChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PasswordChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRadioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("radio")));
        }
        
        /// <summary>
        /// Raises the RadioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRadioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RadioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RadioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRadioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RadioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ElectronicAddress.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LAN"))
            {
                return this.Lan;
            }
            if ((attribute == "EMAIL"))
            {
                return this.Email;
            }
            if ((attribute == "USERID"))
            {
                return this.UserID;
            }
            if ((attribute == "WEB"))
            {
                return this.Web;
            }
            if ((attribute == "PASSWORD"))
            {
                return this.Password;
            }
            if ((attribute == "RADIO"))
            {
                return this.Radio;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "LAN"))
            {
                this.Lan = ((string)(value));
                return;
            }
            if ((feature == "EMAIL"))
            {
                this.Email = ((string)(value));
                return;
            }
            if ((feature == "USERID"))
            {
                this.UserID = ((string)(value));
                return;
            }
            if ((feature == "WEB"))
            {
                this.Web = ((string)(value));
                return;
            }
            if ((feature == "PASSWORD"))
            {
                this.Password = ((string)(value));
                return;
            }
            if ((feature == "RADIO"))
            {
                this.Radio = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ElectronicAddress")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ElectronicAddress class
        /// </summary>
        public class ElectronicAddressReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ElectronicAddress _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElectronicAddressReferencedElementsCollection(ElectronicAddress parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lan property
        /// </summary>
        private sealed class LanProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LanProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "lan")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Lan;
                }
                set
                {
                    this.ModelElement.Lan = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the email property
        /// </summary>
        private sealed class EmailProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EmailProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "email")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Email;
                }
                set
                {
                    this.ModelElement.Email = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the userID property
        /// </summary>
        private sealed class UserIDProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UserIDProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "userID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.UserID;
                }
                set
                {
                    this.ModelElement.UserID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the web property
        /// </summary>
        private sealed class WebProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WebProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "web")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Web;
                }
                set
                {
                    this.ModelElement.Web = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the password property
        /// </summary>
        private sealed class PasswordProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PasswordProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "password")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Password;
                }
                set
                {
                    this.ModelElement.Password = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the radio property
        /// </summary>
        private sealed class RadioProxy : ModelPropertyChange<IElectronicAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RadioProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "radio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Radio;
                }
                set
                {
                    this.ModelElement.Radio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IElectronicAddress, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IElectronicAddress modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

