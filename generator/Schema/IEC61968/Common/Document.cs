//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the Document class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Document")]
    [DebuggerDisplayAttribute("Document {UUID}")]
    public class Document : IdentifiedObject, IDocument, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Subject property
        /// </summary>
        private string _subject;
        
        /// <summary>
        /// The backing field for the CreatedDateTime property
        /// </summary>
        private DateTime _createdDateTime;
        
        /// <summary>
        /// The backing field for the RevisionNumber property
        /// </summary>
        private string _revisionNumber;
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        /// <summary>
        /// The backing field for the LastModifiedDateTime property
        /// </summary>
        private DateTime _lastModifiedDateTime;
        
        /// <summary>
        /// The backing field for the Title property
        /// </summary>
        private string _title;
        
        /// <summary>
        /// The backing field for the ScheduledEvents property
        /// </summary>
        private DocumentScheduledEventsCollection _scheduledEvents;
        
        /// <summary>
        /// The backing field for the ErpOrganisationRoles property
        /// </summary>
        private DocumentErpOrganisationRolesCollection _erpOrganisationRoles;
        
        /// <summary>
        /// The backing field for the ToDocumentRoles property
        /// </summary>
        private DocumentToDocumentRolesCollection _toDocumentRoles;
        
        /// <summary>
        /// The backing field for the AssetRoles property
        /// </summary>
        private DocumentAssetRolesCollection _assetRoles;
        
        /// <summary>
        /// The backing field for the ErpPersonRoles property
        /// </summary>
        private DocumentErpPersonRolesCollection _erpPersonRoles;
        
        /// <summary>
        /// The backing field for the ElectronicAddress property
        /// </summary>
        private IElectronicAddress _electronicAddress;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the NetworkDataSets property
        /// </summary>
        private DocumentNetworkDataSetsCollection _networkDataSets;
        
        /// <summary>
        /// The backing field for the PowerSystemResourceRoles property
        /// </summary>
        private DocumentPowerSystemResourceRolesCollection _powerSystemResourceRoles;
        
        /// <summary>
        /// The backing field for the ActivityRecords property
        /// </summary>
        private DocumentActivityRecordsCollection _activityRecords;
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private DocumentMeasurementsCollection _measurements;
        
        /// <summary>
        /// The backing field for the FromDocumentRoles property
        /// </summary>
        private DocumentFromDocumentRolesCollection _fromDocumentRoles;
        
        /// <summary>
        /// The backing field for the ChangeSets property
        /// </summary>
        private DocumentChangeSetsCollection _changeSets;
        
        /// <summary>
        /// The backing field for the DocStatus property
        /// </summary>
        private IStatus _docStatus;
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private DocumentChangeItemsCollection _changeItems;
        
        /// <summary>
        /// The backing field for the ScheduleParameterInfos property
        /// </summary>
        private DocumentScheduleParameterInfosCollection _scheduleParameterInfos;
        
        private static IClass _classInstance;
        
        public Document()
        {
            this._scheduledEvents = new DocumentScheduledEventsCollection(this);
            this._scheduledEvents.CollectionChanging += this.ScheduledEventsCollectionChanging;
            this._scheduledEvents.CollectionChanged += this.ScheduledEventsCollectionChanged;
            this._erpOrganisationRoles = new DocumentErpOrganisationRolesCollection(this);
            this._erpOrganisationRoles.CollectionChanging += this.ErpOrganisationRolesCollectionChanging;
            this._erpOrganisationRoles.CollectionChanged += this.ErpOrganisationRolesCollectionChanged;
            this._toDocumentRoles = new DocumentToDocumentRolesCollection(this);
            this._toDocumentRoles.CollectionChanging += this.ToDocumentRolesCollectionChanging;
            this._toDocumentRoles.CollectionChanged += this.ToDocumentRolesCollectionChanged;
            this._assetRoles = new DocumentAssetRolesCollection(this);
            this._assetRoles.CollectionChanging += this.AssetRolesCollectionChanging;
            this._assetRoles.CollectionChanged += this.AssetRolesCollectionChanged;
            this._erpPersonRoles = new DocumentErpPersonRolesCollection(this);
            this._erpPersonRoles.CollectionChanging += this.ErpPersonRolesCollectionChanging;
            this._erpPersonRoles.CollectionChanged += this.ErpPersonRolesCollectionChanged;
            this._networkDataSets = new DocumentNetworkDataSetsCollection(this);
            this._networkDataSets.CollectionChanging += this.NetworkDataSetsCollectionChanging;
            this._networkDataSets.CollectionChanged += this.NetworkDataSetsCollectionChanged;
            this._powerSystemResourceRoles = new DocumentPowerSystemResourceRolesCollection(this);
            this._powerSystemResourceRoles.CollectionChanging += this.PowerSystemResourceRolesCollectionChanging;
            this._powerSystemResourceRoles.CollectionChanged += this.PowerSystemResourceRolesCollectionChanged;
            this._activityRecords = new DocumentActivityRecordsCollection(this);
            this._activityRecords.CollectionChanging += this.ActivityRecordsCollectionChanging;
            this._activityRecords.CollectionChanged += this.ActivityRecordsCollectionChanged;
            this._measurements = new DocumentMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
            this._fromDocumentRoles = new DocumentFromDocumentRolesCollection(this);
            this._fromDocumentRoles.CollectionChanging += this.FromDocumentRolesCollectionChanging;
            this._fromDocumentRoles.CollectionChanged += this.FromDocumentRolesCollectionChanged;
            this._changeSets = new DocumentChangeSetsCollection(this);
            this._changeSets.CollectionChanging += this.ChangeSetsCollectionChanging;
            this._changeSets.CollectionChanged += this.ChangeSetsCollectionChanged;
            this._changeItems = new DocumentChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._scheduleParameterInfos = new DocumentScheduleParameterInfosCollection(this);
            this._scheduleParameterInfos.CollectionChanging += this.ScheduleParameterInfosCollectionChanging;
            this._scheduleParameterInfos.CollectionChanged += this.ScheduleParameterInfosCollectionChanged;
        }
        
        /// <summary>
        /// The subject property
        /// </summary>
        [XmlElementNameAttribute("subject")]
        [XmlAttributeAttribute(true)]
        public virtual string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    string old = this._subject;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubjectChanging(e);
                    this.OnPropertyChanging("Subject", e);
                    this._subject = value;
                    this.OnSubjectChanged(e);
                    this.OnPropertyChanged("Subject", e);
                }
            }
        }
        
        /// <summary>
        /// The createdDateTime property
        /// </summary>
        [XmlElementNameAttribute("createdDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime CreatedDateTime
        {
            get
            {
                return this._createdDateTime;
            }
            set
            {
                if ((this._createdDateTime != value))
                {
                    DateTime old = this._createdDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCreatedDateTimeChanging(e);
                    this.OnPropertyChanging("CreatedDateTime", e);
                    this._createdDateTime = value;
                    this.OnCreatedDateTimeChanged(e);
                    this.OnPropertyChanged("CreatedDateTime", e);
                }
            }
        }
        
        /// <summary>
        /// The revisionNumber property
        /// </summary>
        [XmlElementNameAttribute("revisionNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string RevisionNumber
        {
            get
            {
                return this._revisionNumber;
            }
            set
            {
                if ((this._revisionNumber != value))
                {
                    string old = this._revisionNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRevisionNumberChanging(e);
                    this.OnPropertyChanging("RevisionNumber", e);
                    this._revisionNumber = value;
                    this.OnRevisionNumberChanged(e);
                    this.OnPropertyChanged("RevisionNumber", e);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e);
                }
            }
        }
        
        /// <summary>
        /// The lastModifiedDateTime property
        /// </summary>
        [XmlElementNameAttribute("lastModifiedDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime LastModifiedDateTime
        {
            get
            {
                return this._lastModifiedDateTime;
            }
            set
            {
                if ((this._lastModifiedDateTime != value))
                {
                    DateTime old = this._lastModifiedDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastModifiedDateTimeChanging(e);
                    this.OnPropertyChanging("LastModifiedDateTime", e);
                    this._lastModifiedDateTime = value;
                    this.OnLastModifiedDateTimeChanged(e);
                    this.OnPropertyChanged("LastModifiedDateTime", e);
                }
            }
        }
        
        /// <summary>
        /// The title property
        /// </summary>
        [XmlElementNameAttribute("title")]
        [XmlAttributeAttribute(true)]
        public virtual string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    string old = this._title;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTitleChanging(e);
                    this.OnPropertyChanging("Title", e);
                    this._title = value;
                    this.OnTitleChanged(e);
                    this.OnPropertyChanged("Title", e);
                }
            }
        }
        
        /// <summary>
        /// The ScheduledEvents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduledEvent> ScheduledEvents
        {
            get
            {
                return this._scheduledEvents;
            }
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocOrgRole> ErpOrganisationRoles
        {
            get
            {
                return this._erpOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The ToDocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FromDocument")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocDocRole> ToDocumentRoles
        {
            get
            {
                return this._toDocumentRoles;
            }
        }
        
        /// <summary>
        /// The AssetRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocAssetRole> AssetRoles
        {
            get
            {
                return this._assetRoles;
            }
        }
        
        /// <summary>
        /// The ErpPersonRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocErpPersonRole> ErpPersonRoles
        {
            get
            {
                return this._erpPersonRoles;
            }
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        [XmlElementNameAttribute("electronicAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IElectronicAddress ElectronicAddress
        {
            get
            {
                return this._electronicAddress;
            }
            set
            {
                if ((this._electronicAddress != value))
                {
                    IElectronicAddress old = this._electronicAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectronicAddressChanging(e);
                    this.OnPropertyChanging("ElectronicAddress", e);
                    this._electronicAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetElectronicAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetElectronicAddress;
                    }
                    this.OnElectronicAddressChanged(e);
                    this.OnPropertyChanged("ElectronicAddress", e);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The NetworkDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Documents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INetworkDataSet> NetworkDataSets
        {
            get
            {
                return this._networkDataSets;
            }
        }
        
        /// <summary>
        /// The PowerSystemResourceRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocPsrRole> PowerSystemResourceRoles
        {
            get
            {
                return this._powerSystemResourceRoles;
            }
        }
        
        /// <summary>
        /// The ActivityRecords property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Documents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IActivityRecord> ActivityRecords
        {
            get
            {
                return this._activityRecords;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Documents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// The FromDocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToDocument")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocDocRole> FromDocumentRoles
        {
            get
            {
                return this._fromDocumentRoles;
            }
        }
        
        /// <summary>
        /// The ChangeSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Documents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeSet> ChangeSets
        {
            get
            {
                return this._changeSets;
            }
        }
        
        /// <summary>
        /// The docStatus property
        /// </summary>
        [XmlElementNameAttribute("docStatus")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus DocStatus
        {
            get
            {
                return this._docStatus;
            }
            set
            {
                if ((this._docStatus != value))
                {
                    IStatus old = this._docStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDocStatusChanging(e);
                    this.OnPropertyChanging("DocStatus", e);
                    this._docStatus = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDocStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDocStatus;
                    }
                    this.OnDocStatusChanged(e);
                    this.OnPropertyChanged("DocStatus", e);
                }
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Document")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The ScheduleParameterInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Documents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduleParameterInfo> ScheduleParameterInfos
        {
            get
            {
                return this._scheduleParameterInfos;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DocumentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Document")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Subject property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubjectChanging;
        
        /// <summary>
        /// Gets fired when the Subject property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubjectChanged;
        
        /// <summary>
        /// Gets fired before the CreatedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreatedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the CreatedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreatedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the RevisionNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RevisionNumberChanging;
        
        /// <summary>
        /// Gets fired when the RevisionNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RevisionNumberChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the LastModifiedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastModifiedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the LastModifiedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastModifiedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Title property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TitleChanging;
        
        /// <summary>
        /// Gets fired when the Title property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TitleChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the DocStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocStatusChanging;
        
        /// <summary>
        /// Gets fired when the DocStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocStatusChanged;
        
        /// <summary>
        /// Raises the SubjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreatedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreatedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreatedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreatedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreatedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreatedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RevisionNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRevisionNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RevisionNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RevisionNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRevisionNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RevisionNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastModifiedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastModifiedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastModifiedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastModifiedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastModifiedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastModifiedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TitleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTitleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TitleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TitleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTitleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TitleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ScheduledEvents", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduledEvents", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToDocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToDocumentRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ToDocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToDocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToDocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToDocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersonRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersonRoles", e);
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectronicAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectronicAddress(object sender, System.EventArgs eventArgs)
        {
            this.ElectronicAddress = null;
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NetworkDataSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NetworkDataSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResourceRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResourceRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResourceRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResourceRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ActivityRecords", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActivityRecords", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FromDocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromDocumentRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FromDocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FromDocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromDocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FromDocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeSets", e);
        }
        
        /// <summary>
        /// Raises the DocStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DocStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DocStatus property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDocStatus(object sender, System.EventArgs eventArgs)
        {
            this.DocStatus = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduleParameterInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleParameterInfosCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ScheduleParameterInfos", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduleParameterInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleParameterInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduleParameterInfos", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUBJECT"))
            {
                return this.Subject;
            }
            if ((attribute == "CREATEDDATETIME"))
            {
                return this.CreatedDateTime;
            }
            if ((attribute == "REVISIONNUMBER"))
            {
                return this.RevisionNumber;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "LASTMODIFIEDDATETIME"))
            {
                return this.LastModifiedDateTime;
            }
            if ((attribute == "TITLE"))
            {
                return this.Title;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SCHEDULEDEVENTS"))
            {
                return this._scheduledEvents;
            }
            if ((feature == "ERPORGANISATIONROLES"))
            {
                return this._erpOrganisationRoles;
            }
            if ((feature == "TODOCUMENTROLES"))
            {
                return this._toDocumentRoles;
            }
            if ((feature == "ASSETROLES"))
            {
                return this._assetRoles;
            }
            if ((feature == "ERPPERSONROLES"))
            {
                return this._erpPersonRoles;
            }
            if ((feature == "NETWORKDATASETS"))
            {
                return this._networkDataSets;
            }
            if ((feature == "POWERSYSTEMRESOURCEROLES"))
            {
                return this._powerSystemResourceRoles;
            }
            if ((feature == "ACTIVITYRECORDS"))
            {
                return this._activityRecords;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            if ((feature == "FROMDOCUMENTROLES"))
            {
                return this._fromDocumentRoles;
            }
            if ((feature == "CHANGESETS"))
            {
                return this._changeSets;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "SCHEDULEPARAMETERINFOS"))
            {
                return this._scheduleParameterInfos;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ELECTRONICADDRESS"))
            {
                this.ElectronicAddress = ((IElectronicAddress)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "DOCSTATUS"))
            {
                this.DocStatus = ((IStatus)(value));
                return;
            }
            if ((feature == "SUBJECT"))
            {
                this.Subject = ((string)(value));
                return;
            }
            if ((feature == "CREATEDDATETIME"))
            {
                this.CreatedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "REVISIONNUMBER"))
            {
                this.RevisionNumber = ((string)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "LASTMODIFIEDDATETIME"))
            {
                this.LastModifiedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "TITLE"))
            {
                this.Title = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "DocStatus"))
            {
                return new DocStatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "DocStatus"))
            {
                return new DocStatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Document")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Document class
        /// </summary>
        public class DocumentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Document _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DocumentReferencedElementsCollection(Document parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ScheduledEvents.Count);
                    count = (count + this._parent.ErpOrganisationRoles.Count);
                    count = (count + this._parent.ToDocumentRoles.Count);
                    count = (count + this._parent.AssetRoles.Count);
                    count = (count + this._parent.ErpPersonRoles.Count);
                    if ((this._parent.ElectronicAddress != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.NetworkDataSets.Count);
                    count = (count + this._parent.PowerSystemResourceRoles.Count);
                    count = (count + this._parent.ActivityRecords.Count);
                    count = (count + this._parent.Measurements.Count);
                    count = (count + this._parent.FromDocumentRoles.Count);
                    count = (count + this._parent.ChangeSets.Count);
                    if ((this._parent.DocStatus != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.ScheduleParameterInfos.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToDocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElectronicAddressChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerSystemResourceRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FromDocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DocStatusChanged += this.PropagateValueChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ScheduleParameterInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToDocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElectronicAddressChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerSystemResourceRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FromDocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DocStatusChanged -= this.PropagateValueChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ScheduleParameterInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IScheduledEvent scheduledEventsCasted = item.As<IScheduledEvent>();
                if ((scheduledEventsCasted != null))
                {
                    this._parent.ScheduledEvents.Add(scheduledEventsCasted);
                }
                IDocOrgRole erpOrganisationRolesCasted = item.As<IDocOrgRole>();
                if ((erpOrganisationRolesCasted != null))
                {
                    this._parent.ErpOrganisationRoles.Add(erpOrganisationRolesCasted);
                }
                IDocDocRole toDocumentRolesCasted = item.As<IDocDocRole>();
                if ((toDocumentRolesCasted != null))
                {
                    this._parent.ToDocumentRoles.Add(toDocumentRolesCasted);
                }
                IDocAssetRole assetRolesCasted = item.As<IDocAssetRole>();
                if ((assetRolesCasted != null))
                {
                    this._parent.AssetRoles.Add(assetRolesCasted);
                }
                IDocErpPersonRole erpPersonRolesCasted = item.As<IDocErpPersonRole>();
                if ((erpPersonRolesCasted != null))
                {
                    this._parent.ErpPersonRoles.Add(erpPersonRolesCasted);
                }
                if ((this._parent.ElectronicAddress == null))
                {
                    IElectronicAddress electronicAddressCasted = item.As<IElectronicAddress>();
                    if ((electronicAddressCasted != null))
                    {
                        this._parent.ElectronicAddress = electronicAddressCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                INetworkDataSet networkDataSetsCasted = item.As<INetworkDataSet>();
                if ((networkDataSetsCasted != null))
                {
                    this._parent.NetworkDataSets.Add(networkDataSetsCasted);
                }
                IDocPsrRole powerSystemResourceRolesCasted = item.As<IDocPsrRole>();
                if ((powerSystemResourceRolesCasted != null))
                {
                    this._parent.PowerSystemResourceRoles.Add(powerSystemResourceRolesCasted);
                }
                IActivityRecord activityRecordsCasted = item.As<IActivityRecord>();
                if ((activityRecordsCasted != null))
                {
                    this._parent.ActivityRecords.Add(activityRecordsCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
                IDocDocRole fromDocumentRolesCasted = item.As<IDocDocRole>();
                if ((fromDocumentRolesCasted != null))
                {
                    this._parent.FromDocumentRoles.Add(fromDocumentRolesCasted);
                }
                IChangeSet changeSetsCasted = item.As<IChangeSet>();
                if ((changeSetsCasted != null))
                {
                    this._parent.ChangeSets.Add(changeSetsCasted);
                }
                if ((this._parent.DocStatus == null))
                {
                    IStatus docStatusCasted = item.As<IStatus>();
                    if ((docStatusCasted != null))
                    {
                        this._parent.DocStatus = docStatusCasted;
                        return;
                    }
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                IScheduleParameterInfo scheduleParameterInfosCasted = item.As<IScheduleParameterInfo>();
                if ((scheduleParameterInfosCasted != null))
                {
                    this._parent.ScheduleParameterInfos.Add(scheduleParameterInfosCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ScheduledEvents.Clear();
                this._parent.ErpOrganisationRoles.Clear();
                this._parent.ToDocumentRoles.Clear();
                this._parent.AssetRoles.Clear();
                this._parent.ErpPersonRoles.Clear();
                this._parent.ElectronicAddress = null;
                this._parent.Status = null;
                this._parent.NetworkDataSets.Clear();
                this._parent.PowerSystemResourceRoles.Clear();
                this._parent.ActivityRecords.Clear();
                this._parent.Measurements.Clear();
                this._parent.FromDocumentRoles.Clear();
                this._parent.ChangeSets.Clear();
                this._parent.DocStatus = null;
                this._parent.ChangeItems.Clear();
                this._parent.ScheduleParameterInfos.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ScheduledEvents.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ToDocumentRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssetRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersonRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ElectronicAddress))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.NetworkDataSets.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerSystemResourceRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ActivityRecords.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                if (this._parent.FromDocumentRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeSets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DocStatus))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ScheduleParameterInfos.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> scheduledEventsEnumerator = this._parent.ScheduledEvents.GetEnumerator();
                try
                {
                    for (
                    ; scheduledEventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduledEventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduledEventsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpOrganisationRolesEnumerator = this._parent.ErpOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> toDocumentRolesEnumerator = this._parent.ToDocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; toDocumentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toDocumentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toDocumentRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetRolesEnumerator = this._parent.AssetRoles.GetEnumerator();
                try
                {
                    for (
                    ; assetRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonRolesEnumerator = this._parent.ErpPersonRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonRolesEnumerator.Dispose();
                }
                if ((this._parent.ElectronicAddress != null))
                {
                    array[arrayIndex] = this._parent.ElectronicAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> networkDataSetsEnumerator = this._parent.NetworkDataSets.GetEnumerator();
                try
                {
                    for (
                    ; networkDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = networkDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    networkDataSetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerSystemResourceRolesEnumerator = this._parent.PowerSystemResourceRoles.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourceRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourceRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourceRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> activityRecordsEnumerator = this._parent.ActivityRecords.GetEnumerator();
                try
                {
                    for (
                    ; activityRecordsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activityRecordsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activityRecordsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> fromDocumentRolesEnumerator = this._parent.FromDocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; fromDocumentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fromDocumentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fromDocumentRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeSetsEnumerator = this._parent.ChangeSets.GetEnumerator();
                try
                {
                    for (
                    ; changeSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeSetsEnumerator.Dispose();
                }
                if ((this._parent.DocStatus != null))
                {
                    array[arrayIndex] = this._parent.DocStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> scheduleParameterInfosEnumerator = this._parent.ScheduleParameterInfos.GetEnumerator();
                try
                {
                    for (
                    ; scheduleParameterInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduleParameterInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduleParameterInfosEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IScheduledEvent scheduledEventItem = item.As<IScheduledEvent>();
                if (((scheduledEventItem != null) 
                            && this._parent.ScheduledEvents.Remove(scheduledEventItem)))
                {
                    return true;
                }
                IDocOrgRole docOrgRoleItem = item.As<IDocOrgRole>();
                if (((docOrgRoleItem != null) 
                            && this._parent.ErpOrganisationRoles.Remove(docOrgRoleItem)))
                {
                    return true;
                }
                IDocDocRole docDocRoleItem = item.As<IDocDocRole>();
                if (((docDocRoleItem != null) 
                            && this._parent.ToDocumentRoles.Remove(docDocRoleItem)))
                {
                    return true;
                }
                IDocAssetRole docAssetRoleItem = item.As<IDocAssetRole>();
                if (((docAssetRoleItem != null) 
                            && this._parent.AssetRoles.Remove(docAssetRoleItem)))
                {
                    return true;
                }
                IDocErpPersonRole docErpPersonRoleItem = item.As<IDocErpPersonRole>();
                if (((docErpPersonRoleItem != null) 
                            && this._parent.ErpPersonRoles.Remove(docErpPersonRoleItem)))
                {
                    return true;
                }
                if ((this._parent.ElectronicAddress == item))
                {
                    this._parent.ElectronicAddress = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                INetworkDataSet networkDataSetItem = item.As<INetworkDataSet>();
                if (((networkDataSetItem != null) 
                            && this._parent.NetworkDataSets.Remove(networkDataSetItem)))
                {
                    return true;
                }
                IDocPsrRole docPsrRoleItem = item.As<IDocPsrRole>();
                if (((docPsrRoleItem != null) 
                            && this._parent.PowerSystemResourceRoles.Remove(docPsrRoleItem)))
                {
                    return true;
                }
                IActivityRecord activityRecordItem = item.As<IActivityRecord>();
                if (((activityRecordItem != null) 
                            && this._parent.ActivityRecords.Remove(activityRecordItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                if (((docDocRoleItem != null) 
                            && this._parent.FromDocumentRoles.Remove(docDocRoleItem)))
                {
                    return true;
                }
                IChangeSet changeSetItem = item.As<IChangeSet>();
                if (((changeSetItem != null) 
                            && this._parent.ChangeSets.Remove(changeSetItem)))
                {
                    return true;
                }
                if ((this._parent.DocStatus == item))
                {
                    this._parent.DocStatus = null;
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                IScheduleParameterInfo scheduleParameterInfoItem = item.As<IScheduleParameterInfo>();
                if (((scheduleParameterInfoItem != null) 
                            && this._parent.ScheduleParameterInfos.Remove(scheduleParameterInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ScheduledEvents).Concat(this._parent.ErpOrganisationRoles).Concat(this._parent.ToDocumentRoles).Concat(this._parent.AssetRoles).Concat(this._parent.ErpPersonRoles).Concat(this._parent.ElectronicAddress).Concat(this._parent.Status).Concat(this._parent.NetworkDataSets).Concat(this._parent.PowerSystemResourceRoles).Concat(this._parent.ActivityRecords).Concat(this._parent.Measurements).Concat(this._parent.FromDocumentRoles).Concat(this._parent.ChangeSets).Concat(this._parent.DocStatus).Concat(this._parent.ChangeItems).Concat(this._parent.ScheduleParameterInfos).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subject property
        /// </summary>
        private sealed class SubjectProxy : ModelPropertyChange<IDocument, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubjectProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Subject;
                }
                set
                {
                    this.ModelElement.Subject = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubjectChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubjectChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the createdDateTime property
        /// </summary>
        private sealed class CreatedDateTimeProxy : ModelPropertyChange<IDocument, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CreatedDateTimeProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.CreatedDateTime;
                }
                set
                {
                    this.ModelElement.CreatedDateTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreatedDateTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreatedDateTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the revisionNumber property
        /// </summary>
        private sealed class RevisionNumberProxy : ModelPropertyChange<IDocument, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RevisionNumberProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RevisionNumber;
                }
                set
                {
                    this.ModelElement.RevisionNumber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RevisionNumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RevisionNumberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IDocument, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastModifiedDateTime property
        /// </summary>
        private sealed class LastModifiedDateTimeProxy : ModelPropertyChange<IDocument, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastModifiedDateTimeProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.LastModifiedDateTime;
                }
                set
                {
                    this.ModelElement.LastModifiedDateTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LastModifiedDateTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LastModifiedDateTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the title property
        /// </summary>
        private sealed class TitleProxy : ModelPropertyChange<IDocument, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TitleProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Title;
                }
                set
                {
                    this.ModelElement.Title = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TitleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TitleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the electronicAddress property
        /// </summary>
        private sealed class ElectronicAddressProxy : ModelPropertyChange<IDocument, IElectronicAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectronicAddressProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectronicAddress Value
            {
                get
                {
                    return this.ModelElement.ElectronicAddress;
                }
                set
                {
                    this.ModelElement.ElectronicAddress = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ElectronicAddressChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ElectronicAddressChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IDocument, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the docStatus property
        /// </summary>
        private sealed class DocStatusProxy : ModelPropertyChange<IDocument, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DocStatusProxy(IDocument modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.DocStatus;
                }
                set
                {
                    this.ModelElement.DocStatus = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DocStatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DocStatusChanged -= handler;
            }
        }
    }
}

