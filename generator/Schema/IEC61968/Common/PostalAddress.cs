//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the PostalAddress class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PostalAddress")]
    [DebuggerDisplayAttribute("PostalAddress {UUID}")]
    public partial class PostalAddress : Element, IPostalAddress, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PostalCode property
        /// </summary>
        private string _postalCode;
        
        private static Lazy<ITypedElement> _postalCodeAttribute = new Lazy<ITypedElement>(RetrievePostalCodeAttribute);
        
        /// <summary>
        /// The backing field for the PoBox property
        /// </summary>
        private string _poBox;
        
        private static Lazy<ITypedElement> _poBoxAttribute = new Lazy<ITypedElement>(RetrievePoBoxAttribute);
        
        private static Lazy<ITypedElement> _townDetailReference = new Lazy<ITypedElement>(RetrieveTownDetailReference);
        
        /// <summary>
        /// The backing field for the TownDetail property
        /// </summary>
        private ITownDetail _townDetail;
        
        private static Lazy<ITypedElement> _streetDetailReference = new Lazy<ITypedElement>(RetrieveStreetDetailReference);
        
        /// <summary>
        /// The backing field for the StreetDetail property
        /// </summary>
        private IStreetDetail _streetDetail;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The postalCode property
        /// </summary>
        [XmlElementNameAttribute("postalCode")]
        [XmlAttributeAttribute(true)]
        public virtual string PostalCode
        {
            get
            {
                return this._postalCode;
            }
            set
            {
                if ((this._postalCode != value))
                {
                    string old = this._postalCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPostalCodeChanging(e);
                    this.OnPropertyChanging("PostalCode", e, _postalCodeAttribute);
                    this._postalCode = value;
                    this.OnPostalCodeChanged(e);
                    this.OnPropertyChanged("PostalCode", e, _postalCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The poBox property
        /// </summary>
        [XmlElementNameAttribute("poBox")]
        [XmlAttributeAttribute(true)]
        public virtual string PoBox
        {
            get
            {
                return this._poBox;
            }
            set
            {
                if ((this._poBox != value))
                {
                    string old = this._poBox;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPoBoxChanging(e);
                    this.OnPropertyChanging("PoBox", e, _poBoxAttribute);
                    this._poBox = value;
                    this.OnPoBoxChanged(e);
                    this.OnPropertyChanged("PoBox", e, _poBoxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The townDetail property
        /// </summary>
        [XmlElementNameAttribute("townDetail")]
        [XmlAttributeAttribute(true)]
        public virtual ITownDetail TownDetail
        {
            get
            {
                return this._townDetail;
            }
            set
            {
                if ((this._townDetail != value))
                {
                    ITownDetail old = this._townDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTownDetailChanging(e);
                    this.OnPropertyChanging("TownDetail", e, _townDetailReference);
                    this._townDetail = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTownDetail;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTownDetail;
                    }
                    this.OnTownDetailChanged(e);
                    this.OnPropertyChanged("TownDetail", e, _townDetailReference);
                }
            }
        }
        
        /// <summary>
        /// The streetDetail property
        /// </summary>
        [XmlElementNameAttribute("streetDetail")]
        [XmlAttributeAttribute(true)]
        public virtual IStreetDetail StreetDetail
        {
            get
            {
                return this._streetDetail;
            }
            set
            {
                if ((this._streetDetail != value))
                {
                    IStreetDetail old = this._streetDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStreetDetailChanging(e);
                    this.OnPropertyChanging("StreetDetail", e, _streetDetailReference);
                    this._streetDetail = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStreetDetail;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStreetDetail;
                    }
                    this.OnStreetDetailChanged(e);
                    this.OnPropertyChanged("StreetDetail", e, _streetDetailReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PostalAddressReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PostalAddress")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PostalCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostalCodeChanging;
        
        /// <summary>
        /// Gets fired when the PostalCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostalCodeChanged;
        
        /// <summary>
        /// Gets fired before the PoBox property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoBoxChanging;
        
        /// <summary>
        /// Gets fired when the PoBox property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoBoxChanged;
        
        /// <summary>
        /// Gets fired before the TownDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TownDetailChanging;
        
        /// <summary>
        /// Gets fired when the TownDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TownDetailChanged;
        
        /// <summary>
        /// Gets fired before the StreetDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StreetDetailChanging;
        
        /// <summary>
        /// Gets fired when the StreetDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StreetDetailChanged;
        
        private static ITypedElement RetrievePostalCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PostalAddress.ClassInstance)).Resolve("postalCode")));
        }
        
        /// <summary>
        /// Raises the PostalCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostalCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostalCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PostalCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostalCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostalCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePoBoxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PostalAddress.ClassInstance)).Resolve("poBox")));
        }
        
        /// <summary>
        /// Raises the PoBoxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoBoxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoBoxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PoBoxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoBoxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoBoxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTownDetailReference()
        {
            return ((ITypedElement)(((ModelElement)(PostalAddress.ClassInstance)).Resolve("townDetail")));
        }
        
        /// <summary>
        /// Raises the TownDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTownDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TownDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TownDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTownDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TownDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TownDetail property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTownDetail(object sender, System.EventArgs eventArgs)
        {
            this.TownDetail = null;
        }
        
        private static ITypedElement RetrieveStreetDetailReference()
        {
            return ((ITypedElement)(((ModelElement)(PostalAddress.ClassInstance)).Resolve("streetDetail")));
        }
        
        /// <summary>
        /// Raises the StreetDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStreetDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StreetDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StreetDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStreetDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StreetDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StreetDetail property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStreetDetail(object sender, System.EventArgs eventArgs)
        {
            this.StreetDetail = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POSTALCODE"))
            {
                return this.PostalCode;
            }
            if ((attribute == "POBOX"))
            {
                return this.PoBox;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOWNDETAIL"))
            {
                this.TownDetail = ((ITownDetail)(value));
                return;
            }
            if ((feature == "STREETDETAIL"))
            {
                this.StreetDetail = ((IStreetDetail)(value));
                return;
            }
            if ((feature == "POSTALCODE"))
            {
                this.PostalCode = ((string)(value));
                return;
            }
            if ((feature == "POBOX"))
            {
                this.PoBox = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TownDetail"))
            {
                return new TownDetailProxy(this);
            }
            if ((attribute == "StreetDetail"))
            {
                return new StreetDetailProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TownDetail"))
            {
                return new TownDetailProxy(this);
            }
            if ((reference == "StreetDetail"))
            {
                return new StreetDetailProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PostalAddress")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PostalAddress class
        /// </summary>
        public class PostalAddressReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PostalAddress _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PostalAddressReferencedElementsCollection(PostalAddress parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TownDetail != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StreetDetail != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TownDetailChanged += this.PropagateValueChanges;
                this._parent.StreetDetailChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TownDetailChanged -= this.PropagateValueChanges;
                this._parent.StreetDetailChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TownDetail == null))
                {
                    ITownDetail townDetailCasted = item.As<ITownDetail>();
                    if ((townDetailCasted != null))
                    {
                        this._parent.TownDetail = townDetailCasted;
                        return;
                    }
                }
                if ((this._parent.StreetDetail == null))
                {
                    IStreetDetail streetDetailCasted = item.As<IStreetDetail>();
                    if ((streetDetailCasted != null))
                    {
                        this._parent.StreetDetail = streetDetailCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TownDetail = null;
                this._parent.StreetDetail = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TownDetail))
                {
                    return true;
                }
                if ((item == this._parent.StreetDetail))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TownDetail != null))
                {
                    array[arrayIndex] = this._parent.TownDetail;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StreetDetail != null))
                {
                    array[arrayIndex] = this._parent.StreetDetail;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TownDetail == item))
                {
                    this._parent.TownDetail = null;
                    return true;
                }
                if ((this._parent.StreetDetail == item))
                {
                    this._parent.StreetDetail = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TownDetail).Concat(this._parent.StreetDetail).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the postalCode property
        /// </summary>
        private sealed class PostalCodeProxy : ModelPropertyChange<IPostalAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PostalCodeProxy(IPostalAddress modelElement) : 
                    base(modelElement, "postalCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PostalCode;
                }
                set
                {
                    this.ModelElement.PostalCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the poBox property
        /// </summary>
        private sealed class PoBoxProxy : ModelPropertyChange<IPostalAddress, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PoBoxProxy(IPostalAddress modelElement) : 
                    base(modelElement, "poBox")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PoBox;
                }
                set
                {
                    this.ModelElement.PoBox = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the townDetail property
        /// </summary>
        private sealed class TownDetailProxy : ModelPropertyChange<IPostalAddress, ITownDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TownDetailProxy(IPostalAddress modelElement) : 
                    base(modelElement, "townDetail")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITownDetail Value
            {
                get
                {
                    return this.ModelElement.TownDetail;
                }
                set
                {
                    this.ModelElement.TownDetail = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the streetDetail property
        /// </summary>
        private sealed class StreetDetailProxy : ModelPropertyChange<IPostalAddress, IStreetDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StreetDetailProxy(IPostalAddress modelElement) : 
                    base(modelElement, "streetDetail")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStreetDetail Value
            {
                get
                {
                    return this.ModelElement.StreetDetail;
                }
                set
                {
                    this.ModelElement.StreetDetail = value;
                }
            }
        }
    }
}

