//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the TapeShieldCableInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/TapeShieldCableIn" +
        "fo")]
    [DebuggerDisplayAttribute("TapeShieldCableInfo {UUID}")]
    public partial class TapeShieldCableInfo : CableInfo, ITapeShieldCableInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TapeLap property
        /// </summary>
        private float _tapeLap;
        
        private static Lazy<ITypedElement> _tapeLapAttribute = new Lazy<ITypedElement>(RetrieveTapeLapAttribute);
        
        /// <summary>
        /// The backing field for the TapeThickness property
        /// </summary>
        private float _tapeThickness;
        
        private static Lazy<ITypedElement> _tapeThicknessAttribute = new Lazy<ITypedElement>(RetrieveTapeThicknessAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The tapeLap property
        /// </summary>
        [XmlElementNameAttribute("tapeLap")]
        [XmlAttributeAttribute(true)]
        public virtual float TapeLap
        {
            get
            {
                return this._tapeLap;
            }
            set
            {
                if ((this._tapeLap != value))
                {
                    float old = this._tapeLap;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapeLapChanging(e);
                    this.OnPropertyChanging("TapeLap", e, _tapeLapAttribute);
                    this._tapeLap = value;
                    this.OnTapeLapChanged(e);
                    this.OnPropertyChanged("TapeLap", e, _tapeLapAttribute);
                }
            }
        }
        
        /// <summary>
        /// The tapeThickness property
        /// </summary>
        [XmlElementNameAttribute("tapeThickness")]
        [XmlAttributeAttribute(true)]
        public virtual float TapeThickness
        {
            get
            {
                return this._tapeThickness;
            }
            set
            {
                if ((this._tapeThickness != value))
                {
                    float old = this._tapeThickness;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapeThicknessChanging(e);
                    this.OnPropertyChanging("TapeThickness", e, _tapeThicknessAttribute);
                    this._tapeThickness = value;
                    this.OnTapeThicknessChanged(e);
                    this.OnPropertyChanged("TapeThickness", e, _tapeThicknessAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/TapeShieldCableIn" +
                            "fo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TapeLap property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapeLapChanging;
        
        /// <summary>
        /// Gets fired when the TapeLap property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapeLapChanged;
        
        /// <summary>
        /// Gets fired before the TapeThickness property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapeThicknessChanging;
        
        /// <summary>
        /// Gets fired when the TapeThickness property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapeThicknessChanged;
        
        private static ITypedElement RetrieveTapeLapAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapeShieldCableInfo.ClassInstance)).Resolve("tapeLap")));
        }
        
        /// <summary>
        /// Raises the TapeLapChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapeLapChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapeLapChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapeLapChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapeLapChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapeLapChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTapeThicknessAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapeShieldCableInfo.ClassInstance)).Resolve("tapeThickness")));
        }
        
        /// <summary>
        /// Raises the TapeThicknessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapeThicknessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapeThicknessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapeThicknessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapeThicknessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapeThicknessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TAPELAP"))
            {
                return this.TapeLap;
            }
            if ((attribute == "TAPETHICKNESS"))
            {
                return this.TapeThickness;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TAPELAP"))
            {
                this.TapeLap = ((float)(value));
                return;
            }
            if ((feature == "TAPETHICKNESS"))
            {
                this.TapeThickness = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/TapeShieldCableIn" +
                        "fo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tapeLap property
        /// </summary>
        private sealed class TapeLapProxy : ModelPropertyChange<ITapeShieldCableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapeLapProxy(ITapeShieldCableInfo modelElement) : 
                    base(modelElement, "tapeLap")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TapeLap;
                }
                set
                {
                    this.ModelElement.TapeLap = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tapeThickness property
        /// </summary>
        private sealed class TapeThicknessProxy : ModelPropertyChange<ITapeShieldCableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapeThicknessProxy(ITapeShieldCableInfo modelElement) : 
                    base(modelElement, "tapeThickness")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TapeThickness;
                }
                set
                {
                    this.ModelElement.TapeThickness = value;
                }
            }
        }
    }
}

