//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the CableInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/CableInfo")]
    [DebuggerDisplayAttribute("CableInfo {UUID}")]
    public class CableInfo : ConductorInfo, ICableInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SheathAsNeutral property
        /// </summary>
        private bool _sheathAsNeutral;
        
        /// <summary>
        /// The backing field for the IsStrandFill property
        /// </summary>
        private bool _isStrandFill;
        
        /// <summary>
        /// The backing field for the OuterJacketKind property
        /// </summary>
        private Nullable<CableOuterJacketKind> _outerJacketKind;
        
        /// <summary>
        /// The backing field for the ConstructionKind property
        /// </summary>
        private Nullable<CableConstructionKind> _constructionKind;
        
        /// <summary>
        /// The backing field for the DiameterOverScreen property
        /// </summary>
        private float _diameterOverScreen;
        
        /// <summary>
        /// The backing field for the NominalTemperature property
        /// </summary>
        private float _nominalTemperature;
        
        /// <summary>
        /// The backing field for the DiameterOverJacket property
        /// </summary>
        private float _diameterOverJacket;
        
        /// <summary>
        /// The backing field for the DiameterOverCore property
        /// </summary>
        private float _diameterOverCore;
        
        /// <summary>
        /// The backing field for the DiameterOverInsulation property
        /// </summary>
        private float _diameterOverInsulation;
        
        /// <summary>
        /// The backing field for the ShieldMaterial property
        /// </summary>
        private Nullable<CableShieldMaterialKind> _shieldMaterial;
        
        /// <summary>
        /// The backing field for the DuctBankInfo property
        /// </summary>
        private IDuctInfo _ductBankInfo;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The sheathAsNeutral property
        /// </summary>
        [XmlElementNameAttribute("sheathAsNeutral")]
        [XmlAttributeAttribute(true)]
        public virtual bool SheathAsNeutral
        {
            get
            {
                return this._sheathAsNeutral;
            }
            set
            {
                if ((this._sheathAsNeutral != value))
                {
                    bool old = this._sheathAsNeutral;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSheathAsNeutralChanging(e);
                    this.OnPropertyChanging("SheathAsNeutral", e);
                    this._sheathAsNeutral = value;
                    this.OnSheathAsNeutralChanged(e);
                    this.OnPropertyChanged("SheathAsNeutral", e);
                }
            }
        }
        
        /// <summary>
        /// The isStrandFill property
        /// </summary>
        [XmlElementNameAttribute("isStrandFill")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsStrandFill
        {
            get
            {
                return this._isStrandFill;
            }
            set
            {
                if ((this._isStrandFill != value))
                {
                    bool old = this._isStrandFill;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsStrandFillChanging(e);
                    this.OnPropertyChanging("IsStrandFill", e);
                    this._isStrandFill = value;
                    this.OnIsStrandFillChanged(e);
                    this.OnPropertyChanged("IsStrandFill", e);
                }
            }
        }
        
        /// <summary>
        /// The outerJacketKind property
        /// </summary>
        [XmlElementNameAttribute("outerJacketKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CableOuterJacketKind> OuterJacketKind
        {
            get
            {
                return this._outerJacketKind;
            }
            set
            {
                if ((this._outerJacketKind != value))
                {
                    Nullable<CableOuterJacketKind> old = this._outerJacketKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOuterJacketKindChanging(e);
                    this.OnPropertyChanging("OuterJacketKind", e);
                    this._outerJacketKind = value;
                    this.OnOuterJacketKindChanged(e);
                    this.OnPropertyChanged("OuterJacketKind", e);
                }
            }
        }
        
        /// <summary>
        /// The constructionKind property
        /// </summary>
        [XmlElementNameAttribute("constructionKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CableConstructionKind> ConstructionKind
        {
            get
            {
                return this._constructionKind;
            }
            set
            {
                if ((this._constructionKind != value))
                {
                    Nullable<CableConstructionKind> old = this._constructionKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConstructionKindChanging(e);
                    this.OnPropertyChanging("ConstructionKind", e);
                    this._constructionKind = value;
                    this.OnConstructionKindChanged(e);
                    this.OnPropertyChanged("ConstructionKind", e);
                }
            }
        }
        
        /// <summary>
        /// The diameterOverScreen property
        /// </summary>
        [XmlElementNameAttribute("diameterOverScreen")]
        [XmlAttributeAttribute(true)]
        public virtual float DiameterOverScreen
        {
            get
            {
                return this._diameterOverScreen;
            }
            set
            {
                if ((this._diameterOverScreen != value))
                {
                    float old = this._diameterOverScreen;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiameterOverScreenChanging(e);
                    this.OnPropertyChanging("DiameterOverScreen", e);
                    this._diameterOverScreen = value;
                    this.OnDiameterOverScreenChanged(e);
                    this.OnPropertyChanged("DiameterOverScreen", e);
                }
            }
        }
        
        /// <summary>
        /// The nominalTemperature property
        /// </summary>
        [XmlElementNameAttribute("nominalTemperature")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalTemperature
        {
            get
            {
                return this._nominalTemperature;
            }
            set
            {
                if ((this._nominalTemperature != value))
                {
                    float old = this._nominalTemperature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalTemperatureChanging(e);
                    this.OnPropertyChanging("NominalTemperature", e);
                    this._nominalTemperature = value;
                    this.OnNominalTemperatureChanged(e);
                    this.OnPropertyChanged("NominalTemperature", e);
                }
            }
        }
        
        /// <summary>
        /// The diameterOverJacket property
        /// </summary>
        [XmlElementNameAttribute("diameterOverJacket")]
        [XmlAttributeAttribute(true)]
        public virtual float DiameterOverJacket
        {
            get
            {
                return this._diameterOverJacket;
            }
            set
            {
                if ((this._diameterOverJacket != value))
                {
                    float old = this._diameterOverJacket;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiameterOverJacketChanging(e);
                    this.OnPropertyChanging("DiameterOverJacket", e);
                    this._diameterOverJacket = value;
                    this.OnDiameterOverJacketChanged(e);
                    this.OnPropertyChanged("DiameterOverJacket", e);
                }
            }
        }
        
        /// <summary>
        /// The diameterOverCore property
        /// </summary>
        [XmlElementNameAttribute("diameterOverCore")]
        [XmlAttributeAttribute(true)]
        public virtual float DiameterOverCore
        {
            get
            {
                return this._diameterOverCore;
            }
            set
            {
                if ((this._diameterOverCore != value))
                {
                    float old = this._diameterOverCore;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiameterOverCoreChanging(e);
                    this.OnPropertyChanging("DiameterOverCore", e);
                    this._diameterOverCore = value;
                    this.OnDiameterOverCoreChanged(e);
                    this.OnPropertyChanged("DiameterOverCore", e);
                }
            }
        }
        
        /// <summary>
        /// The diameterOverInsulation property
        /// </summary>
        [XmlElementNameAttribute("diameterOverInsulation")]
        [XmlAttributeAttribute(true)]
        public virtual float DiameterOverInsulation
        {
            get
            {
                return this._diameterOverInsulation;
            }
            set
            {
                if ((this._diameterOverInsulation != value))
                {
                    float old = this._diameterOverInsulation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiameterOverInsulationChanging(e);
                    this.OnPropertyChanging("DiameterOverInsulation", e);
                    this._diameterOverInsulation = value;
                    this.OnDiameterOverInsulationChanged(e);
                    this.OnPropertyChanged("DiameterOverInsulation", e);
                }
            }
        }
        
        /// <summary>
        /// The shieldMaterial property
        /// </summary>
        [XmlElementNameAttribute("shieldMaterial")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CableShieldMaterialKind> ShieldMaterial
        {
            get
            {
                return this._shieldMaterial;
            }
            set
            {
                if ((this._shieldMaterial != value))
                {
                    Nullable<CableShieldMaterialKind> old = this._shieldMaterial;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShieldMaterialChanging(e);
                    this.OnPropertyChanging("ShieldMaterial", e);
                    this._shieldMaterial = value;
                    this.OnShieldMaterialChanged(e);
                    this.OnPropertyChanged("ShieldMaterial", e);
                }
            }
        }
        
        /// <summary>
        /// The DuctBankInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CableInfos")]
        public virtual IDuctInfo DuctBankInfo
        {
            get
            {
                return this._ductBankInfo;
            }
            set
            {
                if ((this._ductBankInfo != value))
                {
                    IDuctInfo old = this._ductBankInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDuctBankInfoChanging(e);
                    this.OnPropertyChanging("DuctBankInfo", e);
                    this._ductBankInfo = value;
                    if ((old != null))
                    {
                        old.CableInfos.Remove(this);
                        old.Deleted -= this.OnResetDuctBankInfo;
                    }
                    if ((value != null))
                    {
                        value.CableInfos.Add(this);
                        value.Deleted += this.OnResetDuctBankInfo;
                    }
                    this.OnDuctBankInfoChanged(e);
                    this.OnPropertyChanged("DuctBankInfo", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CableInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/CableInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SheathAsNeutral property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SheathAsNeutralChanging;
        
        /// <summary>
        /// Gets fired when the SheathAsNeutral property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SheathAsNeutralChanged;
        
        /// <summary>
        /// Gets fired before the IsStrandFill property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsStrandFillChanging;
        
        /// <summary>
        /// Gets fired when the IsStrandFill property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsStrandFillChanged;
        
        /// <summary>
        /// Gets fired before the OuterJacketKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OuterJacketKindChanging;
        
        /// <summary>
        /// Gets fired when the OuterJacketKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OuterJacketKindChanged;
        
        /// <summary>
        /// Gets fired before the ConstructionKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanging;
        
        /// <summary>
        /// Gets fired when the ConstructionKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverScreen property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverScreenChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverScreen property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverScreenChanged;
        
        /// <summary>
        /// Gets fired before the NominalTemperature property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalTemperatureChanging;
        
        /// <summary>
        /// Gets fired when the NominalTemperature property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalTemperatureChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverJacket property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverJacketChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverJacket property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverJacketChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverCore property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverCoreChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverCore property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverCoreChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverInsulation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverInsulationChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverInsulation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterOverInsulationChanged;
        
        /// <summary>
        /// Gets fired before the ShieldMaterial property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShieldMaterialChanging;
        
        /// <summary>
        /// Gets fired when the ShieldMaterial property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShieldMaterialChanged;
        
        /// <summary>
        /// Gets fired before the DuctBankInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DuctBankInfoChanging;
        
        /// <summary>
        /// Gets fired when the DuctBankInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DuctBankInfoChanged;
        
        /// <summary>
        /// Raises the SheathAsNeutralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSheathAsNeutralChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SheathAsNeutralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SheathAsNeutralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSheathAsNeutralChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SheathAsNeutralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsStrandFillChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsStrandFillChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsStrandFillChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsStrandFillChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsStrandFillChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsStrandFillChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OuterJacketKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOuterJacketKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OuterJacketKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OuterJacketKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOuterJacketKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OuterJacketKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverScreenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverScreenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverScreenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverScreenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverScreenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverScreenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalTemperatureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalTemperatureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalTemperatureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalTemperatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalTemperatureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalTemperatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverJacketChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverJacketChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverJacketChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverJacketChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverJacketChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverJacketChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverCoreChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverCoreChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverCoreChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverCoreChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverCoreChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverCoreChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverInsulationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverInsulationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverInsulationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterOverInsulationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterOverInsulationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterOverInsulationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShieldMaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShieldMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShieldMaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShieldMaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShieldMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShieldMaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DuctBankInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDuctBankInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DuctBankInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DuctBankInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDuctBankInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DuctBankInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DuctBankInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDuctBankInfo(object sender, System.EventArgs eventArgs)
        {
            this.DuctBankInfo = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SHEATHASNEUTRAL"))
            {
                return this.SheathAsNeutral;
            }
            if ((attribute == "ISSTRANDFILL"))
            {
                return this.IsStrandFill;
            }
            if ((attribute == "OUTERJACKETKIND"))
            {
                return this.OuterJacketKind;
            }
            if ((attribute == "CONSTRUCTIONKIND"))
            {
                return this.ConstructionKind;
            }
            if ((attribute == "DIAMETEROVERSCREEN"))
            {
                return this.DiameterOverScreen;
            }
            if ((attribute == "NOMINALTEMPERATURE"))
            {
                return this.NominalTemperature;
            }
            if ((attribute == "DIAMETEROVERJACKET"))
            {
                return this.DiameterOverJacket;
            }
            if ((attribute == "DIAMETEROVERCORE"))
            {
                return this.DiameterOverCore;
            }
            if ((attribute == "DIAMETEROVERINSULATION"))
            {
                return this.DiameterOverInsulation;
            }
            if ((attribute == "SHIELDMATERIAL"))
            {
                return this.ShieldMaterial;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DUCTBANKINFO"))
            {
                this.DuctBankInfo = ((IDuctInfo)(value));
                return;
            }
            if ((feature == "SHEATHASNEUTRAL"))
            {
                this.SheathAsNeutral = ((bool)(value));
                return;
            }
            if ((feature == "ISSTRANDFILL"))
            {
                this.IsStrandFill = ((bool)(value));
                return;
            }
            if ((feature == "OUTERJACKETKIND"))
            {
                this.OuterJacketKind = ((CableOuterJacketKind)(value));
                return;
            }
            if ((feature == "CONSTRUCTIONKIND"))
            {
                this.ConstructionKind = ((CableConstructionKind)(value));
                return;
            }
            if ((feature == "DIAMETEROVERSCREEN"))
            {
                this.DiameterOverScreen = ((float)(value));
                return;
            }
            if ((feature == "NOMINALTEMPERATURE"))
            {
                this.NominalTemperature = ((float)(value));
                return;
            }
            if ((feature == "DIAMETEROVERJACKET"))
            {
                this.DiameterOverJacket = ((float)(value));
                return;
            }
            if ((feature == "DIAMETEROVERCORE"))
            {
                this.DiameterOverCore = ((float)(value));
                return;
            }
            if ((feature == "DIAMETEROVERINSULATION"))
            {
                this.DiameterOverInsulation = ((float)(value));
                return;
            }
            if ((feature == "SHIELDMATERIAL"))
            {
                this.ShieldMaterial = ((CableShieldMaterialKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DuctBankInfo"))
            {
                return new DuctBankInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DuctBankInfo"))
            {
                return new DuctBankInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/CableInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CableInfo class
        /// </summary>
        public class CableInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CableInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CableInfoReferencedElementsCollection(CableInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DuctBankInfo != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DuctBankInfoChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DuctBankInfoChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DuctBankInfo == null))
                {
                    IDuctInfo ductBankInfoCasted = item.As<IDuctInfo>();
                    if ((ductBankInfoCasted != null))
                    {
                        this._parent.DuctBankInfo = ductBankInfoCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DuctBankInfo = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DuctBankInfo))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DuctBankInfo != null))
                {
                    array[arrayIndex] = this._parent.DuctBankInfo;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DuctBankInfo == item))
                {
                    this._parent.DuctBankInfo = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DuctBankInfo).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sheathAsNeutral property
        /// </summary>
        private sealed class SheathAsNeutralProxy : ModelPropertyChange<ICableInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SheathAsNeutralProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.SheathAsNeutral;
                }
                set
                {
                    this.ModelElement.SheathAsNeutral = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SheathAsNeutralChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SheathAsNeutralChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isStrandFill property
        /// </summary>
        private sealed class IsStrandFillProxy : ModelPropertyChange<ICableInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsStrandFillProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsStrandFill;
                }
                set
                {
                    this.ModelElement.IsStrandFill = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsStrandFillChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsStrandFillChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outerJacketKind property
        /// </summary>
        private sealed class OuterJacketKindProxy : ModelPropertyChange<ICableInfo, Nullable<CableOuterJacketKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OuterJacketKindProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CableOuterJacketKind> Value
            {
                get
                {
                    return this.ModelElement.OuterJacketKind;
                }
                set
                {
                    this.ModelElement.OuterJacketKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OuterJacketKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OuterJacketKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the constructionKind property
        /// </summary>
        private sealed class ConstructionKindProxy : ModelPropertyChange<ICableInfo, Nullable<CableConstructionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConstructionKindProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CableConstructionKind> Value
            {
                get
                {
                    return this.ModelElement.ConstructionKind;
                }
                set
                {
                    this.ModelElement.ConstructionKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diameterOverScreen property
        /// </summary>
        private sealed class DiameterOverScreenProxy : ModelPropertyChange<ICableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiameterOverScreenProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DiameterOverScreen;
                }
                set
                {
                    this.ModelElement.DiameterOverScreen = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverScreenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverScreenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalTemperature property
        /// </summary>
        private sealed class NominalTemperatureProxy : ModelPropertyChange<ICableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalTemperatureProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalTemperature;
                }
                set
                {
                    this.ModelElement.NominalTemperature = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalTemperatureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalTemperatureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diameterOverJacket property
        /// </summary>
        private sealed class DiameterOverJacketProxy : ModelPropertyChange<ICableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiameterOverJacketProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DiameterOverJacket;
                }
                set
                {
                    this.ModelElement.DiameterOverJacket = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverJacketChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverJacketChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diameterOverCore property
        /// </summary>
        private sealed class DiameterOverCoreProxy : ModelPropertyChange<ICableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiameterOverCoreProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DiameterOverCore;
                }
                set
                {
                    this.ModelElement.DiameterOverCore = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverCoreChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverCoreChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diameterOverInsulation property
        /// </summary>
        private sealed class DiameterOverInsulationProxy : ModelPropertyChange<ICableInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiameterOverInsulationProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DiameterOverInsulation;
                }
                set
                {
                    this.ModelElement.DiameterOverInsulation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverInsulationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterOverInsulationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shieldMaterial property
        /// </summary>
        private sealed class ShieldMaterialProxy : ModelPropertyChange<ICableInfo, Nullable<CableShieldMaterialKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShieldMaterialProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CableShieldMaterialKind> Value
            {
                get
                {
                    return this.ModelElement.ShieldMaterial;
                }
                set
                {
                    this.ModelElement.ShieldMaterial = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShieldMaterialChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShieldMaterialChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DuctBankInfo property
        /// </summary>
        private sealed class DuctBankInfoProxy : ModelPropertyChange<ICableInfo, IDuctInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DuctBankInfoProxy(ICableInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDuctInfo Value
            {
                get
                {
                    return this.ModelElement.DuctBankInfo;
                }
                set
                {
                    this.ModelElement.DuctBankInfo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DuctBankInfoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DuctBankInfoChanged -= handler;
            }
        }
    }
}

