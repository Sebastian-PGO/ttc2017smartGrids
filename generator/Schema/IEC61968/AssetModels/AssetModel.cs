//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the AssetModel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/AssetModel")]
    [DebuggerDisplayAttribute("AssetModel {UUID}")]
    public class AssetModel : IdentifiedObject, IAssetModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ModelVersion property
        /// </summary>
        private string _modelVersion;
        
        /// <summary>
        /// The backing field for the ModelNumber property
        /// </summary>
        private string _modelNumber;
        
        /// <summary>
        /// The backing field for the CorporateStandardKind property
        /// </summary>
        private Nullable<CorporateStandardKind> _corporateStandardKind;
        
        /// <summary>
        /// The backing field for the UsageKind property
        /// </summary>
        private Nullable<AssetModelUsageKind> _usageKind;
        
        /// <summary>
        /// The backing field for the WeightTotal property
        /// </summary>
        private float _weightTotal;
        
        /// <summary>
        /// The backing field for the AssetInfo property
        /// </summary>
        private IAssetInfo _assetInfo;
        
        /// <summary>
        /// The backing field for the AssetModelCatalogueItems property
        /// </summary>
        private AssetModelAssetModelCatalogueItemsCollection _assetModelCatalogueItems;
        
        /// <summary>
        /// The backing field for the TypeAsset property
        /// </summary>
        private ITypeAsset _typeAsset;
        
        /// <summary>
        /// The backing field for the ErpInventoryCounts property
        /// </summary>
        private AssetModelErpInventoryCountsCollection _erpInventoryCounts;
        
        private static IClass _classInstance;
        
        public AssetModel()
        {
            this._assetModelCatalogueItems = new AssetModelAssetModelCatalogueItemsCollection(this);
            this._assetModelCatalogueItems.CollectionChanging += this.AssetModelCatalogueItemsCollectionChanging;
            this._assetModelCatalogueItems.CollectionChanged += this.AssetModelCatalogueItemsCollectionChanged;
            this._erpInventoryCounts = new AssetModelErpInventoryCountsCollection(this);
            this._erpInventoryCounts.CollectionChanging += this.ErpInventoryCountsCollectionChanging;
            this._erpInventoryCounts.CollectionChanged += this.ErpInventoryCountsCollectionChanged;
        }
        
        /// <summary>
        /// The modelVersion property
        /// </summary>
        [XmlElementNameAttribute("modelVersion")]
        [XmlAttributeAttribute(true)]
        public virtual string ModelVersion
        {
            get
            {
                return this._modelVersion;
            }
            set
            {
                if ((this._modelVersion != value))
                {
                    string old = this._modelVersion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModelVersionChanging(e);
                    this.OnPropertyChanging("ModelVersion", e);
                    this._modelVersion = value;
                    this.OnModelVersionChanged(e);
                    this.OnPropertyChanged("ModelVersion", e);
                }
            }
        }
        
        /// <summary>
        /// The modelNumber property
        /// </summary>
        [XmlElementNameAttribute("modelNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string ModelNumber
        {
            get
            {
                return this._modelNumber;
            }
            set
            {
                if ((this._modelNumber != value))
                {
                    string old = this._modelNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModelNumberChanging(e);
                    this.OnPropertyChanging("ModelNumber", e);
                    this._modelNumber = value;
                    this.OnModelNumberChanged(e);
                    this.OnPropertyChanged("ModelNumber", e);
                }
            }
        }
        
        /// <summary>
        /// The corporateStandardKind property
        /// </summary>
        [XmlElementNameAttribute("corporateStandardKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CorporateStandardKind> CorporateStandardKind
        {
            get
            {
                return this._corporateStandardKind;
            }
            set
            {
                if ((this._corporateStandardKind != value))
                {
                    Nullable<CorporateStandardKind> old = this._corporateStandardKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorporateStandardKindChanging(e);
                    this.OnPropertyChanging("CorporateStandardKind", e);
                    this._corporateStandardKind = value;
                    this.OnCorporateStandardKindChanged(e);
                    this.OnPropertyChanged("CorporateStandardKind", e);
                }
            }
        }
        
        /// <summary>
        /// The usageKind property
        /// </summary>
        [XmlElementNameAttribute("usageKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<AssetModelUsageKind> UsageKind
        {
            get
            {
                return this._usageKind;
            }
            set
            {
                if ((this._usageKind != value))
                {
                    Nullable<AssetModelUsageKind> old = this._usageKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUsageKindChanging(e);
                    this.OnPropertyChanging("UsageKind", e);
                    this._usageKind = value;
                    this.OnUsageKindChanged(e);
                    this.OnPropertyChanged("UsageKind", e);
                }
            }
        }
        
        /// <summary>
        /// The weightTotal property
        /// </summary>
        [XmlElementNameAttribute("weightTotal")]
        [XmlAttributeAttribute(true)]
        public virtual float WeightTotal
        {
            get
            {
                return this._weightTotal;
            }
            set
            {
                if ((this._weightTotal != value))
                {
                    float old = this._weightTotal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeightTotalChanging(e);
                    this.OnPropertyChanging("WeightTotal", e);
                    this._weightTotal = value;
                    this.OnWeightTotalChanged(e);
                    this.OnPropertyChanged("WeightTotal", e);
                }
            }
        }
        
        /// <summary>
        /// The AssetInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetModel")]
        public virtual IAssetInfo AssetInfo
        {
            get
            {
                return this._assetInfo;
            }
            set
            {
                if ((this._assetInfo != value))
                {
                    IAssetInfo old = this._assetInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetInfoChanging(e);
                    this.OnPropertyChanging("AssetInfo", e);
                    this._assetInfo = value;
                    if ((old != null))
                    {
                        old.AssetModel = null;
                        old.Deleted -= this.OnResetAssetInfo;
                    }
                    if ((value != null))
                    {
                        value.AssetModel = this;
                        value.Deleted += this.OnResetAssetInfo;
                    }
                    this.OnAssetInfoChanged(e);
                    this.OnPropertyChanged("AssetInfo", e);
                }
            }
        }
        
        /// <summary>
        /// The AssetModelCatalogueItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetModel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetModelCatalogueItem> AssetModelCatalogueItems
        {
            get
            {
                return this._assetModelCatalogueItems;
            }
        }
        
        /// <summary>
        /// The TypeAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetModels")]
        public virtual ITypeAsset TypeAsset
        {
            get
            {
                return this._typeAsset;
            }
            set
            {
                if ((this._typeAsset != value))
                {
                    ITypeAsset old = this._typeAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeAssetChanging(e);
                    this.OnPropertyChanging("TypeAsset", e);
                    this._typeAsset = value;
                    if ((old != null))
                    {
                        old.AssetModels.Remove(this);
                        old.Deleted -= this.OnResetTypeAsset;
                    }
                    if ((value != null))
                    {
                        value.AssetModels.Add(this);
                        value.Deleted += this.OnResetTypeAsset;
                    }
                    this.OnTypeAssetChanged(e);
                    this.OnPropertyChanged("TypeAsset", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpInventoryCounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetModel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInventoryCount> ErpInventoryCounts
        {
            get
            {
                return this._erpInventoryCounts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssetModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/AssetModel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ModelVersion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelVersionChanging;
        
        /// <summary>
        /// Gets fired when the ModelVersion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelVersionChanged;
        
        /// <summary>
        /// Gets fired before the ModelNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelNumberChanging;
        
        /// <summary>
        /// Gets fired when the ModelNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelNumberChanged;
        
        /// <summary>
        /// Gets fired before the CorporateStandardKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateStandardKindChanging;
        
        /// <summary>
        /// Gets fired when the CorporateStandardKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateStandardKindChanged;
        
        /// <summary>
        /// Gets fired before the UsageKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageKindChanging;
        
        /// <summary>
        /// Gets fired when the UsageKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageKindChanged;
        
        /// <summary>
        /// Gets fired before the WeightTotal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeightTotalChanging;
        
        /// <summary>
        /// Gets fired when the WeightTotal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeightTotalChanged;
        
        /// <summary>
        /// Gets fired before the AssetInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanging;
        
        /// <summary>
        /// Gets fired when the AssetInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanged;
        
        /// <summary>
        /// Gets fired before the TypeAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanging;
        
        /// <summary>
        /// Gets fired when the TypeAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanged;
        
        /// <summary>
        /// Raises the ModelVersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelVersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelVersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelVersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateStandardKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateStandardKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateStandardKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateStandardKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateStandardKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateStandardKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsageKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsageKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeightTotalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeightTotalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeightTotalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeightTotalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeightTotalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeightTotalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetInfo(object sender, System.EventArgs eventArgs)
        {
            this.AssetInfo = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetModelCatalogueItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetModelCatalogueItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetModelCatalogueItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetModelCatalogueItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetModelCatalogueItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetModelCatalogueItems", e);
        }
        
        /// <summary>
        /// Raises the TypeAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeAsset(object sender, System.EventArgs eventArgs)
        {
            this.TypeAsset = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInventoryCounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryCountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpInventoryCounts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInventoryCounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryCountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInventoryCounts", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MODELVERSION"))
            {
                return this.ModelVersion;
            }
            if ((attribute == "MODELNUMBER"))
            {
                return this.ModelNumber;
            }
            if ((attribute == "CORPORATESTANDARDKIND"))
            {
                return this.CorporateStandardKind;
            }
            if ((attribute == "USAGEKIND"))
            {
                return this.UsageKind;
            }
            if ((attribute == "WEIGHTTOTAL"))
            {
                return this.WeightTotal;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ASSETMODELCATALOGUEITEMS"))
            {
                return this._assetModelCatalogueItems;
            }
            if ((feature == "ERPINVENTORYCOUNTS"))
            {
                return this._erpInventoryCounts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSETINFO"))
            {
                this.AssetInfo = ((IAssetInfo)(value));
                return;
            }
            if ((feature == "TYPEASSET"))
            {
                this.TypeAsset = ((ITypeAsset)(value));
                return;
            }
            if ((feature == "MODELVERSION"))
            {
                this.ModelVersion = ((string)(value));
                return;
            }
            if ((feature == "MODELNUMBER"))
            {
                this.ModelNumber = ((string)(value));
                return;
            }
            if ((feature == "CORPORATESTANDARDKIND"))
            {
                this.CorporateStandardKind = ((CorporateStandardKind)(value));
                return;
            }
            if ((feature == "USAGEKIND"))
            {
                this.UsageKind = ((AssetModelUsageKind)(value));
                return;
            }
            if ((feature == "WEIGHTTOTAL"))
            {
                this.WeightTotal = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((attribute == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((reference == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/AssetModel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssetModel class
        /// </summary>
        public class AssetModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssetModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssetModelReferencedElementsCollection(AssetModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AssetInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AssetModelCatalogueItems.Count);
                    if ((this._parent.TypeAsset != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpInventoryCounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetInfoChanged += this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TypeAssetChanged += this.PropagateValueChanges;
                this._parent.ErpInventoryCounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetInfoChanged -= this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TypeAssetChanged -= this.PropagateValueChanges;
                this._parent.ErpInventoryCounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AssetInfo == null))
                {
                    IAssetInfo assetInfoCasted = item.As<IAssetInfo>();
                    if ((assetInfoCasted != null))
                    {
                        this._parent.AssetInfo = assetInfoCasted;
                        return;
                    }
                }
                IAssetModelCatalogueItem assetModelCatalogueItemsCasted = item.As<IAssetModelCatalogueItem>();
                if ((assetModelCatalogueItemsCasted != null))
                {
                    this._parent.AssetModelCatalogueItems.Add(assetModelCatalogueItemsCasted);
                }
                if ((this._parent.TypeAsset == null))
                {
                    ITypeAsset typeAssetCasted = item.As<ITypeAsset>();
                    if ((typeAssetCasted != null))
                    {
                        this._parent.TypeAsset = typeAssetCasted;
                        return;
                    }
                }
                IErpInventoryCount erpInventoryCountsCasted = item.As<IErpInventoryCount>();
                if ((erpInventoryCountsCasted != null))
                {
                    this._parent.ErpInventoryCounts.Add(erpInventoryCountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssetInfo = null;
                this._parent.AssetModelCatalogueItems.Clear();
                this._parent.TypeAsset = null;
                this._parent.ErpInventoryCounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AssetInfo))
                {
                    return true;
                }
                if (this._parent.AssetModelCatalogueItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TypeAsset))
                {
                    return true;
                }
                if (this._parent.ErpInventoryCounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AssetInfo != null))
                {
                    array[arrayIndex] = this._parent.AssetInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> assetModelCatalogueItemsEnumerator = this._parent.AssetModelCatalogueItems.GetEnumerator();
                try
                {
                    for (
                    ; assetModelCatalogueItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetModelCatalogueItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetModelCatalogueItemsEnumerator.Dispose();
                }
                if ((this._parent.TypeAsset != null))
                {
                    array[arrayIndex] = this._parent.TypeAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpInventoryCountsEnumerator = this._parent.ErpInventoryCounts.GetEnumerator();
                try
                {
                    for (
                    ; erpInventoryCountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInventoryCountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInventoryCountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AssetInfo == item))
                {
                    this._parent.AssetInfo = null;
                    return true;
                }
                IAssetModelCatalogueItem assetModelCatalogueItemItem = item.As<IAssetModelCatalogueItem>();
                if (((assetModelCatalogueItemItem != null) 
                            && this._parent.AssetModelCatalogueItems.Remove(assetModelCatalogueItemItem)))
                {
                    return true;
                }
                if ((this._parent.TypeAsset == item))
                {
                    this._parent.TypeAsset = null;
                    return true;
                }
                IErpInventoryCount erpInventoryCountItem = item.As<IErpInventoryCount>();
                if (((erpInventoryCountItem != null) 
                            && this._parent.ErpInventoryCounts.Remove(erpInventoryCountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssetInfo).Concat(this._parent.AssetModelCatalogueItems).Concat(this._parent.TypeAsset).Concat(this._parent.ErpInventoryCounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the modelVersion property
        /// </summary>
        private sealed class ModelVersionProxy : ModelPropertyChange<IAssetModel, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModelVersionProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ModelVersion;
                }
                set
                {
                    this.ModelElement.ModelVersion = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelVersionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelVersionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the modelNumber property
        /// </summary>
        private sealed class ModelNumberProxy : ModelPropertyChange<IAssetModel, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModelNumberProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ModelNumber;
                }
                set
                {
                    this.ModelElement.ModelNumber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelNumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelNumberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the corporateStandardKind property
        /// </summary>
        private sealed class CorporateStandardKindProxy : ModelPropertyChange<IAssetModel, Nullable<CorporateStandardKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorporateStandardKindProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CorporateStandardKind> Value
            {
                get
                {
                    return this.ModelElement.CorporateStandardKind;
                }
                set
                {
                    this.ModelElement.CorporateStandardKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CorporateStandardKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CorporateStandardKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usageKind property
        /// </summary>
        private sealed class UsageKindProxy : ModelPropertyChange<IAssetModel, Nullable<AssetModelUsageKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageKindProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<AssetModelUsageKind> Value
            {
                get
                {
                    return this.ModelElement.UsageKind;
                }
                set
                {
                    this.ModelElement.UsageKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the weightTotal property
        /// </summary>
        private sealed class WeightTotalProxy : ModelPropertyChange<IAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeightTotalProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.WeightTotal;
                }
                set
                {
                    this.ModelElement.WeightTotal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WeightTotalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WeightTotalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetInfo property
        /// </summary>
        private sealed class AssetInfoProxy : ModelPropertyChange<IAssetModel, IAssetInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetInfoProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetInfo Value
            {
                get
                {
                    return this.ModelElement.AssetInfo;
                }
                set
                {
                    this.ModelElement.AssetInfo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssetInfoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssetInfoChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeAsset property
        /// </summary>
        private sealed class TypeAssetProxy : ModelPropertyChange<IAssetModel, ITypeAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeAssetProxy(IAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeAsset Value
            {
                get
                {
                    return this.ModelElement.TypeAsset;
                }
                set
                {
                    this.ModelElement.TypeAsset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeAssetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeAssetChanged -= handler;
            }
        }
    }
}

