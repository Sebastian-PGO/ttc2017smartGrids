//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The public interface for ConductorInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConductorInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConductorInfo))]
    public interface IConductorInfo : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        int PhaseCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The insulated property
        /// </summary>
        bool Insulated
        {
            get;
            set;
        }
        
        /// <summary>
        /// The insulationThickness property
        /// </summary>
        float InsulationThickness
        {
            get;
            set;
        }
        
        /// <summary>
        /// The usage property
        /// </summary>
        Nullable<ConductorUsageKind> Usage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The insulationMaterial property
        /// </summary>
        Nullable<ConductorInsulationKind> InsulationMaterial
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductorSegments property
        /// </summary>
        IOrderedSetExpression<IDistributionLineSegment> ConductorSegments
        {
            get;
        }
        
        /// <summary>
        /// The WireArrangements property
        /// </summary>
        IOrderedSetExpression<IWireArrangement> WireArrangements
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the Insulated property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulatedChanging;
        
        /// <summary>
        /// Gets fired when the Insulated property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulatedChanged;
        
        /// <summary>
        /// Gets fired before the InsulationThickness property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationThicknessChanging;
        
        /// <summary>
        /// Gets fired when the InsulationThickness property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationThicknessChanged;
        
        /// <summary>
        /// Gets fired before the Usage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UsageChanging;
        
        /// <summary>
        /// Gets fired when the Usage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UsageChanged;
        
        /// <summary>
        /// Gets fired before the InsulationMaterial property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationMaterialChanging;
        
        /// <summary>
        /// Gets fired when the InsulationMaterial property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationMaterialChanged;
    }
}

