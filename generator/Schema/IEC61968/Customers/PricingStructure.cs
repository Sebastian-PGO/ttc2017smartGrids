//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The default implementation of the PricingStructure class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Customers")]
    [XmlNamespacePrefixAttribute("cimCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/PricingStructure")]
    [DebuggerDisplayAttribute("PricingStructure {UUID}")]
    public class PricingStructure : Document, IPricingStructure, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        /// <summary>
        /// The backing field for the TaxExemption property
        /// </summary>
        private bool _taxExemption;
        
        /// <summary>
        /// The backing field for the DailyFloorUsage property
        /// </summary>
        private int _dailyFloorUsage;
        
        /// <summary>
        /// The backing field for the RevenueKind property
        /// </summary>
        private Nullable<RevenueKind> _revenueKind;
        
        /// <summary>
        /// The backing field for the DailyCeilingUsage property
        /// </summary>
        private int _dailyCeilingUsage;
        
        /// <summary>
        /// The backing field for the DailyEstimatedUsage property
        /// </summary>
        private int _dailyEstimatedUsage;
        
        /// <summary>
        /// The backing field for the ServiceCategory property
        /// </summary>
        private IServiceCategory _serviceCategory;
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private PricingStructureCustomerAgreementsCollection _customerAgreements;
        
        /// <summary>
        /// The backing field for the PowerQualityPricings property
        /// </summary>
        private PricingStructurePowerQualityPricingsCollection _powerQualityPricings;
        
        /// <summary>
        /// The backing field for the Tariffs property
        /// </summary>
        private PricingStructureTariffsCollection _tariffs;
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private PricingStructureServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        /// <summary>
        /// The backing field for the SubscribePowerCurve property
        /// </summary>
        private ISubscribePowerCurve _subscribePowerCurve;
        
        /// <summary>
        /// The backing field for the Transactions property
        /// </summary>
        private PricingStructureTransactionsCollection _transactions;
        
        private static IClass _classInstance;
        
        public PricingStructure()
        {
            this._customerAgreements = new PricingStructureCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
            this._powerQualityPricings = new PricingStructurePowerQualityPricingsCollection(this);
            this._powerQualityPricings.CollectionChanging += this.PowerQualityPricingsCollectionChanging;
            this._powerQualityPricings.CollectionChanged += this.PowerQualityPricingsCollectionChanged;
            this._tariffs = new PricingStructureTariffsCollection(this);
            this._tariffs.CollectionChanging += this.TariffsCollectionChanging;
            this._tariffs.CollectionChanged += this.TariffsCollectionChanged;
            this._serviceDeliveryPoints = new PricingStructureServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
            this._transactions = new PricingStructureTransactionsCollection(this);
            this._transactions.CollectionChanging += this.TransactionsCollectionChanging;
            this._transactions.CollectionChanged += this.TransactionsCollectionChanged;
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e);
                }
            }
        }
        
        /// <summary>
        /// The taxExemption property
        /// </summary>
        [XmlElementNameAttribute("taxExemption")]
        [XmlAttributeAttribute(true)]
        public virtual bool TaxExemption
        {
            get
            {
                return this._taxExemption;
            }
            set
            {
                if ((this._taxExemption != value))
                {
                    bool old = this._taxExemption;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTaxExemptionChanging(e);
                    this.OnPropertyChanging("TaxExemption", e);
                    this._taxExemption = value;
                    this.OnTaxExemptionChanged(e);
                    this.OnPropertyChanged("TaxExemption", e);
                }
            }
        }
        
        /// <summary>
        /// The dailyFloorUsage property
        /// </summary>
        [XmlElementNameAttribute("dailyFloorUsage")]
        [XmlAttributeAttribute(true)]
        public virtual int DailyFloorUsage
        {
            get
            {
                return this._dailyFloorUsage;
            }
            set
            {
                if ((this._dailyFloorUsage != value))
                {
                    int old = this._dailyFloorUsage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDailyFloorUsageChanging(e);
                    this.OnPropertyChanging("DailyFloorUsage", e);
                    this._dailyFloorUsage = value;
                    this.OnDailyFloorUsageChanged(e);
                    this.OnPropertyChanged("DailyFloorUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The revenueKind property
        /// </summary>
        [XmlElementNameAttribute("revenueKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<RevenueKind> RevenueKind
        {
            get
            {
                return this._revenueKind;
            }
            set
            {
                if ((this._revenueKind != value))
                {
                    Nullable<RevenueKind> old = this._revenueKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRevenueKindChanging(e);
                    this.OnPropertyChanging("RevenueKind", e);
                    this._revenueKind = value;
                    this.OnRevenueKindChanged(e);
                    this.OnPropertyChanged("RevenueKind", e);
                }
            }
        }
        
        /// <summary>
        /// The dailyCeilingUsage property
        /// </summary>
        [XmlElementNameAttribute("dailyCeilingUsage")]
        [XmlAttributeAttribute(true)]
        public virtual int DailyCeilingUsage
        {
            get
            {
                return this._dailyCeilingUsage;
            }
            set
            {
                if ((this._dailyCeilingUsage != value))
                {
                    int old = this._dailyCeilingUsage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDailyCeilingUsageChanging(e);
                    this.OnPropertyChanging("DailyCeilingUsage", e);
                    this._dailyCeilingUsage = value;
                    this.OnDailyCeilingUsageChanged(e);
                    this.OnPropertyChanged("DailyCeilingUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The dailyEstimatedUsage property
        /// </summary>
        [XmlElementNameAttribute("dailyEstimatedUsage")]
        [XmlAttributeAttribute(true)]
        public virtual int DailyEstimatedUsage
        {
            get
            {
                return this._dailyEstimatedUsage;
            }
            set
            {
                if ((this._dailyEstimatedUsage != value))
                {
                    int old = this._dailyEstimatedUsage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDailyEstimatedUsageChanging(e);
                    this.OnPropertyChanging("DailyEstimatedUsage", e);
                    this._dailyEstimatedUsage = value;
                    this.OnDailyEstimatedUsageChanged(e);
                    this.OnPropertyChanged("DailyEstimatedUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The ServiceCategory property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructures")]
        public virtual IServiceCategory ServiceCategory
        {
            get
            {
                return this._serviceCategory;
            }
            set
            {
                if ((this._serviceCategory != value))
                {
                    IServiceCategory old = this._serviceCategory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceCategoryChanging(e);
                    this.OnPropertyChanging("ServiceCategory", e);
                    this._serviceCategory = value;
                    if ((old != null))
                    {
                        old.PricingStructures.Remove(this);
                        old.Deleted -= this.OnResetServiceCategory;
                    }
                    if ((value != null))
                    {
                        value.PricingStructures.Add(this);
                        value.Deleted += this.OnResetServiceCategory;
                    }
                    this.OnServiceCategoryChanged(e);
                    this.OnPropertyChanged("ServiceCategory", e);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructures")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// The PowerQualityPricings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructure")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerQualityPricing> PowerQualityPricings
        {
            get
            {
                return this._powerQualityPricings;
            }
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructures")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITariff> Tariffs
        {
            get
            {
                return this._tariffs;
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructures")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// The SubscribePowerCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructure")]
        public virtual ISubscribePowerCurve SubscribePowerCurve
        {
            get
            {
                return this._subscribePowerCurve;
            }
            set
            {
                if ((this._subscribePowerCurve != value))
                {
                    ISubscribePowerCurve old = this._subscribePowerCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubscribePowerCurveChanging(e);
                    this.OnPropertyChanging("SubscribePowerCurve", e);
                    this._subscribePowerCurve = value;
                    if ((old != null))
                    {
                        old.PricingStructure = null;
                        old.Deleted -= this.OnResetSubscribePowerCurve;
                    }
                    if ((value != null))
                    {
                        value.PricingStructure = this;
                        value.Deleted += this.OnResetSubscribePowerCurve;
                    }
                    this.OnSubscribePowerCurveChanged(e);
                    this.OnPropertyChanged("SubscribePowerCurve", e);
                }
            }
        }
        
        /// <summary>
        /// The Transactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PricingStructure")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransaction> Transactions
        {
            get
            {
                return this._transactions;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PricingStructureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/PricingStructure")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the TaxExemption property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaxExemptionChanging;
        
        /// <summary>
        /// Gets fired when the TaxExemption property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaxExemptionChanged;
        
        /// <summary>
        /// Gets fired before the DailyFloorUsage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyFloorUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyFloorUsage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyFloorUsageChanged;
        
        /// <summary>
        /// Gets fired before the RevenueKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RevenueKindChanging;
        
        /// <summary>
        /// Gets fired when the RevenueKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RevenueKindChanged;
        
        /// <summary>
        /// Gets fired before the DailyCeilingUsage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyCeilingUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyCeilingUsage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyCeilingUsageChanged;
        
        /// <summary>
        /// Gets fired before the DailyEstimatedUsage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyEstimatedUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyEstimatedUsage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DailyEstimatedUsageChanged;
        
        /// <summary>
        /// Gets fired before the ServiceCategory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanging;
        
        /// <summary>
        /// Gets fired when the ServiceCategory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanged;
        
        /// <summary>
        /// Gets fired before the SubscribePowerCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubscribePowerCurveChanging;
        
        /// <summary>
        /// Gets fired when the SubscribePowerCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubscribePowerCurveChanged;
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TaxExemptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaxExemptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaxExemptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TaxExemptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaxExemptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaxExemptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyFloorUsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyFloorUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyFloorUsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyFloorUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyFloorUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyFloorUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RevenueKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRevenueKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RevenueKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RevenueKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRevenueKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RevenueKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyCeilingUsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyCeilingUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyCeilingUsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyCeilingUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyCeilingUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyCeilingUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyEstimatedUsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyEstimatedUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyEstimatedUsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DailyEstimatedUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDailyEstimatedUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DailyEstimatedUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceCategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceCategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceCategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceCategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceCategory property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceCategory(object sender, System.EventArgs eventArgs)
        {
            this.ServiceCategory = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerQualityPricings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerQualityPricingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerQualityPricings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerQualityPricings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerQualityPricingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerQualityPricings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Tariffs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Tariffs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Tariffs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Tariffs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e);
        }
        
        /// <summary>
        /// Raises the SubscribePowerCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubscribePowerCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubscribePowerCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubscribePowerCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubscribePowerCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubscribePowerCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubscribePowerCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubscribePowerCurve(object sender, System.EventArgs eventArgs)
        {
            this.SubscribePowerCurve = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Transactions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transactions", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            if ((attribute == "TAXEXEMPTION"))
            {
                return this.TaxExemption;
            }
            if ((attribute == "DAILYFLOORUSAGE"))
            {
                return this.DailyFloorUsage;
            }
            if ((attribute == "REVENUEKIND"))
            {
                return this.RevenueKind;
            }
            if ((attribute == "DAILYCEILINGUSAGE"))
            {
                return this.DailyCeilingUsage;
            }
            if ((attribute == "DAILYESTIMATEDUSAGE"))
            {
                return this.DailyEstimatedUsage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            if ((feature == "POWERQUALITYPRICINGS"))
            {
                return this._powerQualityPricings;
            }
            if ((feature == "TARIFFS"))
            {
                return this._tariffs;
            }
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            if ((feature == "TRANSACTIONS"))
            {
                return this._transactions;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICECATEGORY"))
            {
                this.ServiceCategory = ((IServiceCategory)(value));
                return;
            }
            if ((feature == "SUBSCRIBEPOWERCURVE"))
            {
                this.SubscribePowerCurve = ((ISubscribePowerCurve)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            if ((feature == "TAXEXEMPTION"))
            {
                this.TaxExemption = ((bool)(value));
                return;
            }
            if ((feature == "DAILYFLOORUSAGE"))
            {
                this.DailyFloorUsage = ((int)(value));
                return;
            }
            if ((feature == "REVENUEKIND"))
            {
                this.RevenueKind = ((RevenueKind)(value));
                return;
            }
            if ((feature == "DAILYCEILINGUSAGE"))
            {
                this.DailyCeilingUsage = ((int)(value));
                return;
            }
            if ((feature == "DAILYESTIMATEDUSAGE"))
            {
                this.DailyEstimatedUsage = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceCategory"))
            {
                return new ServiceCategoryProxy(this);
            }
            if ((attribute == "SubscribePowerCurve"))
            {
                return new SubscribePowerCurveProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceCategory"))
            {
                return new ServiceCategoryProxy(this);
            }
            if ((reference == "SubscribePowerCurve"))
            {
                return new SubscribePowerCurveProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/PricingStructure")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PricingStructure class
        /// </summary>
        public class PricingStructureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PricingStructure _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PricingStructureReferencedElementsCollection(PricingStructure parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ServiceCategory != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CustomerAgreements.Count);
                    count = (count + this._parent.PowerQualityPricings.Count);
                    count = (count + this._parent.Tariffs.Count);
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    if ((this._parent.SubscribePowerCurve != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Transactions.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceCategoryChanged += this.PropagateValueChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerQualityPricings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Tariffs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubscribePowerCurveChanged += this.PropagateValueChanges;
                this._parent.Transactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceCategoryChanged -= this.PropagateValueChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerQualityPricings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Tariffs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubscribePowerCurveChanged -= this.PropagateValueChanges;
                this._parent.Transactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ServiceCategory == null))
                {
                    IServiceCategory serviceCategoryCasted = item.As<IServiceCategory>();
                    if ((serviceCategoryCasted != null))
                    {
                        this._parent.ServiceCategory = serviceCategoryCasted;
                        return;
                    }
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
                IPowerQualityPricing powerQualityPricingsCasted = item.As<IPowerQualityPricing>();
                if ((powerQualityPricingsCasted != null))
                {
                    this._parent.PowerQualityPricings.Add(powerQualityPricingsCasted);
                }
                ITariff tariffsCasted = item.As<ITariff>();
                if ((tariffsCasted != null))
                {
                    this._parent.Tariffs.Add(tariffsCasted);
                }
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
                if ((this._parent.SubscribePowerCurve == null))
                {
                    ISubscribePowerCurve subscribePowerCurveCasted = item.As<ISubscribePowerCurve>();
                    if ((subscribePowerCurveCasted != null))
                    {
                        this._parent.SubscribePowerCurve = subscribePowerCurveCasted;
                        return;
                    }
                }
                ITransaction transactionsCasted = item.As<ITransaction>();
                if ((transactionsCasted != null))
                {
                    this._parent.Transactions.Add(transactionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceCategory = null;
                this._parent.CustomerAgreements.Clear();
                this._parent.PowerQualityPricings.Clear();
                this._parent.Tariffs.Clear();
                this._parent.ServiceDeliveryPoints.Clear();
                this._parent.SubscribePowerCurve = null;
                this._parent.Transactions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ServiceCategory))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerQualityPricings.Contains(item))
                {
                    return true;
                }
                if (this._parent.Tariffs.Contains(item))
                {
                    return true;
                }
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SubscribePowerCurve))
                {
                    return true;
                }
                if (this._parent.Transactions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ServiceCategory != null))
                {
                    array[arrayIndex] = this._parent.ServiceCategory;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerQualityPricingsEnumerator = this._parent.PowerQualityPricings.GetEnumerator();
                try
                {
                    for (
                    ; powerQualityPricingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerQualityPricingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerQualityPricingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> tariffsEnumerator = this._parent.Tariffs.GetEnumerator();
                try
                {
                    for (
                    ; tariffsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tariffsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tariffsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
                if ((this._parent.SubscribePowerCurve != null))
                {
                    array[arrayIndex] = this._parent.SubscribePowerCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transactionsEnumerator = this._parent.Transactions.GetEnumerator();
                try
                {
                    for (
                    ; transactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transactionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ServiceCategory == item))
                {
                    this._parent.ServiceCategory = null;
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                IPowerQualityPricing powerQualityPricingItem = item.As<IPowerQualityPricing>();
                if (((powerQualityPricingItem != null) 
                            && this._parent.PowerQualityPricings.Remove(powerQualityPricingItem)))
                {
                    return true;
                }
                ITariff tariffItem = item.As<ITariff>();
                if (((tariffItem != null) 
                            && this._parent.Tariffs.Remove(tariffItem)))
                {
                    return true;
                }
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                if ((this._parent.SubscribePowerCurve == item))
                {
                    this._parent.SubscribePowerCurve = null;
                    return true;
                }
                ITransaction transactionItem = item.As<ITransaction>();
                if (((transactionItem != null) 
                            && this._parent.Transactions.Remove(transactionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceCategory).Concat(this._parent.CustomerAgreements).Concat(this._parent.PowerQualityPricings).Concat(this._parent.Tariffs).Concat(this._parent.ServiceDeliveryPoints).Concat(this._parent.SubscribePowerCurve).Concat(this._parent.Transactions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<IPricingStructure, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the taxExemption property
        /// </summary>
        private sealed class TaxExemptionProxy : ModelPropertyChange<IPricingStructure, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TaxExemptionProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.TaxExemption;
                }
                set
                {
                    this.ModelElement.TaxExemption = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TaxExemptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TaxExemptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dailyFloorUsage property
        /// </summary>
        private sealed class DailyFloorUsageProxy : ModelPropertyChange<IPricingStructure, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DailyFloorUsageProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.DailyFloorUsage;
                }
                set
                {
                    this.ModelElement.DailyFloorUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyFloorUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyFloorUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the revenueKind property
        /// </summary>
        private sealed class RevenueKindProxy : ModelPropertyChange<IPricingStructure, Nullable<RevenueKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RevenueKindProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<RevenueKind> Value
            {
                get
                {
                    return this.ModelElement.RevenueKind;
                }
                set
                {
                    this.ModelElement.RevenueKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RevenueKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RevenueKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dailyCeilingUsage property
        /// </summary>
        private sealed class DailyCeilingUsageProxy : ModelPropertyChange<IPricingStructure, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DailyCeilingUsageProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.DailyCeilingUsage;
                }
                set
                {
                    this.ModelElement.DailyCeilingUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyCeilingUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyCeilingUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dailyEstimatedUsage property
        /// </summary>
        private sealed class DailyEstimatedUsageProxy : ModelPropertyChange<IPricingStructure, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DailyEstimatedUsageProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.DailyEstimatedUsage;
                }
                set
                {
                    this.ModelElement.DailyEstimatedUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyEstimatedUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DailyEstimatedUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceCategory property
        /// </summary>
        private sealed class ServiceCategoryProxy : ModelPropertyChange<IPricingStructure, IServiceCategory>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceCategoryProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceCategory Value
            {
                get
                {
                    return this.ModelElement.ServiceCategory;
                }
                set
                {
                    this.ModelElement.ServiceCategory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceCategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceCategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SubscribePowerCurve property
        /// </summary>
        private sealed class SubscribePowerCurveProxy : ModelPropertyChange<IPricingStructure, ISubscribePowerCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubscribePowerCurveProxy(IPricingStructure modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubscribePowerCurve Value
            {
                get
                {
                    return this.ModelElement.SubscribePowerCurve;
                }
                set
                {
                    this.ModelElement.SubscribePowerCurve = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubscribePowerCurveChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubscribePowerCurveChanged -= handler;
            }
        }
    }
}

