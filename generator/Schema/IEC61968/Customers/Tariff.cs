//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The default implementation of the Tariff class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Customers")]
    [XmlNamespacePrefixAttribute("cimCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Tariff")]
    [DebuggerDisplayAttribute("Tariff {UUID}")]
    public partial class Tariff : Document, ITariff, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EndDate property
        /// </summary>
        private string _endDate;
        
        private static Lazy<ITypedElement> _endDateAttribute = new Lazy<ITypedElement>(RetrieveEndDateAttribute);
        
        /// <summary>
        /// The backing field for the StartDate property
        /// </summary>
        private string _startDate;
        
        private static Lazy<ITypedElement> _startDateAttribute = new Lazy<ITypedElement>(RetrieveStartDateAttribute);
        
        private static Lazy<ITypedElement> _tariffProfilesReference = new Lazy<ITypedElement>(RetrieveTariffProfilesReference);
        
        /// <summary>
        /// The backing field for the TariffProfiles property
        /// </summary>
        private TariffTariffProfilesCollection _tariffProfiles;
        
        private static Lazy<ITypedElement> _pricingStructuresReference = new Lazy<ITypedElement>(RetrievePricingStructuresReference);
        
        /// <summary>
        /// The backing field for the PricingStructures property
        /// </summary>
        private TariffPricingStructuresCollection _pricingStructures;
        
        private static IClass _classInstance;
        
        public Tariff()
        {
            this._tariffProfiles = new TariffTariffProfilesCollection(this);
            this._tariffProfiles.CollectionChanging += this.TariffProfilesCollectionChanging;
            this._tariffProfiles.CollectionChanged += this.TariffProfilesCollectionChanged;
            this._pricingStructures = new TariffPricingStructuresCollection(this);
            this._pricingStructures.CollectionChanging += this.PricingStructuresCollectionChanging;
            this._pricingStructures.CollectionChanged += this.PricingStructuresCollectionChanged;
        }
        
        /// <summary>
        /// The endDate property
        /// </summary>
        [XmlElementNameAttribute("endDate")]
        [XmlAttributeAttribute(true)]
        public virtual string EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    string old = this._endDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDateChanging(e);
                    this.OnPropertyChanging("EndDate", e, _endDateAttribute);
                    this._endDate = value;
                    this.OnEndDateChanged(e);
                    this.OnPropertyChanged("EndDate", e, _endDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startDate property
        /// </summary>
        [XmlElementNameAttribute("startDate")]
        [XmlAttributeAttribute(true)]
        public virtual string StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    string old = this._startDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartDateChanging(e);
                    this.OnPropertyChanging("StartDate", e, _startDateAttribute);
                    this._startDate = value;
                    this.OnStartDateChanged(e);
                    this.OnPropertyChanged("StartDate", e, _startDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TariffProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tariffs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITariffProfile> TariffProfiles
        {
            get
            {
                return this._tariffProfiles;
            }
        }
        
        /// <summary>
        /// The PricingStructures property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tariffs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPricingStructure> PricingStructures
        {
            get
            {
                return this._pricingStructures;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TariffReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Tariff")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EndDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDateChanging;
        
        /// <summary>
        /// Gets fired when the EndDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDateChanged;
        
        /// <summary>
        /// Gets fired before the StartDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartDateChanging;
        
        /// <summary>
        /// Gets fired when the StartDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartDateChanged;
        
        private static ITypedElement RetrieveEndDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Tariff.ClassInstance)).Resolve("endDate")));
        }
        
        /// <summary>
        /// Raises the EndDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Tariff.ClassInstance)).Resolve("startDate")));
        }
        
        /// <summary>
        /// Raises the StartDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTariffProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(Tariff.ClassInstance)).Resolve("TariffProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TariffProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffProfilesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TariffProfiles", e, _tariffProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TariffProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TariffProfiles", e, _tariffProfilesReference);
        }
        
        private static ITypedElement RetrievePricingStructuresReference()
        {
            return ((ITypedElement)(((ModelElement)(Tariff.ClassInstance)).Resolve("PricingStructures")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PricingStructures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PricingStructuresCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PricingStructures", e, _pricingStructuresReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PricingStructures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PricingStructuresCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PricingStructures", e, _pricingStructuresReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ENDDATE"))
            {
                return this.EndDate;
            }
            if ((attribute == "STARTDATE"))
            {
                return this.StartDate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TARIFFPROFILES"))
            {
                return this._tariffProfiles;
            }
            if ((feature == "PRICINGSTRUCTURES"))
            {
                return this._pricingStructures;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENDDATE"))
            {
                this.EndDate = ((string)(value));
                return;
            }
            if ((feature == "STARTDATE"))
            {
                this.StartDate = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Tariff")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Tariff class
        /// </summary>
        public class TariffReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Tariff _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TariffReferencedElementsCollection(Tariff parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TariffProfiles.Count);
                    count = (count + this._parent.PricingStructures.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TariffProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PricingStructures.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TariffProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PricingStructures.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITariffProfile tariffProfilesCasted = item.As<ITariffProfile>();
                if ((tariffProfilesCasted != null))
                {
                    this._parent.TariffProfiles.Add(tariffProfilesCasted);
                }
                IPricingStructure pricingStructuresCasted = item.As<IPricingStructure>();
                if ((pricingStructuresCasted != null))
                {
                    this._parent.PricingStructures.Add(pricingStructuresCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TariffProfiles.Clear();
                this._parent.PricingStructures.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TariffProfiles.Contains(item))
                {
                    return true;
                }
                if (this._parent.PricingStructures.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tariffProfilesEnumerator = this._parent.TariffProfiles.GetEnumerator();
                try
                {
                    for (
                    ; tariffProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tariffProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tariffProfilesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> pricingStructuresEnumerator = this._parent.PricingStructures.GetEnumerator();
                try
                {
                    for (
                    ; pricingStructuresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pricingStructuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pricingStructuresEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITariffProfile tariffProfileItem = item.As<ITariffProfile>();
                if (((tariffProfileItem != null) 
                            && this._parent.TariffProfiles.Remove(tariffProfileItem)))
                {
                    return true;
                }
                IPricingStructure pricingStructureItem = item.As<IPricingStructure>();
                if (((pricingStructureItem != null) 
                            && this._parent.PricingStructures.Remove(pricingStructureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TariffProfiles).Concat(this._parent.PricingStructures).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the endDate property
        /// </summary>
        private sealed class EndDateProxy : ModelPropertyChange<ITariff, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDateProxy(ITariff modelElement) : 
                    base(modelElement, "endDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EndDate;
                }
                set
                {
                    this.ModelElement.EndDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startDate property
        /// </summary>
        private sealed class StartDateProxy : ModelPropertyChange<ITariff, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartDateProxy(ITariff modelElement) : 
                    base(modelElement, "startDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StartDate;
                }
                set
                {
                    this.ModelElement.StartDate = value;
                }
            }
        }
    }
}

