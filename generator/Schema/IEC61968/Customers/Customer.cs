//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The default implementation of the Customer class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Customers")]
    [XmlNamespacePrefixAttribute("cimCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Customer")]
    [DebuggerDisplayAttribute("Customer {UUID}")]
    public partial class Customer : Organisation, ICustomer, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<CustomerKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the SpecialNeed property
        /// </summary>
        private string _specialNeed;
        
        private static Lazy<ITypedElement> _specialNeedAttribute = new Lazy<ITypedElement>(RetrieveSpecialNeedAttribute);
        
        /// <summary>
        /// The backing field for the PucNumber property
        /// </summary>
        private string _pucNumber;
        
        private static Lazy<ITypedElement> _pucNumberAttribute = new Lazy<ITypedElement>(RetrievePucNumberAttribute);
        
        /// <summary>
        /// The backing field for the Vip property
        /// </summary>
        private bool _vip;
        
        private static Lazy<ITypedElement> _vipAttribute = new Lazy<ITypedElement>(RetrieveVipAttribute);
        
        private static Lazy<ITypedElement> _plannedOutageReference = new Lazy<ITypedElement>(RetrievePlannedOutageReference);
        
        /// <summary>
        /// The backing field for the PlannedOutage property
        /// </summary>
        private IPlannedOutage _plannedOutage;
        
        private static Lazy<ITypedElement> _endDeviceAssetsReference = new Lazy<ITypedElement>(RetrieveEndDeviceAssetsReference);
        
        /// <summary>
        /// The backing field for the EndDeviceAssets property
        /// </summary>
        private CustomerEndDeviceAssetsCollection _endDeviceAssets;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _troubleTicketsReference = new Lazy<ITypedElement>(RetrieveTroubleTicketsReference);
        
        /// <summary>
        /// The backing field for the TroubleTickets property
        /// </summary>
        private CustomerTroubleTicketsCollection _troubleTickets;
        
        private static Lazy<ITypedElement> _erpPersonsReference = new Lazy<ITypedElement>(RetrieveErpPersonsReference);
        
        /// <summary>
        /// The backing field for the ErpPersons property
        /// </summary>
        private CustomerErpPersonsCollection _erpPersons;
        
        private static Lazy<ITypedElement> _outageNotificationsReference = new Lazy<ITypedElement>(RetrieveOutageNotificationsReference);
        
        /// <summary>
        /// The backing field for the OutageNotifications property
        /// </summary>
        private CustomerOutageNotificationsCollection _outageNotifications;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private CustomerWorksCollection _works;
        
        private static Lazy<ITypedElement> _customerAgreementsReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementsReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private CustomerCustomerAgreementsCollection _customerAgreements;
        
        private static IClass _classInstance;
        
        public Customer()
        {
            this._endDeviceAssets = new CustomerEndDeviceAssetsCollection(this);
            this._endDeviceAssets.CollectionChanging += this.EndDeviceAssetsCollectionChanging;
            this._endDeviceAssets.CollectionChanged += this.EndDeviceAssetsCollectionChanged;
            this._troubleTickets = new CustomerTroubleTicketsCollection(this);
            this._troubleTickets.CollectionChanging += this.TroubleTicketsCollectionChanging;
            this._troubleTickets.CollectionChanged += this.TroubleTicketsCollectionChanged;
            this._erpPersons = new CustomerErpPersonsCollection(this);
            this._erpPersons.CollectionChanging += this.ErpPersonsCollectionChanging;
            this._erpPersons.CollectionChanged += this.ErpPersonsCollectionChanged;
            this._outageNotifications = new CustomerOutageNotificationsCollection(this);
            this._outageNotifications.CollectionChanging += this.OutageNotificationsCollectionChanging;
            this._outageNotifications.CollectionChanged += this.OutageNotificationsCollectionChanged;
            this._works = new CustomerWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
            this._customerAgreements = new CustomerCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CustomerKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<CustomerKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The specialNeed property
        /// </summary>
        [XmlElementNameAttribute("specialNeed")]
        [XmlAttributeAttribute(true)]
        public virtual string SpecialNeed
        {
            get
            {
                return this._specialNeed;
            }
            set
            {
                if ((this._specialNeed != value))
                {
                    string old = this._specialNeed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecialNeedChanging(e);
                    this.OnPropertyChanging("SpecialNeed", e, _specialNeedAttribute);
                    this._specialNeed = value;
                    this.OnSpecialNeedChanged(e);
                    this.OnPropertyChanged("SpecialNeed", e, _specialNeedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pucNumber property
        /// </summary>
        [XmlElementNameAttribute("pucNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string PucNumber
        {
            get
            {
                return this._pucNumber;
            }
            set
            {
                if ((this._pucNumber != value))
                {
                    string old = this._pucNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPucNumberChanging(e);
                    this.OnPropertyChanging("PucNumber", e, _pucNumberAttribute);
                    this._pucNumber = value;
                    this.OnPucNumberChanged(e);
                    this.OnPropertyChanged("PucNumber", e, _pucNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The vip property
        /// </summary>
        [XmlElementNameAttribute("vip")]
        [XmlAttributeAttribute(true)]
        public virtual bool Vip
        {
            get
            {
                return this._vip;
            }
            set
            {
                if ((this._vip != value))
                {
                    bool old = this._vip;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVipChanging(e);
                    this.OnPropertyChanging("Vip", e, _vipAttribute);
                    this._vip = value;
                    this.OnVipChanged(e);
                    this.OnPropertyChanged("Vip", e, _vipAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PlannedOutage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerDatas")]
        public virtual IPlannedOutage PlannedOutage
        {
            get
            {
                return this._plannedOutage;
            }
            set
            {
                if ((this._plannedOutage != value))
                {
                    IPlannedOutage old = this._plannedOutage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlannedOutageChanging(e);
                    this.OnPropertyChanging("PlannedOutage", e, _plannedOutageReference);
                    this._plannedOutage = value;
                    if ((old != null))
                    {
                        old.CustomerDatas.Remove(this);
                        old.Deleted -= this.OnResetPlannedOutage;
                    }
                    if ((value != null))
                    {
                        value.CustomerDatas.Add(this);
                        value.Deleted += this.OnResetPlannedOutage;
                    }
                    this.OnPlannedOutageChanged(e);
                    this.OnPropertyChanged("PlannedOutage", e, _plannedOutageReference);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Customer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceAsset> EndDeviceAssets
        {
            get
            {
                return this._endDeviceAssets;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The TroubleTickets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerData")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITroubleTicket> TroubleTickets
        {
            get
            {
                return this._troubleTickets;
            }
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerData")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get
            {
                return this._erpPersons;
            }
        }
        
        /// <summary>
        /// The OutageNotifications property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerDatas")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageNotification> OutageNotifications
        {
            get
            {
                return this._outageNotifications;
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Customers")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Customer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CustomerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Customer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the SpecialNeed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanging;
        
        /// <summary>
        /// Gets fired when the SpecialNeed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanged;
        
        /// <summary>
        /// Gets fired before the PucNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PucNumberChanging;
        
        /// <summary>
        /// Gets fired when the PucNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PucNumberChanged;
        
        /// <summary>
        /// Gets fired before the Vip property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VipChanging;
        
        /// <summary>
        /// Gets fired when the Vip property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VipChanged;
        
        /// <summary>
        /// Gets fired before the PlannedOutage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanging;
        
        /// <summary>
        /// Gets fired when the PlannedOutage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpecialNeedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("specialNeed")));
        }
        
        /// <summary>
        /// Raises the SpecialNeedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialNeedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialNeedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecialNeedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialNeedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialNeedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePucNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("pucNumber")));
        }
        
        /// <summary>
        /// Raises the PucNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPucNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PucNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PucNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPucNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PucNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVipAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("vip")));
        }
        
        /// <summary>
        /// Raises the VipChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVipChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VipChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VipChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVipChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VipChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePlannedOutageReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("PlannedOutage")));
        }
        
        /// <summary>
        /// Raises the PlannedOutageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlannedOutageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlannedOutageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlannedOutageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlannedOutageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlannedOutageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PlannedOutage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPlannedOutage(object sender, System.EventArgs eventArgs)
        {
            this.PlannedOutage = null;
        }
        
        private static ITypedElement RetrieveEndDeviceAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("EndDeviceAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceAssets", e, _endDeviceAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceAssets", e, _endDeviceAssetsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveTroubleTicketsReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("TroubleTickets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TroubleTickets", e, _troubleTicketsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TroubleTickets", e, _troubleTicketsReference);
        }
        
        private static ITypedElement RetrieveErpPersonsReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("ErpPersons")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersons", e, _erpPersonsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersons", e, _erpPersonsReference);
        }
        
        private static ITypedElement RetrieveOutageNotificationsReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("OutageNotifications")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageNotifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageNotificationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageNotifications", e, _outageNotificationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageNotifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageNotificationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageNotifications", e, _outageNotificationsReference);
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        private static ITypedElement RetrieveCustomerAgreementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Customer.ClassInstance)).Resolve("CustomerAgreements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "SPECIALNEED"))
            {
                return this.SpecialNeed;
            }
            if ((attribute == "PUCNUMBER"))
            {
                return this.PucNumber;
            }
            if ((attribute == "VIP"))
            {
                return this.Vip;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENDDEVICEASSETS"))
            {
                return this._endDeviceAssets;
            }
            if ((feature == "TROUBLETICKETS"))
            {
                return this._troubleTickets;
            }
            if ((feature == "ERPPERSONS"))
            {
                return this._erpPersons;
            }
            if ((feature == "OUTAGENOTIFICATIONS"))
            {
                return this._outageNotifications;
            }
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PLANNEDOUTAGE"))
            {
                this.PlannedOutage = ((IPlannedOutage)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((CustomerKind)(value));
                return;
            }
            if ((feature == "SPECIALNEED"))
            {
                this.SpecialNeed = ((string)(value));
                return;
            }
            if ((feature == "PUCNUMBER"))
            {
                this.PucNumber = ((string)(value));
                return;
            }
            if ((feature == "VIP"))
            {
                this.Vip = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PlannedOutage"))
            {
                return new PlannedOutageProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PlannedOutage"))
            {
                return new PlannedOutageProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/Customer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Customer class
        /// </summary>
        public class CustomerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Customer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CustomerReferencedElementsCollection(Customer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PlannedOutage != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EndDeviceAssets.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TroubleTickets.Count);
                    count = (count + this._parent.ErpPersons.Count);
                    count = (count + this._parent.OutageNotifications.Count);
                    count = (count + this._parent.Works.Count);
                    count = (count + this._parent.CustomerAgreements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PlannedOutageChanged += this.PropagateValueChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OutageNotifications.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PlannedOutageChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OutageNotifications.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PlannedOutage == null))
                {
                    IPlannedOutage plannedOutageCasted = item.As<IPlannedOutage>();
                    if ((plannedOutageCasted != null))
                    {
                        this._parent.PlannedOutage = plannedOutageCasted;
                        return;
                    }
                }
                IEndDeviceAsset endDeviceAssetsCasted = item.As<IEndDeviceAsset>();
                if ((endDeviceAssetsCasted != null))
                {
                    this._parent.EndDeviceAssets.Add(endDeviceAssetsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ITroubleTicket troubleTicketsCasted = item.As<ITroubleTicket>();
                if ((troubleTicketsCasted != null))
                {
                    this._parent.TroubleTickets.Add(troubleTicketsCasted);
                }
                IErpPerson erpPersonsCasted = item.As<IErpPerson>();
                if ((erpPersonsCasted != null))
                {
                    this._parent.ErpPersons.Add(erpPersonsCasted);
                }
                IOutageNotification outageNotificationsCasted = item.As<IOutageNotification>();
                if ((outageNotificationsCasted != null))
                {
                    this._parent.OutageNotifications.Add(outageNotificationsCasted);
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PlannedOutage = null;
                this._parent.EndDeviceAssets.Clear();
                this._parent.Status = null;
                this._parent.TroubleTickets.Clear();
                this._parent.ErpPersons.Clear();
                this._parent.OutageNotifications.Clear();
                this._parent.Works.Clear();
                this._parent.CustomerAgreements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PlannedOutage))
                {
                    return true;
                }
                if (this._parent.EndDeviceAssets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.TroubleTickets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersons.Contains(item))
                {
                    return true;
                }
                if (this._parent.OutageNotifications.Contains(item))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PlannedOutage != null))
                {
                    array[arrayIndex] = this._parent.PlannedOutage;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> endDeviceAssetsEnumerator = this._parent.EndDeviceAssets.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceAssetsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> troubleTicketsEnumerator = this._parent.TroubleTickets.GetEnumerator();
                try
                {
                    for (
                    ; troubleTicketsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = troubleTicketsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    troubleTicketsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonsEnumerator = this._parent.ErpPersons.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outageNotificationsEnumerator = this._parent.OutageNotifications.GetEnumerator();
                try
                {
                    for (
                    ; outageNotificationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageNotificationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageNotificationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PlannedOutage == item))
                {
                    this._parent.PlannedOutage = null;
                    return true;
                }
                IEndDeviceAsset endDeviceAssetItem = item.As<IEndDeviceAsset>();
                if (((endDeviceAssetItem != null) 
                            && this._parent.EndDeviceAssets.Remove(endDeviceAssetItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ITroubleTicket troubleTicketItem = item.As<ITroubleTicket>();
                if (((troubleTicketItem != null) 
                            && this._parent.TroubleTickets.Remove(troubleTicketItem)))
                {
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.ErpPersons.Remove(erpPersonItem)))
                {
                    return true;
                }
                IOutageNotification outageNotificationItem = item.As<IOutageNotification>();
                if (((outageNotificationItem != null) 
                            && this._parent.OutageNotifications.Remove(outageNotificationItem)))
                {
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PlannedOutage).Concat(this._parent.EndDeviceAssets).Concat(this._parent.Status).Concat(this._parent.TroubleTickets).Concat(this._parent.ErpPersons).Concat(this._parent.OutageNotifications).Concat(this._parent.Works).Concat(this._parent.CustomerAgreements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ICustomer, Nullable<CustomerKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ICustomer modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CustomerKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specialNeed property
        /// </summary>
        private sealed class SpecialNeedProxy : ModelPropertyChange<ICustomer, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecialNeedProxy(ICustomer modelElement) : 
                    base(modelElement, "specialNeed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SpecialNeed;
                }
                set
                {
                    this.ModelElement.SpecialNeed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pucNumber property
        /// </summary>
        private sealed class PucNumberProxy : ModelPropertyChange<ICustomer, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PucNumberProxy(ICustomer modelElement) : 
                    base(modelElement, "pucNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PucNumber;
                }
                set
                {
                    this.ModelElement.PucNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vip property
        /// </summary>
        private sealed class VipProxy : ModelPropertyChange<ICustomer, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VipProxy(ICustomer modelElement) : 
                    base(modelElement, "vip")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Vip;
                }
                set
                {
                    this.ModelElement.Vip = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PlannedOutage property
        /// </summary>
        private sealed class PlannedOutageProxy : ModelPropertyChange<ICustomer, IPlannedOutage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlannedOutageProxy(ICustomer modelElement) : 
                    base(modelElement, "PlannedOutage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPlannedOutage Value
            {
                get
                {
                    return this.ModelElement.PlannedOutage;
                }
                set
                {
                    this.ModelElement.PlannedOutage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ICustomer, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ICustomer modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

