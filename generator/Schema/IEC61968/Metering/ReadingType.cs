//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the ReadingType class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ReadingType")]
    [DebuggerDisplayAttribute("ReadingType {UUID}")]
    public partial class ReadingType : IdentifiedObject, IReadingType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IntervalLength property
        /// </summary>
        private float _intervalLength;
        
        private static Lazy<ITypedElement> _intervalLengthAttribute = new Lazy<ITypedElement>(RetrieveIntervalLengthAttribute);
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        private Nullable<UnitSymbol> _unit;
        
        private static Lazy<ITypedElement> _unitAttribute = new Lazy<ITypedElement>(RetrieveUnitAttribute);
        
        /// <summary>
        /// The backing field for the DefaultQuality property
        /// </summary>
        private string _defaultQuality;
        
        private static Lazy<ITypedElement> _defaultQualityAttribute = new Lazy<ITypedElement>(RetrieveDefaultQualityAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ReadingKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the ChannelNumber property
        /// </summary>
        private int _channelNumber;
        
        private static Lazy<ITypedElement> _channelNumberAttribute = new Lazy<ITypedElement>(RetrieveChannelNumberAttribute);
        
        /// <summary>
        /// The backing field for the Multiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _multiplier;
        
        private static Lazy<ITypedElement> _multiplierAttribute = new Lazy<ITypedElement>(RetrieveMultiplierAttribute);
        
        /// <summary>
        /// The backing field for the DefaultValueDataType property
        /// </summary>
        private string _defaultValueDataType;
        
        private static Lazy<ITypedElement> _defaultValueDataTypeAttribute = new Lazy<ITypedElement>(RetrieveDefaultValueDataTypeAttribute);
        
        /// <summary>
        /// The backing field for the ReverseChronology property
        /// </summary>
        private bool _reverseChronology;
        
        private static Lazy<ITypedElement> _reverseChronologyAttribute = new Lazy<ITypedElement>(RetrieveReverseChronologyAttribute);
        
        private static Lazy<ITypedElement> _dynamicConfigurationReference = new Lazy<ITypedElement>(RetrieveDynamicConfigurationReference);
        
        /// <summary>
        /// The backing field for the DynamicConfiguration property
        /// </summary>
        private IDynamicDemand _dynamicConfiguration;
        
        private static Lazy<ITypedElement> _registerReference = new Lazy<ITypedElement>(RetrieveRegisterReference);
        
        /// <summary>
        /// The backing field for the Register property
        /// </summary>
        private IRegister _register;
        
        private static Lazy<ITypedElement> _intervalBlocksReference = new Lazy<ITypedElement>(RetrieveIntervalBlocksReference);
        
        /// <summary>
        /// The backing field for the IntervalBlocks property
        /// </summary>
        private ReadingTypeIntervalBlocksCollection _intervalBlocks;
        
        private static Lazy<ITypedElement> _readingsReference = new Lazy<ITypedElement>(RetrieveReadingsReference);
        
        /// <summary>
        /// The backing field for the Readings property
        /// </summary>
        private ReadingTypeReadingsCollection _readings;
        
        private static Lazy<ITypedElement> _pendingReference = new Lazy<ITypedElement>(RetrievePendingReference);
        
        /// <summary>
        /// The backing field for the Pending property
        /// </summary>
        private IPending _pending;
        
        private static IClass _classInstance;
        
        public ReadingType()
        {
            this._intervalBlocks = new ReadingTypeIntervalBlocksCollection(this);
            this._intervalBlocks.CollectionChanging += this.IntervalBlocksCollectionChanging;
            this._intervalBlocks.CollectionChanged += this.IntervalBlocksCollectionChanged;
            this._readings = new ReadingTypeReadingsCollection(this);
            this._readings.CollectionChanging += this.ReadingsCollectionChanging;
            this._readings.CollectionChanged += this.ReadingsCollectionChanged;
        }
        
        /// <summary>
        /// The intervalLength property
        /// </summary>
        [XmlElementNameAttribute("intervalLength")]
        [XmlAttributeAttribute(true)]
        public virtual float IntervalLength
        {
            get
            {
                return this._intervalLength;
            }
            set
            {
                if ((this._intervalLength != value))
                {
                    float old = this._intervalLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalLengthChanging(e);
                    this.OnPropertyChanging("IntervalLength", e, _intervalLengthAttribute);
                    this._intervalLength = value;
                    this.OnIntervalLengthChanged(e);
                    this.OnPropertyChanged("IntervalLength", e, _intervalLengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The unit property
        /// </summary>
        [XmlElementNameAttribute("unit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitSymbol> Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    Nullable<UnitSymbol> old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e, _unitAttribute);
                    this._unit = value;
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e, _unitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The defaultQuality property
        /// </summary>
        [XmlElementNameAttribute("defaultQuality")]
        [XmlAttributeAttribute(true)]
        public virtual string DefaultQuality
        {
            get
            {
                return this._defaultQuality;
            }
            set
            {
                if ((this._defaultQuality != value))
                {
                    string old = this._defaultQuality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultQualityChanging(e);
                    this.OnPropertyChanging("DefaultQuality", e, _defaultQualityAttribute);
                    this._defaultQuality = value;
                    this.OnDefaultQualityChanged(e);
                    this.OnPropertyChanged("DefaultQuality", e, _defaultQualityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ReadingKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ReadingKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The channelNumber property
        /// </summary>
        [XmlElementNameAttribute("channelNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int ChannelNumber
        {
            get
            {
                return this._channelNumber;
            }
            set
            {
                if ((this._channelNumber != value))
                {
                    int old = this._channelNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChannelNumberChanging(e);
                    this.OnPropertyChanging("ChannelNumber", e, _channelNumberAttribute);
                    this._channelNumber = value;
                    this.OnChannelNumberChanged(e);
                    this.OnPropertyChanged("ChannelNumber", e, _channelNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The multiplier property
        /// </summary>
        [XmlElementNameAttribute("multiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> Multiplier
        {
            get
            {
                return this._multiplier;
            }
            set
            {
                if ((this._multiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._multiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMultiplierChanging(e);
                    this.OnPropertyChanging("Multiplier", e, _multiplierAttribute);
                    this._multiplier = value;
                    this.OnMultiplierChanged(e);
                    this.OnPropertyChanged("Multiplier", e, _multiplierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The defaultValueDataType property
        /// </summary>
        [XmlElementNameAttribute("defaultValueDataType")]
        [XmlAttributeAttribute(true)]
        public virtual string DefaultValueDataType
        {
            get
            {
                return this._defaultValueDataType;
            }
            set
            {
                if ((this._defaultValueDataType != value))
                {
                    string old = this._defaultValueDataType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultValueDataTypeChanging(e);
                    this.OnPropertyChanging("DefaultValueDataType", e, _defaultValueDataTypeAttribute);
                    this._defaultValueDataType = value;
                    this.OnDefaultValueDataTypeChanged(e);
                    this.OnPropertyChanged("DefaultValueDataType", e, _defaultValueDataTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reverseChronology property
        /// </summary>
        [XmlElementNameAttribute("reverseChronology")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReverseChronology
        {
            get
            {
                return this._reverseChronology;
            }
            set
            {
                if ((this._reverseChronology != value))
                {
                    bool old = this._reverseChronology;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReverseChronologyChanging(e);
                    this.OnPropertyChanging("ReverseChronology", e, _reverseChronologyAttribute);
                    this._reverseChronology = value;
                    this.OnReverseChronologyChanged(e);
                    this.OnPropertyChanged("ReverseChronology", e, _reverseChronologyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dynamicConfiguration property
        /// </summary>
        [XmlElementNameAttribute("dynamicConfiguration")]
        [XmlAttributeAttribute(true)]
        public virtual IDynamicDemand DynamicConfiguration
        {
            get
            {
                return this._dynamicConfiguration;
            }
            set
            {
                if ((this._dynamicConfiguration != value))
                {
                    IDynamicDemand old = this._dynamicConfiguration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDynamicConfigurationChanging(e);
                    this.OnPropertyChanging("DynamicConfiguration", e, _dynamicConfigurationReference);
                    this._dynamicConfiguration = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDynamicConfiguration;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDynamicConfiguration;
                    }
                    this.OnDynamicConfigurationChanged(e);
                    this.OnPropertyChanged("DynamicConfiguration", e, _dynamicConfigurationReference);
                }
            }
        }
        
        /// <summary>
        /// The Register property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReadingType")]
        public virtual IRegister Register
        {
            get
            {
                return this._register;
            }
            set
            {
                if ((this._register != value))
                {
                    IRegister old = this._register;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisterChanging(e);
                    this.OnPropertyChanging("Register", e, _registerReference);
                    this._register = value;
                    if ((old != null))
                    {
                        old.ReadingType = null;
                        old.Deleted -= this.OnResetRegister;
                    }
                    if ((value != null))
                    {
                        value.ReadingType = this;
                        value.Deleted += this.OnResetRegister;
                    }
                    this.OnRegisterChanged(e);
                    this.OnPropertyChanged("Register", e, _registerReference);
                }
            }
        }
        
        /// <summary>
        /// The IntervalBlocks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReadingType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIntervalBlock> IntervalBlocks
        {
            get
            {
                return this._intervalBlocks;
            }
        }
        
        /// <summary>
        /// The Readings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReadingType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReading> Readings
        {
            get
            {
                return this._readings;
            }
        }
        
        /// <summary>
        /// The Pending property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReadingType")]
        public virtual IPending Pending
        {
            get
            {
                return this._pending;
            }
            set
            {
                if ((this._pending != value))
                {
                    IPending old = this._pending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPendingChanging(e);
                    this.OnPropertyChanging("Pending", e, _pendingReference);
                    this._pending = value;
                    if ((old != null))
                    {
                        old.ReadingType = null;
                        old.Deleted -= this.OnResetPending;
                    }
                    if ((value != null))
                    {
                        value.ReadingType = this;
                        value.Deleted += this.OnResetPending;
                    }
                    this.OnPendingChanged(e);
                    this.OnPropertyChanged("Pending", e, _pendingReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReadingTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ReadingType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IntervalLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalLengthChanging;
        
        /// <summary>
        /// Gets fired when the IntervalLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalLengthChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the DefaultQuality property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultQualityChanging;
        
        /// <summary>
        /// Gets fired when the DefaultQuality property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultQualityChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the ChannelNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelNumberChanging;
        
        /// <summary>
        /// Gets fired when the ChannelNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelNumberChanged;
        
        /// <summary>
        /// Gets fired before the Multiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Multiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplierChanged;
        
        /// <summary>
        /// Gets fired before the DefaultValueDataType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultValueDataTypeChanging;
        
        /// <summary>
        /// Gets fired when the DefaultValueDataType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultValueDataTypeChanged;
        
        /// <summary>
        /// Gets fired before the ReverseChronology property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseChronologyChanging;
        
        /// <summary>
        /// Gets fired when the ReverseChronology property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseChronologyChanged;
        
        /// <summary>
        /// Gets fired before the DynamicConfiguration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynamicConfigurationChanging;
        
        /// <summary>
        /// Gets fired when the DynamicConfiguration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynamicConfigurationChanged;
        
        /// <summary>
        /// Gets fired before the Register property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterChanging;
        
        /// <summary>
        /// Gets fired when the Register property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterChanged;
        
        /// <summary>
        /// Gets fired before the Pending property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PendingChanging;
        
        /// <summary>
        /// Gets fired when the Pending property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PendingChanged;
        
        private static ITypedElement RetrieveIntervalLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("intervalLength")));
        }
        
        /// <summary>
        /// Raises the IntervalLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("unit")));
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDefaultQualityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("defaultQuality")));
        }
        
        /// <summary>
        /// Raises the DefaultQualityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultQualityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultQualityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultQualityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultQualityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultQualityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveChannelNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("channelNumber")));
        }
        
        /// <summary>
        /// Raises the ChannelNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChannelNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMultiplierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("multiplier")));
        }
        
        /// <summary>
        /// Raises the MultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDefaultValueDataTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("defaultValueDataType")));
        }
        
        /// <summary>
        /// Raises the DefaultValueDataTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultValueDataTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultValueDataTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultValueDataTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultValueDataTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultValueDataTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReverseChronologyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("reverseChronology")));
        }
        
        /// <summary>
        /// Raises the ReverseChronologyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseChronologyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseChronologyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReverseChronologyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseChronologyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseChronologyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDynamicConfigurationReference()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("dynamicConfiguration")));
        }
        
        /// <summary>
        /// Raises the DynamicConfigurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynamicConfigurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynamicConfigurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DynamicConfigurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynamicConfigurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynamicConfigurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DynamicConfiguration property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDynamicConfiguration(object sender, System.EventArgs eventArgs)
        {
            this.DynamicConfiguration = null;
        }
        
        private static ITypedElement RetrieveRegisterReference()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("Register")));
        }
        
        /// <summary>
        /// Raises the RegisterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Register property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegister(object sender, System.EventArgs eventArgs)
        {
            this.Register = null;
        }
        
        private static ITypedElement RetrieveIntervalBlocksReference()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("IntervalBlocks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("IntervalBlocks", e, _intervalBlocksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IntervalBlocks", e, _intervalBlocksReference);
        }
        
        private static ITypedElement RetrieveReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("Readings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Readings", e, _readingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Readings", e, _readingsReference);
        }
        
        private static ITypedElement RetrievePendingReference()
        {
            return ((ITypedElement)(((ModelElement)(ReadingType.ClassInstance)).Resolve("Pending")));
        }
        
        /// <summary>
        /// Raises the PendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPendingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPendingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pending property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPending(object sender, System.EventArgs eventArgs)
        {
            this.Pending = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INTERVALLENGTH"))
            {
                return this.IntervalLength;
            }
            if ((attribute == "UNIT"))
            {
                return this.Unit;
            }
            if ((attribute == "DEFAULTQUALITY"))
            {
                return this.DefaultQuality;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "CHANNELNUMBER"))
            {
                return this.ChannelNumber;
            }
            if ((attribute == "MULTIPLIER"))
            {
                return this.Multiplier;
            }
            if ((attribute == "DEFAULTVALUEDATATYPE"))
            {
                return this.DefaultValueDataType;
            }
            if ((attribute == "REVERSECHRONOLOGY"))
            {
                return this.ReverseChronology;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INTERVALBLOCKS"))
            {
                return this._intervalBlocks;
            }
            if ((feature == "READINGS"))
            {
                return this._readings;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DYNAMICCONFIGURATION"))
            {
                this.DynamicConfiguration = ((IDynamicDemand)(value));
                return;
            }
            if ((feature == "REGISTER"))
            {
                this.Register = ((IRegister)(value));
                return;
            }
            if ((feature == "PENDING"))
            {
                this.Pending = ((IPending)(value));
                return;
            }
            if ((feature == "INTERVALLENGTH"))
            {
                this.IntervalLength = ((float)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((UnitSymbol)(value));
                return;
            }
            if ((feature == "DEFAULTQUALITY"))
            {
                this.DefaultQuality = ((string)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ReadingKind)(value));
                return;
            }
            if ((feature == "CHANNELNUMBER"))
            {
                this.ChannelNumber = ((int)(value));
                return;
            }
            if ((feature == "MULTIPLIER"))
            {
                this.Multiplier = ((UnitMultiplier)(value));
                return;
            }
            if ((feature == "DEFAULTVALUEDATATYPE"))
            {
                this.DefaultValueDataType = ((string)(value));
                return;
            }
            if ((feature == "REVERSECHRONOLOGY"))
            {
                this.ReverseChronology = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DynamicConfiguration"))
            {
                return new DynamicConfigurationProxy(this);
            }
            if ((attribute == "Register"))
            {
                return new RegisterProxy(this);
            }
            if ((attribute == "Pending"))
            {
                return new PendingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DynamicConfiguration"))
            {
                return new DynamicConfigurationProxy(this);
            }
            if ((reference == "Register"))
            {
                return new RegisterProxy(this);
            }
            if ((reference == "Pending"))
            {
                return new PendingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ReadingType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReadingType class
        /// </summary>
        public class ReadingTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReadingType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReadingTypeReferencedElementsCollection(ReadingType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DynamicConfiguration != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Register != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.IntervalBlocks.Count);
                    count = (count + this._parent.Readings.Count);
                    if ((this._parent.Pending != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DynamicConfigurationChanged += this.PropagateValueChanges;
                this._parent.RegisterChanged += this.PropagateValueChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Readings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PendingChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DynamicConfigurationChanged -= this.PropagateValueChanges;
                this._parent.RegisterChanged -= this.PropagateValueChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Readings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PendingChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DynamicConfiguration == null))
                {
                    IDynamicDemand dynamicConfigurationCasted = item.As<IDynamicDemand>();
                    if ((dynamicConfigurationCasted != null))
                    {
                        this._parent.DynamicConfiguration = dynamicConfigurationCasted;
                        return;
                    }
                }
                if ((this._parent.Register == null))
                {
                    IRegister registerCasted = item.As<IRegister>();
                    if ((registerCasted != null))
                    {
                        this._parent.Register = registerCasted;
                        return;
                    }
                }
                IIntervalBlock intervalBlocksCasted = item.As<IIntervalBlock>();
                if ((intervalBlocksCasted != null))
                {
                    this._parent.IntervalBlocks.Add(intervalBlocksCasted);
                }
                IReading readingsCasted = item.As<IReading>();
                if ((readingsCasted != null))
                {
                    this._parent.Readings.Add(readingsCasted);
                }
                if ((this._parent.Pending == null))
                {
                    IPending pendingCasted = item.As<IPending>();
                    if ((pendingCasted != null))
                    {
                        this._parent.Pending = pendingCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DynamicConfiguration = null;
                this._parent.Register = null;
                this._parent.IntervalBlocks.Clear();
                this._parent.Readings.Clear();
                this._parent.Pending = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DynamicConfiguration))
                {
                    return true;
                }
                if ((item == this._parent.Register))
                {
                    return true;
                }
                if (this._parent.IntervalBlocks.Contains(item))
                {
                    return true;
                }
                if (this._parent.Readings.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Pending))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DynamicConfiguration != null))
                {
                    array[arrayIndex] = this._parent.DynamicConfiguration;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Register != null))
                {
                    array[arrayIndex] = this._parent.Register;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> intervalBlocksEnumerator = this._parent.IntervalBlocks.GetEnumerator();
                try
                {
                    for (
                    ; intervalBlocksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = intervalBlocksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    intervalBlocksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> readingsEnumerator = this._parent.Readings.GetEnumerator();
                try
                {
                    for (
                    ; readingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = readingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    readingsEnumerator.Dispose();
                }
                if ((this._parent.Pending != null))
                {
                    array[arrayIndex] = this._parent.Pending;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DynamicConfiguration == item))
                {
                    this._parent.DynamicConfiguration = null;
                    return true;
                }
                if ((this._parent.Register == item))
                {
                    this._parent.Register = null;
                    return true;
                }
                IIntervalBlock intervalBlockItem = item.As<IIntervalBlock>();
                if (((intervalBlockItem != null) 
                            && this._parent.IntervalBlocks.Remove(intervalBlockItem)))
                {
                    return true;
                }
                IReading readingItem = item.As<IReading>();
                if (((readingItem != null) 
                            && this._parent.Readings.Remove(readingItem)))
                {
                    return true;
                }
                if ((this._parent.Pending == item))
                {
                    this._parent.Pending = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DynamicConfiguration).Concat(this._parent.Register).Concat(this._parent.IntervalBlocks).Concat(this._parent.Readings).Concat(this._parent.Pending).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the intervalLength property
        /// </summary>
        private sealed class IntervalLengthProxy : ModelPropertyChange<IReadingType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalLengthProxy(IReadingType modelElement) : 
                    base(modelElement, "intervalLength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.IntervalLength;
                }
                set
                {
                    this.ModelElement.IntervalLength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IReadingType, Nullable<UnitSymbol>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IReadingType modelElement) : 
                    base(modelElement, "unit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitSymbol> Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultQuality property
        /// </summary>
        private sealed class DefaultQualityProxy : ModelPropertyChange<IReadingType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultQualityProxy(IReadingType modelElement) : 
                    base(modelElement, "defaultQuality")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DefaultQuality;
                }
                set
                {
                    this.ModelElement.DefaultQuality = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IReadingType, Nullable<ReadingKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IReadingType modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ReadingKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the channelNumber property
        /// </summary>
        private sealed class ChannelNumberProxy : ModelPropertyChange<IReadingType, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChannelNumberProxy(IReadingType modelElement) : 
                    base(modelElement, "channelNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ChannelNumber;
                }
                set
                {
                    this.ModelElement.ChannelNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the multiplier property
        /// </summary>
        private sealed class MultiplierProxy : ModelPropertyChange<IReadingType, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MultiplierProxy(IReadingType modelElement) : 
                    base(modelElement, "multiplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.Multiplier;
                }
                set
                {
                    this.ModelElement.Multiplier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultValueDataType property
        /// </summary>
        private sealed class DefaultValueDataTypeProxy : ModelPropertyChange<IReadingType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultValueDataTypeProxy(IReadingType modelElement) : 
                    base(modelElement, "defaultValueDataType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DefaultValueDataType;
                }
                set
                {
                    this.ModelElement.DefaultValueDataType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reverseChronology property
        /// </summary>
        private sealed class ReverseChronologyProxy : ModelPropertyChange<IReadingType, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReverseChronologyProxy(IReadingType modelElement) : 
                    base(modelElement, "reverseChronology")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReverseChronology;
                }
                set
                {
                    this.ModelElement.ReverseChronology = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dynamicConfiguration property
        /// </summary>
        private sealed class DynamicConfigurationProxy : ModelPropertyChange<IReadingType, IDynamicDemand>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DynamicConfigurationProxy(IReadingType modelElement) : 
                    base(modelElement, "dynamicConfiguration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDynamicDemand Value
            {
                get
                {
                    return this.ModelElement.DynamicConfiguration;
                }
                set
                {
                    this.ModelElement.DynamicConfiguration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Register property
        /// </summary>
        private sealed class RegisterProxy : ModelPropertyChange<IReadingType, IRegister>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisterProxy(IReadingType modelElement) : 
                    base(modelElement, "Register")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegister Value
            {
                get
                {
                    return this.ModelElement.Register;
                }
                set
                {
                    this.ModelElement.Register = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pending property
        /// </summary>
        private sealed class PendingProxy : ModelPropertyChange<IReadingType, IPending>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PendingProxy(IReadingType modelElement) : 
                    base(modelElement, "Pending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPending Value
            {
                get
                {
                    return this.ModelElement.Pending;
                }
                set
                {
                    this.ModelElement.Pending = value;
                }
            }
        }
    }
}

