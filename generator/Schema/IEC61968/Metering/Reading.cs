//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the Reading class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Reading")]
    [DebuggerDisplayAttribute("Reading {UUID}")]
    public partial class Reading : MeasurementValue, IReading, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private float _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static Lazy<ITypedElement> _endDeviceAssetReference = new Lazy<ITypedElement>(RetrieveEndDeviceAssetReference);
        
        /// <summary>
        /// The backing field for the EndDeviceAsset property
        /// </summary>
        private IEndDeviceAsset _endDeviceAsset;
        
        private static Lazy<ITypedElement> _readingQualitiesReference = new Lazy<ITypedElement>(RetrieveReadingQualitiesReference);
        
        /// <summary>
        /// The backing field for the ReadingQualities property
        /// </summary>
        private ReadingReadingQualitiesCollection _readingQualities;
        
        private static Lazy<ITypedElement> _meterReadingsReference = new Lazy<ITypedElement>(RetrieveMeterReadingsReference);
        
        /// <summary>
        /// The backing field for the MeterReadings property
        /// </summary>
        private ReadingMeterReadingsCollection _meterReadings;
        
        private static Lazy<ITypedElement> _readingTypeReference = new Lazy<ITypedElement>(RetrieveReadingTypeReference);
        
        /// <summary>
        /// The backing field for the ReadingType property
        /// </summary>
        private IReadingType _readingType;
        
        private static IClass _classInstance;
        
        public Reading()
        {
            this._readingQualities = new ReadingReadingQualitiesCollection(this);
            this._readingQualities.CollectionChanging += this.ReadingQualitiesCollectionChanging;
            this._readingQualities.CollectionChanged += this.ReadingQualitiesCollectionChanged;
            this._meterReadings = new ReadingMeterReadingsCollection(this);
            this._meterReadings.CollectionChanging += this.MeterReadingsCollectionChanging;
            this._meterReadings.CollectionChanged += this.MeterReadingsCollectionChanged;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual float Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    float old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Readings")]
        public virtual IEndDeviceAsset EndDeviceAsset
        {
            get
            {
                return this._endDeviceAsset;
            }
            set
            {
                if ((this._endDeviceAsset != value))
                {
                    IEndDeviceAsset old = this._endDeviceAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDeviceAssetChanging(e);
                    this.OnPropertyChanging("EndDeviceAsset", e, _endDeviceAssetReference);
                    this._endDeviceAsset = value;
                    if ((old != null))
                    {
                        old.Readings.Remove(this);
                        old.Deleted -= this.OnResetEndDeviceAsset;
                    }
                    if ((value != null))
                    {
                        value.Readings.Add(this);
                        value.Deleted += this.OnResetEndDeviceAsset;
                    }
                    this.OnEndDeviceAssetChanged(e);
                    this.OnPropertyChanged("EndDeviceAsset", e, _endDeviceAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The ReadingQualities property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reading")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReadingQuality> ReadingQualities
        {
            get
            {
                return this._readingQualities;
            }
        }
        
        /// <summary>
        /// The MeterReadings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Readings")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterReading> MeterReadings
        {
            get
            {
                return this._meterReadings;
            }
        }
        
        /// <summary>
        /// The ReadingType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Readings")]
        public virtual IReadingType ReadingType
        {
            get
            {
                return this._readingType;
            }
            set
            {
                if ((this._readingType != value))
                {
                    IReadingType old = this._readingType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingTypeChanging(e);
                    this.OnPropertyChanging("ReadingType", e, _readingTypeReference);
                    this._readingType = value;
                    if ((old != null))
                    {
                        old.Readings.Remove(this);
                        old.Deleted -= this.OnResetReadingType;
                    }
                    if ((value != null))
                    {
                        value.Readings.Add(this);
                        value.Deleted += this.OnResetReadingType;
                    }
                    this.OnReadingTypeChanged(e);
                    this.OnPropertyChanged("ReadingType", e, _readingTypeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReadingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Reading")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the EndDeviceAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceAssetChanging;
        
        /// <summary>
        /// Gets fired when the EndDeviceAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceAssetChanged;
        
        /// <summary>
        /// Gets fired before the ReadingType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReadingType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanged;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reading.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEndDeviceAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(Reading.ClassInstance)).Resolve("EndDeviceAsset")));
        }
        
        /// <summary>
        /// Raises the EndDeviceAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDeviceAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndDeviceAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndDeviceAsset(object sender, System.EventArgs eventArgs)
        {
            this.EndDeviceAsset = null;
        }
        
        private static ITypedElement RetrieveReadingQualitiesReference()
        {
            return ((ITypedElement)(((ModelElement)(Reading.ClassInstance)).Resolve("ReadingQualities")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReadingQualities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingQualitiesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ReadingQualities", e, _readingQualitiesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReadingQualities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingQualitiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReadingQualities", e, _readingQualitiesReference);
        }
        
        private static ITypedElement RetrieveMeterReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(Reading.ClassInstance)).Resolve("MeterReadings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MeterReadings", e, _meterReadingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterReadings", e, _meterReadingsReference);
        }
        
        private static ITypedElement RetrieveReadingTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(Reading.ClassInstance)).Resolve("ReadingType")));
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingType(object sender, System.EventArgs eventArgs)
        {
            this.ReadingType = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "READINGQUALITIES"))
            {
                return this._readingQualities;
            }
            if ((feature == "METERREADINGS"))
            {
                return this._meterReadings;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENDDEVICEASSET"))
            {
                this.EndDeviceAsset = ((IEndDeviceAsset)(value));
                return;
            }
            if ((feature == "READINGTYPE"))
            {
                this.ReadingType = ((IReadingType)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EndDeviceAsset"))
            {
                return new EndDeviceAssetProxy(this);
            }
            if ((attribute == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EndDeviceAsset"))
            {
                return new EndDeviceAssetProxy(this);
            }
            if ((reference == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Reading")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Reading class
        /// </summary>
        public class ReadingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Reading _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReadingReferencedElementsCollection(Reading parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EndDeviceAsset != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ReadingQualities.Count);
                    count = (count + this._parent.MeterReadings.Count);
                    if ((this._parent.ReadingType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EndDeviceAssetChanged += this.PropagateValueChanges;
                this._parent.ReadingQualities.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReadingTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EndDeviceAssetChanged -= this.PropagateValueChanges;
                this._parent.ReadingQualities.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReadingTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EndDeviceAsset == null))
                {
                    IEndDeviceAsset endDeviceAssetCasted = item.As<IEndDeviceAsset>();
                    if ((endDeviceAssetCasted != null))
                    {
                        this._parent.EndDeviceAsset = endDeviceAssetCasted;
                        return;
                    }
                }
                IReadingQuality readingQualitiesCasted = item.As<IReadingQuality>();
                if ((readingQualitiesCasted != null))
                {
                    this._parent.ReadingQualities.Add(readingQualitiesCasted);
                }
                IMeterReading meterReadingsCasted = item.As<IMeterReading>();
                if ((meterReadingsCasted != null))
                {
                    this._parent.MeterReadings.Add(meterReadingsCasted);
                }
                if ((this._parent.ReadingType == null))
                {
                    IReadingType readingTypeCasted = item.As<IReadingType>();
                    if ((readingTypeCasted != null))
                    {
                        this._parent.ReadingType = readingTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EndDeviceAsset = null;
                this._parent.ReadingQualities.Clear();
                this._parent.MeterReadings.Clear();
                this._parent.ReadingType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EndDeviceAsset))
                {
                    return true;
                }
                if (this._parent.ReadingQualities.Contains(item))
                {
                    return true;
                }
                if (this._parent.MeterReadings.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReadingType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EndDeviceAsset != null))
                {
                    array[arrayIndex] = this._parent.EndDeviceAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> readingQualitiesEnumerator = this._parent.ReadingQualities.GetEnumerator();
                try
                {
                    for (
                    ; readingQualitiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = readingQualitiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    readingQualitiesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> meterReadingsEnumerator = this._parent.MeterReadings.GetEnumerator();
                try
                {
                    for (
                    ; meterReadingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterReadingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterReadingsEnumerator.Dispose();
                }
                if ((this._parent.ReadingType != null))
                {
                    array[arrayIndex] = this._parent.ReadingType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EndDeviceAsset == item))
                {
                    this._parent.EndDeviceAsset = null;
                    return true;
                }
                IReadingQuality readingQualityItem = item.As<IReadingQuality>();
                if (((readingQualityItem != null) 
                            && this._parent.ReadingQualities.Remove(readingQualityItem)))
                {
                    return true;
                }
                IMeterReading meterReadingItem = item.As<IMeterReading>();
                if (((meterReadingItem != null) 
                            && this._parent.MeterReadings.Remove(meterReadingItem)))
                {
                    return true;
                }
                if ((this._parent.ReadingType == item))
                {
                    this._parent.ReadingType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EndDeviceAsset).Concat(this._parent.ReadingQualities).Concat(this._parent.MeterReadings).Concat(this._parent.ReadingType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IReading, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IReading modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndDeviceAsset property
        /// </summary>
        private sealed class EndDeviceAssetProxy : ModelPropertyChange<IReading, IEndDeviceAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDeviceAssetProxy(IReading modelElement) : 
                    base(modelElement, "EndDeviceAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndDeviceAsset Value
            {
                get
                {
                    return this.ModelElement.EndDeviceAsset;
                }
                set
                {
                    this.ModelElement.EndDeviceAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingType property
        /// </summary>
        private sealed class ReadingTypeProxy : ModelPropertyChange<IReading, IReadingType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingTypeProxy(IReading modelElement) : 
                    base(modelElement, "ReadingType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingType Value
            {
                get
                {
                    return this.ModelElement.ReadingType;
                }
                set
                {
                    this.ModelElement.ReadingType = value;
                }
            }
        }
    }
}

