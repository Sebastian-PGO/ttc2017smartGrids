//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the ServiceDeliveryPoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ServiceDeliveryPoint" +
        "")]
    [DebuggerDisplayAttribute("ServiceDeliveryPoint {UUID}")]
    public class ServiceDeliveryPoint : IdentifiedObject, IServiceDeliveryPoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PhaseCode property
        /// </summary>
        private Nullable<PhaseCode> _phaseCode;
        
        /// <summary>
        /// The backing field for the RatedPower property
        /// </summary>
        private float _ratedPower;
        
        /// <summary>
        /// The backing field for the Grounded property
        /// </summary>
        private bool _grounded;
        
        /// <summary>
        /// The backing field for the RatedCurrent property
        /// </summary>
        private float _ratedCurrent;
        
        /// <summary>
        /// The backing field for the NominalServiceVoltage property
        /// </summary>
        private int _nominalServiceVoltage;
        
        /// <summary>
        /// The backing field for the EstimatedLoad property
        /// </summary>
        private float _estimatedLoad;
        
        /// <summary>
        /// The backing field for the ServicePriority property
        /// </summary>
        private string _servicePriority;
        
        /// <summary>
        /// The backing field for the ServiceDeliveryRemark property
        /// </summary>
        private string _serviceDeliveryRemark;
        
        /// <summary>
        /// The backing field for the CheckBilling property
        /// </summary>
        private bool _checkBilling;
        
        /// <summary>
        /// The backing field for the CtptReference property
        /// </summary>
        private int _ctptReference;
        
        /// <summary>
        /// The backing field for the ServiceLocation property
        /// </summary>
        private IServiceLocation _serviceLocation;
        
        /// <summary>
        /// The backing field for the PowerQualityPricings property
        /// </summary>
        private ServiceDeliveryPointPowerQualityPricingsCollection _powerQualityPricings;
        
        /// <summary>
        /// The backing field for the CustomerAgreement property
        /// </summary>
        private ICustomerAgreement _customerAgreement;
        
        /// <summary>
        /// The backing field for the EnergyConsumer property
        /// </summary>
        private IEnergyConsumer _energyConsumer;
        
        /// <summary>
        /// The backing field for the ServiceCategory property
        /// </summary>
        private IServiceCategory _serviceCategory;
        
        /// <summary>
        /// The backing field for the EndDeviceAssets property
        /// </summary>
        private ServiceDeliveryPointEndDeviceAssetsCollection _endDeviceAssets;
        
        /// <summary>
        /// The backing field for the ServiceSupplier property
        /// </summary>
        private IServiceSupplier _serviceSupplier;
        
        /// <summary>
        /// The backing field for the PricingStructures property
        /// </summary>
        private ServiceDeliveryPointPricingStructuresCollection _pricingStructures;
        
        /// <summary>
        /// The backing field for the Transformer property
        /// </summary>
        private IDistributionTransformer _transformer;
        
        /// <summary>
        /// The backing field for the MeterReadings property
        /// </summary>
        private ServiceDeliveryPointMeterReadingsCollection _meterReadings;
        
        /// <summary>
        /// The backing field for the SDPLocations property
        /// </summary>
        private ServiceDeliveryPointSDPLocationsCollection _sDPLocations;
        
        private static IClass _classInstance;
        
        public ServiceDeliveryPoint()
        {
            this._powerQualityPricings = new ServiceDeliveryPointPowerQualityPricingsCollection(this);
            this._powerQualityPricings.CollectionChanging += this.PowerQualityPricingsCollectionChanging;
            this._powerQualityPricings.CollectionChanged += this.PowerQualityPricingsCollectionChanged;
            this._endDeviceAssets = new ServiceDeliveryPointEndDeviceAssetsCollection(this);
            this._endDeviceAssets.CollectionChanging += this.EndDeviceAssetsCollectionChanging;
            this._endDeviceAssets.CollectionChanged += this.EndDeviceAssetsCollectionChanged;
            this._pricingStructures = new ServiceDeliveryPointPricingStructuresCollection(this);
            this._pricingStructures.CollectionChanging += this.PricingStructuresCollectionChanging;
            this._pricingStructures.CollectionChanged += this.PricingStructuresCollectionChanged;
            this._meterReadings = new ServiceDeliveryPointMeterReadingsCollection(this);
            this._meterReadings.CollectionChanging += this.MeterReadingsCollectionChanging;
            this._meterReadings.CollectionChanged += this.MeterReadingsCollectionChanged;
            this._sDPLocations = new ServiceDeliveryPointSDPLocationsCollection(this);
            this._sDPLocations.CollectionChanging += this.SDPLocationsCollectionChanging;
            this._sDPLocations.CollectionChanged += this.SDPLocationsCollectionChanged;
        }
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        [XmlElementNameAttribute("phaseCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> PhaseCode
        {
            get
            {
                return this._phaseCode;
            }
            set
            {
                if ((this._phaseCode != value))
                {
                    Nullable<PhaseCode> old = this._phaseCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCodeChanging(e);
                    this.OnPropertyChanging("PhaseCode", e);
                    this._phaseCode = value;
                    this.OnPhaseCodeChanged(e);
                    this.OnPropertyChanged("PhaseCode", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedPower property
        /// </summary>
        [XmlElementNameAttribute("ratedPower")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedPower
        {
            get
            {
                return this._ratedPower;
            }
            set
            {
                if ((this._ratedPower != value))
                {
                    float old = this._ratedPower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedPowerChanging(e);
                    this.OnPropertyChanging("RatedPower", e);
                    this._ratedPower = value;
                    this.OnRatedPowerChanged(e);
                    this.OnPropertyChanged("RatedPower", e);
                }
            }
        }
        
        /// <summary>
        /// The grounded property
        /// </summary>
        [XmlElementNameAttribute("grounded")]
        [XmlAttributeAttribute(true)]
        public virtual bool Grounded
        {
            get
            {
                return this._grounded;
            }
            set
            {
                if ((this._grounded != value))
                {
                    bool old = this._grounded;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroundedChanging(e);
                    this.OnPropertyChanging("Grounded", e);
                    this._grounded = value;
                    this.OnGroundedChanged(e);
                    this.OnPropertyChanged("Grounded", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        [XmlElementNameAttribute("ratedCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedCurrent
        {
            get
            {
                return this._ratedCurrent;
            }
            set
            {
                if ((this._ratedCurrent != value))
                {
                    float old = this._ratedCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedCurrentChanging(e);
                    this.OnPropertyChanging("RatedCurrent", e);
                    this._ratedCurrent = value;
                    this.OnRatedCurrentChanged(e);
                    this.OnPropertyChanged("RatedCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The nominalServiceVoltage property
        /// </summary>
        [XmlElementNameAttribute("nominalServiceVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual int NominalServiceVoltage
        {
            get
            {
                return this._nominalServiceVoltage;
            }
            set
            {
                if ((this._nominalServiceVoltage != value))
                {
                    int old = this._nominalServiceVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalServiceVoltageChanging(e);
                    this.OnPropertyChanging("NominalServiceVoltage", e);
                    this._nominalServiceVoltage = value;
                    this.OnNominalServiceVoltageChanged(e);
                    this.OnPropertyChanged("NominalServiceVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The estimatedLoad property
        /// </summary>
        [XmlElementNameAttribute("estimatedLoad")]
        [XmlAttributeAttribute(true)]
        public virtual float EstimatedLoad
        {
            get
            {
                return this._estimatedLoad;
            }
            set
            {
                if ((this._estimatedLoad != value))
                {
                    float old = this._estimatedLoad;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatedLoadChanging(e);
                    this.OnPropertyChanging("EstimatedLoad", e);
                    this._estimatedLoad = value;
                    this.OnEstimatedLoadChanged(e);
                    this.OnPropertyChanged("EstimatedLoad", e);
                }
            }
        }
        
        /// <summary>
        /// The servicePriority property
        /// </summary>
        [XmlElementNameAttribute("servicePriority")]
        [XmlAttributeAttribute(true)]
        public virtual string ServicePriority
        {
            get
            {
                return this._servicePriority;
            }
            set
            {
                if ((this._servicePriority != value))
                {
                    string old = this._servicePriority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServicePriorityChanging(e);
                    this.OnPropertyChanging("ServicePriority", e);
                    this._servicePriority = value;
                    this.OnServicePriorityChanged(e);
                    this.OnPropertyChanged("ServicePriority", e);
                }
            }
        }
        
        /// <summary>
        /// The serviceDeliveryRemark property
        /// </summary>
        [XmlElementNameAttribute("serviceDeliveryRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string ServiceDeliveryRemark
        {
            get
            {
                return this._serviceDeliveryRemark;
            }
            set
            {
                if ((this._serviceDeliveryRemark != value))
                {
                    string old = this._serviceDeliveryRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceDeliveryRemarkChanging(e);
                    this.OnPropertyChanging("ServiceDeliveryRemark", e);
                    this._serviceDeliveryRemark = value;
                    this.OnServiceDeliveryRemarkChanged(e);
                    this.OnPropertyChanged("ServiceDeliveryRemark", e);
                }
            }
        }
        
        /// <summary>
        /// The checkBilling property
        /// </summary>
        [XmlElementNameAttribute("checkBilling")]
        [XmlAttributeAttribute(true)]
        public virtual bool CheckBilling
        {
            get
            {
                return this._checkBilling;
            }
            set
            {
                if ((this._checkBilling != value))
                {
                    bool old = this._checkBilling;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCheckBillingChanging(e);
                    this.OnPropertyChanging("CheckBilling", e);
                    this._checkBilling = value;
                    this.OnCheckBillingChanged(e);
                    this.OnPropertyChanged("CheckBilling", e);
                }
            }
        }
        
        /// <summary>
        /// The ctptReference property
        /// </summary>
        [XmlElementNameAttribute("ctptReference")]
        [XmlAttributeAttribute(true)]
        public virtual int CtptReference
        {
            get
            {
                return this._ctptReference;
            }
            set
            {
                if ((this._ctptReference != value))
                {
                    int old = this._ctptReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtptReferenceChanging(e);
                    this.OnPropertyChanging("CtptReference", e);
                    this._ctptReference = value;
                    this.OnCtptReferenceChanged(e);
                    this.OnPropertyChanged("CtptReference", e);
                }
            }
        }
        
        /// <summary>
        /// The ServiceLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual IServiceLocation ServiceLocation
        {
            get
            {
                return this._serviceLocation;
            }
            set
            {
                if ((this._serviceLocation != value))
                {
                    IServiceLocation old = this._serviceLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceLocationChanging(e);
                    this.OnPropertyChanging("ServiceLocation", e);
                    this._serviceLocation = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetServiceLocation;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetServiceLocation;
                    }
                    this.OnServiceLocationChanged(e);
                    this.OnPropertyChanged("ServiceLocation", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerQualityPricings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerQualityPricing> PowerQualityPricings
        {
            get
            {
                return this._powerQualityPricings;
            }
        }
        
        /// <summary>
        /// The CustomerAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual ICustomerAgreement CustomerAgreement
        {
            get
            {
                return this._customerAgreement;
            }
            set
            {
                if ((this._customerAgreement != value))
                {
                    ICustomerAgreement old = this._customerAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAgreementChanging(e);
                    this.OnPropertyChanging("CustomerAgreement", e);
                    this._customerAgreement = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetCustomerAgreement;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetCustomerAgreement;
                    }
                    this.OnCustomerAgreementChanged(e);
                    this.OnPropertyChanged("CustomerAgreement", e);
                }
            }
        }
        
        /// <summary>
        /// The EnergyConsumer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual IEnergyConsumer EnergyConsumer
        {
            get
            {
                return this._energyConsumer;
            }
            set
            {
                if ((this._energyConsumer != value))
                {
                    IEnergyConsumer old = this._energyConsumer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyConsumerChanging(e);
                    this.OnPropertyChanging("EnergyConsumer", e);
                    this._energyConsumer = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetEnergyConsumer;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetEnergyConsumer;
                    }
                    this.OnEnergyConsumerChanged(e);
                    this.OnPropertyChanged("EnergyConsumer", e);
                }
            }
        }
        
        /// <summary>
        /// The ServiceCategory property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual IServiceCategory ServiceCategory
        {
            get
            {
                return this._serviceCategory;
            }
            set
            {
                if ((this._serviceCategory != value))
                {
                    IServiceCategory old = this._serviceCategory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceCategoryChanging(e);
                    this.OnPropertyChanging("ServiceCategory", e);
                    this._serviceCategory = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetServiceCategory;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetServiceCategory;
                    }
                    this.OnServiceCategoryChanged(e);
                    this.OnPropertyChanged("ServiceCategory", e);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceAsset> EndDeviceAssets
        {
            get
            {
                return this._endDeviceAssets;
            }
        }
        
        /// <summary>
        /// The ServiceSupplier property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual IServiceSupplier ServiceSupplier
        {
            get
            {
                return this._serviceSupplier;
            }
            set
            {
                if ((this._serviceSupplier != value))
                {
                    IServiceSupplier old = this._serviceSupplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceSupplierChanging(e);
                    this.OnPropertyChanging("ServiceSupplier", e);
                    this._serviceSupplier = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetServiceSupplier;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetServiceSupplier;
                    }
                    this.OnServiceSupplierChanged(e);
                    this.OnPropertyChanged("ServiceSupplier", e);
                }
            }
        }
        
        /// <summary>
        /// The PricingStructures property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPricingStructure> PricingStructures
        {
            get
            {
                return this._pricingStructures;
            }
        }
        
        /// <summary>
        /// The Transformer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        public virtual IDistributionTransformer Transformer
        {
            get
            {
                return this._transformer;
            }
            set
            {
                if ((this._transformer != value))
                {
                    IDistributionTransformer old = this._transformer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerChanging(e);
                    this.OnPropertyChanging("Transformer", e);
                    this._transformer = value;
                    if ((old != null))
                    {
                        old.ServiceDeliveryPoints.Remove(this);
                        old.Deleted -= this.OnResetTransformer;
                    }
                    if ((value != null))
                    {
                        value.ServiceDeliveryPoints.Add(this);
                        value.Deleted += this.OnResetTransformer;
                    }
                    this.OnTransformerChanged(e);
                    this.OnPropertyChanged("Transformer", e);
                }
            }
        }
        
        /// <summary>
        /// The MeterReadings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterReading> MeterReadings
        {
            get
            {
                return this._meterReadings;
            }
        }
        
        /// <summary>
        /// The SDPLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceDeliveryPoints")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISDPLocation> SDPLocations
        {
            get
            {
                return this._sDPLocations;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServiceDeliveryPointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ServiceDeliveryPoint" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the RatedPower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedPower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedPowerChanged;
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the NominalServiceVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalServiceVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NominalServiceVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalServiceVoltageChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedLoad property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedLoadChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedLoad property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedLoadChanged;
        
        /// <summary>
        /// Gets fired before the ServicePriority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServicePriorityChanging;
        
        /// <summary>
        /// Gets fired when the ServicePriority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServicePriorityChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDeliveryRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryRemarkChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDeliveryRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryRemarkChanged;
        
        /// <summary>
        /// Gets fired before the CheckBilling property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CheckBillingChanging;
        
        /// <summary>
        /// Gets fired when the CheckBilling property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CheckBillingChanged;
        
        /// <summary>
        /// Gets fired before the CtptReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtptReferenceChanging;
        
        /// <summary>
        /// Gets fired when the CtptReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtptReferenceChanged;
        
        /// <summary>
        /// Gets fired before the ServiceLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanging;
        
        /// <summary>
        /// Gets fired when the ServiceLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanged;
        
        /// <summary>
        /// Gets fired before the EnergyConsumer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyConsumerChanging;
        
        /// <summary>
        /// Gets fired when the EnergyConsumer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyConsumerChanged;
        
        /// <summary>
        /// Gets fired before the ServiceCategory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanging;
        
        /// <summary>
        /// Gets fired when the ServiceCategory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanged;
        
        /// <summary>
        /// Gets fired before the ServiceSupplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanging;
        
        /// <summary>
        /// Gets fired when the ServiceSupplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanged;
        
        /// <summary>
        /// Gets fired before the Transformer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanging;
        
        /// <summary>
        /// Gets fired when the Transformer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanged;
        
        /// <summary>
        /// Raises the PhaseCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedPowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedPowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedPowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedPowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedPowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedPowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalServiceVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalServiceVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalServiceVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalServiceVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalServiceVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalServiceVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedLoadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedLoadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedLoadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedLoadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedLoadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedLoadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServicePriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServicePriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServicePriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServicePriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServicePriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServicePriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CheckBillingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCheckBillingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CheckBillingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CheckBillingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCheckBillingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CheckBillingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtptReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtptReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtptReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtptReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtptReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtptReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceLocation(object sender, System.EventArgs eventArgs)
        {
            this.ServiceLocation = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerQualityPricings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerQualityPricingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerQualityPricings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerQualityPricings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerQualityPricingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerQualityPricings", e);
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAgreement(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAgreement = null;
        }
        
        /// <summary>
        /// Raises the EnergyConsumerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyConsumerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyConsumerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyConsumerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyConsumerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyConsumerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EnergyConsumer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnergyConsumer(object sender, System.EventArgs eventArgs)
        {
            this.EnergyConsumer = null;
        }
        
        /// <summary>
        /// Raises the ServiceCategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceCategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceCategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceCategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceCategory property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceCategory(object sender, System.EventArgs eventArgs)
        {
            this.ServiceCategory = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceAssets", e);
        }
        
        /// <summary>
        /// Raises the ServiceSupplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceSupplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceSupplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceSupplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceSupplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceSupplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceSupplier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceSupplier(object sender, System.EventArgs eventArgs)
        {
            this.ServiceSupplier = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PricingStructures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PricingStructuresCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PricingStructures", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PricingStructures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PricingStructuresCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PricingStructures", e);
        }
        
        /// <summary>
        /// Raises the TransformerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Transformer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformer(object sender, System.EventArgs eventArgs)
        {
            this.Transformer = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MeterReadings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterReadings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SDPLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SDPLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SDPLocations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SDPLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SDPLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SDPLocations", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PHASECODE"))
            {
                return this.PhaseCode;
            }
            if ((attribute == "RATEDPOWER"))
            {
                return this.RatedPower;
            }
            if ((attribute == "GROUNDED"))
            {
                return this.Grounded;
            }
            if ((attribute == "RATEDCURRENT"))
            {
                return this.RatedCurrent;
            }
            if ((attribute == "NOMINALSERVICEVOLTAGE"))
            {
                return this.NominalServiceVoltage;
            }
            if ((attribute == "ESTIMATEDLOAD"))
            {
                return this.EstimatedLoad;
            }
            if ((attribute == "SERVICEPRIORITY"))
            {
                return this.ServicePriority;
            }
            if ((attribute == "SERVICEDELIVERYREMARK"))
            {
                return this.ServiceDeliveryRemark;
            }
            if ((attribute == "CHECKBILLING"))
            {
                return this.CheckBilling;
            }
            if ((attribute == "CTPTREFERENCE"))
            {
                return this.CtptReference;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POWERQUALITYPRICINGS"))
            {
                return this._powerQualityPricings;
            }
            if ((feature == "ENDDEVICEASSETS"))
            {
                return this._endDeviceAssets;
            }
            if ((feature == "PRICINGSTRUCTURES"))
            {
                return this._pricingStructures;
            }
            if ((feature == "METERREADINGS"))
            {
                return this._meterReadings;
            }
            if ((feature == "SDPLOCATIONS"))
            {
                return this._sDPLocations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICELOCATION"))
            {
                this.ServiceLocation = ((IServiceLocation)(value));
                return;
            }
            if ((feature == "CUSTOMERAGREEMENT"))
            {
                this.CustomerAgreement = ((ICustomerAgreement)(value));
                return;
            }
            if ((feature == "ENERGYCONSUMER"))
            {
                this.EnergyConsumer = ((IEnergyConsumer)(value));
                return;
            }
            if ((feature == "SERVICECATEGORY"))
            {
                this.ServiceCategory = ((IServiceCategory)(value));
                return;
            }
            if ((feature == "SERVICESUPPLIER"))
            {
                this.ServiceSupplier = ((IServiceSupplier)(value));
                return;
            }
            if ((feature == "TRANSFORMER"))
            {
                this.Transformer = ((IDistributionTransformer)(value));
                return;
            }
            if ((feature == "PHASECODE"))
            {
                this.PhaseCode = ((PhaseCode)(value));
                return;
            }
            if ((feature == "RATEDPOWER"))
            {
                this.RatedPower = ((float)(value));
                return;
            }
            if ((feature == "GROUNDED"))
            {
                this.Grounded = ((bool)(value));
                return;
            }
            if ((feature == "RATEDCURRENT"))
            {
                this.RatedCurrent = ((float)(value));
                return;
            }
            if ((feature == "NOMINALSERVICEVOLTAGE"))
            {
                this.NominalServiceVoltage = ((int)(value));
                return;
            }
            if ((feature == "ESTIMATEDLOAD"))
            {
                this.EstimatedLoad = ((float)(value));
                return;
            }
            if ((feature == "SERVICEPRIORITY"))
            {
                this.ServicePriority = ((string)(value));
                return;
            }
            if ((feature == "SERVICEDELIVERYREMARK"))
            {
                this.ServiceDeliveryRemark = ((string)(value));
                return;
            }
            if ((feature == "CHECKBILLING"))
            {
                this.CheckBilling = ((bool)(value));
                return;
            }
            if ((feature == "CTPTREFERENCE"))
            {
                this.CtptReference = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((attribute == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((attribute == "EnergyConsumer"))
            {
                return new EnergyConsumerProxy(this);
            }
            if ((attribute == "ServiceCategory"))
            {
                return new ServiceCategoryProxy(this);
            }
            if ((attribute == "ServiceSupplier"))
            {
                return new ServiceSupplierProxy(this);
            }
            if ((attribute == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((reference == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((reference == "EnergyConsumer"))
            {
                return new EnergyConsumerProxy(this);
            }
            if ((reference == "ServiceCategory"))
            {
                return new ServiceCategoryProxy(this);
            }
            if ((reference == "ServiceSupplier"))
            {
                return new ServiceSupplierProxy(this);
            }
            if ((reference == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ServiceDeliveryPoint" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServiceDeliveryPoint class
        /// </summary>
        public class ServiceDeliveryPointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServiceDeliveryPoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServiceDeliveryPointReferencedElementsCollection(ServiceDeliveryPoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ServiceLocation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PowerQualityPricings.Count);
                    if ((this._parent.CustomerAgreement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EnergyConsumer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ServiceCategory != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EndDeviceAssets.Count);
                    if ((this._parent.ServiceSupplier != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PricingStructures.Count);
                    if ((this._parent.Transformer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.MeterReadings.Count);
                    count = (count + this._parent.SDPLocations.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceLocationChanged += this.PropagateValueChanges;
                this._parent.PowerQualityPricings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreementChanged += this.PropagateValueChanges;
                this._parent.EnergyConsumerChanged += this.PropagateValueChanges;
                this._parent.ServiceCategoryChanged += this.PropagateValueChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServiceSupplierChanged += this.PropagateValueChanges;
                this._parent.PricingStructures.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransformerChanged += this.PropagateValueChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SDPLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceLocationChanged -= this.PropagateValueChanges;
                this._parent.PowerQualityPricings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreementChanged -= this.PropagateValueChanges;
                this._parent.EnergyConsumerChanged -= this.PropagateValueChanges;
                this._parent.ServiceCategoryChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServiceSupplierChanged -= this.PropagateValueChanges;
                this._parent.PricingStructures.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransformerChanged -= this.PropagateValueChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SDPLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ServiceLocation == null))
                {
                    IServiceLocation serviceLocationCasted = item.As<IServiceLocation>();
                    if ((serviceLocationCasted != null))
                    {
                        this._parent.ServiceLocation = serviceLocationCasted;
                        return;
                    }
                }
                IPowerQualityPricing powerQualityPricingsCasted = item.As<IPowerQualityPricing>();
                if ((powerQualityPricingsCasted != null))
                {
                    this._parent.PowerQualityPricings.Add(powerQualityPricingsCasted);
                }
                if ((this._parent.CustomerAgreement == null))
                {
                    ICustomerAgreement customerAgreementCasted = item.As<ICustomerAgreement>();
                    if ((customerAgreementCasted != null))
                    {
                        this._parent.CustomerAgreement = customerAgreementCasted;
                        return;
                    }
                }
                if ((this._parent.EnergyConsumer == null))
                {
                    IEnergyConsumer energyConsumerCasted = item.As<IEnergyConsumer>();
                    if ((energyConsumerCasted != null))
                    {
                        this._parent.EnergyConsumer = energyConsumerCasted;
                        return;
                    }
                }
                if ((this._parent.ServiceCategory == null))
                {
                    IServiceCategory serviceCategoryCasted = item.As<IServiceCategory>();
                    if ((serviceCategoryCasted != null))
                    {
                        this._parent.ServiceCategory = serviceCategoryCasted;
                        return;
                    }
                }
                IEndDeviceAsset endDeviceAssetsCasted = item.As<IEndDeviceAsset>();
                if ((endDeviceAssetsCasted != null))
                {
                    this._parent.EndDeviceAssets.Add(endDeviceAssetsCasted);
                }
                if ((this._parent.ServiceSupplier == null))
                {
                    IServiceSupplier serviceSupplierCasted = item.As<IServiceSupplier>();
                    if ((serviceSupplierCasted != null))
                    {
                        this._parent.ServiceSupplier = serviceSupplierCasted;
                        return;
                    }
                }
                IPricingStructure pricingStructuresCasted = item.As<IPricingStructure>();
                if ((pricingStructuresCasted != null))
                {
                    this._parent.PricingStructures.Add(pricingStructuresCasted);
                }
                if ((this._parent.Transformer == null))
                {
                    IDistributionTransformer transformerCasted = item.As<IDistributionTransformer>();
                    if ((transformerCasted != null))
                    {
                        this._parent.Transformer = transformerCasted;
                        return;
                    }
                }
                IMeterReading meterReadingsCasted = item.As<IMeterReading>();
                if ((meterReadingsCasted != null))
                {
                    this._parent.MeterReadings.Add(meterReadingsCasted);
                }
                ISDPLocation sDPLocationsCasted = item.As<ISDPLocation>();
                if ((sDPLocationsCasted != null))
                {
                    this._parent.SDPLocations.Add(sDPLocationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceLocation = null;
                this._parent.PowerQualityPricings.Clear();
                this._parent.CustomerAgreement = null;
                this._parent.EnergyConsumer = null;
                this._parent.ServiceCategory = null;
                this._parent.EndDeviceAssets.Clear();
                this._parent.ServiceSupplier = null;
                this._parent.PricingStructures.Clear();
                this._parent.Transformer = null;
                this._parent.MeterReadings.Clear();
                this._parent.SDPLocations.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ServiceLocation))
                {
                    return true;
                }
                if (this._parent.PowerQualityPricings.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CustomerAgreement))
                {
                    return true;
                }
                if ((item == this._parent.EnergyConsumer))
                {
                    return true;
                }
                if ((item == this._parent.ServiceCategory))
                {
                    return true;
                }
                if (this._parent.EndDeviceAssets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ServiceSupplier))
                {
                    return true;
                }
                if (this._parent.PricingStructures.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Transformer))
                {
                    return true;
                }
                if (this._parent.MeterReadings.Contains(item))
                {
                    return true;
                }
                if (this._parent.SDPLocations.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ServiceLocation != null))
                {
                    array[arrayIndex] = this._parent.ServiceLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> powerQualityPricingsEnumerator = this._parent.PowerQualityPricings.GetEnumerator();
                try
                {
                    for (
                    ; powerQualityPricingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerQualityPricingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerQualityPricingsEnumerator.Dispose();
                }
                if ((this._parent.CustomerAgreement != null))
                {
                    array[arrayIndex] = this._parent.CustomerAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EnergyConsumer != null))
                {
                    array[arrayIndex] = this._parent.EnergyConsumer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ServiceCategory != null))
                {
                    array[arrayIndex] = this._parent.ServiceCategory;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> endDeviceAssetsEnumerator = this._parent.EndDeviceAssets.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceAssetsEnumerator.Dispose();
                }
                if ((this._parent.ServiceSupplier != null))
                {
                    array[arrayIndex] = this._parent.ServiceSupplier;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> pricingStructuresEnumerator = this._parent.PricingStructures.GetEnumerator();
                try
                {
                    for (
                    ; pricingStructuresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pricingStructuresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pricingStructuresEnumerator.Dispose();
                }
                if ((this._parent.Transformer != null))
                {
                    array[arrayIndex] = this._parent.Transformer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> meterReadingsEnumerator = this._parent.MeterReadings.GetEnumerator();
                try
                {
                    for (
                    ; meterReadingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterReadingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterReadingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sDPLocationsEnumerator = this._parent.SDPLocations.GetEnumerator();
                try
                {
                    for (
                    ; sDPLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sDPLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sDPLocationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ServiceLocation == item))
                {
                    this._parent.ServiceLocation = null;
                    return true;
                }
                IPowerQualityPricing powerQualityPricingItem = item.As<IPowerQualityPricing>();
                if (((powerQualityPricingItem != null) 
                            && this._parent.PowerQualityPricings.Remove(powerQualityPricingItem)))
                {
                    return true;
                }
                if ((this._parent.CustomerAgreement == item))
                {
                    this._parent.CustomerAgreement = null;
                    return true;
                }
                if ((this._parent.EnergyConsumer == item))
                {
                    this._parent.EnergyConsumer = null;
                    return true;
                }
                if ((this._parent.ServiceCategory == item))
                {
                    this._parent.ServiceCategory = null;
                    return true;
                }
                IEndDeviceAsset endDeviceAssetItem = item.As<IEndDeviceAsset>();
                if (((endDeviceAssetItem != null) 
                            && this._parent.EndDeviceAssets.Remove(endDeviceAssetItem)))
                {
                    return true;
                }
                if ((this._parent.ServiceSupplier == item))
                {
                    this._parent.ServiceSupplier = null;
                    return true;
                }
                IPricingStructure pricingStructureItem = item.As<IPricingStructure>();
                if (((pricingStructureItem != null) 
                            && this._parent.PricingStructures.Remove(pricingStructureItem)))
                {
                    return true;
                }
                if ((this._parent.Transformer == item))
                {
                    this._parent.Transformer = null;
                    return true;
                }
                IMeterReading meterReadingItem = item.As<IMeterReading>();
                if (((meterReadingItem != null) 
                            && this._parent.MeterReadings.Remove(meterReadingItem)))
                {
                    return true;
                }
                ISDPLocation sDPLocationItem = item.As<ISDPLocation>();
                if (((sDPLocationItem != null) 
                            && this._parent.SDPLocations.Remove(sDPLocationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceLocation).Concat(this._parent.PowerQualityPricings).Concat(this._parent.CustomerAgreement).Concat(this._parent.EnergyConsumer).Concat(this._parent.ServiceCategory).Concat(this._parent.EndDeviceAssets).Concat(this._parent.ServiceSupplier).Concat(this._parent.PricingStructures).Concat(this._parent.Transformer).Concat(this._parent.MeterReadings).Concat(this._parent.SDPLocations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCode property
        /// </summary>
        private sealed class PhaseCodeProxy : ModelPropertyChange<IServiceDeliveryPoint, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCodeProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.PhaseCode;
                }
                set
                {
                    this.ModelElement.PhaseCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedPower property
        /// </summary>
        private sealed class RatedPowerProxy : ModelPropertyChange<IServiceDeliveryPoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedPowerProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedPower;
                }
                set
                {
                    this.ModelElement.RatedPower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedPowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedPowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the grounded property
        /// </summary>
        private sealed class GroundedProxy : ModelPropertyChange<IServiceDeliveryPoint, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroundedProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Grounded;
                }
                set
                {
                    this.ModelElement.Grounded = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GroundedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GroundedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedCurrent property
        /// </summary>
        private sealed class RatedCurrentProxy : ModelPropertyChange<IServiceDeliveryPoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedCurrentProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedCurrent;
                }
                set
                {
                    this.ModelElement.RatedCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalServiceVoltage property
        /// </summary>
        private sealed class NominalServiceVoltageProxy : ModelPropertyChange<IServiceDeliveryPoint, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalServiceVoltageProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NominalServiceVoltage;
                }
                set
                {
                    this.ModelElement.NominalServiceVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalServiceVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalServiceVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatedLoad property
        /// </summary>
        private sealed class EstimatedLoadProxy : ModelPropertyChange<IServiceDeliveryPoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatedLoadProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EstimatedLoad;
                }
                set
                {
                    this.ModelElement.EstimatedLoad = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedLoadChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedLoadChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the servicePriority property
        /// </summary>
        private sealed class ServicePriorityProxy : ModelPropertyChange<IServiceDeliveryPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServicePriorityProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ServicePriority;
                }
                set
                {
                    this.ModelElement.ServicePriority = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServicePriorityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServicePriorityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceDeliveryRemark property
        /// </summary>
        private sealed class ServiceDeliveryRemarkProxy : ModelPropertyChange<IServiceDeliveryPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceDeliveryRemarkProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ServiceDeliveryRemark;
                }
                set
                {
                    this.ModelElement.ServiceDeliveryRemark = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceDeliveryRemarkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceDeliveryRemarkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the checkBilling property
        /// </summary>
        private sealed class CheckBillingProxy : ModelPropertyChange<IServiceDeliveryPoint, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CheckBillingProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.CheckBilling;
                }
                set
                {
                    this.ModelElement.CheckBilling = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CheckBillingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CheckBillingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctptReference property
        /// </summary>
        private sealed class CtptReferenceProxy : ModelPropertyChange<IServiceDeliveryPoint, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtptReferenceProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CtptReference;
                }
                set
                {
                    this.ModelElement.CtptReference = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtptReferenceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CtptReferenceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceLocation property
        /// </summary>
        private sealed class ServiceLocationProxy : ModelPropertyChange<IServiceDeliveryPoint, IServiceLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceLocationProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceLocation Value
            {
                get
                {
                    return this.ModelElement.ServiceLocation;
                }
                set
                {
                    this.ModelElement.ServiceLocation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceLocationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceLocationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAgreement property
        /// </summary>
        private sealed class CustomerAgreementProxy : ModelPropertyChange<IServiceDeliveryPoint, ICustomerAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAgreementProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAgreement Value
            {
                get
                {
                    return this.ModelElement.CustomerAgreement;
                }
                set
                {
                    this.ModelElement.CustomerAgreement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EnergyConsumer property
        /// </summary>
        private sealed class EnergyConsumerProxy : ModelPropertyChange<IServiceDeliveryPoint, IEnergyConsumer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyConsumerProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEnergyConsumer Value
            {
                get
                {
                    return this.ModelElement.EnergyConsumer;
                }
                set
                {
                    this.ModelElement.EnergyConsumer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyConsumerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyConsumerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceCategory property
        /// </summary>
        private sealed class ServiceCategoryProxy : ModelPropertyChange<IServiceDeliveryPoint, IServiceCategory>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceCategoryProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceCategory Value
            {
                get
                {
                    return this.ModelElement.ServiceCategory;
                }
                set
                {
                    this.ModelElement.ServiceCategory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceCategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceCategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceSupplier property
        /// </summary>
        private sealed class ServiceSupplierProxy : ModelPropertyChange<IServiceDeliveryPoint, IServiceSupplier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceSupplierProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceSupplier Value
            {
                get
                {
                    return this.ModelElement.ServiceSupplier;
                }
                set
                {
                    this.ModelElement.ServiceSupplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceSupplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ServiceSupplierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformer property
        /// </summary>
        private sealed class TransformerProxy : ModelPropertyChange<IServiceDeliveryPoint, IDistributionTransformer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerProxy(IServiceDeliveryPoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformer Value
            {
                get
                {
                    return this.ModelElement.Transformer;
                }
                set
                {
                    this.ModelElement.Transformer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerChanged -= handler;
            }
        }
    }
}

