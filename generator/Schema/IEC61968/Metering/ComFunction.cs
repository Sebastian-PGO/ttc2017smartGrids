//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the ComFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ComFunction")]
    [DebuggerDisplayAttribute("ComFunction {UUID}")]
    public partial class ComFunction : DeviceFunction, IComFunction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TwoWay property
        /// </summary>
        private bool _twoWay;
        
        private static Lazy<ITypedElement> _twoWayAttribute = new Lazy<ITypedElement>(RetrieveTwoWayAttribute);
        
        /// <summary>
        /// The backing field for the AmrAddress property
        /// </summary>
        private string _amrAddress;
        
        private static Lazy<ITypedElement> _amrAddressAttribute = new Lazy<ITypedElement>(RetrieveAmrAddressAttribute);
        
        /// <summary>
        /// The backing field for the AmrRouter property
        /// </summary>
        private string _amrRouter;
        
        private static Lazy<ITypedElement> _amrRouterAttribute = new Lazy<ITypedElement>(RetrieveAmrRouterAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The twoWay property
        /// </summary>
        [XmlElementNameAttribute("twoWay")]
        [XmlAttributeAttribute(true)]
        public virtual bool TwoWay
        {
            get
            {
                return this._twoWay;
            }
            set
            {
                if ((this._twoWay != value))
                {
                    bool old = this._twoWay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTwoWayChanging(e);
                    this.OnPropertyChanging("TwoWay", e, _twoWayAttribute);
                    this._twoWay = value;
                    this.OnTwoWayChanged(e);
                    this.OnPropertyChanged("TwoWay", e, _twoWayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amrAddress property
        /// </summary>
        [XmlElementNameAttribute("amrAddress")]
        [XmlAttributeAttribute(true)]
        public virtual string AmrAddress
        {
            get
            {
                return this._amrAddress;
            }
            set
            {
                if ((this._amrAddress != value))
                {
                    string old = this._amrAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmrAddressChanging(e);
                    this.OnPropertyChanging("AmrAddress", e, _amrAddressAttribute);
                    this._amrAddress = value;
                    this.OnAmrAddressChanged(e);
                    this.OnPropertyChanged("AmrAddress", e, _amrAddressAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amrRouter property
        /// </summary>
        [XmlElementNameAttribute("amrRouter")]
        [XmlAttributeAttribute(true)]
        public virtual string AmrRouter
        {
            get
            {
                return this._amrRouter;
            }
            set
            {
                if ((this._amrRouter != value))
                {
                    string old = this._amrRouter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmrRouterChanging(e);
                    this.OnPropertyChanging("AmrRouter", e, _amrRouterAttribute);
                    this._amrRouter = value;
                    this.OnAmrRouterChanged(e);
                    this.OnPropertyChanged("AmrRouter", e, _amrRouterAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ComFunction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TwoWay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TwoWayChanging;
        
        /// <summary>
        /// Gets fired when the TwoWay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TwoWayChanged;
        
        /// <summary>
        /// Gets fired before the AmrAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrAddressChanging;
        
        /// <summary>
        /// Gets fired when the AmrAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrAddressChanged;
        
        /// <summary>
        /// Gets fired before the AmrRouter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrRouterChanging;
        
        /// <summary>
        /// Gets fired when the AmrRouter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrRouterChanged;
        
        private static ITypedElement RetrieveTwoWayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ComFunction.ClassInstance)).Resolve("twoWay")));
        }
        
        /// <summary>
        /// Raises the TwoWayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTwoWayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TwoWayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TwoWayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTwoWayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TwoWayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmrAddressAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ComFunction.ClassInstance)).Resolve("amrAddress")));
        }
        
        /// <summary>
        /// Raises the AmrAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmrAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmrRouterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ComFunction.ClassInstance)).Resolve("amrRouter")));
        }
        
        /// <summary>
        /// Raises the AmrRouterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrRouterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrRouterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmrRouterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrRouterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrRouterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TWOWAY"))
            {
                return this.TwoWay;
            }
            if ((attribute == "AMRADDRESS"))
            {
                return this.AmrAddress;
            }
            if ((attribute == "AMRROUTER"))
            {
                return this.AmrRouter;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TWOWAY"))
            {
                this.TwoWay = ((bool)(value));
                return;
            }
            if ((feature == "AMRADDRESS"))
            {
                this.AmrAddress = ((string)(value));
                return;
            }
            if ((feature == "AMRROUTER"))
            {
                this.AmrRouter = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ComFunction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the twoWay property
        /// </summary>
        private sealed class TwoWayProxy : ModelPropertyChange<IComFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TwoWayProxy(IComFunction modelElement) : 
                    base(modelElement, "twoWay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.TwoWay;
                }
                set
                {
                    this.ModelElement.TwoWay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amrAddress property
        /// </summary>
        private sealed class AmrAddressProxy : ModelPropertyChange<IComFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmrAddressProxy(IComFunction modelElement) : 
                    base(modelElement, "amrAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AmrAddress;
                }
                set
                {
                    this.ModelElement.AmrAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amrRouter property
        /// </summary>
        private sealed class AmrRouterProxy : ModelPropertyChange<IComFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmrRouterProxy(IComFunction modelElement) : 
                    base(modelElement, "amrRouter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AmrRouter;
                }
                set
                {
                    this.ModelElement.AmrRouter = value;
                }
            }
        }
    }
}

