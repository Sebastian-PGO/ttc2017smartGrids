//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the Register class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Register")]
    [DebuggerDisplayAttribute("Register {UUID}")]
    public class Register : IdentifiedObject, IRegister, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LeftDigitCount property
        /// </summary>
        private int _leftDigitCount;
        
        /// <summary>
        /// The backing field for the RightDigitCount property
        /// </summary>
        private int _rightDigitCount;
        
        /// <summary>
        /// The backing field for the ReadingType property
        /// </summary>
        private IReadingType _readingType;
        
        /// <summary>
        /// The backing field for the DeviceFunction property
        /// </summary>
        private IDeviceFunction _deviceFunction;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The leftDigitCount property
        /// </summary>
        [XmlElementNameAttribute("leftDigitCount")]
        [XmlAttributeAttribute(true)]
        public virtual int LeftDigitCount
        {
            get
            {
                return this._leftDigitCount;
            }
            set
            {
                if ((this._leftDigitCount != value))
                {
                    int old = this._leftDigitCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLeftDigitCountChanging(e);
                    this.OnPropertyChanging("LeftDigitCount", e);
                    this._leftDigitCount = value;
                    this.OnLeftDigitCountChanged(e);
                    this.OnPropertyChanged("LeftDigitCount", e);
                }
            }
        }
        
        /// <summary>
        /// The rightDigitCount property
        /// </summary>
        [XmlElementNameAttribute("rightDigitCount")]
        [XmlAttributeAttribute(true)]
        public virtual int RightDigitCount
        {
            get
            {
                return this._rightDigitCount;
            }
            set
            {
                if ((this._rightDigitCount != value))
                {
                    int old = this._rightDigitCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRightDigitCountChanging(e);
                    this.OnPropertyChanging("RightDigitCount", e);
                    this._rightDigitCount = value;
                    this.OnRightDigitCountChanged(e);
                    this.OnPropertyChanged("RightDigitCount", e);
                }
            }
        }
        
        /// <summary>
        /// The ReadingType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Register")]
        public virtual IReadingType ReadingType
        {
            get
            {
                return this._readingType;
            }
            set
            {
                if ((this._readingType != value))
                {
                    IReadingType old = this._readingType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingTypeChanging(e);
                    this.OnPropertyChanging("ReadingType", e);
                    this._readingType = value;
                    if ((old != null))
                    {
                        old.Register = null;
                        old.Deleted -= this.OnResetReadingType;
                    }
                    if ((value != null))
                    {
                        value.Register = this;
                        value.Deleted += this.OnResetReadingType;
                    }
                    this.OnReadingTypeChanged(e);
                    this.OnPropertyChanged("ReadingType", e);
                }
            }
        }
        
        /// <summary>
        /// The DeviceFunction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Registers")]
        public virtual IDeviceFunction DeviceFunction
        {
            get
            {
                return this._deviceFunction;
            }
            set
            {
                if ((this._deviceFunction != value))
                {
                    IDeviceFunction old = this._deviceFunction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeviceFunctionChanging(e);
                    this.OnPropertyChanging("DeviceFunction", e);
                    this._deviceFunction = value;
                    if ((old != null))
                    {
                        old.Registers.Remove(this);
                        old.Deleted -= this.OnResetDeviceFunction;
                    }
                    if ((value != null))
                    {
                        value.Registers.Add(this);
                        value.Deleted += this.OnResetDeviceFunction;
                    }
                    this.OnDeviceFunctionChanged(e);
                    this.OnPropertyChanged("DeviceFunction", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegisterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Register")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LeftDigitCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeftDigitCountChanging;
        
        /// <summary>
        /// Gets fired when the LeftDigitCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeftDigitCountChanged;
        
        /// <summary>
        /// Gets fired before the RightDigitCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RightDigitCountChanging;
        
        /// <summary>
        /// Gets fired when the RightDigitCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RightDigitCountChanged;
        
        /// <summary>
        /// Gets fired before the ReadingType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReadingType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanged;
        
        /// <summary>
        /// Gets fired before the DeviceFunction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeviceFunctionChanging;
        
        /// <summary>
        /// Gets fired when the DeviceFunction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeviceFunctionChanged;
        
        /// <summary>
        /// Raises the LeftDigitCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeftDigitCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeftDigitCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LeftDigitCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeftDigitCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeftDigitCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RightDigitCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRightDigitCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RightDigitCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RightDigitCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRightDigitCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RightDigitCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingType(object sender, System.EventArgs eventArgs)
        {
            this.ReadingType = null;
        }
        
        /// <summary>
        /// Raises the DeviceFunctionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeviceFunctionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeviceFunctionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeviceFunctionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeviceFunctionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeviceFunctionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DeviceFunction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeviceFunction(object sender, System.EventArgs eventArgs)
        {
            this.DeviceFunction = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LEFTDIGITCOUNT"))
            {
                return this.LeftDigitCount;
            }
            if ((attribute == "RIGHTDIGITCOUNT"))
            {
                return this.RightDigitCount;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "READINGTYPE"))
            {
                this.ReadingType = ((IReadingType)(value));
                return;
            }
            if ((feature == "DEVICEFUNCTION"))
            {
                this.DeviceFunction = ((IDeviceFunction)(value));
                return;
            }
            if ((feature == "LEFTDIGITCOUNT"))
            {
                this.LeftDigitCount = ((int)(value));
                return;
            }
            if ((feature == "RIGHTDIGITCOUNT"))
            {
                this.RightDigitCount = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            if ((attribute == "DeviceFunction"))
            {
                return new DeviceFunctionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            if ((reference == "DeviceFunction"))
            {
                return new DeviceFunctionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Register")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Register class
        /// </summary>
        public class RegisterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Register _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegisterReferencedElementsCollection(Register parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ReadingType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeviceFunction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReadingTypeChanged += this.PropagateValueChanges;
                this._parent.DeviceFunctionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReadingTypeChanged -= this.PropagateValueChanges;
                this._parent.DeviceFunctionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ReadingType == null))
                {
                    IReadingType readingTypeCasted = item.As<IReadingType>();
                    if ((readingTypeCasted != null))
                    {
                        this._parent.ReadingType = readingTypeCasted;
                        return;
                    }
                }
                if ((this._parent.DeviceFunction == null))
                {
                    IDeviceFunction deviceFunctionCasted = item.As<IDeviceFunction>();
                    if ((deviceFunctionCasted != null))
                    {
                        this._parent.DeviceFunction = deviceFunctionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReadingType = null;
                this._parent.DeviceFunction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ReadingType))
                {
                    return true;
                }
                if ((item == this._parent.DeviceFunction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ReadingType != null))
                {
                    array[arrayIndex] = this._parent.ReadingType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeviceFunction != null))
                {
                    array[arrayIndex] = this._parent.DeviceFunction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ReadingType == item))
                {
                    this._parent.ReadingType = null;
                    return true;
                }
                if ((this._parent.DeviceFunction == item))
                {
                    this._parent.DeviceFunction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReadingType).Concat(this._parent.DeviceFunction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the leftDigitCount property
        /// </summary>
        private sealed class LeftDigitCountProxy : ModelPropertyChange<IRegister, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeftDigitCountProxy(IRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LeftDigitCount;
                }
                set
                {
                    this.ModelElement.LeftDigitCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LeftDigitCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LeftDigitCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rightDigitCount property
        /// </summary>
        private sealed class RightDigitCountProxy : ModelPropertyChange<IRegister, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RightDigitCountProxy(IRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.RightDigitCount;
                }
                set
                {
                    this.ModelElement.RightDigitCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RightDigitCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RightDigitCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingType property
        /// </summary>
        private sealed class ReadingTypeProxy : ModelPropertyChange<IRegister, IReadingType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingTypeProxy(IRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingType Value
            {
                get
                {
                    return this.ModelElement.ReadingType;
                }
                set
                {
                    this.ModelElement.ReadingType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReadingTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReadingTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeviceFunction property
        /// </summary>
        private sealed class DeviceFunctionProxy : ModelPropertyChange<IRegister, IDeviceFunction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeviceFunctionProxy(IRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDeviceFunction Value
            {
                get
                {
                    return this.ModelElement.DeviceFunction;
                }
                set
                {
                    this.ModelElement.DeviceFunction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeviceFunctionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeviceFunctionChanged -= handler;
            }
        }
    }
}

