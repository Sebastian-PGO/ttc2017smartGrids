//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the Pending class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Pending")]
    [DebuggerDisplayAttribute("Pending {UUID}")]
    public class Pending : Element, IPending, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Offset property
        /// </summary>
        private int _offset;
        
        /// <summary>
        /// The backing field for the MultiplyBeforeAdd property
        /// </summary>
        private bool _multiplyBeforeAdd;
        
        /// <summary>
        /// The backing field for the ScalarFloat property
        /// </summary>
        private float _scalarFloat;
        
        /// <summary>
        /// The backing field for the ScalarDenominator property
        /// </summary>
        private int _scalarDenominator;
        
        /// <summary>
        /// The backing field for the ScalarNumerator property
        /// </summary>
        private int _scalarNumerator;
        
        /// <summary>
        /// The backing field for the ReadingType property
        /// </summary>
        private IReadingType _readingType;
        
        /// <summary>
        /// The backing field for the IntervalBlocks property
        /// </summary>
        private PendingIntervalBlocksCollection _intervalBlocks;
        
        private static IClass _classInstance;
        
        public Pending()
        {
            this._intervalBlocks = new PendingIntervalBlocksCollection(this);
            this._intervalBlocks.CollectionChanging += this.IntervalBlocksCollectionChanging;
            this._intervalBlocks.CollectionChanged += this.IntervalBlocksCollectionChanged;
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        [XmlElementNameAttribute("offset")]
        [XmlAttributeAttribute(true)]
        public virtual int Offset
        {
            get
            {
                return this._offset;
            }
            set
            {
                if ((this._offset != value))
                {
                    int old = this._offset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOffsetChanging(e);
                    this.OnPropertyChanging("Offset", e);
                    this._offset = value;
                    this.OnOffsetChanged(e);
                    this.OnPropertyChanged("Offset", e);
                }
            }
        }
        
        /// <summary>
        /// The multiplyBeforeAdd property
        /// </summary>
        [XmlElementNameAttribute("multiplyBeforeAdd")]
        [XmlAttributeAttribute(true)]
        public virtual bool MultiplyBeforeAdd
        {
            get
            {
                return this._multiplyBeforeAdd;
            }
            set
            {
                if ((this._multiplyBeforeAdd != value))
                {
                    bool old = this._multiplyBeforeAdd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMultiplyBeforeAddChanging(e);
                    this.OnPropertyChanging("MultiplyBeforeAdd", e);
                    this._multiplyBeforeAdd = value;
                    this.OnMultiplyBeforeAddChanged(e);
                    this.OnPropertyChanged("MultiplyBeforeAdd", e);
                }
            }
        }
        
        /// <summary>
        /// The scalarFloat property
        /// </summary>
        [XmlElementNameAttribute("scalarFloat")]
        [XmlAttributeAttribute(true)]
        public virtual float ScalarFloat
        {
            get
            {
                return this._scalarFloat;
            }
            set
            {
                if ((this._scalarFloat != value))
                {
                    float old = this._scalarFloat;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScalarFloatChanging(e);
                    this.OnPropertyChanging("ScalarFloat", e);
                    this._scalarFloat = value;
                    this.OnScalarFloatChanged(e);
                    this.OnPropertyChanged("ScalarFloat", e);
                }
            }
        }
        
        /// <summary>
        /// The scalarDenominator property
        /// </summary>
        [XmlElementNameAttribute("scalarDenominator")]
        [XmlAttributeAttribute(true)]
        public virtual int ScalarDenominator
        {
            get
            {
                return this._scalarDenominator;
            }
            set
            {
                if ((this._scalarDenominator != value))
                {
                    int old = this._scalarDenominator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScalarDenominatorChanging(e);
                    this.OnPropertyChanging("ScalarDenominator", e);
                    this._scalarDenominator = value;
                    this.OnScalarDenominatorChanged(e);
                    this.OnPropertyChanged("ScalarDenominator", e);
                }
            }
        }
        
        /// <summary>
        /// The scalarNumerator property
        /// </summary>
        [XmlElementNameAttribute("scalarNumerator")]
        [XmlAttributeAttribute(true)]
        public virtual int ScalarNumerator
        {
            get
            {
                return this._scalarNumerator;
            }
            set
            {
                if ((this._scalarNumerator != value))
                {
                    int old = this._scalarNumerator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScalarNumeratorChanging(e);
                    this.OnPropertyChanging("ScalarNumerator", e);
                    this._scalarNumerator = value;
                    this.OnScalarNumeratorChanged(e);
                    this.OnPropertyChanged("ScalarNumerator", e);
                }
            }
        }
        
        /// <summary>
        /// The ReadingType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pending")]
        public virtual IReadingType ReadingType
        {
            get
            {
                return this._readingType;
            }
            set
            {
                if ((this._readingType != value))
                {
                    IReadingType old = this._readingType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingTypeChanging(e);
                    this.OnPropertyChanging("ReadingType", e);
                    this._readingType = value;
                    if ((old != null))
                    {
                        old.Pending = null;
                        old.Deleted -= this.OnResetReadingType;
                    }
                    if ((value != null))
                    {
                        value.Pending = this;
                        value.Deleted += this.OnResetReadingType;
                    }
                    this.OnReadingTypeChanged(e);
                    this.OnPropertyChanged("ReadingType", e);
                }
            }
        }
        
        /// <summary>
        /// The IntervalBlocks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pending")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIntervalBlock> IntervalBlocks
        {
            get
            {
                return this._intervalBlocks;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PendingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Pending")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the MultiplyBeforeAdd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplyBeforeAddChanging;
        
        /// <summary>
        /// Gets fired when the MultiplyBeforeAdd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplyBeforeAddChanged;
        
        /// <summary>
        /// Gets fired before the ScalarFloat property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarFloatChanging;
        
        /// <summary>
        /// Gets fired when the ScalarFloat property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarFloatChanged;
        
        /// <summary>
        /// Gets fired before the ScalarDenominator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarDenominatorChanging;
        
        /// <summary>
        /// Gets fired when the ScalarDenominator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarDenominatorChanged;
        
        /// <summary>
        /// Gets fired before the ScalarNumerator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarNumeratorChanging;
        
        /// <summary>
        /// Gets fired when the ScalarNumerator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScalarNumeratorChanged;
        
        /// <summary>
        /// Gets fired before the ReadingType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReadingType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanged;
        
        /// <summary>
        /// Raises the OffsetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OffsetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultiplyBeforeAddChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplyBeforeAddChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplyBeforeAddChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultiplyBeforeAddChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplyBeforeAddChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplyBeforeAddChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarFloatChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarFloatChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarFloatChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarFloatChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarFloatChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarFloatChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarDenominatorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarDenominatorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarDenominatorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarDenominatorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarDenominatorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarDenominatorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarNumeratorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarNumeratorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarNumeratorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScalarNumeratorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScalarNumeratorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScalarNumeratorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingType(object sender, System.EventArgs eventArgs)
        {
            this.ReadingType = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("IntervalBlocks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IntervalBlocks", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OFFSET"))
            {
                return this.Offset;
            }
            if ((attribute == "MULTIPLYBEFOREADD"))
            {
                return this.MultiplyBeforeAdd;
            }
            if ((attribute == "SCALARFLOAT"))
            {
                return this.ScalarFloat;
            }
            if ((attribute == "SCALARDENOMINATOR"))
            {
                return this.ScalarDenominator;
            }
            if ((attribute == "SCALARNUMERATOR"))
            {
                return this.ScalarNumerator;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INTERVALBLOCKS"))
            {
                return this._intervalBlocks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "READINGTYPE"))
            {
                this.ReadingType = ((IReadingType)(value));
                return;
            }
            if ((feature == "OFFSET"))
            {
                this.Offset = ((int)(value));
                return;
            }
            if ((feature == "MULTIPLYBEFOREADD"))
            {
                this.MultiplyBeforeAdd = ((bool)(value));
                return;
            }
            if ((feature == "SCALARFLOAT"))
            {
                this.ScalarFloat = ((float)(value));
                return;
            }
            if ((feature == "SCALARDENOMINATOR"))
            {
                this.ScalarDenominator = ((int)(value));
                return;
            }
            if ((feature == "SCALARNUMERATOR"))
            {
                this.ScalarNumerator = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/Pending")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Pending class
        /// </summary>
        public class PendingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Pending _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PendingReferencedElementsCollection(Pending parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ReadingType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.IntervalBlocks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReadingTypeChanged += this.PropagateValueChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReadingTypeChanged -= this.PropagateValueChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ReadingType == null))
                {
                    IReadingType readingTypeCasted = item.As<IReadingType>();
                    if ((readingTypeCasted != null))
                    {
                        this._parent.ReadingType = readingTypeCasted;
                        return;
                    }
                }
                IIntervalBlock intervalBlocksCasted = item.As<IIntervalBlock>();
                if ((intervalBlocksCasted != null))
                {
                    this._parent.IntervalBlocks.Add(intervalBlocksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReadingType = null;
                this._parent.IntervalBlocks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ReadingType))
                {
                    return true;
                }
                if (this._parent.IntervalBlocks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ReadingType != null))
                {
                    array[arrayIndex] = this._parent.ReadingType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> intervalBlocksEnumerator = this._parent.IntervalBlocks.GetEnumerator();
                try
                {
                    for (
                    ; intervalBlocksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = intervalBlocksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    intervalBlocksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ReadingType == item))
                {
                    this._parent.ReadingType = null;
                    return true;
                }
                IIntervalBlock intervalBlockItem = item.As<IIntervalBlock>();
                if (((intervalBlockItem != null) 
                            && this._parent.IntervalBlocks.Remove(intervalBlockItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReadingType).Concat(this._parent.IntervalBlocks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the offset property
        /// </summary>
        private sealed class OffsetProxy : ModelPropertyChange<IPending, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OffsetProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Offset;
                }
                set
                {
                    this.ModelElement.Offset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OffsetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OffsetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the multiplyBeforeAdd property
        /// </summary>
        private sealed class MultiplyBeforeAddProxy : ModelPropertyChange<IPending, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MultiplyBeforeAddProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MultiplyBeforeAdd;
                }
                set
                {
                    this.ModelElement.MultiplyBeforeAdd = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MultiplyBeforeAddChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MultiplyBeforeAddChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scalarFloat property
        /// </summary>
        private sealed class ScalarFloatProxy : ModelPropertyChange<IPending, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScalarFloatProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ScalarFloat;
                }
                set
                {
                    this.ModelElement.ScalarFloat = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarFloatChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarFloatChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scalarDenominator property
        /// </summary>
        private sealed class ScalarDenominatorProxy : ModelPropertyChange<IPending, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScalarDenominatorProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ScalarDenominator;
                }
                set
                {
                    this.ModelElement.ScalarDenominator = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarDenominatorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarDenominatorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scalarNumerator property
        /// </summary>
        private sealed class ScalarNumeratorProxy : ModelPropertyChange<IPending, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScalarNumeratorProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ScalarNumerator;
                }
                set
                {
                    this.ModelElement.ScalarNumerator = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarNumeratorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScalarNumeratorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingType property
        /// </summary>
        private sealed class ReadingTypeProxy : ModelPropertyChange<IPending, IReadingType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingTypeProxy(IPending modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingType Value
            {
                get
                {
                    return this.ModelElement.ReadingType;
                }
                set
                {
                    this.ModelElement.ReadingType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReadingTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReadingTypeChanged -= handler;
            }
        }
    }
}

