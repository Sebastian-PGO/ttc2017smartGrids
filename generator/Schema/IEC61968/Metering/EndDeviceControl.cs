//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the EndDeviceControl class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceControl")]
    [DebuggerDisplayAttribute("EndDeviceControl {UUID}")]
    public class EndDeviceControl : IdentifiedObject, IEndDeviceControl, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DrProgramMandatory property
        /// </summary>
        private bool _drProgramMandatory;
        
        /// <summary>
        /// The backing field for the DrProgramLevel property
        /// </summary>
        private int _drProgramLevel;
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        /// <summary>
        /// The backing field for the PriceSignal property
        /// </summary>
        private float _priceSignal;
        
        /// <summary>
        /// The backing field for the ScheduledInterval property
        /// </summary>
        private IDateTimeInterval _scheduledInterval;
        
        /// <summary>
        /// The backing field for the CustomerAgreement property
        /// </summary>
        private ICustomerAgreement _customerAgreement;
        
        /// <summary>
        /// The backing field for the EndDeviceAsset property
        /// </summary>
        private IEndDeviceAsset _endDeviceAsset;
        
        /// <summary>
        /// The backing field for the EndDeviceGroup property
        /// </summary>
        private IEndDeviceGroup _endDeviceGroup;
        
        /// <summary>
        /// The backing field for the DemandResponseProgram property
        /// </summary>
        private IDemandResponseProgram _demandResponseProgram;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The drProgramMandatory property
        /// </summary>
        [XmlElementNameAttribute("drProgramMandatory")]
        [XmlAttributeAttribute(true)]
        public virtual bool DrProgramMandatory
        {
            get
            {
                return this._drProgramMandatory;
            }
            set
            {
                if ((this._drProgramMandatory != value))
                {
                    bool old = this._drProgramMandatory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDrProgramMandatoryChanging(e);
                    this.OnPropertyChanging("DrProgramMandatory", e);
                    this._drProgramMandatory = value;
                    this.OnDrProgramMandatoryChanged(e);
                    this.OnPropertyChanged("DrProgramMandatory", e);
                }
            }
        }
        
        /// <summary>
        /// The drProgramLevel property
        /// </summary>
        [XmlElementNameAttribute("drProgramLevel")]
        [XmlAttributeAttribute(true)]
        public virtual int DrProgramLevel
        {
            get
            {
                return this._drProgramLevel;
            }
            set
            {
                if ((this._drProgramLevel != value))
                {
                    int old = this._drProgramLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDrProgramLevelChanging(e);
                    this.OnPropertyChanging("DrProgramLevel", e);
                    this._drProgramLevel = value;
                    this.OnDrProgramLevelChanged(e);
                    this.OnPropertyChanged("DrProgramLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e);
                }
            }
        }
        
        /// <summary>
        /// The priceSignal property
        /// </summary>
        [XmlElementNameAttribute("priceSignal")]
        [XmlAttributeAttribute(true)]
        public virtual float PriceSignal
        {
            get
            {
                return this._priceSignal;
            }
            set
            {
                if ((this._priceSignal != value))
                {
                    float old = this._priceSignal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriceSignalChanging(e);
                    this.OnPropertyChanging("PriceSignal", e);
                    this._priceSignal = value;
                    this.OnPriceSignalChanged(e);
                    this.OnPropertyChanged("PriceSignal", e);
                }
            }
        }
        
        /// <summary>
        /// The scheduledInterval property
        /// </summary>
        [XmlElementNameAttribute("scheduledInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ScheduledInterval
        {
            get
            {
                return this._scheduledInterval;
            }
            set
            {
                if ((this._scheduledInterval != value))
                {
                    IDateTimeInterval old = this._scheduledInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScheduledIntervalChanging(e);
                    this.OnPropertyChanging("ScheduledInterval", e);
                    this._scheduledInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetScheduledInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetScheduledInterval;
                    }
                    this.OnScheduledIntervalChanged(e);
                    this.OnPropertyChanged("ScheduledInterval", e);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceControls")]
        public virtual ICustomerAgreement CustomerAgreement
        {
            get
            {
                return this._customerAgreement;
            }
            set
            {
                if ((this._customerAgreement != value))
                {
                    ICustomerAgreement old = this._customerAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAgreementChanging(e);
                    this.OnPropertyChanging("CustomerAgreement", e);
                    this._customerAgreement = value;
                    if ((old != null))
                    {
                        old.EndDeviceControls.Remove(this);
                        old.Deleted -= this.OnResetCustomerAgreement;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceControls.Add(this);
                        value.Deleted += this.OnResetCustomerAgreement;
                    }
                    this.OnCustomerAgreementChanged(e);
                    this.OnPropertyChanged("CustomerAgreement", e);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceControls")]
        public virtual IEndDeviceAsset EndDeviceAsset
        {
            get
            {
                return this._endDeviceAsset;
            }
            set
            {
                if ((this._endDeviceAsset != value))
                {
                    IEndDeviceAsset old = this._endDeviceAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDeviceAssetChanging(e);
                    this.OnPropertyChanging("EndDeviceAsset", e);
                    this._endDeviceAsset = value;
                    if ((old != null))
                    {
                        old.EndDeviceControls.Remove(this);
                        old.Deleted -= this.OnResetEndDeviceAsset;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceControls.Add(this);
                        value.Deleted += this.OnResetEndDeviceAsset;
                    }
                    this.OnEndDeviceAssetChanged(e);
                    this.OnPropertyChanged("EndDeviceAsset", e);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceControls")]
        public virtual IEndDeviceGroup EndDeviceGroup
        {
            get
            {
                return this._endDeviceGroup;
            }
            set
            {
                if ((this._endDeviceGroup != value))
                {
                    IEndDeviceGroup old = this._endDeviceGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDeviceGroupChanging(e);
                    this.OnPropertyChanging("EndDeviceGroup", e);
                    this._endDeviceGroup = value;
                    if ((old != null))
                    {
                        old.EndDeviceControls.Remove(this);
                        old.Deleted -= this.OnResetEndDeviceGroup;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceControls.Add(this);
                        value.Deleted += this.OnResetEndDeviceGroup;
                    }
                    this.OnEndDeviceGroupChanged(e);
                    this.OnPropertyChanged("EndDeviceGroup", e);
                }
            }
        }
        
        /// <summary>
        /// The DemandResponseProgram property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceControls")]
        public virtual IDemandResponseProgram DemandResponseProgram
        {
            get
            {
                return this._demandResponseProgram;
            }
            set
            {
                if ((this._demandResponseProgram != value))
                {
                    IDemandResponseProgram old = this._demandResponseProgram;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemandResponseProgramChanging(e);
                    this.OnPropertyChanging("DemandResponseProgram", e);
                    this._demandResponseProgram = value;
                    if ((old != null))
                    {
                        old.EndDeviceControls.Remove(this);
                        old.Deleted -= this.OnResetDemandResponseProgram;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceControls.Add(this);
                        value.Deleted += this.OnResetDemandResponseProgram;
                    }
                    this.OnDemandResponseProgramChanged(e);
                    this.OnPropertyChanged("DemandResponseProgram", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EndDeviceControlReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DrProgramMandatory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DrProgramMandatoryChanging;
        
        /// <summary>
        /// Gets fired when the DrProgramMandatory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DrProgramMandatoryChanged;
        
        /// <summary>
        /// Gets fired before the DrProgramLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DrProgramLevelChanging;
        
        /// <summary>
        /// Gets fired when the DrProgramLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DrProgramLevelChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the PriceSignal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceSignalChanging;
        
        /// <summary>
        /// Gets fired when the PriceSignal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceSignalChanged;
        
        /// <summary>
        /// Gets fired before the ScheduledInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduledIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ScheduledInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduledIntervalChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanged;
        
        /// <summary>
        /// Gets fired before the EndDeviceAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceAssetChanging;
        
        /// <summary>
        /// Gets fired when the EndDeviceAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceAssetChanged;
        
        /// <summary>
        /// Gets fired before the EndDeviceGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceGroupChanging;
        
        /// <summary>
        /// Gets fired when the EndDeviceGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceGroupChanged;
        
        /// <summary>
        /// Gets fired before the DemandResponseProgram property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandResponseProgramChanging;
        
        /// <summary>
        /// Gets fired when the DemandResponseProgram property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandResponseProgramChanged;
        
        /// <summary>
        /// Raises the DrProgramMandatoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDrProgramMandatoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DrProgramMandatoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DrProgramMandatoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDrProgramMandatoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DrProgramMandatoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DrProgramLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDrProgramLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DrProgramLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DrProgramLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDrProgramLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DrProgramLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriceSignalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceSignalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceSignalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriceSignalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceSignalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceSignalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScheduledIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduledIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduledIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScheduledIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduledIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduledIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ScheduledInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScheduledInterval(object sender, System.EventArgs eventArgs)
        {
            this.ScheduledInterval = null;
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAgreement(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAgreement = null;
        }
        
        /// <summary>
        /// Raises the EndDeviceAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDeviceAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndDeviceAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndDeviceAsset(object sender, System.EventArgs eventArgs)
        {
            this.EndDeviceAsset = null;
        }
        
        /// <summary>
        /// Raises the EndDeviceGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDeviceGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndDeviceGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndDeviceGroup(object sender, System.EventArgs eventArgs)
        {
            this.EndDeviceGroup = null;
        }
        
        /// <summary>
        /// Raises the DemandResponseProgramChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandResponseProgramChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandResponseProgramChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemandResponseProgramChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandResponseProgramChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandResponseProgramChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DemandResponseProgram property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDemandResponseProgram(object sender, System.EventArgs eventArgs)
        {
            this.DemandResponseProgram = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DRPROGRAMMANDATORY"))
            {
                return this.DrProgramMandatory;
            }
            if ((attribute == "DRPROGRAMLEVEL"))
            {
                return this.DrProgramLevel;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "PRICESIGNAL"))
            {
                return this.PriceSignal;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCHEDULEDINTERVAL"))
            {
                this.ScheduledInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "CUSTOMERAGREEMENT"))
            {
                this.CustomerAgreement = ((ICustomerAgreement)(value));
                return;
            }
            if ((feature == "ENDDEVICEASSET"))
            {
                this.EndDeviceAsset = ((IEndDeviceAsset)(value));
                return;
            }
            if ((feature == "ENDDEVICEGROUP"))
            {
                this.EndDeviceGroup = ((IEndDeviceGroup)(value));
                return;
            }
            if ((feature == "DEMANDRESPONSEPROGRAM"))
            {
                this.DemandResponseProgram = ((IDemandResponseProgram)(value));
                return;
            }
            if ((feature == "DRPROGRAMMANDATORY"))
            {
                this.DrProgramMandatory = ((bool)(value));
                return;
            }
            if ((feature == "DRPROGRAMLEVEL"))
            {
                this.DrProgramLevel = ((int)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "PRICESIGNAL"))
            {
                this.PriceSignal = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ScheduledInterval"))
            {
                return new ScheduledIntervalProxy(this);
            }
            if ((attribute == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((attribute == "EndDeviceAsset"))
            {
                return new EndDeviceAssetProxy(this);
            }
            if ((attribute == "EndDeviceGroup"))
            {
                return new EndDeviceGroupProxy(this);
            }
            if ((attribute == "DemandResponseProgram"))
            {
                return new DemandResponseProgramProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ScheduledInterval"))
            {
                return new ScheduledIntervalProxy(this);
            }
            if ((reference == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((reference == "EndDeviceAsset"))
            {
                return new EndDeviceAssetProxy(this);
            }
            if ((reference == "EndDeviceGroup"))
            {
                return new EndDeviceGroupProxy(this);
            }
            if ((reference == "DemandResponseProgram"))
            {
                return new DemandResponseProgramProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceControl")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EndDeviceControl class
        /// </summary>
        public class EndDeviceControlReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EndDeviceControl _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EndDeviceControlReferencedElementsCollection(EndDeviceControl parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ScheduledInterval != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerAgreement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EndDeviceAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EndDeviceGroup != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DemandResponseProgram != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ScheduledIntervalChanged += this.PropagateValueChanges;
                this._parent.CustomerAgreementChanged += this.PropagateValueChanges;
                this._parent.EndDeviceAssetChanged += this.PropagateValueChanges;
                this._parent.EndDeviceGroupChanged += this.PropagateValueChanges;
                this._parent.DemandResponseProgramChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ScheduledIntervalChanged -= this.PropagateValueChanges;
                this._parent.CustomerAgreementChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceAssetChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceGroupChanged -= this.PropagateValueChanges;
                this._parent.DemandResponseProgramChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ScheduledInterval == null))
                {
                    IDateTimeInterval scheduledIntervalCasted = item.As<IDateTimeInterval>();
                    if ((scheduledIntervalCasted != null))
                    {
                        this._parent.ScheduledInterval = scheduledIntervalCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerAgreement == null))
                {
                    ICustomerAgreement customerAgreementCasted = item.As<ICustomerAgreement>();
                    if ((customerAgreementCasted != null))
                    {
                        this._parent.CustomerAgreement = customerAgreementCasted;
                        return;
                    }
                }
                if ((this._parent.EndDeviceAsset == null))
                {
                    IEndDeviceAsset endDeviceAssetCasted = item.As<IEndDeviceAsset>();
                    if ((endDeviceAssetCasted != null))
                    {
                        this._parent.EndDeviceAsset = endDeviceAssetCasted;
                        return;
                    }
                }
                if ((this._parent.EndDeviceGroup == null))
                {
                    IEndDeviceGroup endDeviceGroupCasted = item.As<IEndDeviceGroup>();
                    if ((endDeviceGroupCasted != null))
                    {
                        this._parent.EndDeviceGroup = endDeviceGroupCasted;
                        return;
                    }
                }
                if ((this._parent.DemandResponseProgram == null))
                {
                    IDemandResponseProgram demandResponseProgramCasted = item.As<IDemandResponseProgram>();
                    if ((demandResponseProgramCasted != null))
                    {
                        this._parent.DemandResponseProgram = demandResponseProgramCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ScheduledInterval = null;
                this._parent.CustomerAgreement = null;
                this._parent.EndDeviceAsset = null;
                this._parent.EndDeviceGroup = null;
                this._parent.DemandResponseProgram = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ScheduledInterval))
                {
                    return true;
                }
                if ((item == this._parent.CustomerAgreement))
                {
                    return true;
                }
                if ((item == this._parent.EndDeviceAsset))
                {
                    return true;
                }
                if ((item == this._parent.EndDeviceGroup))
                {
                    return true;
                }
                if ((item == this._parent.DemandResponseProgram))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ScheduledInterval != null))
                {
                    array[arrayIndex] = this._parent.ScheduledInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerAgreement != null))
                {
                    array[arrayIndex] = this._parent.CustomerAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EndDeviceAsset != null))
                {
                    array[arrayIndex] = this._parent.EndDeviceAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EndDeviceGroup != null))
                {
                    array[arrayIndex] = this._parent.EndDeviceGroup;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DemandResponseProgram != null))
                {
                    array[arrayIndex] = this._parent.DemandResponseProgram;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ScheduledInterval == item))
                {
                    this._parent.ScheduledInterval = null;
                    return true;
                }
                if ((this._parent.CustomerAgreement == item))
                {
                    this._parent.CustomerAgreement = null;
                    return true;
                }
                if ((this._parent.EndDeviceAsset == item))
                {
                    this._parent.EndDeviceAsset = null;
                    return true;
                }
                if ((this._parent.EndDeviceGroup == item))
                {
                    this._parent.EndDeviceGroup = null;
                    return true;
                }
                if ((this._parent.DemandResponseProgram == item))
                {
                    this._parent.DemandResponseProgram = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ScheduledInterval).Concat(this._parent.CustomerAgreement).Concat(this._parent.EndDeviceAsset).Concat(this._parent.EndDeviceGroup).Concat(this._parent.DemandResponseProgram).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the drProgramMandatory property
        /// </summary>
        private sealed class DrProgramMandatoryProxy : ModelPropertyChange<IEndDeviceControl, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DrProgramMandatoryProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DrProgramMandatory;
                }
                set
                {
                    this.ModelElement.DrProgramMandatory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DrProgramMandatoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DrProgramMandatoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the drProgramLevel property
        /// </summary>
        private sealed class DrProgramLevelProxy : ModelPropertyChange<IEndDeviceControl, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DrProgramLevelProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.DrProgramLevel;
                }
                set
                {
                    this.ModelElement.DrProgramLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DrProgramLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DrProgramLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IEndDeviceControl, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the priceSignal property
        /// </summary>
        private sealed class PriceSignalProxy : ModelPropertyChange<IEndDeviceControl, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriceSignalProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PriceSignal;
                }
                set
                {
                    this.ModelElement.PriceSignal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PriceSignalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PriceSignalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scheduledInterval property
        /// </summary>
        private sealed class ScheduledIntervalProxy : ModelPropertyChange<IEndDeviceControl, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScheduledIntervalProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ScheduledInterval;
                }
                set
                {
                    this.ModelElement.ScheduledInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScheduledIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScheduledIntervalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAgreement property
        /// </summary>
        private sealed class CustomerAgreementProxy : ModelPropertyChange<IEndDeviceControl, ICustomerAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAgreementProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAgreement Value
            {
                get
                {
                    return this.ModelElement.CustomerAgreement;
                }
                set
                {
                    this.ModelElement.CustomerAgreement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndDeviceAsset property
        /// </summary>
        private sealed class EndDeviceAssetProxy : ModelPropertyChange<IEndDeviceControl, IEndDeviceAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDeviceAssetProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndDeviceAsset Value
            {
                get
                {
                    return this.ModelElement.EndDeviceAsset;
                }
                set
                {
                    this.ModelElement.EndDeviceAsset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndDeviceAssetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndDeviceAssetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndDeviceGroup property
        /// </summary>
        private sealed class EndDeviceGroupProxy : ModelPropertyChange<IEndDeviceControl, IEndDeviceGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDeviceGroupProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndDeviceGroup Value
            {
                get
                {
                    return this.ModelElement.EndDeviceGroup;
                }
                set
                {
                    this.ModelElement.EndDeviceGroup = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndDeviceGroupChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndDeviceGroupChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DemandResponseProgram property
        /// </summary>
        private sealed class DemandResponseProgramProxy : ModelPropertyChange<IEndDeviceControl, IDemandResponseProgram>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemandResponseProgramProxy(IEndDeviceControl modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDemandResponseProgram Value
            {
                get
                {
                    return this.ModelElement.DemandResponseProgram;
                }
                set
                {
                    this.ModelElement.DemandResponseProgram = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DemandResponseProgramChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DemandResponseProgramChanged -= handler;
            }
        }
    }
}

