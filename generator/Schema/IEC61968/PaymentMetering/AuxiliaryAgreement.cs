//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the AuxiliaryAgreement class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAgre" +
        "ement")]
    [DebuggerDisplayAttribute("AuxiliaryAgreement {UUID}")]
    public class AuxiliaryAgreement : Agreement, IAuxiliaryAgreement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AuxCycle property
        /// </summary>
        private string _auxCycle;
        
        /// <summary>
        /// The backing field for the AuxRef property
        /// </summary>
        private string _auxRef;
        
        /// <summary>
        /// The backing field for the SubCategory property
        /// </summary>
        private string _subCategory;
        
        /// <summary>
        /// The backing field for the MinAmount property
        /// </summary>
        private float _minAmount;
        
        /// <summary>
        /// The backing field for the VendPortion property
        /// </summary>
        private float _vendPortion;
        
        /// <summary>
        /// The backing field for the AuxPriorityCode property
        /// </summary>
        private string _auxPriorityCode;
        
        /// <summary>
        /// The backing field for the ArrearsInterest property
        /// </summary>
        private float _arrearsInterest;
        
        /// <summary>
        /// The backing field for the FixedAmount property
        /// </summary>
        private float _fixedAmount;
        
        /// <summary>
        /// The backing field for the PayCycle property
        /// </summary>
        private string _payCycle;
        
        /// <summary>
        /// The backing field for the VendPortionArrear property
        /// </summary>
        private float _vendPortionArrear;
        
        /// <summary>
        /// The backing field for the CustomerAgreement property
        /// </summary>
        private ICustomerAgreement _customerAgreement;
        
        /// <summary>
        /// The backing field for the AuxiliaryAccounts property
        /// </summary>
        private AuxiliaryAgreementAuxiliaryAccountsCollection _auxiliaryAccounts;
        
        private static IClass _classInstance;
        
        public AuxiliaryAgreement()
        {
            this._auxiliaryAccounts = new AuxiliaryAgreementAuxiliaryAccountsCollection(this);
            this._auxiliaryAccounts.CollectionChanging += this.AuxiliaryAccountsCollectionChanging;
            this._auxiliaryAccounts.CollectionChanged += this.AuxiliaryAccountsCollectionChanged;
        }
        
        /// <summary>
        /// The auxCycle property
        /// </summary>
        [XmlElementNameAttribute("auxCycle")]
        [XmlAttributeAttribute(true)]
        public virtual string AuxCycle
        {
            get
            {
                return this._auxCycle;
            }
            set
            {
                if ((this._auxCycle != value))
                {
                    string old = this._auxCycle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxCycleChanging(e);
                    this.OnPropertyChanging("AuxCycle", e);
                    this._auxCycle = value;
                    this.OnAuxCycleChanged(e);
                    this.OnPropertyChanged("AuxCycle", e);
                }
            }
        }
        
        /// <summary>
        /// The auxRef property
        /// </summary>
        [XmlElementNameAttribute("auxRef")]
        [XmlAttributeAttribute(true)]
        public virtual string AuxRef
        {
            get
            {
                return this._auxRef;
            }
            set
            {
                if ((this._auxRef != value))
                {
                    string old = this._auxRef;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxRefChanging(e);
                    this.OnPropertyChanging("AuxRef", e);
                    this._auxRef = value;
                    this.OnAuxRefChanged(e);
                    this.OnPropertyChanged("AuxRef", e);
                }
            }
        }
        
        /// <summary>
        /// The subCategory property
        /// </summary>
        [XmlElementNameAttribute("subCategory")]
        [XmlAttributeAttribute(true)]
        public virtual string SubCategory
        {
            get
            {
                return this._subCategory;
            }
            set
            {
                if ((this._subCategory != value))
                {
                    string old = this._subCategory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubCategoryChanging(e);
                    this.OnPropertyChanging("SubCategory", e);
                    this._subCategory = value;
                    this.OnSubCategoryChanged(e);
                    this.OnPropertyChanged("SubCategory", e);
                }
            }
        }
        
        /// <summary>
        /// The minAmount property
        /// </summary>
        [XmlElementNameAttribute("minAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float MinAmount
        {
            get
            {
                return this._minAmount;
            }
            set
            {
                if ((this._minAmount != value))
                {
                    float old = this._minAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinAmountChanging(e);
                    this.OnPropertyChanging("MinAmount", e);
                    this._minAmount = value;
                    this.OnMinAmountChanged(e);
                    this.OnPropertyChanged("MinAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The vendPortion property
        /// </summary>
        [XmlElementNameAttribute("vendPortion")]
        [XmlAttributeAttribute(true)]
        public virtual float VendPortion
        {
            get
            {
                return this._vendPortion;
            }
            set
            {
                if ((this._vendPortion != value))
                {
                    float old = this._vendPortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendPortionChanging(e);
                    this.OnPropertyChanging("VendPortion", e);
                    this._vendPortion = value;
                    this.OnVendPortionChanged(e);
                    this.OnPropertyChanged("VendPortion", e);
                }
            }
        }
        
        /// <summary>
        /// The auxPriorityCode property
        /// </summary>
        [XmlElementNameAttribute("auxPriorityCode")]
        [XmlAttributeAttribute(true)]
        public virtual string AuxPriorityCode
        {
            get
            {
                return this._auxPriorityCode;
            }
            set
            {
                if ((this._auxPriorityCode != value))
                {
                    string old = this._auxPriorityCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxPriorityCodeChanging(e);
                    this.OnPropertyChanging("AuxPriorityCode", e);
                    this._auxPriorityCode = value;
                    this.OnAuxPriorityCodeChanged(e);
                    this.OnPropertyChanged("AuxPriorityCode", e);
                }
            }
        }
        
        /// <summary>
        /// The arrearsInterest property
        /// </summary>
        [XmlElementNameAttribute("arrearsInterest")]
        [XmlAttributeAttribute(true)]
        public virtual float ArrearsInterest
        {
            get
            {
                return this._arrearsInterest;
            }
            set
            {
                if ((this._arrearsInterest != value))
                {
                    float old = this._arrearsInterest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnArrearsInterestChanging(e);
                    this.OnPropertyChanging("ArrearsInterest", e);
                    this._arrearsInterest = value;
                    this.OnArrearsInterestChanged(e);
                    this.OnPropertyChanged("ArrearsInterest", e);
                }
            }
        }
        
        /// <summary>
        /// The fixedAmount property
        /// </summary>
        [XmlElementNameAttribute("fixedAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float FixedAmount
        {
            get
            {
                return this._fixedAmount;
            }
            set
            {
                if ((this._fixedAmount != value))
                {
                    float old = this._fixedAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFixedAmountChanging(e);
                    this.OnPropertyChanging("FixedAmount", e);
                    this._fixedAmount = value;
                    this.OnFixedAmountChanged(e);
                    this.OnPropertyChanged("FixedAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The payCycle property
        /// </summary>
        [XmlElementNameAttribute("payCycle")]
        [XmlAttributeAttribute(true)]
        public virtual string PayCycle
        {
            get
            {
                return this._payCycle;
            }
            set
            {
                if ((this._payCycle != value))
                {
                    string old = this._payCycle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPayCycleChanging(e);
                    this.OnPropertyChanging("PayCycle", e);
                    this._payCycle = value;
                    this.OnPayCycleChanged(e);
                    this.OnPropertyChanged("PayCycle", e);
                }
            }
        }
        
        /// <summary>
        /// The vendPortionArrear property
        /// </summary>
        [XmlElementNameAttribute("vendPortionArrear")]
        [XmlAttributeAttribute(true)]
        public virtual float VendPortionArrear
        {
            get
            {
                return this._vendPortionArrear;
            }
            set
            {
                if ((this._vendPortionArrear != value))
                {
                    float old = this._vendPortionArrear;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendPortionArrearChanging(e);
                    this.OnPropertyChanging("VendPortionArrear", e);
                    this._vendPortionArrear = value;
                    this.OnVendPortionArrearChanged(e);
                    this.OnPropertyChanged("VendPortionArrear", e);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AuxiliaryAgreements")]
        public virtual ICustomerAgreement CustomerAgreement
        {
            get
            {
                return this._customerAgreement;
            }
            set
            {
                if ((this._customerAgreement != value))
                {
                    ICustomerAgreement old = this._customerAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAgreementChanging(e);
                    this.OnPropertyChanging("CustomerAgreement", e);
                    this._customerAgreement = value;
                    if ((old != null))
                    {
                        old.AuxiliaryAgreements.Remove(this);
                        old.Deleted -= this.OnResetCustomerAgreement;
                    }
                    if ((value != null))
                    {
                        value.AuxiliaryAgreements.Add(this);
                        value.Deleted += this.OnResetCustomerAgreement;
                    }
                    this.OnCustomerAgreementChanged(e);
                    this.OnPropertyChanged("CustomerAgreement", e);
                }
            }
        }
        
        /// <summary>
        /// The AuxiliaryAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AuxiliaryAgreement")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAuxiliaryAccount> AuxiliaryAccounts
        {
            get
            {
                return this._auxiliaryAccounts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AuxiliaryAgreementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAgre" +
                            "ement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AuxCycle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxCycleChanging;
        
        /// <summary>
        /// Gets fired when the AuxCycle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxCycleChanged;
        
        /// <summary>
        /// Gets fired before the AuxRef property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxRefChanging;
        
        /// <summary>
        /// Gets fired when the AuxRef property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxRefChanged;
        
        /// <summary>
        /// Gets fired before the SubCategory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubCategoryChanging;
        
        /// <summary>
        /// Gets fired when the SubCategory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubCategoryChanged;
        
        /// <summary>
        /// Gets fired before the MinAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinAmountChanging;
        
        /// <summary>
        /// Gets fired when the MinAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinAmountChanged;
        
        /// <summary>
        /// Gets fired before the VendPortion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendPortionChanging;
        
        /// <summary>
        /// Gets fired when the VendPortion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendPortionChanged;
        
        /// <summary>
        /// Gets fired before the AuxPriorityCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPriorityCodeChanging;
        
        /// <summary>
        /// Gets fired when the AuxPriorityCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPriorityCodeChanged;
        
        /// <summary>
        /// Gets fired before the ArrearsInterest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ArrearsInterestChanging;
        
        /// <summary>
        /// Gets fired when the ArrearsInterest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ArrearsInterestChanged;
        
        /// <summary>
        /// Gets fired before the FixedAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedAmountChanging;
        
        /// <summary>
        /// Gets fired when the FixedAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedAmountChanged;
        
        /// <summary>
        /// Gets fired before the PayCycle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PayCycleChanging;
        
        /// <summary>
        /// Gets fired when the PayCycle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PayCycleChanged;
        
        /// <summary>
        /// Gets fired before the VendPortionArrear property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendPortionArrearChanging;
        
        /// <summary>
        /// Gets fired when the VendPortionArrear property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendPortionArrearChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanged;
        
        /// <summary>
        /// Raises the AuxCycleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxCycleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxCycleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxCycleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxCycleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxCycleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxRefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxRefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxRefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxRefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxRefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxRefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubCategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubCategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubCategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubCategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendPortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendPortionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendPortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendPortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendPortionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendPortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxPriorityCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPriorityCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPriorityCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxPriorityCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPriorityCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPriorityCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ArrearsInterestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnArrearsInterestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ArrearsInterestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ArrearsInterestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnArrearsInterestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ArrearsInterestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FixedAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FixedAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PayCycleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPayCycleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PayCycleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PayCycleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPayCycleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PayCycleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendPortionArrearChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendPortionArrearChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendPortionArrearChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendPortionArrearChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendPortionArrearChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendPortionArrearChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAgreement(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAgreement = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AuxiliaryAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AuxiliaryAccountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AuxiliaryAccounts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AuxiliaryAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AuxiliaryAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AuxiliaryAccounts", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AUXCYCLE"))
            {
                return this.AuxCycle;
            }
            if ((attribute == "AUXREF"))
            {
                return this.AuxRef;
            }
            if ((attribute == "SUBCATEGORY"))
            {
                return this.SubCategory;
            }
            if ((attribute == "MINAMOUNT"))
            {
                return this.MinAmount;
            }
            if ((attribute == "VENDPORTION"))
            {
                return this.VendPortion;
            }
            if ((attribute == "AUXPRIORITYCODE"))
            {
                return this.AuxPriorityCode;
            }
            if ((attribute == "ARREARSINTEREST"))
            {
                return this.ArrearsInterest;
            }
            if ((attribute == "FIXEDAMOUNT"))
            {
                return this.FixedAmount;
            }
            if ((attribute == "PAYCYCLE"))
            {
                return this.PayCycle;
            }
            if ((attribute == "VENDPORTIONARREAR"))
            {
                return this.VendPortionArrear;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "AUXILIARYACCOUNTS"))
            {
                return this._auxiliaryAccounts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUSTOMERAGREEMENT"))
            {
                this.CustomerAgreement = ((ICustomerAgreement)(value));
                return;
            }
            if ((feature == "AUXCYCLE"))
            {
                this.AuxCycle = ((string)(value));
                return;
            }
            if ((feature == "AUXREF"))
            {
                this.AuxRef = ((string)(value));
                return;
            }
            if ((feature == "SUBCATEGORY"))
            {
                this.SubCategory = ((string)(value));
                return;
            }
            if ((feature == "MINAMOUNT"))
            {
                this.MinAmount = ((float)(value));
                return;
            }
            if ((feature == "VENDPORTION"))
            {
                this.VendPortion = ((float)(value));
                return;
            }
            if ((feature == "AUXPRIORITYCODE"))
            {
                this.AuxPriorityCode = ((string)(value));
                return;
            }
            if ((feature == "ARREARSINTEREST"))
            {
                this.ArrearsInterest = ((float)(value));
                return;
            }
            if ((feature == "FIXEDAMOUNT"))
            {
                this.FixedAmount = ((float)(value));
                return;
            }
            if ((feature == "PAYCYCLE"))
            {
                this.PayCycle = ((string)(value));
                return;
            }
            if ((feature == "VENDPORTIONARREAR"))
            {
                this.VendPortionArrear = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAgre" +
                        "ement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AuxiliaryAgreement class
        /// </summary>
        public class AuxiliaryAgreementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AuxiliaryAgreement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AuxiliaryAgreementReferencedElementsCollection(AuxiliaryAgreement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CustomerAgreement != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AuxiliaryAccounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CustomerAgreementChanged += this.PropagateValueChanges;
                this._parent.AuxiliaryAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CustomerAgreementChanged -= this.PropagateValueChanges;
                this._parent.AuxiliaryAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CustomerAgreement == null))
                {
                    ICustomerAgreement customerAgreementCasted = item.As<ICustomerAgreement>();
                    if ((customerAgreementCasted != null))
                    {
                        this._parent.CustomerAgreement = customerAgreementCasted;
                        return;
                    }
                }
                IAuxiliaryAccount auxiliaryAccountsCasted = item.As<IAuxiliaryAccount>();
                if ((auxiliaryAccountsCasted != null))
                {
                    this._parent.AuxiliaryAccounts.Add(auxiliaryAccountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CustomerAgreement = null;
                this._parent.AuxiliaryAccounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CustomerAgreement))
                {
                    return true;
                }
                if (this._parent.AuxiliaryAccounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CustomerAgreement != null))
                {
                    array[arrayIndex] = this._parent.CustomerAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> auxiliaryAccountsEnumerator = this._parent.AuxiliaryAccounts.GetEnumerator();
                try
                {
                    for (
                    ; auxiliaryAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = auxiliaryAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    auxiliaryAccountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CustomerAgreement == item))
                {
                    this._parent.CustomerAgreement = null;
                    return true;
                }
                IAuxiliaryAccount auxiliaryAccountItem = item.As<IAuxiliaryAccount>();
                if (((auxiliaryAccountItem != null) 
                            && this._parent.AuxiliaryAccounts.Remove(auxiliaryAccountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CustomerAgreement).Concat(this._parent.AuxiliaryAccounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the auxCycle property
        /// </summary>
        private sealed class AuxCycleProxy : ModelPropertyChange<IAuxiliaryAgreement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxCycleProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AuxCycle;
                }
                set
                {
                    this.ModelElement.AuxCycle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxCycleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxCycleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the auxRef property
        /// </summary>
        private sealed class AuxRefProxy : ModelPropertyChange<IAuxiliaryAgreement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxRefProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AuxRef;
                }
                set
                {
                    this.ModelElement.AuxRef = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxRefChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxRefChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subCategory property
        /// </summary>
        private sealed class SubCategoryProxy : ModelPropertyChange<IAuxiliaryAgreement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubCategoryProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SubCategory;
                }
                set
                {
                    this.ModelElement.SubCategory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubCategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubCategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minAmount property
        /// </summary>
        private sealed class MinAmountProxy : ModelPropertyChange<IAuxiliaryAgreement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinAmountProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinAmount;
                }
                set
                {
                    this.ModelElement.MinAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vendPortion property
        /// </summary>
        private sealed class VendPortionProxy : ModelPropertyChange<IAuxiliaryAgreement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendPortionProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VendPortion;
                }
                set
                {
                    this.ModelElement.VendPortion = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendPortionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendPortionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the auxPriorityCode property
        /// </summary>
        private sealed class AuxPriorityCodeProxy : ModelPropertyChange<IAuxiliaryAgreement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxPriorityCodeProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AuxPriorityCode;
                }
                set
                {
                    this.ModelElement.AuxPriorityCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxPriorityCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuxPriorityCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the arrearsInterest property
        /// </summary>
        private sealed class ArrearsInterestProxy : ModelPropertyChange<IAuxiliaryAgreement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ArrearsInterestProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ArrearsInterest;
                }
                set
                {
                    this.ModelElement.ArrearsInterest = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ArrearsInterestChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ArrearsInterestChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fixedAmount property
        /// </summary>
        private sealed class FixedAmountProxy : ModelPropertyChange<IAuxiliaryAgreement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FixedAmountProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FixedAmount;
                }
                set
                {
                    this.ModelElement.FixedAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FixedAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FixedAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the payCycle property
        /// </summary>
        private sealed class PayCycleProxy : ModelPropertyChange<IAuxiliaryAgreement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PayCycleProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PayCycle;
                }
                set
                {
                    this.ModelElement.PayCycle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PayCycleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PayCycleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vendPortionArrear property
        /// </summary>
        private sealed class VendPortionArrearProxy : ModelPropertyChange<IAuxiliaryAgreement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendPortionArrearProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VendPortionArrear;
                }
                set
                {
                    this.ModelElement.VendPortionArrear = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendPortionArrearChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VendPortionArrearChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAgreement property
        /// </summary>
        private sealed class CustomerAgreementProxy : ModelPropertyChange<IAuxiliaryAgreement, ICustomerAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAgreementProxy(IAuxiliaryAgreement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAgreement Value
            {
                get
                {
                    return this.ModelElement.CustomerAgreement;
                }
                set
                {
                    this.ModelElement.CustomerAgreement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerAgreementChanged -= handler;
            }
        }
    }
}

