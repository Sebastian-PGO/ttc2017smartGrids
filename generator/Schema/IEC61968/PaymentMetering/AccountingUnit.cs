//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the AccountingUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AccountingUni" +
        "t")]
    [DebuggerDisplayAttribute("AccountingUnit {UUID}")]
    public class AccountingUnit : Element, IAccountingUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MonetaryUnit property
        /// </summary>
        private Nullable<TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency> _monetaryUnit;
        
        /// <summary>
        /// The backing field for the EnergyUnit property
        /// </summary>
        private float _energyUnit;
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private float _value;
        
        /// <summary>
        /// The backing field for the Multiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _multiplier;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The monetaryUnit property
        /// </summary>
        [XmlElementNameAttribute("monetaryUnit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency> MonetaryUnit
        {
            get
            {
                return this._monetaryUnit;
            }
            set
            {
                if ((this._monetaryUnit != value))
                {
                    Nullable<TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency> old = this._monetaryUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMonetaryUnitChanging(e);
                    this.OnPropertyChanging("MonetaryUnit", e);
                    this._monetaryUnit = value;
                    this.OnMonetaryUnitChanged(e);
                    this.OnPropertyChanged("MonetaryUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The energyUnit property
        /// </summary>
        [XmlElementNameAttribute("energyUnit")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyUnit
        {
            get
            {
                return this._energyUnit;
            }
            set
            {
                if ((this._energyUnit != value))
                {
                    float old = this._energyUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyUnitChanging(e);
                    this.OnPropertyChanging("EnergyUnit", e);
                    this._energyUnit = value;
                    this.OnEnergyUnitChanged(e);
                    this.OnPropertyChanged("EnergyUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual float Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    float old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// The multiplier property
        /// </summary>
        [XmlElementNameAttribute("multiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> Multiplier
        {
            get
            {
                return this._multiplier;
            }
            set
            {
                if ((this._multiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._multiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMultiplierChanging(e);
                    this.OnPropertyChanging("Multiplier", e);
                    this._multiplier = value;
                    this.OnMultiplierChanged(e);
                    this.OnPropertyChanged("Multiplier", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AccountingUni" +
                            "t")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MonetaryUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonetaryUnitChanging;
        
        /// <summary>
        /// Gets fired when the MonetaryUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonetaryUnitChanged;
        
        /// <summary>
        /// Gets fired before the EnergyUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUnitChanging;
        
        /// <summary>
        /// Gets fired when the EnergyUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUnitChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Multiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Multiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultiplierChanged;
        
        /// <summary>
        /// Raises the MonetaryUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonetaryUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonetaryUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MonetaryUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonetaryUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonetaryUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MONETARYUNIT"))
            {
                return this.MonetaryUnit;
            }
            if ((attribute == "ENERGYUNIT"))
            {
                return this.EnergyUnit;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            if ((attribute == "MULTIPLIER"))
            {
                return this.Multiplier;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MONETARYUNIT"))
            {
                this.MonetaryUnit = ((TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency)(value));
                return;
            }
            if ((feature == "ENERGYUNIT"))
            {
                this.EnergyUnit = ((float)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((float)(value));
                return;
            }
            if ((feature == "MULTIPLIER"))
            {
                this.Multiplier = ((UnitMultiplier)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AccountingUni" +
                        "t")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the monetaryUnit property
        /// </summary>
        private sealed class MonetaryUnitProxy : ModelPropertyChange<IAccountingUnit, Nullable<TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MonetaryUnitProxy(IAccountingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TTC2017.SmartGrids.CIM.IEC61970.Domain.Currency> Value
            {
                get
                {
                    return this.ModelElement.MonetaryUnit;
                }
                set
                {
                    this.ModelElement.MonetaryUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonetaryUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonetaryUnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyUnit property
        /// </summary>
        private sealed class EnergyUnitProxy : ModelPropertyChange<IAccountingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyUnitProxy(IAccountingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyUnit;
                }
                set
                {
                    this.ModelElement.EnergyUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyUnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAccountingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAccountingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the multiplier property
        /// </summary>
        private sealed class MultiplierProxy : ModelPropertyChange<IAccountingUnit, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MultiplierProxy(IAccountingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.Multiplier;
                }
                set
                {
                    this.ModelElement.Multiplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MultiplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MultiplierChanged -= handler;
            }
        }
    }
}

