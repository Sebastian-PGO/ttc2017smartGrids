//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Shift class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Shift")]
    [DebuggerDisplayAttribute("Shift {UUID}")]
    public class Shift : IdentifiedObject, IShift, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TransactionsGrandTotal property
        /// </summary>
        private float _transactionsGrandTotal;
        
        /// <summary>
        /// The backing field for the ReceiptsGrandTotalRounding property
        /// </summary>
        private float _receiptsGrandTotalRounding;
        
        /// <summary>
        /// The backing field for the TransactionsGrandTotalRounding property
        /// </summary>
        private float _transactionsGrandTotalRounding;
        
        /// <summary>
        /// The backing field for the ReceiptsGrandTotalNonBankable property
        /// </summary>
        private float _receiptsGrandTotalNonBankable;
        
        /// <summary>
        /// The backing field for the ReceiptsGrandTotalBankable property
        /// </summary>
        private float _receiptsGrandTotalBankable;
        
        /// <summary>
        /// The backing field for the ActivityInterval property
        /// </summary>
        private IDateTimeInterval _activityInterval;
        
        /// <summary>
        /// The backing field for the TransactionSummaries property
        /// </summary>
        private ShiftTransactionSummariesCollection _transactionSummaries;
        
        /// <summary>
        /// The backing field for the ReceiptSummaries property
        /// </summary>
        private ShiftReceiptSummariesCollection _receiptSummaries;
        
        private static IClass _classInstance;
        
        public Shift()
        {
            this._transactionSummaries = new ShiftTransactionSummariesCollection(this);
            this._transactionSummaries.CollectionChanging += this.TransactionSummariesCollectionChanging;
            this._transactionSummaries.CollectionChanged += this.TransactionSummariesCollectionChanged;
            this._receiptSummaries = new ShiftReceiptSummariesCollection(this);
            this._receiptSummaries.CollectionChanging += this.ReceiptSummariesCollectionChanging;
            this._receiptSummaries.CollectionChanged += this.ReceiptSummariesCollectionChanged;
        }
        
        /// <summary>
        /// The transactionsGrandTotal property
        /// </summary>
        [XmlElementNameAttribute("transactionsGrandTotal")]
        [XmlAttributeAttribute(true)]
        public virtual float TransactionsGrandTotal
        {
            get
            {
                return this._transactionsGrandTotal;
            }
            set
            {
                if ((this._transactionsGrandTotal != value))
                {
                    float old = this._transactionsGrandTotal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionsGrandTotalChanging(e);
                    this.OnPropertyChanging("TransactionsGrandTotal", e);
                    this._transactionsGrandTotal = value;
                    this.OnTransactionsGrandTotalChanged(e);
                    this.OnPropertyChanged("TransactionsGrandTotal", e);
                }
            }
        }
        
        /// <summary>
        /// The receiptsGrandTotalRounding property
        /// </summary>
        [XmlElementNameAttribute("receiptsGrandTotalRounding")]
        [XmlAttributeAttribute(true)]
        public virtual float ReceiptsGrandTotalRounding
        {
            get
            {
                return this._receiptsGrandTotalRounding;
            }
            set
            {
                if ((this._receiptsGrandTotalRounding != value))
                {
                    float old = this._receiptsGrandTotalRounding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptsGrandTotalRoundingChanging(e);
                    this.OnPropertyChanging("ReceiptsGrandTotalRounding", e);
                    this._receiptsGrandTotalRounding = value;
                    this.OnReceiptsGrandTotalRoundingChanged(e);
                    this.OnPropertyChanged("ReceiptsGrandTotalRounding", e);
                }
            }
        }
        
        /// <summary>
        /// The transactionsGrandTotalRounding property
        /// </summary>
        [XmlElementNameAttribute("transactionsGrandTotalRounding")]
        [XmlAttributeAttribute(true)]
        public virtual float TransactionsGrandTotalRounding
        {
            get
            {
                return this._transactionsGrandTotalRounding;
            }
            set
            {
                if ((this._transactionsGrandTotalRounding != value))
                {
                    float old = this._transactionsGrandTotalRounding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionsGrandTotalRoundingChanging(e);
                    this.OnPropertyChanging("TransactionsGrandTotalRounding", e);
                    this._transactionsGrandTotalRounding = value;
                    this.OnTransactionsGrandTotalRoundingChanged(e);
                    this.OnPropertyChanged("TransactionsGrandTotalRounding", e);
                }
            }
        }
        
        /// <summary>
        /// The receiptsGrandTotalNonBankable property
        /// </summary>
        [XmlElementNameAttribute("receiptsGrandTotalNonBankable")]
        [XmlAttributeAttribute(true)]
        public virtual float ReceiptsGrandTotalNonBankable
        {
            get
            {
                return this._receiptsGrandTotalNonBankable;
            }
            set
            {
                if ((this._receiptsGrandTotalNonBankable != value))
                {
                    float old = this._receiptsGrandTotalNonBankable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptsGrandTotalNonBankableChanging(e);
                    this.OnPropertyChanging("ReceiptsGrandTotalNonBankable", e);
                    this._receiptsGrandTotalNonBankable = value;
                    this.OnReceiptsGrandTotalNonBankableChanged(e);
                    this.OnPropertyChanged("ReceiptsGrandTotalNonBankable", e);
                }
            }
        }
        
        /// <summary>
        /// The receiptsGrandTotalBankable property
        /// </summary>
        [XmlElementNameAttribute("receiptsGrandTotalBankable")]
        [XmlAttributeAttribute(true)]
        public virtual float ReceiptsGrandTotalBankable
        {
            get
            {
                return this._receiptsGrandTotalBankable;
            }
            set
            {
                if ((this._receiptsGrandTotalBankable != value))
                {
                    float old = this._receiptsGrandTotalBankable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptsGrandTotalBankableChanging(e);
                    this.OnPropertyChanging("ReceiptsGrandTotalBankable", e);
                    this._receiptsGrandTotalBankable = value;
                    this.OnReceiptsGrandTotalBankableChanged(e);
                    this.OnPropertyChanged("ReceiptsGrandTotalBankable", e);
                }
            }
        }
        
        /// <summary>
        /// The activityInterval property
        /// </summary>
        [XmlElementNameAttribute("activityInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ActivityInterval
        {
            get
            {
                return this._activityInterval;
            }
            set
            {
                if ((this._activityInterval != value))
                {
                    IDateTimeInterval old = this._activityInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivityIntervalChanging(e);
                    this.OnPropertyChanging("ActivityInterval", e);
                    this._activityInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetActivityInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetActivityInterval;
                    }
                    this.OnActivityIntervalChanged(e);
                    this.OnPropertyChanged("ActivityInterval", e);
                }
            }
        }
        
        /// <summary>
        /// The TransactionSummaries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Shift")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransactionSummary> TransactionSummaries
        {
            get
            {
                return this._transactionSummaries;
            }
        }
        
        /// <summary>
        /// The ReceiptSummaries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Shift")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReceiptSummary> ReceiptSummaries
        {
            get
            {
                return this._receiptSummaries;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ShiftReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Shift")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TransactionsGrandTotal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionsGrandTotalChanging;
        
        /// <summary>
        /// Gets fired when the TransactionsGrandTotal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionsGrandTotalChanged;
        
        /// <summary>
        /// Gets fired before the ReceiptsGrandTotalRounding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalRoundingChanging;
        
        /// <summary>
        /// Gets fired when the ReceiptsGrandTotalRounding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalRoundingChanged;
        
        /// <summary>
        /// Gets fired before the TransactionsGrandTotalRounding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionsGrandTotalRoundingChanging;
        
        /// <summary>
        /// Gets fired when the TransactionsGrandTotalRounding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionsGrandTotalRoundingChanged;
        
        /// <summary>
        /// Gets fired before the ReceiptsGrandTotalNonBankable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalNonBankableChanging;
        
        /// <summary>
        /// Gets fired when the ReceiptsGrandTotalNonBankable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalNonBankableChanged;
        
        /// <summary>
        /// Gets fired before the ReceiptsGrandTotalBankable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalBankableChanging;
        
        /// <summary>
        /// Gets fired when the ReceiptsGrandTotalBankable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptsGrandTotalBankableChanged;
        
        /// <summary>
        /// Gets fired before the ActivityInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ActivityInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityIntervalChanged;
        
        /// <summary>
        /// Raises the TransactionsGrandTotalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionsGrandTotalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionsGrandTotalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionsGrandTotalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionsGrandTotalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionsGrandTotalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalRoundingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalRoundingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalRoundingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalRoundingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalRoundingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalRoundingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionsGrandTotalRoundingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionsGrandTotalRoundingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionsGrandTotalRoundingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionsGrandTotalRoundingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionsGrandTotalRoundingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionsGrandTotalRoundingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalNonBankableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalNonBankableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalNonBankableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalNonBankableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalNonBankableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalNonBankableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalBankableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalBankableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalBankableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptsGrandTotalBankableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptsGrandTotalBankableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptsGrandTotalBankableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivityIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivityIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ActivityInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActivityInterval(object sender, System.EventArgs eventArgs)
        {
            this.ActivityInterval = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransactionSummaries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionSummariesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TransactionSummaries", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransactionSummaries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionSummariesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransactionSummaries", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReceiptSummaries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReceiptSummariesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ReceiptSummaries", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReceiptSummaries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReceiptSummariesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReceiptSummaries", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TRANSACTIONSGRANDTOTAL"))
            {
                return this.TransactionsGrandTotal;
            }
            if ((attribute == "RECEIPTSGRANDTOTALROUNDING"))
            {
                return this.ReceiptsGrandTotalRounding;
            }
            if ((attribute == "TRANSACTIONSGRANDTOTALROUNDING"))
            {
                return this.TransactionsGrandTotalRounding;
            }
            if ((attribute == "RECEIPTSGRANDTOTALNONBANKABLE"))
            {
                return this.ReceiptsGrandTotalNonBankable;
            }
            if ((attribute == "RECEIPTSGRANDTOTALBANKABLE"))
            {
                return this.ReceiptsGrandTotalBankable;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSACTIONSUMMARIES"))
            {
                return this._transactionSummaries;
            }
            if ((feature == "RECEIPTSUMMARIES"))
            {
                return this._receiptSummaries;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVITYINTERVAL"))
            {
                this.ActivityInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "TRANSACTIONSGRANDTOTAL"))
            {
                this.TransactionsGrandTotal = ((float)(value));
                return;
            }
            if ((feature == "RECEIPTSGRANDTOTALROUNDING"))
            {
                this.ReceiptsGrandTotalRounding = ((float)(value));
                return;
            }
            if ((feature == "TRANSACTIONSGRANDTOTALROUNDING"))
            {
                this.TransactionsGrandTotalRounding = ((float)(value));
                return;
            }
            if ((feature == "RECEIPTSGRANDTOTALNONBANKABLE"))
            {
                this.ReceiptsGrandTotalNonBankable = ((float)(value));
                return;
            }
            if ((feature == "RECEIPTSGRANDTOTALBANKABLE"))
            {
                this.ReceiptsGrandTotalBankable = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ActivityInterval"))
            {
                return new ActivityIntervalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ActivityInterval"))
            {
                return new ActivityIntervalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Shift")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Shift class
        /// </summary>
        public class ShiftReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Shift _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ShiftReferencedElementsCollection(Shift parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ActivityInterval != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TransactionSummaries.Count);
                    count = (count + this._parent.ReceiptSummaries.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ActivityIntervalChanged += this.PropagateValueChanges;
                this._parent.TransactionSummaries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReceiptSummaries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ActivityIntervalChanged -= this.PropagateValueChanges;
                this._parent.TransactionSummaries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReceiptSummaries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ActivityInterval == null))
                {
                    IDateTimeInterval activityIntervalCasted = item.As<IDateTimeInterval>();
                    if ((activityIntervalCasted != null))
                    {
                        this._parent.ActivityInterval = activityIntervalCasted;
                        return;
                    }
                }
                ITransactionSummary transactionSummariesCasted = item.As<ITransactionSummary>();
                if ((transactionSummariesCasted != null))
                {
                    this._parent.TransactionSummaries.Add(transactionSummariesCasted);
                }
                IReceiptSummary receiptSummariesCasted = item.As<IReceiptSummary>();
                if ((receiptSummariesCasted != null))
                {
                    this._parent.ReceiptSummaries.Add(receiptSummariesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ActivityInterval = null;
                this._parent.TransactionSummaries.Clear();
                this._parent.ReceiptSummaries.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ActivityInterval))
                {
                    return true;
                }
                if (this._parent.TransactionSummaries.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReceiptSummaries.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ActivityInterval != null))
                {
                    array[arrayIndex] = this._parent.ActivityInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transactionSummariesEnumerator = this._parent.TransactionSummaries.GetEnumerator();
                try
                {
                    for (
                    ; transactionSummariesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transactionSummariesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transactionSummariesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> receiptSummariesEnumerator = this._parent.ReceiptSummaries.GetEnumerator();
                try
                {
                    for (
                    ; receiptSummariesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = receiptSummariesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    receiptSummariesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ActivityInterval == item))
                {
                    this._parent.ActivityInterval = null;
                    return true;
                }
                ITransactionSummary transactionSummaryItem = item.As<ITransactionSummary>();
                if (((transactionSummaryItem != null) 
                            && this._parent.TransactionSummaries.Remove(transactionSummaryItem)))
                {
                    return true;
                }
                IReceiptSummary receiptSummaryItem = item.As<IReceiptSummary>();
                if (((receiptSummaryItem != null) 
                            && this._parent.ReceiptSummaries.Remove(receiptSummaryItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ActivityInterval).Concat(this._parent.TransactionSummaries).Concat(this._parent.ReceiptSummaries).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionsGrandTotal property
        /// </summary>
        private sealed class TransactionsGrandTotalProxy : ModelPropertyChange<IShift, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionsGrandTotalProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransactionsGrandTotal;
                }
                set
                {
                    this.ModelElement.TransactionsGrandTotal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransactionsGrandTotalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransactionsGrandTotalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receiptsGrandTotalRounding property
        /// </summary>
        private sealed class ReceiptsGrandTotalRoundingProxy : ModelPropertyChange<IShift, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptsGrandTotalRoundingProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReceiptsGrandTotalRounding;
                }
                set
                {
                    this.ModelElement.ReceiptsGrandTotalRounding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalRoundingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalRoundingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionsGrandTotalRounding property
        /// </summary>
        private sealed class TransactionsGrandTotalRoundingProxy : ModelPropertyChange<IShift, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionsGrandTotalRoundingProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransactionsGrandTotalRounding;
                }
                set
                {
                    this.ModelElement.TransactionsGrandTotalRounding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransactionsGrandTotalRoundingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransactionsGrandTotalRoundingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receiptsGrandTotalNonBankable property
        /// </summary>
        private sealed class ReceiptsGrandTotalNonBankableProxy : ModelPropertyChange<IShift, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptsGrandTotalNonBankableProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReceiptsGrandTotalNonBankable;
                }
                set
                {
                    this.ModelElement.ReceiptsGrandTotalNonBankable = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalNonBankableChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalNonBankableChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receiptsGrandTotalBankable property
        /// </summary>
        private sealed class ReceiptsGrandTotalBankableProxy : ModelPropertyChange<IShift, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptsGrandTotalBankableProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReceiptsGrandTotalBankable;
                }
                set
                {
                    this.ModelElement.ReceiptsGrandTotalBankable = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalBankableChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiptsGrandTotalBankableChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activityInterval property
        /// </summary>
        private sealed class ActivityIntervalProxy : ModelPropertyChange<IShift, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivityIntervalProxy(IShift modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ActivityInterval;
                }
                set
                {
                    this.ModelElement.ActivityInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivityIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivityIntervalChanged -= handler;
            }
        }
    }
}

