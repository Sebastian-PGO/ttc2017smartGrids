//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Transaction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Transaction")]
    [DebuggerDisplayAttribute("Transaction {UUID}")]
    public partial class Transaction : IdentifiedObject, ITransaction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<TransactionKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the ServiceUnitsError property
        /// </summary>
        private float _serviceUnitsError;
        
        private static Lazy<ITypedElement> _serviceUnitsErrorAttribute = new Lazy<ITypedElement>(RetrieveServiceUnitsErrorAttribute);
        
        /// <summary>
        /// The backing field for the ReversedId property
        /// </summary>
        private string _reversedId;
        
        private static Lazy<ITypedElement> _reversedIdAttribute = new Lazy<ITypedElement>(RetrieveReversedIdAttribute);
        
        /// <summary>
        /// The backing field for the ReceiverReference property
        /// </summary>
        private string _receiverReference;
        
        private static Lazy<ITypedElement> _receiverReferenceAttribute = new Lazy<ITypedElement>(RetrieveReceiverReferenceAttribute);
        
        /// <summary>
        /// The backing field for the DonorReference property
        /// </summary>
        private string _donorReference;
        
        private static Lazy<ITypedElement> _donorReferenceAttribute = new Lazy<ITypedElement>(RetrieveDonorReferenceAttribute);
        
        /// <summary>
        /// The backing field for the ServiceUnitsEnergy property
        /// </summary>
        private float _serviceUnitsEnergy;
        
        private static Lazy<ITypedElement> _serviceUnitsEnergyAttribute = new Lazy<ITypedElement>(RetrieveServiceUnitsEnergyAttribute);
        
        /// <summary>
        /// The backing field for the DiverseReference property
        /// </summary>
        private string _diverseReference;
        
        private static Lazy<ITypedElement> _diverseReferenceAttribute = new Lazy<ITypedElement>(RetrieveDiverseReferenceAttribute);
        
        private static Lazy<ITypedElement> _userAttributesReference = new Lazy<ITypedElement>(RetrieveUserAttributesReference);
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private TransactionUserAttributesCollection _userAttributes;
        
        private static Lazy<ITypedElement> _meterAssetReference = new Lazy<ITypedElement>(RetrieveMeterAssetReference);
        
        /// <summary>
        /// The backing field for the MeterAsset property
        /// </summary>
        private IMeterAsset _meterAsset;
        
        private static Lazy<ITypedElement> _lineReference = new Lazy<ITypedElement>(RetrieveLineReference);
        
        /// <summary>
        /// The backing field for the Line property
        /// </summary>
        private ILineDetail _line;
        
        private static Lazy<ITypedElement> _vendorShiftReference = new Lazy<ITypedElement>(RetrieveVendorShiftReference);
        
        /// <summary>
        /// The backing field for the VendorShift property
        /// </summary>
        private IVendorShift _vendorShift;
        
        private static Lazy<ITypedElement> _cashierShiftReference = new Lazy<ITypedElement>(RetrieveCashierShiftReference);
        
        /// <summary>
        /// The backing field for the CashierShift property
        /// </summary>
        private ICashierShift _cashierShift;
        
        private static Lazy<ITypedElement> _auxiliaryAccountReference = new Lazy<ITypedElement>(RetrieveAuxiliaryAccountReference);
        
        /// <summary>
        /// The backing field for the AuxiliaryAccount property
        /// </summary>
        private IAuxiliaryAccount _auxiliaryAccount;
        
        private static Lazy<ITypedElement> _pricingStructureReference = new Lazy<ITypedElement>(RetrievePricingStructureReference);
        
        /// <summary>
        /// The backing field for the PricingStructure property
        /// </summary>
        private IPricingStructure _pricingStructure;
        
        private static Lazy<ITypedElement> _customerAccountReference = new Lazy<ITypedElement>(RetrieveCustomerAccountReference);
        
        /// <summary>
        /// The backing field for the CustomerAccount property
        /// </summary>
        private ICustomerAccount _customerAccount;
        
        private static Lazy<ITypedElement> _receiptReference = new Lazy<ITypedElement>(RetrieveReceiptReference);
        
        /// <summary>
        /// The backing field for the Receipt property
        /// </summary>
        private IReceipt _receipt;
        
        private static IClass _classInstance;
        
        public Transaction()
        {
            this._userAttributes = new TransactionUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TransactionKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<TransactionKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The serviceUnitsError property
        /// </summary>
        [XmlElementNameAttribute("serviceUnitsError")]
        [XmlAttributeAttribute(true)]
        public virtual float ServiceUnitsError
        {
            get
            {
                return this._serviceUnitsError;
            }
            set
            {
                if ((this._serviceUnitsError != value))
                {
                    float old = this._serviceUnitsError;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceUnitsErrorChanging(e);
                    this.OnPropertyChanging("ServiceUnitsError", e, _serviceUnitsErrorAttribute);
                    this._serviceUnitsError = value;
                    this.OnServiceUnitsErrorChanged(e);
                    this.OnPropertyChanged("ServiceUnitsError", e, _serviceUnitsErrorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reversedId property
        /// </summary>
        [XmlElementNameAttribute("reversedId")]
        [XmlAttributeAttribute(true)]
        public virtual string ReversedId
        {
            get
            {
                return this._reversedId;
            }
            set
            {
                if ((this._reversedId != value))
                {
                    string old = this._reversedId;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReversedIdChanging(e);
                    this.OnPropertyChanging("ReversedId", e, _reversedIdAttribute);
                    this._reversedId = value;
                    this.OnReversedIdChanged(e);
                    this.OnPropertyChanged("ReversedId", e, _reversedIdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The receiverReference property
        /// </summary>
        [XmlElementNameAttribute("receiverReference")]
        [XmlAttributeAttribute(true)]
        public virtual string ReceiverReference
        {
            get
            {
                return this._receiverReference;
            }
            set
            {
                if ((this._receiverReference != value))
                {
                    string old = this._receiverReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiverReferenceChanging(e);
                    this.OnPropertyChanging("ReceiverReference", e, _receiverReferenceAttribute);
                    this._receiverReference = value;
                    this.OnReceiverReferenceChanged(e);
                    this.OnPropertyChanged("ReceiverReference", e, _receiverReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The donorReference property
        /// </summary>
        [XmlElementNameAttribute("donorReference")]
        [XmlAttributeAttribute(true)]
        public virtual string DonorReference
        {
            get
            {
                return this._donorReference;
            }
            set
            {
                if ((this._donorReference != value))
                {
                    string old = this._donorReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDonorReferenceChanging(e);
                    this.OnPropertyChanging("DonorReference", e, _donorReferenceAttribute);
                    this._donorReference = value;
                    this.OnDonorReferenceChanged(e);
                    this.OnPropertyChanged("DonorReference", e, _donorReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The serviceUnitsEnergy property
        /// </summary>
        [XmlElementNameAttribute("serviceUnitsEnergy")]
        [XmlAttributeAttribute(true)]
        public virtual float ServiceUnitsEnergy
        {
            get
            {
                return this._serviceUnitsEnergy;
            }
            set
            {
                if ((this._serviceUnitsEnergy != value))
                {
                    float old = this._serviceUnitsEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceUnitsEnergyChanging(e);
                    this.OnPropertyChanging("ServiceUnitsEnergy", e, _serviceUnitsEnergyAttribute);
                    this._serviceUnitsEnergy = value;
                    this.OnServiceUnitsEnergyChanged(e);
                    this.OnPropertyChanged("ServiceUnitsEnergy", e, _serviceUnitsEnergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The diverseReference property
        /// </summary>
        [XmlElementNameAttribute("diverseReference")]
        [XmlAttributeAttribute(true)]
        public virtual string DiverseReference
        {
            get
            {
                return this._diverseReference;
            }
            set
            {
                if ((this._diverseReference != value))
                {
                    string old = this._diverseReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiverseReferenceChanging(e);
                    this.OnPropertyChanging("DiverseReference", e, _diverseReferenceAttribute);
                    this._diverseReference = value;
                    this.OnDiverseReferenceChanged(e);
                    this.OnPropertyChanged("DiverseReference", e, _diverseReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transaction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The MeterAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("VendingTransactions")]
        public virtual IMeterAsset MeterAsset
        {
            get
            {
                return this._meterAsset;
            }
            set
            {
                if ((this._meterAsset != value))
                {
                    IMeterAsset old = this._meterAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterAssetChanging(e);
                    this.OnPropertyChanging("MeterAsset", e, _meterAssetReference);
                    this._meterAsset = value;
                    if ((old != null))
                    {
                        old.VendingTransactions.Remove(this);
                        old.Deleted -= this.OnResetMeterAsset;
                    }
                    if ((value != null))
                    {
                        value.VendingTransactions.Add(this);
                        value.Deleted += this.OnResetMeterAsset;
                    }
                    this.OnMeterAssetChanged(e);
                    this.OnPropertyChanged("MeterAsset", e, _meterAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The line property
        /// </summary>
        [XmlElementNameAttribute("line")]
        [XmlAttributeAttribute(true)]
        public virtual ILineDetail Line
        {
            get
            {
                return this._line;
            }
            set
            {
                if ((this._line != value))
                {
                    ILineDetail old = this._line;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineChanging(e);
                    this.OnPropertyChanging("Line", e, _lineReference);
                    this._line = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLine;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLine;
                    }
                    this.OnLineChanged(e);
                    this.OnPropertyChanged("Line", e, _lineReference);
                }
            }
        }
        
        /// <summary>
        /// The VendorShift property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transactions")]
        public virtual IVendorShift VendorShift
        {
            get
            {
                return this._vendorShift;
            }
            set
            {
                if ((this._vendorShift != value))
                {
                    IVendorShift old = this._vendorShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendorShiftChanging(e);
                    this.OnPropertyChanging("VendorShift", e, _vendorShiftReference);
                    this._vendorShift = value;
                    if ((old != null))
                    {
                        old.Transactions.Remove(this);
                        old.Deleted -= this.OnResetVendorShift;
                    }
                    if ((value != null))
                    {
                        value.Transactions.Add(this);
                        value.Deleted += this.OnResetVendorShift;
                    }
                    this.OnVendorShiftChanged(e);
                    this.OnPropertyChanged("VendorShift", e, _vendorShiftReference);
                }
            }
        }
        
        /// <summary>
        /// The CashierShift property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transactions")]
        public virtual ICashierShift CashierShift
        {
            get
            {
                return this._cashierShift;
            }
            set
            {
                if ((this._cashierShift != value))
                {
                    ICashierShift old = this._cashierShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCashierShiftChanging(e);
                    this.OnPropertyChanging("CashierShift", e, _cashierShiftReference);
                    this._cashierShift = value;
                    if ((old != null))
                    {
                        old.Transactions.Remove(this);
                        old.Deleted -= this.OnResetCashierShift;
                    }
                    if ((value != null))
                    {
                        value.Transactions.Add(this);
                        value.Deleted += this.OnResetCashierShift;
                    }
                    this.OnCashierShiftChanged(e);
                    this.OnPropertyChanged("CashierShift", e, _cashierShiftReference);
                }
            }
        }
        
        /// <summary>
        /// The AuxiliaryAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PaymentTransactions")]
        public virtual IAuxiliaryAccount AuxiliaryAccount
        {
            get
            {
                return this._auxiliaryAccount;
            }
            set
            {
                if ((this._auxiliaryAccount != value))
                {
                    IAuxiliaryAccount old = this._auxiliaryAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxiliaryAccountChanging(e);
                    this.OnPropertyChanging("AuxiliaryAccount", e, _auxiliaryAccountReference);
                    this._auxiliaryAccount = value;
                    if ((old != null))
                    {
                        old.PaymentTransactions.Remove(this);
                        old.Deleted -= this.OnResetAuxiliaryAccount;
                    }
                    if ((value != null))
                    {
                        value.PaymentTransactions.Add(this);
                        value.Deleted += this.OnResetAuxiliaryAccount;
                    }
                    this.OnAuxiliaryAccountChanged(e);
                    this.OnPropertyChanged("AuxiliaryAccount", e, _auxiliaryAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The PricingStructure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transactions")]
        public virtual IPricingStructure PricingStructure
        {
            get
            {
                return this._pricingStructure;
            }
            set
            {
                if ((this._pricingStructure != value))
                {
                    IPricingStructure old = this._pricingStructure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPricingStructureChanging(e);
                    this.OnPropertyChanging("PricingStructure", e, _pricingStructureReference);
                    this._pricingStructure = value;
                    if ((old != null))
                    {
                        old.Transactions.Remove(this);
                        old.Deleted -= this.OnResetPricingStructure;
                    }
                    if ((value != null))
                    {
                        value.Transactions.Add(this);
                        value.Deleted += this.OnResetPricingStructure;
                    }
                    this.OnPricingStructureChanged(e);
                    this.OnPropertyChanged("PricingStructure", e, _pricingStructureReference);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PaymentTransactions")]
        public virtual ICustomerAccount CustomerAccount
        {
            get
            {
                return this._customerAccount;
            }
            set
            {
                if ((this._customerAccount != value))
                {
                    ICustomerAccount old = this._customerAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAccountChanging(e);
                    this.OnPropertyChanging("CustomerAccount", e, _customerAccountReference);
                    this._customerAccount = value;
                    if ((old != null))
                    {
                        old.PaymentTransactions.Remove(this);
                        old.Deleted -= this.OnResetCustomerAccount;
                    }
                    if ((value != null))
                    {
                        value.PaymentTransactions.Add(this);
                        value.Deleted += this.OnResetCustomerAccount;
                    }
                    this.OnCustomerAccountChanged(e);
                    this.OnPropertyChanged("CustomerAccount", e, _customerAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The Receipt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transactions")]
        public virtual IReceipt Receipt
        {
            get
            {
                return this._receipt;
            }
            set
            {
                if ((this._receipt != value))
                {
                    IReceipt old = this._receipt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptChanging(e);
                    this.OnPropertyChanging("Receipt", e, _receiptReference);
                    this._receipt = value;
                    if ((old != null))
                    {
                        old.Transactions.Remove(this);
                        old.Deleted -= this.OnResetReceipt;
                    }
                    if ((value != null))
                    {
                        value.Transactions.Add(this);
                        value.Deleted += this.OnResetReceipt;
                    }
                    this.OnReceiptChanged(e);
                    this.OnPropertyChanged("Receipt", e, _receiptReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransactionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Transaction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the ServiceUnitsError property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceUnitsErrorChanging;
        
        /// <summary>
        /// Gets fired when the ServiceUnitsError property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceUnitsErrorChanged;
        
        /// <summary>
        /// Gets fired before the ReversedId property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReversedIdChanging;
        
        /// <summary>
        /// Gets fired when the ReversedId property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReversedIdChanged;
        
        /// <summary>
        /// Gets fired before the ReceiverReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiverReferenceChanging;
        
        /// <summary>
        /// Gets fired when the ReceiverReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiverReferenceChanged;
        
        /// <summary>
        /// Gets fired before the DonorReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DonorReferenceChanging;
        
        /// <summary>
        /// Gets fired when the DonorReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DonorReferenceChanged;
        
        /// <summary>
        /// Gets fired before the ServiceUnitsEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceUnitsEnergyChanging;
        
        /// <summary>
        /// Gets fired when the ServiceUnitsEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceUnitsEnergyChanged;
        
        /// <summary>
        /// Gets fired before the DiverseReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiverseReferenceChanging;
        
        /// <summary>
        /// Gets fired when the DiverseReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiverseReferenceChanged;
        
        /// <summary>
        /// Gets fired before the MeterAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanging;
        
        /// <summary>
        /// Gets fired when the MeterAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanged;
        
        /// <summary>
        /// Gets fired before the Line property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineChanging;
        
        /// <summary>
        /// Gets fired when the Line property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineChanged;
        
        /// <summary>
        /// Gets fired before the VendorShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorShiftChanging;
        
        /// <summary>
        /// Gets fired when the VendorShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorShiftChanged;
        
        /// <summary>
        /// Gets fired before the CashierShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CashierShiftChanging;
        
        /// <summary>
        /// Gets fired when the CashierShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CashierShiftChanged;
        
        /// <summary>
        /// Gets fired before the AuxiliaryAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliaryAccountChanging;
        
        /// <summary>
        /// Gets fired when the AuxiliaryAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliaryAccountChanged;
        
        /// <summary>
        /// Gets fired before the PricingStructure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PricingStructureChanging;
        
        /// <summary>
        /// Gets fired when the PricingStructure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PricingStructureChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanged;
        
        /// <summary>
        /// Gets fired before the Receipt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptChanging;
        
        /// <summary>
        /// Gets fired when the Receipt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceUnitsErrorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("serviceUnitsError")));
        }
        
        /// <summary>
        /// Raises the ServiceUnitsErrorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceUnitsErrorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceUnitsErrorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceUnitsErrorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceUnitsErrorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceUnitsErrorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReversedIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("reversedId")));
        }
        
        /// <summary>
        /// Raises the ReversedIdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReversedIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReversedIdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReversedIdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReversedIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReversedIdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReceiverReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("receiverReference")));
        }
        
        /// <summary>
        /// Raises the ReceiverReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiverReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiverReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiverReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiverReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiverReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDonorReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("donorReference")));
        }
        
        /// <summary>
        /// Raises the DonorReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDonorReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DonorReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DonorReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDonorReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DonorReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceUnitsEnergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("serviceUnitsEnergy")));
        }
        
        /// <summary>
        /// Raises the ServiceUnitsEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceUnitsEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceUnitsEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceUnitsEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceUnitsEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceUnitsEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDiverseReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("diverseReference")));
        }
        
        /// <summary>
        /// Raises the DiverseReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiverseReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiverseReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiverseReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiverseReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiverseReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUserAttributesReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("UserAttributes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e, _userAttributesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e, _userAttributesReference);
        }
        
        private static ITypedElement RetrieveMeterAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("MeterAsset")));
        }
        
        /// <summary>
        /// Raises the MeterAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeterAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeterAsset(object sender, System.EventArgs eventArgs)
        {
            this.MeterAsset = null;
        }
        
        private static ITypedElement RetrieveLineReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("line")));
        }
        
        /// <summary>
        /// Raises the LineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Line property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLine(object sender, System.EventArgs eventArgs)
        {
            this.Line = null;
        }
        
        private static ITypedElement RetrieveVendorShiftReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("VendorShift")));
        }
        
        /// <summary>
        /// Raises the VendorShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendorShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VendorShift property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVendorShift(object sender, System.EventArgs eventArgs)
        {
            this.VendorShift = null;
        }
        
        private static ITypedElement RetrieveCashierShiftReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("CashierShift")));
        }
        
        /// <summary>
        /// Raises the CashierShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCashierShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CashierShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CashierShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCashierShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CashierShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CashierShift property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCashierShift(object sender, System.EventArgs eventArgs)
        {
            this.CashierShift = null;
        }
        
        private static ITypedElement RetrieveAuxiliaryAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("AuxiliaryAccount")));
        }
        
        /// <summary>
        /// Raises the AuxiliaryAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliaryAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliaryAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxiliaryAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliaryAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliaryAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AuxiliaryAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAuxiliaryAccount(object sender, System.EventArgs eventArgs)
        {
            this.AuxiliaryAccount = null;
        }
        
        private static ITypedElement RetrievePricingStructureReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("PricingStructure")));
        }
        
        /// <summary>
        /// Raises the PricingStructureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPricingStructureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PricingStructureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PricingStructureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPricingStructureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PricingStructureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PricingStructure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPricingStructure(object sender, System.EventArgs eventArgs)
        {
            this.PricingStructure = null;
        }
        
        private static ITypedElement RetrieveCustomerAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("CustomerAccount")));
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAccount(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAccount = null;
        }
        
        private static ITypedElement RetrieveReceiptReference()
        {
            return ((ITypedElement)(((ModelElement)(Transaction.ClassInstance)).Resolve("Receipt")));
        }
        
        /// <summary>
        /// Raises the ReceiptChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Receipt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReceipt(object sender, System.EventArgs eventArgs)
        {
            this.Receipt = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "SERVICEUNITSERROR"))
            {
                return this.ServiceUnitsError;
            }
            if ((attribute == "REVERSEDID"))
            {
                return this.ReversedId;
            }
            if ((attribute == "RECEIVERREFERENCE"))
            {
                return this.ReceiverReference;
            }
            if ((attribute == "DONORREFERENCE"))
            {
                return this.DonorReference;
            }
            if ((attribute == "SERVICEUNITSENERGY"))
            {
                return this.ServiceUnitsEnergy;
            }
            if ((attribute == "DIVERSEREFERENCE"))
            {
                return this.DiverseReference;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METERASSET"))
            {
                this.MeterAsset = ((IMeterAsset)(value));
                return;
            }
            if ((feature == "LINE"))
            {
                this.Line = ((ILineDetail)(value));
                return;
            }
            if ((feature == "VENDORSHIFT"))
            {
                this.VendorShift = ((IVendorShift)(value));
                return;
            }
            if ((feature == "CASHIERSHIFT"))
            {
                this.CashierShift = ((ICashierShift)(value));
                return;
            }
            if ((feature == "AUXILIARYACCOUNT"))
            {
                this.AuxiliaryAccount = ((IAuxiliaryAccount)(value));
                return;
            }
            if ((feature == "PRICINGSTRUCTURE"))
            {
                this.PricingStructure = ((IPricingStructure)(value));
                return;
            }
            if ((feature == "CUSTOMERACCOUNT"))
            {
                this.CustomerAccount = ((ICustomerAccount)(value));
                return;
            }
            if ((feature == "RECEIPT"))
            {
                this.Receipt = ((IReceipt)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((TransactionKind)(value));
                return;
            }
            if ((feature == "SERVICEUNITSERROR"))
            {
                this.ServiceUnitsError = ((float)(value));
                return;
            }
            if ((feature == "REVERSEDID"))
            {
                this.ReversedId = ((string)(value));
                return;
            }
            if ((feature == "RECEIVERREFERENCE"))
            {
                this.ReceiverReference = ((string)(value));
                return;
            }
            if ((feature == "DONORREFERENCE"))
            {
                this.DonorReference = ((string)(value));
                return;
            }
            if ((feature == "SERVICEUNITSENERGY"))
            {
                this.ServiceUnitsEnergy = ((float)(value));
                return;
            }
            if ((feature == "DIVERSEREFERENCE"))
            {
                this.DiverseReference = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            if ((attribute == "Line"))
            {
                return new LineProxy(this);
            }
            if ((attribute == "VendorShift"))
            {
                return new VendorShiftProxy(this);
            }
            if ((attribute == "CashierShift"))
            {
                return new CashierShiftProxy(this);
            }
            if ((attribute == "AuxiliaryAccount"))
            {
                return new AuxiliaryAccountProxy(this);
            }
            if ((attribute == "PricingStructure"))
            {
                return new PricingStructureProxy(this);
            }
            if ((attribute == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            if ((attribute == "Receipt"))
            {
                return new ReceiptProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            if ((reference == "Line"))
            {
                return new LineProxy(this);
            }
            if ((reference == "VendorShift"))
            {
                return new VendorShiftProxy(this);
            }
            if ((reference == "CashierShift"))
            {
                return new CashierShiftProxy(this);
            }
            if ((reference == "AuxiliaryAccount"))
            {
                return new AuxiliaryAccountProxy(this);
            }
            if ((reference == "PricingStructure"))
            {
                return new PricingStructureProxy(this);
            }
            if ((reference == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            if ((reference == "Receipt"))
            {
                return new ReceiptProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Transaction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transaction class
        /// </summary>
        public class TransactionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transaction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransactionReferencedElementsCollection(Transaction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UserAttributes.Count);
                    if ((this._parent.MeterAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Line != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VendorShift != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CashierShift != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AuxiliaryAccount != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PricingStructure != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerAccount != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Receipt != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeterAssetChanged += this.PropagateValueChanges;
                this._parent.LineChanged += this.PropagateValueChanges;
                this._parent.VendorShiftChanged += this.PropagateValueChanges;
                this._parent.CashierShiftChanged += this.PropagateValueChanges;
                this._parent.AuxiliaryAccountChanged += this.PropagateValueChanges;
                this._parent.PricingStructureChanged += this.PropagateValueChanges;
                this._parent.CustomerAccountChanged += this.PropagateValueChanges;
                this._parent.ReceiptChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeterAssetChanged -= this.PropagateValueChanges;
                this._parent.LineChanged -= this.PropagateValueChanges;
                this._parent.VendorShiftChanged -= this.PropagateValueChanges;
                this._parent.CashierShiftChanged -= this.PropagateValueChanges;
                this._parent.AuxiliaryAccountChanged -= this.PropagateValueChanges;
                this._parent.PricingStructureChanged -= this.PropagateValueChanges;
                this._parent.CustomerAccountChanged -= this.PropagateValueChanges;
                this._parent.ReceiptChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                if ((this._parent.MeterAsset == null))
                {
                    IMeterAsset meterAssetCasted = item.As<IMeterAsset>();
                    if ((meterAssetCasted != null))
                    {
                        this._parent.MeterAsset = meterAssetCasted;
                        return;
                    }
                }
                if ((this._parent.Line == null))
                {
                    ILineDetail lineCasted = item.As<ILineDetail>();
                    if ((lineCasted != null))
                    {
                        this._parent.Line = lineCasted;
                        return;
                    }
                }
                if ((this._parent.VendorShift == null))
                {
                    IVendorShift vendorShiftCasted = item.As<IVendorShift>();
                    if ((vendorShiftCasted != null))
                    {
                        this._parent.VendorShift = vendorShiftCasted;
                        return;
                    }
                }
                if ((this._parent.CashierShift == null))
                {
                    ICashierShift cashierShiftCasted = item.As<ICashierShift>();
                    if ((cashierShiftCasted != null))
                    {
                        this._parent.CashierShift = cashierShiftCasted;
                        return;
                    }
                }
                if ((this._parent.AuxiliaryAccount == null))
                {
                    IAuxiliaryAccount auxiliaryAccountCasted = item.As<IAuxiliaryAccount>();
                    if ((auxiliaryAccountCasted != null))
                    {
                        this._parent.AuxiliaryAccount = auxiliaryAccountCasted;
                        return;
                    }
                }
                if ((this._parent.PricingStructure == null))
                {
                    IPricingStructure pricingStructureCasted = item.As<IPricingStructure>();
                    if ((pricingStructureCasted != null))
                    {
                        this._parent.PricingStructure = pricingStructureCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerAccount == null))
                {
                    ICustomerAccount customerAccountCasted = item.As<ICustomerAccount>();
                    if ((customerAccountCasted != null))
                    {
                        this._parent.CustomerAccount = customerAccountCasted;
                        return;
                    }
                }
                if ((this._parent.Receipt == null))
                {
                    IReceipt receiptCasted = item.As<IReceipt>();
                    if ((receiptCasted != null))
                    {
                        this._parent.Receipt = receiptCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UserAttributes.Clear();
                this._parent.MeterAsset = null;
                this._parent.Line = null;
                this._parent.VendorShift = null;
                this._parent.CashierShift = null;
                this._parent.AuxiliaryAccount = null;
                this._parent.PricingStructure = null;
                this._parent.CustomerAccount = null;
                this._parent.Receipt = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MeterAsset))
                {
                    return true;
                }
                if ((item == this._parent.Line))
                {
                    return true;
                }
                if ((item == this._parent.VendorShift))
                {
                    return true;
                }
                if ((item == this._parent.CashierShift))
                {
                    return true;
                }
                if ((item == this._parent.AuxiliaryAccount))
                {
                    return true;
                }
                if ((item == this._parent.PricingStructure))
                {
                    return true;
                }
                if ((item == this._parent.CustomerAccount))
                {
                    return true;
                }
                if ((item == this._parent.Receipt))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                if ((this._parent.MeterAsset != null))
                {
                    array[arrayIndex] = this._parent.MeterAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Line != null))
                {
                    array[arrayIndex] = this._parent.Line;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VendorShift != null))
                {
                    array[arrayIndex] = this._parent.VendorShift;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CashierShift != null))
                {
                    array[arrayIndex] = this._parent.CashierShift;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AuxiliaryAccount != null))
                {
                    array[arrayIndex] = this._parent.AuxiliaryAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PricingStructure != null))
                {
                    array[arrayIndex] = this._parent.PricingStructure;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerAccount != null))
                {
                    array[arrayIndex] = this._parent.CustomerAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Receipt != null))
                {
                    array[arrayIndex] = this._parent.Receipt;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                if ((this._parent.MeterAsset == item))
                {
                    this._parent.MeterAsset = null;
                    return true;
                }
                if ((this._parent.Line == item))
                {
                    this._parent.Line = null;
                    return true;
                }
                if ((this._parent.VendorShift == item))
                {
                    this._parent.VendorShift = null;
                    return true;
                }
                if ((this._parent.CashierShift == item))
                {
                    this._parent.CashierShift = null;
                    return true;
                }
                if ((this._parent.AuxiliaryAccount == item))
                {
                    this._parent.AuxiliaryAccount = null;
                    return true;
                }
                if ((this._parent.PricingStructure == item))
                {
                    this._parent.PricingStructure = null;
                    return true;
                }
                if ((this._parent.CustomerAccount == item))
                {
                    this._parent.CustomerAccount = null;
                    return true;
                }
                if ((this._parent.Receipt == item))
                {
                    this._parent.Receipt = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UserAttributes).Concat(this._parent.MeterAsset).Concat(this._parent.Line).Concat(this._parent.VendorShift).Concat(this._parent.CashierShift).Concat(this._parent.AuxiliaryAccount).Concat(this._parent.PricingStructure).Concat(this._parent.CustomerAccount).Concat(this._parent.Receipt).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ITransaction, Nullable<TransactionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ITransaction modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TransactionKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceUnitsError property
        /// </summary>
        private sealed class ServiceUnitsErrorProxy : ModelPropertyChange<ITransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceUnitsErrorProxy(ITransaction modelElement) : 
                    base(modelElement, "serviceUnitsError")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ServiceUnitsError;
                }
                set
                {
                    this.ModelElement.ServiceUnitsError = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reversedId property
        /// </summary>
        private sealed class ReversedIdProxy : ModelPropertyChange<ITransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReversedIdProxy(ITransaction modelElement) : 
                    base(modelElement, "reversedId")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ReversedId;
                }
                set
                {
                    this.ModelElement.ReversedId = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receiverReference property
        /// </summary>
        private sealed class ReceiverReferenceProxy : ModelPropertyChange<ITransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiverReferenceProxy(ITransaction modelElement) : 
                    base(modelElement, "receiverReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ReceiverReference;
                }
                set
                {
                    this.ModelElement.ReceiverReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the donorReference property
        /// </summary>
        private sealed class DonorReferenceProxy : ModelPropertyChange<ITransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DonorReferenceProxy(ITransaction modelElement) : 
                    base(modelElement, "donorReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DonorReference;
                }
                set
                {
                    this.ModelElement.DonorReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceUnitsEnergy property
        /// </summary>
        private sealed class ServiceUnitsEnergyProxy : ModelPropertyChange<ITransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceUnitsEnergyProxy(ITransaction modelElement) : 
                    base(modelElement, "serviceUnitsEnergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ServiceUnitsEnergy;
                }
                set
                {
                    this.ModelElement.ServiceUnitsEnergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diverseReference property
        /// </summary>
        private sealed class DiverseReferenceProxy : ModelPropertyChange<ITransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiverseReferenceProxy(ITransaction modelElement) : 
                    base(modelElement, "diverseReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DiverseReference;
                }
                set
                {
                    this.ModelElement.DiverseReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterAsset property
        /// </summary>
        private sealed class MeterAssetProxy : ModelPropertyChange<ITransaction, IMeterAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterAssetProxy(ITransaction modelElement) : 
                    base(modelElement, "MeterAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterAsset Value
            {
                get
                {
                    return this.ModelElement.MeterAsset;
                }
                set
                {
                    this.ModelElement.MeterAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the line property
        /// </summary>
        private sealed class LineProxy : ModelPropertyChange<ITransaction, ILineDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineProxy(ITransaction modelElement) : 
                    base(modelElement, "line")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILineDetail Value
            {
                get
                {
                    return this.ModelElement.Line;
                }
                set
                {
                    this.ModelElement.Line = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VendorShift property
        /// </summary>
        private sealed class VendorShiftProxy : ModelPropertyChange<ITransaction, IVendorShift>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendorShiftProxy(ITransaction modelElement) : 
                    base(modelElement, "VendorShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVendorShift Value
            {
                get
                {
                    return this.ModelElement.VendorShift;
                }
                set
                {
                    this.ModelElement.VendorShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CashierShift property
        /// </summary>
        private sealed class CashierShiftProxy : ModelPropertyChange<ITransaction, ICashierShift>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CashierShiftProxy(ITransaction modelElement) : 
                    base(modelElement, "CashierShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICashierShift Value
            {
                get
                {
                    return this.ModelElement.CashierShift;
                }
                set
                {
                    this.ModelElement.CashierShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AuxiliaryAccount property
        /// </summary>
        private sealed class AuxiliaryAccountProxy : ModelPropertyChange<ITransaction, IAuxiliaryAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxiliaryAccountProxy(ITransaction modelElement) : 
                    base(modelElement, "AuxiliaryAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAuxiliaryAccount Value
            {
                get
                {
                    return this.ModelElement.AuxiliaryAccount;
                }
                set
                {
                    this.ModelElement.AuxiliaryAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PricingStructure property
        /// </summary>
        private sealed class PricingStructureProxy : ModelPropertyChange<ITransaction, IPricingStructure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PricingStructureProxy(ITransaction modelElement) : 
                    base(modelElement, "PricingStructure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPricingStructure Value
            {
                get
                {
                    return this.ModelElement.PricingStructure;
                }
                set
                {
                    this.ModelElement.PricingStructure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAccount property
        /// </summary>
        private sealed class CustomerAccountProxy : ModelPropertyChange<ITransaction, ICustomerAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAccountProxy(ITransaction modelElement) : 
                    base(modelElement, "CustomerAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAccount Value
            {
                get
                {
                    return this.ModelElement.CustomerAccount;
                }
                set
                {
                    this.ModelElement.CustomerAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Receipt property
        /// </summary>
        private sealed class ReceiptProxy : ModelPropertyChange<ITransaction, IReceipt>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptProxy(ITransaction modelElement) : 
                    base(modelElement, "Receipt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReceipt Value
            {
                get
                {
                    return this.ModelElement.Receipt;
                }
                set
                {
                    this.ModelElement.Receipt = value;
                }
            }
        }
    }
}

