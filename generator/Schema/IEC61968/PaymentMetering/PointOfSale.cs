//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the PointOfSale class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/PointOfSale")]
    [DebuggerDisplayAttribute("PointOfSale {UUID}")]
    public partial class PointOfSale : IdentifiedObject, IPointOfSale, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private string _location;
        
        private static Lazy<ITypedElement> _locationAttribute = new Lazy<ITypedElement>(RetrieveLocationAttribute);
        
        private static Lazy<ITypedElement> _tokensReference = new Lazy<ITypedElement>(RetrieveTokensReference);
        
        /// <summary>
        /// The backing field for the Tokens property
        /// </summary>
        private PointOfSaleTokensCollection _tokens;
        
        private static Lazy<ITypedElement> _cashierShiftsReference = new Lazy<ITypedElement>(RetrieveCashierShiftsReference);
        
        /// <summary>
        /// The backing field for the CashierShifts property
        /// </summary>
        private PointOfSaleCashierShiftsCollection _cashierShifts;
        
        private static Lazy<ITypedElement> _vendorReference = new Lazy<ITypedElement>(RetrieveVendorReference);
        
        /// <summary>
        /// The backing field for the Vendor property
        /// </summary>
        private IVendor _vendor;
        
        private static IClass _classInstance;
        
        public PointOfSale()
        {
            this._tokens = new PointOfSaleTokensCollection(this);
            this._tokens.CollectionChanging += this.TokensCollectionChanging;
            this._tokens.CollectionChanged += this.TokensCollectionChanged;
            this._cashierShifts = new PointOfSaleCashierShiftsCollection(this);
            this._cashierShifts.CollectionChanging += this.CashierShiftsCollectionChanging;
            this._cashierShifts.CollectionChanged += this.CashierShiftsCollectionChanged;
        }
        
        /// <summary>
        /// The location property
        /// </summary>
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        public virtual string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    string old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationAttribute);
                    this._location = value;
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Tokens property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PointOfSale")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IToken> Tokens
        {
            get
            {
                return this._tokens;
            }
        }
        
        /// <summary>
        /// The CashierShifts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PointOfSale")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICashierShift> CashierShifts
        {
            get
            {
                return this._cashierShifts;
            }
        }
        
        /// <summary>
        /// The Vendor property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PointOfSales")]
        public virtual IVendor Vendor
        {
            get
            {
                return this._vendor;
            }
            set
            {
                if ((this._vendor != value))
                {
                    IVendor old = this._vendor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendorChanging(e);
                    this.OnPropertyChanging("Vendor", e, _vendorReference);
                    this._vendor = value;
                    if ((old != null))
                    {
                        old.PointOfSales.Remove(this);
                        old.Deleted -= this.OnResetVendor;
                    }
                    if ((value != null))
                    {
                        value.PointOfSales.Add(this);
                        value.Deleted += this.OnResetVendor;
                    }
                    this.OnVendorChanged(e);
                    this.OnPropertyChanged("Vendor", e, _vendorReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PointOfSaleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/PointOfSale")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the Vendor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanging;
        
        /// <summary>
        /// Gets fired when the Vendor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanged;
        
        private static ITypedElement RetrieveLocationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PointOfSale.ClassInstance)).Resolve("location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTokensReference()
        {
            return ((ITypedElement)(((ModelElement)(PointOfSale.ClassInstance)).Resolve("Tokens")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Tokens property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TokensCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Tokens", e, _tokensReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Tokens property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TokensCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Tokens", e, _tokensReference);
        }
        
        private static ITypedElement RetrieveCashierShiftsReference()
        {
            return ((ITypedElement)(((ModelElement)(PointOfSale.ClassInstance)).Resolve("CashierShifts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CashierShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CashierShiftsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CashierShifts", e, _cashierShiftsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CashierShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CashierShiftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CashierShifts", e, _cashierShiftsReference);
        }
        
        private static ITypedElement RetrieveVendorReference()
        {
            return ((ITypedElement)(((ModelElement)(PointOfSale.ClassInstance)).Resolve("Vendor")));
        }
        
        /// <summary>
        /// Raises the VendorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Vendor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVendor(object sender, System.EventArgs eventArgs)
        {
            this.Vendor = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOCATION"))
            {
                return this.Location;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TOKENS"))
            {
                return this._tokens;
            }
            if ((feature == "CASHIERSHIFTS"))
            {
                return this._cashierShifts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VENDOR"))
            {
                this.Vendor = ((IVendor)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Vendor"))
            {
                return new VendorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Vendor"))
            {
                return new VendorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/PointOfSale")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PointOfSale class
        /// </summary>
        public class PointOfSaleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PointOfSale _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PointOfSaleReferencedElementsCollection(PointOfSale parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Tokens.Count);
                    count = (count + this._parent.CashierShifts.Count);
                    if ((this._parent.Vendor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Tokens.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CashierShifts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VendorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Tokens.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CashierShifts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VendorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IToken tokensCasted = item.As<IToken>();
                if ((tokensCasted != null))
                {
                    this._parent.Tokens.Add(tokensCasted);
                }
                ICashierShift cashierShiftsCasted = item.As<ICashierShift>();
                if ((cashierShiftsCasted != null))
                {
                    this._parent.CashierShifts.Add(cashierShiftsCasted);
                }
                if ((this._parent.Vendor == null))
                {
                    IVendor vendorCasted = item.As<IVendor>();
                    if ((vendorCasted != null))
                    {
                        this._parent.Vendor = vendorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Tokens.Clear();
                this._parent.CashierShifts.Clear();
                this._parent.Vendor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Tokens.Contains(item))
                {
                    return true;
                }
                if (this._parent.CashierShifts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Vendor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tokensEnumerator = this._parent.Tokens.GetEnumerator();
                try
                {
                    for (
                    ; tokensEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tokensEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tokensEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cashierShiftsEnumerator = this._parent.CashierShifts.GetEnumerator();
                try
                {
                    for (
                    ; cashierShiftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cashierShiftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cashierShiftsEnumerator.Dispose();
                }
                if ((this._parent.Vendor != null))
                {
                    array[arrayIndex] = this._parent.Vendor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IToken tokenItem = item.As<IToken>();
                if (((tokenItem != null) 
                            && this._parent.Tokens.Remove(tokenItem)))
                {
                    return true;
                }
                ICashierShift cashierShiftItem = item.As<ICashierShift>();
                if (((cashierShiftItem != null) 
                            && this._parent.CashierShifts.Remove(cashierShiftItem)))
                {
                    return true;
                }
                if ((this._parent.Vendor == item))
                {
                    this._parent.Vendor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Tokens).Concat(this._parent.CashierShifts).Concat(this._parent.Vendor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IPointOfSale, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IPointOfSale modelElement) : 
                    base(modelElement, "location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Vendor property
        /// </summary>
        private sealed class VendorProxy : ModelPropertyChange<IPointOfSale, IVendor>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendorProxy(IPointOfSale modelElement) : 
                    base(modelElement, "Vendor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVendor Value
            {
                get
                {
                    return this.ModelElement.Vendor;
                }
                set
                {
                    this.ModelElement.Vendor = value;
                }
            }
        }
    }
}

