//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the MerchantAccount class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/MerchantAccou" +
        "nt")]
    [DebuggerDisplayAttribute("MerchantAccount {UUID}")]
    public class MerchantAccount : Document, IMerchantAccount, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ProvisionalBalance property
        /// </summary>
        private float _provisionalBalance;
        
        /// <summary>
        /// The backing field for the CurrentBalance property
        /// </summary>
        private float _currentBalance;
        
        /// <summary>
        /// The backing field for the BankStatements property
        /// </summary>
        private MerchantAccountBankStatementsCollection _bankStatements;
        
        /// <summary>
        /// The backing field for the MerchantAgreement property
        /// </summary>
        private IMerchantAgreement _merchantAgreement;
        
        /// <summary>
        /// The backing field for the Transactors property
        /// </summary>
        private MerchantAccountTransactorsCollection _transactors;
        
        /// <summary>
        /// The backing field for the Vendors property
        /// </summary>
        private MerchantAccountVendorsCollection _vendors;
        
        /// <summary>
        /// The backing field for the VendorShifts property
        /// </summary>
        private MerchantAccountVendorShiftsCollection _vendorShifts;
        
        private static IClass _classInstance;
        
        public MerchantAccount()
        {
            this._bankStatements = new MerchantAccountBankStatementsCollection(this);
            this._bankStatements.CollectionChanging += this.BankStatementsCollectionChanging;
            this._bankStatements.CollectionChanged += this.BankStatementsCollectionChanged;
            this._transactors = new MerchantAccountTransactorsCollection(this);
            this._transactors.CollectionChanging += this.TransactorsCollectionChanging;
            this._transactors.CollectionChanged += this.TransactorsCollectionChanged;
            this._vendors = new MerchantAccountVendorsCollection(this);
            this._vendors.CollectionChanging += this.VendorsCollectionChanging;
            this._vendors.CollectionChanged += this.VendorsCollectionChanged;
            this._vendorShifts = new MerchantAccountVendorShiftsCollection(this);
            this._vendorShifts.CollectionChanging += this.VendorShiftsCollectionChanging;
            this._vendorShifts.CollectionChanged += this.VendorShiftsCollectionChanged;
        }
        
        /// <summary>
        /// The provisionalBalance property
        /// </summary>
        [XmlElementNameAttribute("provisionalBalance")]
        [XmlAttributeAttribute(true)]
        public virtual float ProvisionalBalance
        {
            get
            {
                return this._provisionalBalance;
            }
            set
            {
                if ((this._provisionalBalance != value))
                {
                    float old = this._provisionalBalance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProvisionalBalanceChanging(e);
                    this.OnPropertyChanging("ProvisionalBalance", e);
                    this._provisionalBalance = value;
                    this.OnProvisionalBalanceChanged(e);
                    this.OnPropertyChanged("ProvisionalBalance", e);
                }
            }
        }
        
        /// <summary>
        /// The currentBalance property
        /// </summary>
        [XmlElementNameAttribute("currentBalance")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentBalance
        {
            get
            {
                return this._currentBalance;
            }
            set
            {
                if ((this._currentBalance != value))
                {
                    float old = this._currentBalance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentBalanceChanging(e);
                    this.OnPropertyChanging("CurrentBalance", e);
                    this._currentBalance = value;
                    this.OnCurrentBalanceChanged(e);
                    this.OnPropertyChanged("CurrentBalance", e);
                }
            }
        }
        
        /// <summary>
        /// The BankStatements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MerchantAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBankStatement> BankStatements
        {
            get
            {
                return this._bankStatements;
            }
        }
        
        /// <summary>
        /// The MerchantAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MerchantAccounts")]
        public virtual IMerchantAgreement MerchantAgreement
        {
            get
            {
                return this._merchantAgreement;
            }
            set
            {
                if ((this._merchantAgreement != value))
                {
                    IMerchantAgreement old = this._merchantAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMerchantAgreementChanging(e);
                    this.OnPropertyChanging("MerchantAgreement", e);
                    this._merchantAgreement = value;
                    if ((old != null))
                    {
                        old.MerchantAccounts.Remove(this);
                        old.Deleted -= this.OnResetMerchantAgreement;
                    }
                    if ((value != null))
                    {
                        value.MerchantAccounts.Add(this);
                        value.Deleted += this.OnResetMerchantAgreement;
                    }
                    this.OnMerchantAgreementChanged(e);
                    this.OnPropertyChanged("MerchantAgreement", e);
                }
            }
        }
        
        /// <summary>
        /// The Transactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MerchantAccounts")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransactor> Transactors
        {
            get
            {
                return this._transactors;
            }
        }
        
        /// <summary>
        /// The Vendors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MerchantAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVendor> Vendors
        {
            get
            {
                return this._vendors;
            }
        }
        
        /// <summary>
        /// The VendorShifts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MerchantAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVendorShift> VendorShifts
        {
            get
            {
                return this._vendorShifts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MerchantAccountReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/MerchantAccou" +
                            "nt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ProvisionalBalance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProvisionalBalanceChanging;
        
        /// <summary>
        /// Gets fired when the ProvisionalBalance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProvisionalBalanceChanged;
        
        /// <summary>
        /// Gets fired before the CurrentBalance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentBalanceChanging;
        
        /// <summary>
        /// Gets fired when the CurrentBalance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentBalanceChanged;
        
        /// <summary>
        /// Gets fired before the MerchantAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAgreementChanging;
        
        /// <summary>
        /// Gets fired when the MerchantAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAgreementChanged;
        
        /// <summary>
        /// Raises the ProvisionalBalanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvisionalBalanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProvisionalBalanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProvisionalBalanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvisionalBalanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProvisionalBalanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentBalanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentBalanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentBalanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentBalanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentBalanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentBalanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BankStatements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BankStatements", e);
        }
        
        /// <summary>
        /// Raises the MerchantAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MerchantAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MerchantAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMerchantAgreement(object sender, System.EventArgs eventArgs)
        {
            this.MerchantAgreement = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Transactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Vendors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Vendors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Vendors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Vendors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VendorShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorShiftsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("VendorShifts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VendorShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorShiftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VendorShifts", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PROVISIONALBALANCE"))
            {
                return this.ProvisionalBalance;
            }
            if ((attribute == "CURRENTBALANCE"))
            {
                return this.CurrentBalance;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BANKSTATEMENTS"))
            {
                return this._bankStatements;
            }
            if ((feature == "TRANSACTORS"))
            {
                return this._transactors;
            }
            if ((feature == "VENDORS"))
            {
                return this._vendors;
            }
            if ((feature == "VENDORSHIFTS"))
            {
                return this._vendorShifts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MERCHANTAGREEMENT"))
            {
                this.MerchantAgreement = ((IMerchantAgreement)(value));
                return;
            }
            if ((feature == "PROVISIONALBALANCE"))
            {
                this.ProvisionalBalance = ((float)(value));
                return;
            }
            if ((feature == "CURRENTBALANCE"))
            {
                this.CurrentBalance = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MerchantAgreement"))
            {
                return new MerchantAgreementProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MerchantAgreement"))
            {
                return new MerchantAgreementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/MerchantAccou" +
                        "nt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MerchantAccount class
        /// </summary>
        public class MerchantAccountReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MerchantAccount _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MerchantAccountReferencedElementsCollection(MerchantAccount parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BankStatements.Count);
                    if ((this._parent.MerchantAgreement != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Transactors.Count);
                    count = (count + this._parent.Vendors.Count);
                    count = (count + this._parent.VendorShifts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BankStatements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MerchantAgreementChanged += this.PropagateValueChanges;
                this._parent.Transactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Vendors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VendorShifts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BankStatements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MerchantAgreementChanged -= this.PropagateValueChanges;
                this._parent.Transactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Vendors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VendorShifts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBankStatement bankStatementsCasted = item.As<IBankStatement>();
                if ((bankStatementsCasted != null))
                {
                    this._parent.BankStatements.Add(bankStatementsCasted);
                }
                if ((this._parent.MerchantAgreement == null))
                {
                    IMerchantAgreement merchantAgreementCasted = item.As<IMerchantAgreement>();
                    if ((merchantAgreementCasted != null))
                    {
                        this._parent.MerchantAgreement = merchantAgreementCasted;
                        return;
                    }
                }
                ITransactor transactorsCasted = item.As<ITransactor>();
                if ((transactorsCasted != null))
                {
                    this._parent.Transactors.Add(transactorsCasted);
                }
                IVendor vendorsCasted = item.As<IVendor>();
                if ((vendorsCasted != null))
                {
                    this._parent.Vendors.Add(vendorsCasted);
                }
                IVendorShift vendorShiftsCasted = item.As<IVendorShift>();
                if ((vendorShiftsCasted != null))
                {
                    this._parent.VendorShifts.Add(vendorShiftsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BankStatements.Clear();
                this._parent.MerchantAgreement = null;
                this._parent.Transactors.Clear();
                this._parent.Vendors.Clear();
                this._parent.VendorShifts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.BankStatements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MerchantAgreement))
                {
                    return true;
                }
                if (this._parent.Transactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.Vendors.Contains(item))
                {
                    return true;
                }
                if (this._parent.VendorShifts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> bankStatementsEnumerator = this._parent.BankStatements.GetEnumerator();
                try
                {
                    for (
                    ; bankStatementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bankStatementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bankStatementsEnumerator.Dispose();
                }
                if ((this._parent.MerchantAgreement != null))
                {
                    array[arrayIndex] = this._parent.MerchantAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transactorsEnumerator = this._parent.Transactors.GetEnumerator();
                try
                {
                    for (
                    ; transactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vendorsEnumerator = this._parent.Vendors.GetEnumerator();
                try
                {
                    for (
                    ; vendorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vendorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vendorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vendorShiftsEnumerator = this._parent.VendorShifts.GetEnumerator();
                try
                {
                    for (
                    ; vendorShiftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vendorShiftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vendorShiftsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBankStatement bankStatementItem = item.As<IBankStatement>();
                if (((bankStatementItem != null) 
                            && this._parent.BankStatements.Remove(bankStatementItem)))
                {
                    return true;
                }
                if ((this._parent.MerchantAgreement == item))
                {
                    this._parent.MerchantAgreement = null;
                    return true;
                }
                ITransactor transactorItem = item.As<ITransactor>();
                if (((transactorItem != null) 
                            && this._parent.Transactors.Remove(transactorItem)))
                {
                    return true;
                }
                IVendor vendorItem = item.As<IVendor>();
                if (((vendorItem != null) 
                            && this._parent.Vendors.Remove(vendorItem)))
                {
                    return true;
                }
                IVendorShift vendorShiftItem = item.As<IVendorShift>();
                if (((vendorShiftItem != null) 
                            && this._parent.VendorShifts.Remove(vendorShiftItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BankStatements).Concat(this._parent.MerchantAgreement).Concat(this._parent.Transactors).Concat(this._parent.Vendors).Concat(this._parent.VendorShifts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the provisionalBalance property
        /// </summary>
        private sealed class ProvisionalBalanceProxy : ModelPropertyChange<IMerchantAccount, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProvisionalBalanceProxy(IMerchantAccount modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ProvisionalBalance;
                }
                set
                {
                    this.ModelElement.ProvisionalBalance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvisionalBalanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvisionalBalanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentBalance property
        /// </summary>
        private sealed class CurrentBalanceProxy : ModelPropertyChange<IMerchantAccount, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentBalanceProxy(IMerchantAccount modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentBalance;
                }
                set
                {
                    this.ModelElement.CurrentBalance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentBalanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentBalanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MerchantAgreement property
        /// </summary>
        private sealed class MerchantAgreementProxy : ModelPropertyChange<IMerchantAccount, IMerchantAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MerchantAgreementProxy(IMerchantAccount modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMerchantAgreement Value
            {
                get
                {
                    return this.ModelElement.MerchantAgreement;
                }
                set
                {
                    this.ModelElement.MerchantAgreement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MerchantAgreementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MerchantAgreementChanged -= handler;
            }
        }
    }
}

