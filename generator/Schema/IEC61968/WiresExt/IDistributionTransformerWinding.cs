//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The public interface for DistributionTransformerWinding
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DistributionTransformerWinding))]
    [XmlDefaultImplementationTypeAttribute(typeof(DistributionTransformerWinding))]
    public interface IDistributionTransformerWinding : IModelElement, IConductingEquipment
    {
        
        /// <summary>
        /// The grounded property
        /// </summary>
        bool Grounded
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xground property
        /// </summary>
        float Xground
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rground property
        /// </summary>
        float Rground
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromWindingInsulations property
        /// </summary>
        IOrderedSetExpression<IWindingInsulation> FromWindingInsulations
        {
            get;
        }
        
        /// <summary>
        /// The RatioTapChanger property
        /// </summary>
        IRatioTapChanger RatioTapChanger
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PhaseTapChanger property
        /// </summary>
        IPhaseTapChanger PhaseTapChanger
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PiImpedance property
        /// </summary>
        IWindingPiImpedance PiImpedance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ToWindingInsulations property
        /// </summary>
        IOrderedSetExpression<IWindingInsulation> ToWindingInsulations
        {
            get;
        }
        
        /// <summary>
        /// The Transformer property
        /// </summary>
        IDistributionTransformer Transformer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The WindingInfo property
        /// </summary>
        IWindingInfo WindingInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the Xground property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XgroundChanging;
        
        /// <summary>
        /// Gets fired when the Xground property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XgroundChanged;
        
        /// <summary>
        /// Gets fired before the Rground property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RgroundChanging;
        
        /// <summary>
        /// Gets fired when the Rground property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RgroundChanged;
        
        /// <summary>
        /// Gets fired before the RatioTapChanger property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the RatioTapChanger property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PhaseTapChanger property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the PhaseTapChanger property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PiImpedance property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PiImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the PiImpedance property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PiImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the Transformer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransformerChanging;
        
        /// <summary>
        /// Gets fired when the Transformer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransformerChanged;
        
        /// <summary>
        /// Gets fired before the WindingInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindingInfoChanging;
        
        /// <summary>
        /// Gets fired when the WindingInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindingInfoChanged;
    }
}

