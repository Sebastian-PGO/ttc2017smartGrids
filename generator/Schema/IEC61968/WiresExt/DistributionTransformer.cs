//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The default implementation of the DistributionTransformer class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#WiresExt")]
    [XmlNamespacePrefixAttribute("cimWiresExt")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
        "mer")]
    [DebuggerDisplayAttribute("DistributionTransformer {UUID}")]
    public partial class DistributionTransformer : Equipment, IDistributionTransformer, IModelElement
    {
        
        private static Lazy<ITypedElement> _transformerBankReference = new Lazy<ITypedElement>(RetrieveTransformerBankReference);
        
        /// <summary>
        /// The backing field for the TransformerBank property
        /// </summary>
        private ITransformerBank _transformerBank;
        
        private static Lazy<ITypedElement> _transformerObservationsReference = new Lazy<ITypedElement>(RetrieveTransformerObservationsReference);
        
        /// <summary>
        /// The backing field for the TransformerObservations property
        /// </summary>
        private DistributionTransformerTransformerObservationsCollection _transformerObservations;
        
        private static Lazy<ITypedElement> _transformerInfoReference = new Lazy<ITypedElement>(RetrieveTransformerInfoReference);
        
        /// <summary>
        /// The backing field for the TransformerInfo property
        /// </summary>
        private ITransformerInfo _transformerInfo;
        
        private static Lazy<ITypedElement> _serviceDeliveryPointsReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointsReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private DistributionTransformerServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        private static Lazy<ITypedElement> _windingsReference = new Lazy<ITypedElement>(RetrieveWindingsReference);
        
        /// <summary>
        /// The backing field for the Windings property
        /// </summary>
        private DistributionTransformerWindingsCollection _windings;
        
        private static IClass _classInstance;
        
        public DistributionTransformer()
        {
            this._transformerObservations = new DistributionTransformerTransformerObservationsCollection(this);
            this._transformerObservations.CollectionChanging += this.TransformerObservationsCollectionChanging;
            this._transformerObservations.CollectionChanged += this.TransformerObservationsCollectionChanged;
            this._serviceDeliveryPoints = new DistributionTransformerServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
            this._windings = new DistributionTransformerWindingsCollection(this);
            this._windings.CollectionChanging += this.WindingsCollectionChanging;
            this._windings.CollectionChanged += this.WindingsCollectionChanged;
        }
        
        /// <summary>
        /// The TransformerBank property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transformers")]
        public virtual ITransformerBank TransformerBank
        {
            get
            {
                return this._transformerBank;
            }
            set
            {
                if ((this._transformerBank != value))
                {
                    ITransformerBank old = this._transformerBank;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerBankChanging(e);
                    this.OnPropertyChanging("TransformerBank", e, _transformerBankReference);
                    this._transformerBank = value;
                    if ((old != null))
                    {
                        old.Transformers.Remove(this);
                        old.Deleted -= this.OnResetTransformerBank;
                    }
                    if ((value != null))
                    {
                        value.Transformers.Add(this);
                        value.Deleted += this.OnResetTransformerBank;
                    }
                    this.OnTransformerBankChanged(e);
                    this.OnPropertyChanged("TransformerBank", e, _transformerBankReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerObservations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transformer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransformerObservation> TransformerObservations
        {
            get
            {
                return this._transformerObservations;
            }
        }
        
        /// <summary>
        /// The TransformerInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transformers")]
        public virtual ITransformerInfo TransformerInfo
        {
            get
            {
                return this._transformerInfo;
            }
            set
            {
                if ((this._transformerInfo != value))
                {
                    ITransformerInfo old = this._transformerInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerInfoChanging(e);
                    this.OnPropertyChanging("TransformerInfo", e, _transformerInfoReference);
                    this._transformerInfo = value;
                    if ((old != null))
                    {
                        old.Transformers.Remove(this);
                        old.Deleted -= this.OnResetTransformerInfo;
                    }
                    if ((value != null))
                    {
                        value.Transformers.Add(this);
                        value.Deleted += this.OnResetTransformerInfo;
                    }
                    this.OnTransformerInfoChanged(e);
                    this.OnPropertyChanged("TransformerInfo", e, _transformerInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transformer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// The Windings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Transformer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDistributionTransformerWinding> Windings
        {
            get
            {
                return this._windings;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DistributionTransformerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
                            "mer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TransformerBank property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerBankChanging;
        
        /// <summary>
        /// Gets fired when the TransformerBank property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerBankChanged;
        
        /// <summary>
        /// Gets fired before the TransformerInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanging;
        
        /// <summary>
        /// Gets fired when the TransformerInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanged;
        
        private static ITypedElement RetrieveTransformerBankReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformer.ClassInstance)).Resolve("TransformerBank")));
        }
        
        /// <summary>
        /// Raises the TransformerBankChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerBankChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerBankChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerBankChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerBankChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerBankChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerBank property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerBank(object sender, System.EventArgs eventArgs)
        {
            this.TransformerBank = null;
        }
        
        private static ITypedElement RetrieveTransformerObservationsReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformer.ClassInstance)).Resolve("TransformerObservations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransformerObservations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerObservationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TransformerObservations", e, _transformerObservationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransformerObservations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerObservationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransformerObservations", e, _transformerObservationsReference);
        }
        
        private static ITypedElement RetrieveTransformerInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformer.ClassInstance)).Resolve("TransformerInfo")));
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerInfo(object sender, System.EventArgs eventArgs)
        {
            this.TransformerInfo = null;
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformer.ClassInstance)).Resolve("ServiceDeliveryPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        private static ITypedElement RetrieveWindingsReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformer.ClassInstance)).Resolve("Windings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Windings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Windings", e, _windingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Windings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Windings", e, _windingsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSFORMEROBSERVATIONS"))
            {
                return this._transformerObservations;
            }
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            if ((feature == "WINDINGS"))
            {
                return this._windings;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMERBANK"))
            {
                this.TransformerBank = ((ITransformerBank)(value));
                return;
            }
            if ((feature == "TRANSFORMERINFO"))
            {
                this.TransformerInfo = ((ITransformerInfo)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransformerBank"))
            {
                return new TransformerBankProxy(this);
            }
            if ((attribute == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransformerBank"))
            {
                return new TransformerBankProxy(this);
            }
            if ((reference == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
                        "mer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DistributionTransformer class
        /// </summary>
        public class DistributionTransformerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DistributionTransformer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DistributionTransformerReferencedElementsCollection(DistributionTransformer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TransformerBank != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TransformerObservations.Count);
                    if ((this._parent.TransformerInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    count = (count + this._parent.Windings.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransformerBankChanged += this.PropagateValueChanges;
                this._parent.TransformerObservations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransformerInfoChanged += this.PropagateValueChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Windings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransformerBankChanged -= this.PropagateValueChanges;
                this._parent.TransformerObservations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransformerInfoChanged -= this.PropagateValueChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Windings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TransformerBank == null))
                {
                    ITransformerBank transformerBankCasted = item.As<ITransformerBank>();
                    if ((transformerBankCasted != null))
                    {
                        this._parent.TransformerBank = transformerBankCasted;
                        return;
                    }
                }
                ITransformerObservation transformerObservationsCasted = item.As<ITransformerObservation>();
                if ((transformerObservationsCasted != null))
                {
                    this._parent.TransformerObservations.Add(transformerObservationsCasted);
                }
                if ((this._parent.TransformerInfo == null))
                {
                    ITransformerInfo transformerInfoCasted = item.As<ITransformerInfo>();
                    if ((transformerInfoCasted != null))
                    {
                        this._parent.TransformerInfo = transformerInfoCasted;
                        return;
                    }
                }
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
                IDistributionTransformerWinding windingsCasted = item.As<IDistributionTransformerWinding>();
                if ((windingsCasted != null))
                {
                    this._parent.Windings.Add(windingsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransformerBank = null;
                this._parent.TransformerObservations.Clear();
                this._parent.TransformerInfo = null;
                this._parent.ServiceDeliveryPoints.Clear();
                this._parent.Windings.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TransformerBank))
                {
                    return true;
                }
                if (this._parent.TransformerObservations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TransformerInfo))
                {
                    return true;
                }
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                if (this._parent.Windings.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TransformerBank != null))
                {
                    array[arrayIndex] = this._parent.TransformerBank;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transformerObservationsEnumerator = this._parent.TransformerObservations.GetEnumerator();
                try
                {
                    for (
                    ; transformerObservationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transformerObservationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transformerObservationsEnumerator.Dispose();
                }
                if ((this._parent.TransformerInfo != null))
                {
                    array[arrayIndex] = this._parent.TransformerInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> windingsEnumerator = this._parent.Windings.GetEnumerator();
                try
                {
                    for (
                    ; windingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = windingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    windingsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TransformerBank == item))
                {
                    this._parent.TransformerBank = null;
                    return true;
                }
                ITransformerObservation transformerObservationItem = item.As<ITransformerObservation>();
                if (((transformerObservationItem != null) 
                            && this._parent.TransformerObservations.Remove(transformerObservationItem)))
                {
                    return true;
                }
                if ((this._parent.TransformerInfo == item))
                {
                    this._parent.TransformerInfo = null;
                    return true;
                }
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                IDistributionTransformerWinding distributionTransformerWindingItem = item.As<IDistributionTransformerWinding>();
                if (((distributionTransformerWindingItem != null) 
                            && this._parent.Windings.Remove(distributionTransformerWindingItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransformerBank).Concat(this._parent.TransformerObservations).Concat(this._parent.TransformerInfo).Concat(this._parent.ServiceDeliveryPoints).Concat(this._parent.Windings).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerBank property
        /// </summary>
        private sealed class TransformerBankProxy : ModelPropertyChange<IDistributionTransformer, ITransformerBank>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerBankProxy(IDistributionTransformer modelElement) : 
                    base(modelElement, "TransformerBank")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerBank Value
            {
                get
                {
                    return this.ModelElement.TransformerBank;
                }
                set
                {
                    this.ModelElement.TransformerBank = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerInfo property
        /// </summary>
        private sealed class TransformerInfoProxy : ModelPropertyChange<IDistributionTransformer, ITransformerInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerInfoProxy(IDistributionTransformer modelElement) : 
                    base(modelElement, "TransformerInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerInfo Value
            {
                get
                {
                    return this.ModelElement.TransformerInfo;
                }
                set
                {
                    this.ModelElement.TransformerInfo = value;
                }
            }
        }
    }
}

