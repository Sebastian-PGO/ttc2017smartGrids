//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The default implementation of the DistributionTransformerWinding class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#WiresExt")]
    [XmlNamespacePrefixAttribute("cimWiresExt")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
        "merWinding")]
    [DebuggerDisplayAttribute("DistributionTransformerWinding {UUID}")]
    public partial class DistributionTransformerWinding : ConductingEquipment, IDistributionTransformerWinding, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Grounded property
        /// </summary>
        private bool _grounded;
        
        private static Lazy<ITypedElement> _groundedAttribute = new Lazy<ITypedElement>(RetrieveGroundedAttribute);
        
        /// <summary>
        /// The backing field for the Xground property
        /// </summary>
        private float _xground;
        
        private static Lazy<ITypedElement> _xgroundAttribute = new Lazy<ITypedElement>(RetrieveXgroundAttribute);
        
        /// <summary>
        /// The backing field for the Rground property
        /// </summary>
        private float _rground;
        
        private static Lazy<ITypedElement> _rgroundAttribute = new Lazy<ITypedElement>(RetrieveRgroundAttribute);
        
        private static Lazy<ITypedElement> _fromWindingInsulationsReference = new Lazy<ITypedElement>(RetrieveFromWindingInsulationsReference);
        
        /// <summary>
        /// The backing field for the FromWindingInsulations property
        /// </summary>
        private DistributionTransformerWindingFromWindingInsulationsCollection _fromWindingInsulations;
        
        private static Lazy<ITypedElement> _ratioTapChangerReference = new Lazy<ITypedElement>(RetrieveRatioTapChangerReference);
        
        /// <summary>
        /// The backing field for the RatioTapChanger property
        /// </summary>
        private IRatioTapChanger _ratioTapChanger;
        
        private static Lazy<ITypedElement> _phaseTapChangerReference = new Lazy<ITypedElement>(RetrievePhaseTapChangerReference);
        
        /// <summary>
        /// The backing field for the PhaseTapChanger property
        /// </summary>
        private IPhaseTapChanger _phaseTapChanger;
        
        private static Lazy<ITypedElement> _piImpedanceReference = new Lazy<ITypedElement>(RetrievePiImpedanceReference);
        
        /// <summary>
        /// The backing field for the PiImpedance property
        /// </summary>
        private IWindingPiImpedance _piImpedance;
        
        private static Lazy<ITypedElement> _toWindingInsulationsReference = new Lazy<ITypedElement>(RetrieveToWindingInsulationsReference);
        
        /// <summary>
        /// The backing field for the ToWindingInsulations property
        /// </summary>
        private DistributionTransformerWindingToWindingInsulationsCollection _toWindingInsulations;
        
        private static Lazy<ITypedElement> _transformerReference = new Lazy<ITypedElement>(RetrieveTransformerReference);
        
        /// <summary>
        /// The backing field for the Transformer property
        /// </summary>
        private IDistributionTransformer _transformer;
        
        private static Lazy<ITypedElement> _windingInfoReference = new Lazy<ITypedElement>(RetrieveWindingInfoReference);
        
        /// <summary>
        /// The backing field for the WindingInfo property
        /// </summary>
        private IWindingInfo _windingInfo;
        
        private static IClass _classInstance;
        
        public DistributionTransformerWinding()
        {
            this._fromWindingInsulations = new DistributionTransformerWindingFromWindingInsulationsCollection(this);
            this._fromWindingInsulations.CollectionChanging += this.FromWindingInsulationsCollectionChanging;
            this._fromWindingInsulations.CollectionChanged += this.FromWindingInsulationsCollectionChanged;
            this._toWindingInsulations = new DistributionTransformerWindingToWindingInsulationsCollection(this);
            this._toWindingInsulations.CollectionChanging += this.ToWindingInsulationsCollectionChanging;
            this._toWindingInsulations.CollectionChanged += this.ToWindingInsulationsCollectionChanged;
        }
        
        /// <summary>
        /// The grounded property
        /// </summary>
        [XmlElementNameAttribute("grounded")]
        [XmlAttributeAttribute(true)]
        public virtual bool Grounded
        {
            get
            {
                return this._grounded;
            }
            set
            {
                if ((this._grounded != value))
                {
                    bool old = this._grounded;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroundedChanging(e);
                    this.OnPropertyChanging("Grounded", e, _groundedAttribute);
                    this._grounded = value;
                    this.OnGroundedChanged(e);
                    this.OnPropertyChanged("Grounded", e, _groundedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xground property
        /// </summary>
        [XmlElementNameAttribute("xground")]
        [XmlAttributeAttribute(true)]
        public virtual float Xground
        {
            get
            {
                return this._xground;
            }
            set
            {
                if ((this._xground != value))
                {
                    float old = this._xground;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXgroundChanging(e);
                    this.OnPropertyChanging("Xground", e, _xgroundAttribute);
                    this._xground = value;
                    this.OnXgroundChanged(e);
                    this.OnPropertyChanged("Xground", e, _xgroundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rground property
        /// </summary>
        [XmlElementNameAttribute("rground")]
        [XmlAttributeAttribute(true)]
        public virtual float Rground
        {
            get
            {
                return this._rground;
            }
            set
            {
                if ((this._rground != value))
                {
                    float old = this._rground;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRgroundChanging(e);
                    this.OnPropertyChanging("Rground", e, _rgroundAttribute);
                    this._rground = value;
                    this.OnRgroundChanged(e);
                    this.OnPropertyChanged("Rground", e, _rgroundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The FromWindingInsulations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FromWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWindingInsulation> FromWindingInsulations
        {
            get
            {
                return this._fromWindingInsulations;
            }
        }
        
        /// <summary>
        /// The RatioTapChanger property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Winding")]
        public virtual IRatioTapChanger RatioTapChanger
        {
            get
            {
                return this._ratioTapChanger;
            }
            set
            {
                if ((this._ratioTapChanger != value))
                {
                    IRatioTapChanger old = this._ratioTapChanger;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatioTapChangerChanging(e);
                    this.OnPropertyChanging("RatioTapChanger", e, _ratioTapChangerReference);
                    this._ratioTapChanger = value;
                    if ((old != null))
                    {
                        old.Winding = null;
                        old.Deleted -= this.OnResetRatioTapChanger;
                    }
                    if ((value != null))
                    {
                        value.Winding = this;
                        value.Deleted += this.OnResetRatioTapChanger;
                    }
                    this.OnRatioTapChangerChanged(e);
                    this.OnPropertyChanged("RatioTapChanger", e, _ratioTapChangerReference);
                }
            }
        }
        
        /// <summary>
        /// The PhaseTapChanger property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Winding")]
        public virtual IPhaseTapChanger PhaseTapChanger
        {
            get
            {
                return this._phaseTapChanger;
            }
            set
            {
                if ((this._phaseTapChanger != value))
                {
                    IPhaseTapChanger old = this._phaseTapChanger;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseTapChangerChanging(e);
                    this.OnPropertyChanging("PhaseTapChanger", e, _phaseTapChangerReference);
                    this._phaseTapChanger = value;
                    if ((old != null))
                    {
                        old.Winding = null;
                        old.Deleted -= this.OnResetPhaseTapChanger;
                    }
                    if ((value != null))
                    {
                        value.Winding = this;
                        value.Deleted += this.OnResetPhaseTapChanger;
                    }
                    this.OnPhaseTapChangerChanged(e);
                    this.OnPropertyChanged("PhaseTapChanger", e, _phaseTapChangerReference);
                }
            }
        }
        
        /// <summary>
        /// The PiImpedance property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Windings")]
        public virtual IWindingPiImpedance PiImpedance
        {
            get
            {
                return this._piImpedance;
            }
            set
            {
                if ((this._piImpedance != value))
                {
                    IWindingPiImpedance old = this._piImpedance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPiImpedanceChanging(e);
                    this.OnPropertyChanging("PiImpedance", e, _piImpedanceReference);
                    this._piImpedance = value;
                    if ((old != null))
                    {
                        old.Windings.Remove(this);
                        old.Deleted -= this.OnResetPiImpedance;
                    }
                    if ((value != null))
                    {
                        value.Windings.Add(this);
                        value.Deleted += this.OnResetPiImpedance;
                    }
                    this.OnPiImpedanceChanged(e);
                    this.OnPropertyChanged("PiImpedance", e, _piImpedanceReference);
                }
            }
        }
        
        /// <summary>
        /// The ToWindingInsulations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWindingInsulation> ToWindingInsulations
        {
            get
            {
                return this._toWindingInsulations;
            }
        }
        
        /// <summary>
        /// The Transformer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Windings")]
        public virtual IDistributionTransformer Transformer
        {
            get
            {
                return this._transformer;
            }
            set
            {
                if ((this._transformer != value))
                {
                    IDistributionTransformer old = this._transformer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerChanging(e);
                    this.OnPropertyChanging("Transformer", e, _transformerReference);
                    this._transformer = value;
                    if ((old != null))
                    {
                        old.Windings.Remove(this);
                        old.Deleted -= this.OnResetTransformer;
                    }
                    if ((value != null))
                    {
                        value.Windings.Add(this);
                        value.Deleted += this.OnResetTransformer;
                    }
                    this.OnTransformerChanged(e);
                    this.OnPropertyChanged("Transformer", e, _transformerReference);
                }
            }
        }
        
        /// <summary>
        /// The WindingInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Windings")]
        public virtual IWindingInfo WindingInfo
        {
            get
            {
                return this._windingInfo;
            }
            set
            {
                if ((this._windingInfo != value))
                {
                    IWindingInfo old = this._windingInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingInfoChanging(e);
                    this.OnPropertyChanging("WindingInfo", e, _windingInfoReference);
                    this._windingInfo = value;
                    if ((old != null))
                    {
                        old.Windings.Remove(this);
                        old.Deleted -= this.OnResetWindingInfo;
                    }
                    if ((value != null))
                    {
                        value.Windings.Add(this);
                        value.Deleted += this.OnResetWindingInfo;
                    }
                    this.OnWindingInfoChanged(e);
                    this.OnPropertyChanged("WindingInfo", e, _windingInfoReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DistributionTransformerWindingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
                            "merWinding")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the Xground property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XgroundChanging;
        
        /// <summary>
        /// Gets fired when the Xground property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XgroundChanged;
        
        /// <summary>
        /// Gets fired before the Rground property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RgroundChanging;
        
        /// <summary>
        /// Gets fired when the Rground property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RgroundChanged;
        
        /// <summary>
        /// Gets fired before the RatioTapChanger property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the RatioTapChanger property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PhaseTapChanger property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the PhaseTapChanger property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PiImpedance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PiImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the PiImpedance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PiImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the Transformer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanging;
        
        /// <summary>
        /// Gets fired when the Transformer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanged;
        
        /// <summary>
        /// Gets fired before the WindingInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingInfoChanging;
        
        /// <summary>
        /// Gets fired when the WindingInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingInfoChanged;
        
        private static ITypedElement RetrieveGroundedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("grounded")));
        }
        
        /// <summary>
        /// Raises the GroundedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXgroundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("xground")));
        }
        
        /// <summary>
        /// Raises the XgroundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXgroundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XgroundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XgroundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXgroundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XgroundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRgroundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("rground")));
        }
        
        /// <summary>
        /// Raises the RgroundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRgroundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RgroundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RgroundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRgroundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RgroundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromWindingInsulationsReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("FromWindingInsulations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FromWindingInsulations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromWindingInsulationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FromWindingInsulations", e, _fromWindingInsulationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FromWindingInsulations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromWindingInsulationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FromWindingInsulations", e, _fromWindingInsulationsReference);
        }
        
        private static ITypedElement RetrieveRatioTapChangerReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("RatioTapChanger")));
        }
        
        /// <summary>
        /// Raises the RatioTapChangerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioTapChangerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioTapChangerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatioTapChangerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioTapChangerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioTapChangerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RatioTapChanger property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRatioTapChanger(object sender, System.EventArgs eventArgs)
        {
            this.RatioTapChanger = null;
        }
        
        private static ITypedElement RetrievePhaseTapChangerReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("PhaseTapChanger")));
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhaseTapChanger property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseTapChanger(object sender, System.EventArgs eventArgs)
        {
            this.PhaseTapChanger = null;
        }
        
        private static ITypedElement RetrievePiImpedanceReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("PiImpedance")));
        }
        
        /// <summary>
        /// Raises the PiImpedanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPiImpedanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PiImpedanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PiImpedanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPiImpedanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PiImpedanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PiImpedance property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPiImpedance(object sender, System.EventArgs eventArgs)
        {
            this.PiImpedance = null;
        }
        
        private static ITypedElement RetrieveToWindingInsulationsReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("ToWindingInsulations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToWindingInsulations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToWindingInsulationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ToWindingInsulations", e, _toWindingInsulationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToWindingInsulations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToWindingInsulationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToWindingInsulations", e, _toWindingInsulationsReference);
        }
        
        private static ITypedElement RetrieveTransformerReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("Transformer")));
        }
        
        /// <summary>
        /// Raises the TransformerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Transformer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformer(object sender, System.EventArgs eventArgs)
        {
            this.Transformer = null;
        }
        
        private static ITypedElement RetrieveWindingInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTransformerWinding.ClassInstance)).Resolve("WindingInfo")));
        }
        
        /// <summary>
        /// Raises the WindingInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WindingInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWindingInfo(object sender, System.EventArgs eventArgs)
        {
            this.WindingInfo = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GROUNDED"))
            {
                return this.Grounded;
            }
            if ((attribute == "XGROUND"))
            {
                return this.Xground;
            }
            if ((attribute == "RGROUND"))
            {
                return this.Rground;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FROMWINDINGINSULATIONS"))
            {
                return this._fromWindingInsulations;
            }
            if ((feature == "TOWINDINGINSULATIONS"))
            {
                return this._toWindingInsulations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RATIOTAPCHANGER"))
            {
                this.RatioTapChanger = ((IRatioTapChanger)(value));
                return;
            }
            if ((feature == "PHASETAPCHANGER"))
            {
                this.PhaseTapChanger = ((IPhaseTapChanger)(value));
                return;
            }
            if ((feature == "PIIMPEDANCE"))
            {
                this.PiImpedance = ((IWindingPiImpedance)(value));
                return;
            }
            if ((feature == "TRANSFORMER"))
            {
                this.Transformer = ((IDistributionTransformer)(value));
                return;
            }
            if ((feature == "WINDINGINFO"))
            {
                this.WindingInfo = ((IWindingInfo)(value));
                return;
            }
            if ((feature == "GROUNDED"))
            {
                this.Grounded = ((bool)(value));
                return;
            }
            if ((feature == "XGROUND"))
            {
                this.Xground = ((float)(value));
                return;
            }
            if ((feature == "RGROUND"))
            {
                this.Rground = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RatioTapChanger"))
            {
                return new RatioTapChangerProxy(this);
            }
            if ((attribute == "PhaseTapChanger"))
            {
                return new PhaseTapChangerProxy(this);
            }
            if ((attribute == "PiImpedance"))
            {
                return new PiImpedanceProxy(this);
            }
            if ((attribute == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            if ((attribute == "WindingInfo"))
            {
                return new WindingInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RatioTapChanger"))
            {
                return new RatioTapChangerProxy(this);
            }
            if ((reference == "PhaseTapChanger"))
            {
                return new PhaseTapChangerProxy(this);
            }
            if ((reference == "PiImpedance"))
            {
                return new PiImpedanceProxy(this);
            }
            if ((reference == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            if ((reference == "WindingInfo"))
            {
                return new WindingInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTransfor" +
                        "merWinding")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DistributionTransformerWinding class
        /// </summary>
        public class DistributionTransformerWindingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DistributionTransformerWinding _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DistributionTransformerWindingReferencedElementsCollection(DistributionTransformerWinding parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.FromWindingInsulations.Count);
                    if ((this._parent.RatioTapChanger != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhaseTapChanger != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PiImpedance != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ToWindingInsulations.Count);
                    if ((this._parent.Transformer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WindingInfo != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FromWindingInsulations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RatioTapChangerChanged += this.PropagateValueChanges;
                this._parent.PhaseTapChangerChanged += this.PropagateValueChanges;
                this._parent.PiImpedanceChanged += this.PropagateValueChanges;
                this._parent.ToWindingInsulations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransformerChanged += this.PropagateValueChanges;
                this._parent.WindingInfoChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FromWindingInsulations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RatioTapChangerChanged -= this.PropagateValueChanges;
                this._parent.PhaseTapChangerChanged -= this.PropagateValueChanges;
                this._parent.PiImpedanceChanged -= this.PropagateValueChanges;
                this._parent.ToWindingInsulations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransformerChanged -= this.PropagateValueChanges;
                this._parent.WindingInfoChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWindingInsulation fromWindingInsulationsCasted = item.As<IWindingInsulation>();
                if ((fromWindingInsulationsCasted != null))
                {
                    this._parent.FromWindingInsulations.Add(fromWindingInsulationsCasted);
                }
                if ((this._parent.RatioTapChanger == null))
                {
                    IRatioTapChanger ratioTapChangerCasted = item.As<IRatioTapChanger>();
                    if ((ratioTapChangerCasted != null))
                    {
                        this._parent.RatioTapChanger = ratioTapChangerCasted;
                        return;
                    }
                }
                if ((this._parent.PhaseTapChanger == null))
                {
                    IPhaseTapChanger phaseTapChangerCasted = item.As<IPhaseTapChanger>();
                    if ((phaseTapChangerCasted != null))
                    {
                        this._parent.PhaseTapChanger = phaseTapChangerCasted;
                        return;
                    }
                }
                if ((this._parent.PiImpedance == null))
                {
                    IWindingPiImpedance piImpedanceCasted = item.As<IWindingPiImpedance>();
                    if ((piImpedanceCasted != null))
                    {
                        this._parent.PiImpedance = piImpedanceCasted;
                        return;
                    }
                }
                IWindingInsulation toWindingInsulationsCasted = item.As<IWindingInsulation>();
                if ((toWindingInsulationsCasted != null))
                {
                    this._parent.ToWindingInsulations.Add(toWindingInsulationsCasted);
                }
                if ((this._parent.Transformer == null))
                {
                    IDistributionTransformer transformerCasted = item.As<IDistributionTransformer>();
                    if ((transformerCasted != null))
                    {
                        this._parent.Transformer = transformerCasted;
                        return;
                    }
                }
                if ((this._parent.WindingInfo == null))
                {
                    IWindingInfo windingInfoCasted = item.As<IWindingInfo>();
                    if ((windingInfoCasted != null))
                    {
                        this._parent.WindingInfo = windingInfoCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FromWindingInsulations.Clear();
                this._parent.RatioTapChanger = null;
                this._parent.PhaseTapChanger = null;
                this._parent.PiImpedance = null;
                this._parent.ToWindingInsulations.Clear();
                this._parent.Transformer = null;
                this._parent.WindingInfo = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.FromWindingInsulations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RatioTapChanger))
                {
                    return true;
                }
                if ((item == this._parent.PhaseTapChanger))
                {
                    return true;
                }
                if ((item == this._parent.PiImpedance))
                {
                    return true;
                }
                if (this._parent.ToWindingInsulations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Transformer))
                {
                    return true;
                }
                if ((item == this._parent.WindingInfo))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> fromWindingInsulationsEnumerator = this._parent.FromWindingInsulations.GetEnumerator();
                try
                {
                    for (
                    ; fromWindingInsulationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fromWindingInsulationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fromWindingInsulationsEnumerator.Dispose();
                }
                if ((this._parent.RatioTapChanger != null))
                {
                    array[arrayIndex] = this._parent.RatioTapChanger;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhaseTapChanger != null))
                {
                    array[arrayIndex] = this._parent.PhaseTapChanger;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PiImpedance != null))
                {
                    array[arrayIndex] = this._parent.PiImpedance;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> toWindingInsulationsEnumerator = this._parent.ToWindingInsulations.GetEnumerator();
                try
                {
                    for (
                    ; toWindingInsulationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toWindingInsulationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toWindingInsulationsEnumerator.Dispose();
                }
                if ((this._parent.Transformer != null))
                {
                    array[arrayIndex] = this._parent.Transformer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WindingInfo != null))
                {
                    array[arrayIndex] = this._parent.WindingInfo;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWindingInsulation windingInsulationItem = item.As<IWindingInsulation>();
                if (((windingInsulationItem != null) 
                            && this._parent.FromWindingInsulations.Remove(windingInsulationItem)))
                {
                    return true;
                }
                if ((this._parent.RatioTapChanger == item))
                {
                    this._parent.RatioTapChanger = null;
                    return true;
                }
                if ((this._parent.PhaseTapChanger == item))
                {
                    this._parent.PhaseTapChanger = null;
                    return true;
                }
                if ((this._parent.PiImpedance == item))
                {
                    this._parent.PiImpedance = null;
                    return true;
                }
                if (((windingInsulationItem != null) 
                            && this._parent.ToWindingInsulations.Remove(windingInsulationItem)))
                {
                    return true;
                }
                if ((this._parent.Transformer == item))
                {
                    this._parent.Transformer = null;
                    return true;
                }
                if ((this._parent.WindingInfo == item))
                {
                    this._parent.WindingInfo = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FromWindingInsulations).Concat(this._parent.RatioTapChanger).Concat(this._parent.PhaseTapChanger).Concat(this._parent.PiImpedance).Concat(this._parent.ToWindingInsulations).Concat(this._parent.Transformer).Concat(this._parent.WindingInfo).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the grounded property
        /// </summary>
        private sealed class GroundedProxy : ModelPropertyChange<IDistributionTransformerWinding, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroundedProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "grounded")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Grounded;
                }
                set
                {
                    this.ModelElement.Grounded = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xground property
        /// </summary>
        private sealed class XgroundProxy : ModelPropertyChange<IDistributionTransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XgroundProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "xground")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Xground;
                }
                set
                {
                    this.ModelElement.Xground = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rground property
        /// </summary>
        private sealed class RgroundProxy : ModelPropertyChange<IDistributionTransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RgroundProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "rground")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Rground;
                }
                set
                {
                    this.ModelElement.Rground = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RatioTapChanger property
        /// </summary>
        private sealed class RatioTapChangerProxy : ModelPropertyChange<IDistributionTransformerWinding, IRatioTapChanger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatioTapChangerProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "RatioTapChanger")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatioTapChanger Value
            {
                get
                {
                    return this.ModelElement.RatioTapChanger;
                }
                set
                {
                    this.ModelElement.RatioTapChanger = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhaseTapChanger property
        /// </summary>
        private sealed class PhaseTapChangerProxy : ModelPropertyChange<IDistributionTransformerWinding, IPhaseTapChanger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseTapChangerProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "PhaseTapChanger")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPhaseTapChanger Value
            {
                get
                {
                    return this.ModelElement.PhaseTapChanger;
                }
                set
                {
                    this.ModelElement.PhaseTapChanger = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PiImpedance property
        /// </summary>
        private sealed class PiImpedanceProxy : ModelPropertyChange<IDistributionTransformerWinding, IWindingPiImpedance>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PiImpedanceProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "PiImpedance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWindingPiImpedance Value
            {
                get
                {
                    return this.ModelElement.PiImpedance;
                }
                set
                {
                    this.ModelElement.PiImpedance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformer property
        /// </summary>
        private sealed class TransformerProxy : ModelPropertyChange<IDistributionTransformerWinding, IDistributionTransformer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "Transformer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformer Value
            {
                get
                {
                    return this.ModelElement.Transformer;
                }
                set
                {
                    this.ModelElement.Transformer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WindingInfo property
        /// </summary>
        private sealed class WindingInfoProxy : ModelPropertyChange<IDistributionTransformerWinding, IWindingInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingInfoProxy(IDistributionTransformerWinding modelElement) : 
                    base(modelElement, "WindingInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWindingInfo Value
            {
                get
                {
                    return this.ModelElement.WindingInfo;
                }
                set
                {
                    this.ModelElement.WindingInfo = value;
                }
            }
        }
    }
}

