//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits
{
    
    
    /// <summary>
    /// The default implementation of the BranchGroup class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimits")]
    [XmlNamespacePrefixAttribute("cimOperationalLimits")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
        "")]
    [DebuggerDisplayAttribute("BranchGroup {UUID}")]
    public class BranchGroup : IdentifiedObject, IBranchGroup, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MonitorReactivePower property
        /// </summary>
        private bool _monitorReactivePower;
        
        /// <summary>
        /// The backing field for the MinimumReactivePower property
        /// </summary>
        private float _minimumReactivePower;
        
        /// <summary>
        /// The backing field for the MonitorActivePower property
        /// </summary>
        private bool _monitorActivePower;
        
        /// <summary>
        /// The backing field for the MaximumReactivePower property
        /// </summary>
        private float _maximumReactivePower;
        
        /// <summary>
        /// The backing field for the MaximumActivePower property
        /// </summary>
        private float _maximumActivePower;
        
        /// <summary>
        /// The backing field for the MinimumActivePower property
        /// </summary>
        private float _minimumActivePower;
        
        /// <summary>
        /// The backing field for the BranchGroupTerminal property
        /// </summary>
        private BranchGroupBranchGroupTerminalCollection _branchGroupTerminal;
        
        private static IClass _classInstance;
        
        public BranchGroup()
        {
            this._branchGroupTerminal = new BranchGroupBranchGroupTerminalCollection(this);
            this._branchGroupTerminal.CollectionChanging += this.BranchGroupTerminalCollectionChanging;
            this._branchGroupTerminal.CollectionChanged += this.BranchGroupTerminalCollectionChanged;
        }
        
        /// <summary>
        /// The monitorReactivePower property
        /// </summary>
        [XmlElementNameAttribute("monitorReactivePower")]
        [XmlAttributeAttribute(true)]
        public virtual bool MonitorReactivePower
        {
            get
            {
                return this._monitorReactivePower;
            }
            set
            {
                if ((this._monitorReactivePower != value))
                {
                    bool old = this._monitorReactivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMonitorReactivePowerChanging(e);
                    this.OnPropertyChanging("MonitorReactivePower", e);
                    this._monitorReactivePower = value;
                    this.OnMonitorReactivePowerChanged(e);
                    this.OnPropertyChanged("MonitorReactivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The minimumReactivePower property
        /// </summary>
        [XmlElementNameAttribute("minimumReactivePower")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumReactivePower
        {
            get
            {
                return this._minimumReactivePower;
            }
            set
            {
                if ((this._minimumReactivePower != value))
                {
                    float old = this._minimumReactivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumReactivePowerChanging(e);
                    this.OnPropertyChanging("MinimumReactivePower", e);
                    this._minimumReactivePower = value;
                    this.OnMinimumReactivePowerChanged(e);
                    this.OnPropertyChanged("MinimumReactivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The monitorActivePower property
        /// </summary>
        [XmlElementNameAttribute("monitorActivePower")]
        [XmlAttributeAttribute(true)]
        public virtual bool MonitorActivePower
        {
            get
            {
                return this._monitorActivePower;
            }
            set
            {
                if ((this._monitorActivePower != value))
                {
                    bool old = this._monitorActivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMonitorActivePowerChanging(e);
                    this.OnPropertyChanging("MonitorActivePower", e);
                    this._monitorActivePower = value;
                    this.OnMonitorActivePowerChanged(e);
                    this.OnPropertyChanged("MonitorActivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumReactivePower property
        /// </summary>
        [XmlElementNameAttribute("maximumReactivePower")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumReactivePower
        {
            get
            {
                return this._maximumReactivePower;
            }
            set
            {
                if ((this._maximumReactivePower != value))
                {
                    float old = this._maximumReactivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumReactivePowerChanging(e);
                    this.OnPropertyChanging("MaximumReactivePower", e);
                    this._maximumReactivePower = value;
                    this.OnMaximumReactivePowerChanged(e);
                    this.OnPropertyChanged("MaximumReactivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumActivePower property
        /// </summary>
        [XmlElementNameAttribute("maximumActivePower")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumActivePower
        {
            get
            {
                return this._maximumActivePower;
            }
            set
            {
                if ((this._maximumActivePower != value))
                {
                    float old = this._maximumActivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumActivePowerChanging(e);
                    this.OnPropertyChanging("MaximumActivePower", e);
                    this._maximumActivePower = value;
                    this.OnMaximumActivePowerChanged(e);
                    this.OnPropertyChanged("MaximumActivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The minimumActivePower property
        /// </summary>
        [XmlElementNameAttribute("minimumActivePower")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumActivePower
        {
            get
            {
                return this._minimumActivePower;
            }
            set
            {
                if ((this._minimumActivePower != value))
                {
                    float old = this._minimumActivePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumActivePowerChanging(e);
                    this.OnPropertyChanging("MinimumActivePower", e);
                    this._minimumActivePower = value;
                    this.OnMinimumActivePowerChanged(e);
                    this.OnPropertyChanged("MinimumActivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The BranchGroupTerminal property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BranchGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBranchGroupTerminal> BranchGroupTerminal
        {
            get
            {
                return this._branchGroupTerminal;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BranchGroupReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MonitorReactivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitorReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MonitorReactivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitorReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MinimumReactivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MinimumReactivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MonitorActivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitorActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MonitorActivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitorActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MaximumReactivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MaximumReactivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MaximumActivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MaximumActivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MinimumActivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MinimumActivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumActivePowerChanged;
        
        /// <summary>
        /// Raises the MonitorReactivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitorReactivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitorReactivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MonitorReactivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitorReactivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitorReactivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumReactivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumReactivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumReactivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumReactivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumReactivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumReactivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MonitorActivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitorActivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitorActivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MonitorActivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitorActivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitorActivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumReactivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumReactivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumReactivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumReactivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumReactivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumReactivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumActivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumActivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumActivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumActivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumActivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumActivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumActivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumActivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumActivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumActivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumActivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumActivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BranchGroupTerminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BranchGroupTerminalCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BranchGroupTerminal", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BranchGroupTerminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BranchGroupTerminalCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BranchGroupTerminal", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MONITORREACTIVEPOWER"))
            {
                return this.MonitorReactivePower;
            }
            if ((attribute == "MINIMUMREACTIVEPOWER"))
            {
                return this.MinimumReactivePower;
            }
            if ((attribute == "MONITORACTIVEPOWER"))
            {
                return this.MonitorActivePower;
            }
            if ((attribute == "MAXIMUMREACTIVEPOWER"))
            {
                return this.MaximumReactivePower;
            }
            if ((attribute == "MAXIMUMACTIVEPOWER"))
            {
                return this.MaximumActivePower;
            }
            if ((attribute == "MINIMUMACTIVEPOWER"))
            {
                return this.MinimumActivePower;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BRANCHGROUPTERMINAL"))
            {
                return this._branchGroupTerminal;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MONITORREACTIVEPOWER"))
            {
                this.MonitorReactivePower = ((bool)(value));
                return;
            }
            if ((feature == "MINIMUMREACTIVEPOWER"))
            {
                this.MinimumReactivePower = ((float)(value));
                return;
            }
            if ((feature == "MONITORACTIVEPOWER"))
            {
                this.MonitorActivePower = ((bool)(value));
                return;
            }
            if ((feature == "MAXIMUMREACTIVEPOWER"))
            {
                this.MaximumReactivePower = ((float)(value));
                return;
            }
            if ((feature == "MAXIMUMACTIVEPOWER"))
            {
                this.MaximumActivePower = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMACTIVEPOWER"))
            {
                this.MinimumActivePower = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BranchGroup class
        /// </summary>
        public class BranchGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BranchGroup _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BranchGroupReferencedElementsCollection(BranchGroup parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BranchGroupTerminal.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BranchGroupTerminal.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BranchGroupTerminal.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBranchGroupTerminal branchGroupTerminalCasted = item.As<IBranchGroupTerminal>();
                if ((branchGroupTerminalCasted != null))
                {
                    this._parent.BranchGroupTerminal.Add(branchGroupTerminalCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BranchGroupTerminal.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.BranchGroupTerminal.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> branchGroupTerminalEnumerator = this._parent.BranchGroupTerminal.GetEnumerator();
                try
                {
                    for (
                    ; branchGroupTerminalEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = branchGroupTerminalEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    branchGroupTerminalEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBranchGroupTerminal branchGroupTerminalItem = item.As<IBranchGroupTerminal>();
                if (((branchGroupTerminalItem != null) 
                            && this._parent.BranchGroupTerminal.Remove(branchGroupTerminalItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BranchGroupTerminal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the monitorReactivePower property
        /// </summary>
        private sealed class MonitorReactivePowerProxy : ModelPropertyChange<IBranchGroup, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MonitorReactivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MonitorReactivePower;
                }
                set
                {
                    this.ModelElement.MonitorReactivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonitorReactivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonitorReactivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumReactivePower property
        /// </summary>
        private sealed class MinimumReactivePowerProxy : ModelPropertyChange<IBranchGroup, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumReactivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumReactivePower;
                }
                set
                {
                    this.ModelElement.MinimumReactivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumReactivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumReactivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the monitorActivePower property
        /// </summary>
        private sealed class MonitorActivePowerProxy : ModelPropertyChange<IBranchGroup, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MonitorActivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MonitorActivePower;
                }
                set
                {
                    this.ModelElement.MonitorActivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonitorActivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MonitorActivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumReactivePower property
        /// </summary>
        private sealed class MaximumReactivePowerProxy : ModelPropertyChange<IBranchGroup, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumReactivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumReactivePower;
                }
                set
                {
                    this.ModelElement.MaximumReactivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumReactivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumReactivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumActivePower property
        /// </summary>
        private sealed class MaximumActivePowerProxy : ModelPropertyChange<IBranchGroup, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumActivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumActivePower;
                }
                set
                {
                    this.ModelElement.MaximumActivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumActivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumActivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumActivePower property
        /// </summary>
        private sealed class MinimumActivePowerProxy : ModelPropertyChange<IBranchGroup, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumActivePowerProxy(IBranchGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumActivePower;
                }
                set
                {
                    this.ModelElement.MinimumActivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumActivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumActivePowerChanged -= handler;
            }
        }
    }
}

