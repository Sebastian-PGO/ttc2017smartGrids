//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits
{
    
    
    /// <summary>
    /// The default implementation of the OperationalLimitType class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimits")]
    [XmlNamespacePrefixAttribute("cimOperationalLimits")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
        "LimitType")]
    [DebuggerDisplayAttribute("OperationalLimitType {UUID}")]
    public class OperationalLimitType : IdentifiedObject, IOperationalLimitType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AcceptableDuration property
        /// </summary>
        private float _acceptableDuration;
        
        /// <summary>
        /// The backing field for the Direction property
        /// </summary>
        private Nullable<OperationalLimitDirectionKind> _direction;
        
        /// <summary>
        /// The backing field for the OperationalLimit property
        /// </summary>
        private OperationalLimitTypeOperationalLimitCollection _operationalLimit;
        
        private static IClass _classInstance;
        
        public OperationalLimitType()
        {
            this._operationalLimit = new OperationalLimitTypeOperationalLimitCollection(this);
            this._operationalLimit.CollectionChanging += this.OperationalLimitCollectionChanging;
            this._operationalLimit.CollectionChanged += this.OperationalLimitCollectionChanged;
        }
        
        /// <summary>
        /// The acceptableDuration property
        /// </summary>
        [XmlElementNameAttribute("acceptableDuration")]
        [XmlAttributeAttribute(true)]
        public virtual float AcceptableDuration
        {
            get
            {
                return this._acceptableDuration;
            }
            set
            {
                if ((this._acceptableDuration != value))
                {
                    float old = this._acceptableDuration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAcceptableDurationChanging(e);
                    this.OnPropertyChanging("AcceptableDuration", e);
                    this._acceptableDuration = value;
                    this.OnAcceptableDurationChanged(e);
                    this.OnPropertyChanged("AcceptableDuration", e);
                }
            }
        }
        
        /// <summary>
        /// The direction property
        /// </summary>
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<OperationalLimitDirectionKind> Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    Nullable<OperationalLimitDirectionKind> old = this._direction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirectionChanging(e);
                    this.OnPropertyChanging("Direction", e);
                    this._direction = value;
                    this.OnDirectionChanged(e);
                    this.OnPropertyChanged("Direction", e);
                }
            }
        }
        
        /// <summary>
        /// The OperationalLimit property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OperationalLimitType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOperationalLimit> OperationalLimit
        {
            get
            {
                return this._operationalLimit;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationalLimitTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
                            "LimitType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AcceptableDuration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcceptableDurationChanging;
        
        /// <summary>
        /// Gets fired when the AcceptableDuration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcceptableDurationChanged;
        
        /// <summary>
        /// Gets fired before the Direction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanging;
        
        /// <summary>
        /// Gets fired when the Direction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanged;
        
        /// <summary>
        /// Raises the AcceptableDurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcceptableDurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcceptableDurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AcceptableDurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcceptableDurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcceptableDurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OperationalLimit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OperationalLimit", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OperationalLimit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OperationalLimit", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACCEPTABLEDURATION"))
            {
                return this.AcceptableDuration;
            }
            if ((attribute == "DIRECTION"))
            {
                return this.Direction;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OPERATIONALLIMIT"))
            {
                return this._operationalLimit;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACCEPTABLEDURATION"))
            {
                this.AcceptableDuration = ((float)(value));
                return;
            }
            if ((feature == "DIRECTION"))
            {
                this.Direction = ((OperationalLimitDirectionKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
                        "LimitType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperationalLimitType class
        /// </summary>
        public class OperationalLimitTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OperationalLimitType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationalLimitTypeReferencedElementsCollection(OperationalLimitType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OperationalLimit.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationalLimit.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationalLimit.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOperationalLimit operationalLimitCasted = item.As<IOperationalLimit>();
                if ((operationalLimitCasted != null))
                {
                    this._parent.OperationalLimit.Add(operationalLimitCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationalLimit.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OperationalLimit.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> operationalLimitEnumerator = this._parent.OperationalLimit.GetEnumerator();
                try
                {
                    for (
                    ; operationalLimitEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationalLimitEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationalLimitEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOperationalLimit operationalLimitItem = item.As<IOperationalLimit>();
                if (((operationalLimitItem != null) 
                            && this._parent.OperationalLimit.Remove(operationalLimitItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationalLimit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the acceptableDuration property
        /// </summary>
        private sealed class AcceptableDurationProxy : ModelPropertyChange<IOperationalLimitType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AcceptableDurationProxy(IOperationalLimitType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AcceptableDuration;
                }
                set
                {
                    this.ModelElement.AcceptableDuration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AcceptableDurationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AcceptableDurationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the direction property
        /// </summary>
        private sealed class DirectionProxy : ModelPropertyChange<IOperationalLimitType, Nullable<OperationalLimitDirectionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirectionProxy(IOperationalLimitType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<OperationalLimitDirectionKind> Value
            {
                get
                {
                    return this.ModelElement.Direction;
                }
                set
                {
                    this.ModelElement.Direction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirectionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirectionChanged -= handler;
            }
        }
    }
}

