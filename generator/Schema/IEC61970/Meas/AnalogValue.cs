//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the AnalogValue class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/AnalogValue")]
    [DebuggerDisplayAttribute("AnalogValue {UUID}")]
    public class AnalogValue : MeasurementValue, IAnalogValue, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private float _value;
        
        /// <summary>
        /// The backing field for the AltGeneratingUnit property
        /// </summary>
        private AnalogValueAltGeneratingUnitCollection _altGeneratingUnit;
        
        /// <summary>
        /// The backing field for the AltTieMeas property
        /// </summary>
        private AnalogValueAltTieMeasCollection _altTieMeas;
        
        /// <summary>
        /// The backing field for the Analog property
        /// </summary>
        private IAnalog _analog;
        
        private static IClass _classInstance;
        
        public AnalogValue()
        {
            this._altGeneratingUnit = new AnalogValueAltGeneratingUnitCollection(this);
            this._altGeneratingUnit.CollectionChanging += this.AltGeneratingUnitCollectionChanging;
            this._altGeneratingUnit.CollectionChanged += this.AltGeneratingUnitCollectionChanged;
            this._altTieMeas = new AnalogValueAltTieMeasCollection(this);
            this._altTieMeas.CollectionChanging += this.AltTieMeasCollectionChanging;
            this._altTieMeas.CollectionChanged += this.AltTieMeasCollectionChanged;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual float Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    float old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// The AltGeneratingUnit property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AnalogValue")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAltGeneratingUnitMeas> AltGeneratingUnit
        {
            get
            {
                return this._altGeneratingUnit;
            }
        }
        
        /// <summary>
        /// The AltTieMeas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AnalogValue")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAltTieMeas> AltTieMeas
        {
            get
            {
                return this._altTieMeas;
            }
        }
        
        /// <summary>
        /// The Analog property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AnalogValues")]
        public virtual IAnalog Analog
        {
            get
            {
                return this._analog;
            }
            set
            {
                if ((this._analog != value))
                {
                    IAnalog old = this._analog;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnalogChanging(e);
                    this.OnPropertyChanging("Analog", e);
                    this._analog = value;
                    if ((old != null))
                    {
                        old.AnalogValues.Remove(this);
                        old.Deleted -= this.OnResetAnalog;
                    }
                    if ((value != null))
                    {
                        value.AnalogValues.Add(this);
                        value.Deleted += this.OnResetAnalog;
                    }
                    this.OnAnalogChanged(e);
                    this.OnPropertyChanged("Analog", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AnalogValueReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/AnalogValue")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Analog property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnalogChanging;
        
        /// <summary>
        /// Gets fired when the Analog property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnalogChanged;
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AltGeneratingUnit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AltGeneratingUnitCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AltGeneratingUnit", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AltGeneratingUnit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AltGeneratingUnitCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AltGeneratingUnit", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AltTieMeas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AltTieMeasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AltTieMeas", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AltTieMeas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AltTieMeasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AltTieMeas", e);
        }
        
        /// <summary>
        /// Raises the AnalogChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnalogChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnalogChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnalogChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnalogChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnalogChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Analog property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAnalog(object sender, System.EventArgs eventArgs)
        {
            this.Analog = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ALTGENERATINGUNIT"))
            {
                return this._altGeneratingUnit;
            }
            if ((feature == "ALTTIEMEAS"))
            {
                return this._altTieMeas;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ANALOG"))
            {
                this.Analog = ((IAnalog)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Analog"))
            {
                return new AnalogProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Analog"))
            {
                return new AnalogProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/AnalogValue")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AnalogValue class
        /// </summary>
        public class AnalogValueReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AnalogValue _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AnalogValueReferencedElementsCollection(AnalogValue parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AltGeneratingUnit.Count);
                    count = (count + this._parent.AltTieMeas.Count);
                    if ((this._parent.Analog != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AltGeneratingUnit.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AltTieMeas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AnalogChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AltGeneratingUnit.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AltTieMeas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AnalogChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAltGeneratingUnitMeas altGeneratingUnitCasted = item.As<IAltGeneratingUnitMeas>();
                if ((altGeneratingUnitCasted != null))
                {
                    this._parent.AltGeneratingUnit.Add(altGeneratingUnitCasted);
                }
                IAltTieMeas altTieMeasCasted = item.As<IAltTieMeas>();
                if ((altTieMeasCasted != null))
                {
                    this._parent.AltTieMeas.Add(altTieMeasCasted);
                }
                if ((this._parent.Analog == null))
                {
                    IAnalog analogCasted = item.As<IAnalog>();
                    if ((analogCasted != null))
                    {
                        this._parent.Analog = analogCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AltGeneratingUnit.Clear();
                this._parent.AltTieMeas.Clear();
                this._parent.Analog = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AltGeneratingUnit.Contains(item))
                {
                    return true;
                }
                if (this._parent.AltTieMeas.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Analog))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> altGeneratingUnitEnumerator = this._parent.AltGeneratingUnit.GetEnumerator();
                try
                {
                    for (
                    ; altGeneratingUnitEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = altGeneratingUnitEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    altGeneratingUnitEnumerator.Dispose();
                }
                IEnumerator<IModelElement> altTieMeasEnumerator = this._parent.AltTieMeas.GetEnumerator();
                try
                {
                    for (
                    ; altTieMeasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = altTieMeasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    altTieMeasEnumerator.Dispose();
                }
                if ((this._parent.Analog != null))
                {
                    array[arrayIndex] = this._parent.Analog;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAltGeneratingUnitMeas altGeneratingUnitMeasItem = item.As<IAltGeneratingUnitMeas>();
                if (((altGeneratingUnitMeasItem != null) 
                            && this._parent.AltGeneratingUnit.Remove(altGeneratingUnitMeasItem)))
                {
                    return true;
                }
                IAltTieMeas altTieMeasItem = item.As<IAltTieMeas>();
                if (((altTieMeasItem != null) 
                            && this._parent.AltTieMeas.Remove(altTieMeasItem)))
                {
                    return true;
                }
                if ((this._parent.Analog == item))
                {
                    this._parent.Analog = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AltGeneratingUnit).Concat(this._parent.AltTieMeas).Concat(this._parent.Analog).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAnalogValue, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAnalogValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Analog property
        /// </summary>
        private sealed class AnalogProxy : ModelPropertyChange<IAnalogValue, IAnalog>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnalogProxy(IAnalogValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAnalog Value
            {
                get
                {
                    return this.ModelElement.Analog;
                }
                set
                {
                    this.ModelElement.Analog = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnalogChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnalogChanged -= handler;
            }
        }
    }
}

