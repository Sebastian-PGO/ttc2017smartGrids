//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Analog class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Analog")]
    [DebuggerDisplayAttribute("Analog {UUID}")]
    public class Analog : Measurement, IAnalog, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MinValue property
        /// </summary>
        private float _minValue;
        
        /// <summary>
        /// The backing field for the NormalValue property
        /// </summary>
        private float _normalValue;
        
        /// <summary>
        /// The backing field for the PositiveFlowIn property
        /// </summary>
        private bool _positiveFlowIn;
        
        /// <summary>
        /// The backing field for the MaxValue property
        /// </summary>
        private float _maxValue;
        
        /// <summary>
        /// The backing field for the LimitSets property
        /// </summary>
        private AnalogLimitSetsCollection _limitSets;
        
        /// <summary>
        /// The backing field for the SetPoint property
        /// </summary>
        private ISetPoint _setPoint;
        
        /// <summary>
        /// The backing field for the AnalogValues property
        /// </summary>
        private AnalogAnalogValuesCollection _analogValues;
        
        private static IClass _classInstance;
        
        public Analog()
        {
            this._limitSets = new AnalogLimitSetsCollection(this);
            this._limitSets.CollectionChanging += this.LimitSetsCollectionChanging;
            this._limitSets.CollectionChanged += this.LimitSetsCollectionChanged;
            this._analogValues = new AnalogAnalogValuesCollection(this);
            this._analogValues.CollectionChanging += this.AnalogValuesCollectionChanging;
            this._analogValues.CollectionChanged += this.AnalogValuesCollectionChanged;
        }
        
        /// <summary>
        /// The minValue property
        /// </summary>
        [XmlElementNameAttribute("minValue")]
        [XmlAttributeAttribute(true)]
        public virtual float MinValue
        {
            get
            {
                return this._minValue;
            }
            set
            {
                if ((this._minValue != value))
                {
                    float old = this._minValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValueChanging(e);
                    this.OnPropertyChanging("MinValue", e);
                    this._minValue = value;
                    this.OnMinValueChanged(e);
                    this.OnPropertyChanged("MinValue", e);
                }
            }
        }
        
        /// <summary>
        /// The normalValue property
        /// </summary>
        [XmlElementNameAttribute("normalValue")]
        [XmlAttributeAttribute(true)]
        public virtual float NormalValue
        {
            get
            {
                return this._normalValue;
            }
            set
            {
                if ((this._normalValue != value))
                {
                    float old = this._normalValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalValueChanging(e);
                    this.OnPropertyChanging("NormalValue", e);
                    this._normalValue = value;
                    this.OnNormalValueChanged(e);
                    this.OnPropertyChanged("NormalValue", e);
                }
            }
        }
        
        /// <summary>
        /// The positiveFlowIn property
        /// </summary>
        [XmlElementNameAttribute("positiveFlowIn")]
        [XmlAttributeAttribute(true)]
        public virtual bool PositiveFlowIn
        {
            get
            {
                return this._positiveFlowIn;
            }
            set
            {
                if ((this._positiveFlowIn != value))
                {
                    bool old = this._positiveFlowIn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPositiveFlowInChanging(e);
                    this.OnPropertyChanging("PositiveFlowIn", e);
                    this._positiveFlowIn = value;
                    this.OnPositiveFlowInChanged(e);
                    this.OnPropertyChanged("PositiveFlowIn", e);
                }
            }
        }
        
        /// <summary>
        /// The maxValue property
        /// </summary>
        [XmlElementNameAttribute("maxValue")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxValue
        {
            get
            {
                return this._maxValue;
            }
            set
            {
                if ((this._maxValue != value))
                {
                    float old = this._maxValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValueChanging(e);
                    this.OnPropertyChanging("MaxValue", e);
                    this._maxValue = value;
                    this.OnMaxValueChanged(e);
                    this.OnPropertyChanged("MaxValue", e);
                }
            }
        }
        
        /// <summary>
        /// The LimitSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAnalogLimitSet> LimitSets
        {
            get
            {
                return this._limitSets;
            }
        }
        
        /// <summary>
        /// The SetPoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Analog")]
        public virtual ISetPoint SetPoint
        {
            get
            {
                return this._setPoint;
            }
            set
            {
                if ((this._setPoint != value))
                {
                    ISetPoint old = this._setPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetPointChanging(e);
                    this.OnPropertyChanging("SetPoint", e);
                    this._setPoint = value;
                    if ((old != null))
                    {
                        old.Analog = null;
                        old.Deleted -= this.OnResetSetPoint;
                    }
                    if ((value != null))
                    {
                        value.Analog = this;
                        value.Deleted += this.OnResetSetPoint;
                    }
                    this.OnSetPointChanged(e);
                    this.OnPropertyChanged("SetPoint", e);
                }
            }
        }
        
        /// <summary>
        /// The AnalogValues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Analog")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAnalogValue> AnalogValues
        {
            get
            {
                return this._analogValues;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AnalogReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Analog")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MinValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValueChanging;
        
        /// <summary>
        /// Gets fired when the MinValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValueChanged;
        
        /// <summary>
        /// Gets fired before the NormalValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanging;
        
        /// <summary>
        /// Gets fired when the NormalValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanged;
        
        /// <summary>
        /// Gets fired before the PositiveFlowIn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveFlowInChanging;
        
        /// <summary>
        /// Gets fired when the PositiveFlowIn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveFlowInChanged;
        
        /// <summary>
        /// Gets fired before the MaxValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValueChanging;
        
        /// <summary>
        /// Gets fired when the MaxValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValueChanged;
        
        /// <summary>
        /// Gets fired before the SetPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetPointChanging;
        
        /// <summary>
        /// Gets fired when the SetPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SetPointChanged;
        
        /// <summary>
        /// Raises the MinValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositiveFlowInChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveFlowInChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveFlowInChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositiveFlowInChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveFlowInChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveFlowInChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LimitSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LimitSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LimitSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LimitSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LimitSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LimitSets", e);
        }
        
        /// <summary>
        /// Raises the SetPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SetPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SetPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetPoint(object sender, System.EventArgs eventArgs)
        {
            this.SetPoint = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AnalogValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnalogValuesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AnalogValues", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AnalogValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnalogValuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AnalogValues", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MINVALUE"))
            {
                return this.MinValue;
            }
            if ((attribute == "NORMALVALUE"))
            {
                return this.NormalValue;
            }
            if ((attribute == "POSITIVEFLOWIN"))
            {
                return this.PositiveFlowIn;
            }
            if ((attribute == "MAXVALUE"))
            {
                return this.MaxValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LIMITSETS"))
            {
                return this._limitSets;
            }
            if ((feature == "ANALOGVALUES"))
            {
                return this._analogValues;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SETPOINT"))
            {
                this.SetPoint = ((ISetPoint)(value));
                return;
            }
            if ((feature == "MINVALUE"))
            {
                this.MinValue = ((float)(value));
                return;
            }
            if ((feature == "NORMALVALUE"))
            {
                this.NormalValue = ((float)(value));
                return;
            }
            if ((feature == "POSITIVEFLOWIN"))
            {
                this.PositiveFlowIn = ((bool)(value));
                return;
            }
            if ((feature == "MAXVALUE"))
            {
                this.MaxValue = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SetPoint"))
            {
                return new SetPointProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SetPoint"))
            {
                return new SetPointProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Analog")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Analog class
        /// </summary>
        public class AnalogReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Analog _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AnalogReferencedElementsCollection(Analog parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.LimitSets.Count);
                    if ((this._parent.SetPoint != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AnalogValues.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LimitSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SetPointChanged += this.PropagateValueChanges;
                this._parent.AnalogValues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LimitSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SetPointChanged -= this.PropagateValueChanges;
                this._parent.AnalogValues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAnalogLimitSet limitSetsCasted = item.As<IAnalogLimitSet>();
                if ((limitSetsCasted != null))
                {
                    this._parent.LimitSets.Add(limitSetsCasted);
                }
                if ((this._parent.SetPoint == null))
                {
                    ISetPoint setPointCasted = item.As<ISetPoint>();
                    if ((setPointCasted != null))
                    {
                        this._parent.SetPoint = setPointCasted;
                        return;
                    }
                }
                IAnalogValue analogValuesCasted = item.As<IAnalogValue>();
                if ((analogValuesCasted != null))
                {
                    this._parent.AnalogValues.Add(analogValuesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LimitSets.Clear();
                this._parent.SetPoint = null;
                this._parent.AnalogValues.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.LimitSets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SetPoint))
                {
                    return true;
                }
                if (this._parent.AnalogValues.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> limitSetsEnumerator = this._parent.LimitSets.GetEnumerator();
                try
                {
                    for (
                    ; limitSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = limitSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    limitSetsEnumerator.Dispose();
                }
                if ((this._parent.SetPoint != null))
                {
                    array[arrayIndex] = this._parent.SetPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> analogValuesEnumerator = this._parent.AnalogValues.GetEnumerator();
                try
                {
                    for (
                    ; analogValuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = analogValuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    analogValuesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAnalogLimitSet analogLimitSetItem = item.As<IAnalogLimitSet>();
                if (((analogLimitSetItem != null) 
                            && this._parent.LimitSets.Remove(analogLimitSetItem)))
                {
                    return true;
                }
                if ((this._parent.SetPoint == item))
                {
                    this._parent.SetPoint = null;
                    return true;
                }
                IAnalogValue analogValueItem = item.As<IAnalogValue>();
                if (((analogValueItem != null) 
                            && this._parent.AnalogValues.Remove(analogValueItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LimitSets).Concat(this._parent.SetPoint).Concat(this._parent.AnalogValues).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minValue property
        /// </summary>
        private sealed class MinValueProxy : ModelPropertyChange<IAnalog, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValueProxy(IAnalog modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinValue;
                }
                set
                {
                    this.ModelElement.MinValue = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalValue property
        /// </summary>
        private sealed class NormalValueProxy : ModelPropertyChange<IAnalog, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalValueProxy(IAnalog modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NormalValue;
                }
                set
                {
                    this.ModelElement.NormalValue = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the positiveFlowIn property
        /// </summary>
        private sealed class PositiveFlowInProxy : ModelPropertyChange<IAnalog, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositiveFlowInProxy(IAnalog modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.PositiveFlowIn;
                }
                set
                {
                    this.ModelElement.PositiveFlowIn = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PositiveFlowInChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PositiveFlowInChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxValue property
        /// </summary>
        private sealed class MaxValueProxy : ModelPropertyChange<IAnalog, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValueProxy(IAnalog modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxValue;
                }
                set
                {
                    this.ModelElement.MaxValue = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SetPoint property
        /// </summary>
        private sealed class SetPointProxy : ModelPropertyChange<IAnalog, ISetPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetPointProxy(IAnalog modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISetPoint Value
            {
                get
                {
                    return this.ModelElement.SetPoint;
                }
                set
                {
                    this.ModelElement.SetPoint = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetPointChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetPointChanged -= handler;
            }
        }
    }
}

