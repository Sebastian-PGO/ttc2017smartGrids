//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the MeasurementValue class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/MeasurementValue")]
    [DebuggerDisplayAttribute("MeasurementValue {UUID}")]
    public class MeasurementValue : IdentifiedObject, IMeasurementValue, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SensorAccuracy property
        /// </summary>
        private float _sensorAccuracy;
        
        /// <summary>
        /// The backing field for the TimeStamp property
        /// </summary>
        private DateTime _timeStamp;
        
        /// <summary>
        /// The backing field for the GmlValues property
        /// </summary>
        private MeasurementValueGmlValuesCollection _gmlValues;
        
        /// <summary>
        /// The backing field for the ProcedureDataSets property
        /// </summary>
        private MeasurementValueProcedureDataSetsCollection _procedureDataSets;
        
        /// <summary>
        /// The backing field for the MeasurementValueQuality property
        /// </summary>
        private IMeasurementValueQuality _measurementValueQuality;
        
        /// <summary>
        /// The backing field for the ErpPerson property
        /// </summary>
        private IErpPerson _erpPerson;
        
        /// <summary>
        /// The backing field for the MeasurementValueSource property
        /// </summary>
        private IMeasurementValueSource _measurementValueSource;
        
        /// <summary>
        /// The backing field for the RemoteSource property
        /// </summary>
        private IRemoteSource _remoteSource;
        
        private static IClass _classInstance;
        
        public MeasurementValue()
        {
            this._gmlValues = new MeasurementValueGmlValuesCollection(this);
            this._gmlValues.CollectionChanging += this.GmlValuesCollectionChanging;
            this._gmlValues.CollectionChanged += this.GmlValuesCollectionChanged;
            this._procedureDataSets = new MeasurementValueProcedureDataSetsCollection(this);
            this._procedureDataSets.CollectionChanging += this.ProcedureDataSetsCollectionChanging;
            this._procedureDataSets.CollectionChanged += this.ProcedureDataSetsCollectionChanged;
        }
        
        /// <summary>
        /// The sensorAccuracy property
        /// </summary>
        [XmlElementNameAttribute("sensorAccuracy")]
        [XmlAttributeAttribute(true)]
        public virtual float SensorAccuracy
        {
            get
            {
                return this._sensorAccuracy;
            }
            set
            {
                if ((this._sensorAccuracy != value))
                {
                    float old = this._sensorAccuracy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSensorAccuracyChanging(e);
                    this.OnPropertyChanging("SensorAccuracy", e);
                    this._sensorAccuracy = value;
                    this.OnSensorAccuracyChanged(e);
                    this.OnPropertyChanged("SensorAccuracy", e);
                }
            }
        }
        
        /// <summary>
        /// The timeStamp property
        /// </summary>
        [XmlElementNameAttribute("timeStamp")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TimeStamp
        {
            get
            {
                return this._timeStamp;
            }
            set
            {
                if ((this._timeStamp != value))
                {
                    DateTime old = this._timeStamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeStampChanging(e);
                    this.OnPropertyChanging("TimeStamp", e);
                    this._timeStamp = value;
                    this.OnTimeStampChanged(e);
                    this.OnPropertyChanged("TimeStamp", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlValues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValue")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlValue> GmlValues
        {
            get
            {
                return this._gmlValues;
            }
        }
        
        /// <summary>
        /// The ProcedureDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValues")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProcedureDataSet> ProcedureDataSets
        {
            get
            {
                return this._procedureDataSets;
            }
        }
        
        /// <summary>
        /// The MeasurementValueQuality property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValue")]
        public virtual IMeasurementValueQuality MeasurementValueQuality
        {
            get
            {
                return this._measurementValueQuality;
            }
            set
            {
                if ((this._measurementValueQuality != value))
                {
                    IMeasurementValueQuality old = this._measurementValueQuality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueQualityChanging(e);
                    this.OnPropertyChanging("MeasurementValueQuality", e);
                    this._measurementValueQuality = value;
                    if ((old != null))
                    {
                        old.MeasurementValue = null;
                        old.Deleted -= this.OnResetMeasurementValueQuality;
                    }
                    if ((value != null))
                    {
                        value.MeasurementValue = this;
                        value.Deleted += this.OnResetMeasurementValueQuality;
                    }
                    this.OnMeasurementValueQualityChanged(e);
                    this.OnPropertyChanged("MeasurementValueQuality", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpPerson property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValues")]
        public virtual IErpPerson ErpPerson
        {
            get
            {
                return this._erpPerson;
            }
            set
            {
                if ((this._erpPerson != value))
                {
                    IErpPerson old = this._erpPerson;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonChanging(e);
                    this.OnPropertyChanging("ErpPerson", e);
                    this._erpPerson = value;
                    if ((old != null))
                    {
                        old.MeasurementValues.Remove(this);
                        old.Deleted -= this.OnResetErpPerson;
                    }
                    if ((value != null))
                    {
                        value.MeasurementValues.Add(this);
                        value.Deleted += this.OnResetErpPerson;
                    }
                    this.OnErpPersonChanged(e);
                    this.OnPropertyChanged("ErpPerson", e);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValueSource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValues")]
        public virtual IMeasurementValueSource MeasurementValueSource
        {
            get
            {
                return this._measurementValueSource;
            }
            set
            {
                if ((this._measurementValueSource != value))
                {
                    IMeasurementValueSource old = this._measurementValueSource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueSourceChanging(e);
                    this.OnPropertyChanging("MeasurementValueSource", e);
                    this._measurementValueSource = value;
                    if ((old != null))
                    {
                        old.MeasurementValues.Remove(this);
                        old.Deleted -= this.OnResetMeasurementValueSource;
                    }
                    if ((value != null))
                    {
                        value.MeasurementValues.Add(this);
                        value.Deleted += this.OnResetMeasurementValueSource;
                    }
                    this.OnMeasurementValueSourceChanged(e);
                    this.OnPropertyChanged("MeasurementValueSource", e);
                }
            }
        }
        
        /// <summary>
        /// The RemoteSource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasurementValue")]
        public virtual IRemoteSource RemoteSource
        {
            get
            {
                return this._remoteSource;
            }
            set
            {
                if ((this._remoteSource != value))
                {
                    IRemoteSource old = this._remoteSource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteSourceChanging(e);
                    this.OnPropertyChanging("RemoteSource", e);
                    this._remoteSource = value;
                    if ((old != null))
                    {
                        old.MeasurementValue = null;
                        old.Deleted -= this.OnResetRemoteSource;
                    }
                    if ((value != null))
                    {
                        value.MeasurementValue = this;
                        value.Deleted += this.OnResetRemoteSource;
                    }
                    this.OnRemoteSourceChanged(e);
                    this.OnPropertyChanged("RemoteSource", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeasurementValueReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/MeasurementValue")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SensorAccuracy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorAccuracyChanging;
        
        /// <summary>
        /// Gets fired when the SensorAccuracy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorAccuracyChanged;
        
        /// <summary>
        /// Gets fired before the TimeStamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanging;
        
        /// <summary>
        /// Gets fired when the TimeStamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueQuality property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueQualityChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueQuality property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueQualityChanged;
        
        /// <summary>
        /// Gets fired before the ErpPerson property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanging;
        
        /// <summary>
        /// Gets fired when the ErpPerson property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueSource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueSourceChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueSource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueSourceChanged;
        
        /// <summary>
        /// Gets fired before the RemoteSource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteSourceChanging;
        
        /// <summary>
        /// Gets fired when the RemoteSource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteSourceChanged;
        
        /// <summary>
        /// Raises the SensorAccuracyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorAccuracyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorAccuracyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SensorAccuracyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorAccuracyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorAccuracyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeStampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeStampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlValuesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlValues", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlValuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlValues", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProcedureDataSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProcedureDataSets", e);
        }
        
        /// <summary>
        /// Raises the MeasurementValueQualityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueQualityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueQualityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueQualityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueQualityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueQualityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValueQuality property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValueQuality(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementValueQuality = null;
        }
        
        /// <summary>
        /// Raises the ErpPersonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPerson property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPerson(object sender, System.EventArgs eventArgs)
        {
            this.ErpPerson = null;
        }
        
        /// <summary>
        /// Raises the MeasurementValueSourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueSourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueSourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueSourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValueSource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValueSource(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementValueSource = null;
        }
        
        /// <summary>
        /// Raises the RemoteSourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteSourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteSourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteSourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RemoteSource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRemoteSource(object sender, System.EventArgs eventArgs)
        {
            this.RemoteSource = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SENSORACCURACY"))
            {
                return this.SensorAccuracy;
            }
            if ((attribute == "TIMESTAMP"))
            {
                return this.TimeStamp;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLVALUES"))
            {
                return this._gmlValues;
            }
            if ((feature == "PROCEDUREDATASETS"))
            {
                return this._procedureDataSets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MEASUREMENTVALUEQUALITY"))
            {
                this.MeasurementValueQuality = ((IMeasurementValueQuality)(value));
                return;
            }
            if ((feature == "ERPPERSON"))
            {
                this.ErpPerson = ((IErpPerson)(value));
                return;
            }
            if ((feature == "MEASUREMENTVALUESOURCE"))
            {
                this.MeasurementValueSource = ((IMeasurementValueSource)(value));
                return;
            }
            if ((feature == "REMOTESOURCE"))
            {
                this.RemoteSource = ((IRemoteSource)(value));
                return;
            }
            if ((feature == "SENSORACCURACY"))
            {
                this.SensorAccuracy = ((float)(value));
                return;
            }
            if ((feature == "TIMESTAMP"))
            {
                this.TimeStamp = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeasurementValueQuality"))
            {
                return new MeasurementValueQualityProxy(this);
            }
            if ((attribute == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            if ((attribute == "MeasurementValueSource"))
            {
                return new MeasurementValueSourceProxy(this);
            }
            if ((attribute == "RemoteSource"))
            {
                return new RemoteSourceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeasurementValueQuality"))
            {
                return new MeasurementValueQualityProxy(this);
            }
            if ((reference == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            if ((reference == "MeasurementValueSource"))
            {
                return new MeasurementValueSourceProxy(this);
            }
            if ((reference == "RemoteSource"))
            {
                return new RemoteSourceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/MeasurementValue")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeasurementValue class
        /// </summary>
        public class MeasurementValueReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeasurementValue _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeasurementValueReferencedElementsCollection(MeasurementValue parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlValues.Count);
                    count = (count + this._parent.ProcedureDataSets.Count);
                    if ((this._parent.MeasurementValueQuality != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPerson != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueSource != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RemoteSource != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlValues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeasurementValueQualityChanged += this.PropagateValueChanges;
                this._parent.ErpPersonChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueSourceChanged += this.PropagateValueChanges;
                this._parent.RemoteSourceChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlValues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeasurementValueQualityChanged -= this.PropagateValueChanges;
                this._parent.ErpPersonChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueSourceChanged -= this.PropagateValueChanges;
                this._parent.RemoteSourceChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlValue gmlValuesCasted = item.As<IGmlValue>();
                if ((gmlValuesCasted != null))
                {
                    this._parent.GmlValues.Add(gmlValuesCasted);
                }
                IProcedureDataSet procedureDataSetsCasted = item.As<IProcedureDataSet>();
                if ((procedureDataSetsCasted != null))
                {
                    this._parent.ProcedureDataSets.Add(procedureDataSetsCasted);
                }
                if ((this._parent.MeasurementValueQuality == null))
                {
                    IMeasurementValueQuality measurementValueQualityCasted = item.As<IMeasurementValueQuality>();
                    if ((measurementValueQualityCasted != null))
                    {
                        this._parent.MeasurementValueQuality = measurementValueQualityCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPerson == null))
                {
                    IErpPerson erpPersonCasted = item.As<IErpPerson>();
                    if ((erpPersonCasted != null))
                    {
                        this._parent.ErpPerson = erpPersonCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueSource == null))
                {
                    IMeasurementValueSource measurementValueSourceCasted = item.As<IMeasurementValueSource>();
                    if ((measurementValueSourceCasted != null))
                    {
                        this._parent.MeasurementValueSource = measurementValueSourceCasted;
                        return;
                    }
                }
                if ((this._parent.RemoteSource == null))
                {
                    IRemoteSource remoteSourceCasted = item.As<IRemoteSource>();
                    if ((remoteSourceCasted != null))
                    {
                        this._parent.RemoteSource = remoteSourceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlValues.Clear();
                this._parent.ProcedureDataSets.Clear();
                this._parent.MeasurementValueQuality = null;
                this._parent.ErpPerson = null;
                this._parent.MeasurementValueSource = null;
                this._parent.RemoteSource = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlValues.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProcedureDataSets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueQuality))
                {
                    return true;
                }
                if ((item == this._parent.ErpPerson))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueSource))
                {
                    return true;
                }
                if ((item == this._parent.RemoteSource))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlValuesEnumerator = this._parent.GmlValues.GetEnumerator();
                try
                {
                    for (
                    ; gmlValuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlValuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlValuesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> procedureDataSetsEnumerator = this._parent.ProcedureDataSets.GetEnumerator();
                try
                {
                    for (
                    ; procedureDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = procedureDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    procedureDataSetsEnumerator.Dispose();
                }
                if ((this._parent.MeasurementValueQuality != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueQuality;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPerson != null))
                {
                    array[arrayIndex] = this._parent.ErpPerson;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueSource != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueSource;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RemoteSource != null))
                {
                    array[arrayIndex] = this._parent.RemoteSource;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlValue gmlValueItem = item.As<IGmlValue>();
                if (((gmlValueItem != null) 
                            && this._parent.GmlValues.Remove(gmlValueItem)))
                {
                    return true;
                }
                IProcedureDataSet procedureDataSetItem = item.As<IProcedureDataSet>();
                if (((procedureDataSetItem != null) 
                            && this._parent.ProcedureDataSets.Remove(procedureDataSetItem)))
                {
                    return true;
                }
                if ((this._parent.MeasurementValueQuality == item))
                {
                    this._parent.MeasurementValueQuality = null;
                    return true;
                }
                if ((this._parent.ErpPerson == item))
                {
                    this._parent.ErpPerson = null;
                    return true;
                }
                if ((this._parent.MeasurementValueSource == item))
                {
                    this._parent.MeasurementValueSource = null;
                    return true;
                }
                if ((this._parent.RemoteSource == item))
                {
                    this._parent.RemoteSource = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlValues).Concat(this._parent.ProcedureDataSets).Concat(this._parent.MeasurementValueQuality).Concat(this._parent.ErpPerson).Concat(this._parent.MeasurementValueSource).Concat(this._parent.RemoteSource).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sensorAccuracy property
        /// </summary>
        private sealed class SensorAccuracyProxy : ModelPropertyChange<IMeasurementValue, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensorAccuracyProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SensorAccuracy;
                }
                set
                {
                    this.ModelElement.SensorAccuracy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SensorAccuracyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SensorAccuracyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeStamp property
        /// </summary>
        private sealed class TimeStampProxy : ModelPropertyChange<IMeasurementValue, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeStampProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TimeStamp;
                }
                set
                {
                    this.ModelElement.TimeStamp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeStampChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeStampChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValueQuality property
        /// </summary>
        private sealed class MeasurementValueQualityProxy : ModelPropertyChange<IMeasurementValue, IMeasurementValueQuality>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueQualityProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValueQuality Value
            {
                get
                {
                    return this.ModelElement.MeasurementValueQuality;
                }
                set
                {
                    this.ModelElement.MeasurementValueQuality = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeasurementValueQualityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeasurementValueQualityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPerson property
        /// </summary>
        private sealed class ErpPersonProxy : ModelPropertyChange<IMeasurementValue, IErpPerson>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPerson Value
            {
                get
                {
                    return this.ModelElement.ErpPerson;
                }
                set
                {
                    this.ModelElement.ErpPerson = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValueSource property
        /// </summary>
        private sealed class MeasurementValueSourceProxy : ModelPropertyChange<IMeasurementValue, IMeasurementValueSource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueSourceProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValueSource Value
            {
                get
                {
                    return this.ModelElement.MeasurementValueSource;
                }
                set
                {
                    this.ModelElement.MeasurementValueSource = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeasurementValueSourceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeasurementValueSourceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RemoteSource property
        /// </summary>
        private sealed class RemoteSourceProxy : ModelPropertyChange<IMeasurementValue, IRemoteSource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteSourceProxy(IMeasurementValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRemoteSource Value
            {
                get
                {
                    return this.ModelElement.RemoteSource;
                }
                set
                {
                    this.ModelElement.RemoteSource = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemoteSourceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemoteSourceChanged -= handler;
            }
        }
    }
}

