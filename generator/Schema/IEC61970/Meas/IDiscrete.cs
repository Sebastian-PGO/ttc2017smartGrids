//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The public interface for Discrete
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Discrete))]
    [XmlDefaultImplementationTypeAttribute(typeof(Discrete))]
    public interface IDiscrete : IModelElement, IMeasurement
    {
        
        /// <summary>
        /// The minValue property
        /// </summary>
        int MinValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxValue property
        /// </summary>
        int MaxValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalValue property
        /// </summary>
        int NormalValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ValueAliasSet property
        /// </summary>
        IValueAliasSet ValueAliasSet
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Command property
        /// </summary>
        ICommand Command
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DiscreteValues property
        /// </summary>
        IOrderedSetExpression<IDiscreteValue> DiscreteValues
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the MinValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinValueChanging;
        
        /// <summary>
        /// Gets fired when the MinValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinValueChanged;
        
        /// <summary>
        /// Gets fired before the MaxValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxValueChanging;
        
        /// <summary>
        /// Gets fired when the MaxValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxValueChanged;
        
        /// <summary>
        /// Gets fired before the NormalValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalValueChanging;
        
        /// <summary>
        /// Gets fired when the NormalValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalValueChanged;
        
        /// <summary>
        /// Gets fired before the ValueAliasSet property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanging;
        
        /// <summary>
        /// Gets fired when the ValueAliasSet property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanged;
        
        /// <summary>
        /// Gets fired before the Command property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommandChanging;
        
        /// <summary>
        /// Gets fired when the Command property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommandChanged;
    }
}

