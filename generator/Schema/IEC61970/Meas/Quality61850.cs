//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Quality61850 class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Quality61850")]
    [DebuggerDisplayAttribute("Quality61850 {UUID}")]
    public partial class Quality61850 : Element, IQuality61850, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Suspect property
        /// </summary>
        private bool _suspect;
        
        private static Lazy<ITypedElement> _suspectAttribute = new Lazy<ITypedElement>(RetrieveSuspectAttribute);
        
        /// <summary>
        /// The backing field for the EstimatorReplaced property
        /// </summary>
        private bool _estimatorReplaced;
        
        private static Lazy<ITypedElement> _estimatorReplacedAttribute = new Lazy<ITypedElement>(RetrieveEstimatorReplacedAttribute);
        
        /// <summary>
        /// The backing field for the Validity property
        /// </summary>
        private Nullable<Validity> _validity;
        
        private static Lazy<ITypedElement> _validityAttribute = new Lazy<ITypedElement>(RetrieveValidityAttribute);
        
        /// <summary>
        /// The backing field for the BadReference property
        /// </summary>
        private bool _badReference;
        
        private static Lazy<ITypedElement> _badReferenceAttribute = new Lazy<ITypedElement>(RetrieveBadReferenceAttribute);
        
        /// <summary>
        /// The backing field for the OldData property
        /// </summary>
        private bool _oldData;
        
        private static Lazy<ITypedElement> _oldDataAttribute = new Lazy<ITypedElement>(RetrieveOldDataAttribute);
        
        /// <summary>
        /// The backing field for the Failure property
        /// </summary>
        private bool _failure;
        
        private static Lazy<ITypedElement> _failureAttribute = new Lazy<ITypedElement>(RetrieveFailureAttribute);
        
        /// <summary>
        /// The backing field for the OverFlow property
        /// </summary>
        private bool _overFlow;
        
        private static Lazy<ITypedElement> _overFlowAttribute = new Lazy<ITypedElement>(RetrieveOverFlowAttribute);
        
        /// <summary>
        /// The backing field for the Source property
        /// </summary>
        private Nullable<Source> _source;
        
        private static Lazy<ITypedElement> _sourceAttribute = new Lazy<ITypedElement>(RetrieveSourceAttribute);
        
        /// <summary>
        /// The backing field for the OperatorBlocked property
        /// </summary>
        private bool _operatorBlocked;
        
        private static Lazy<ITypedElement> _operatorBlockedAttribute = new Lazy<ITypedElement>(RetrieveOperatorBlockedAttribute);
        
        /// <summary>
        /// The backing field for the Test property
        /// </summary>
        private bool _test;
        
        private static Lazy<ITypedElement> _testAttribute = new Lazy<ITypedElement>(RetrieveTestAttribute);
        
        /// <summary>
        /// The backing field for the Oscillatory property
        /// </summary>
        private bool _oscillatory;
        
        private static Lazy<ITypedElement> _oscillatoryAttribute = new Lazy<ITypedElement>(RetrieveOscillatoryAttribute);
        
        /// <summary>
        /// The backing field for the OutOfRange property
        /// </summary>
        private bool _outOfRange;
        
        private static Lazy<ITypedElement> _outOfRangeAttribute = new Lazy<ITypedElement>(RetrieveOutOfRangeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The suspect property
        /// </summary>
        [XmlElementNameAttribute("suspect")]
        [XmlAttributeAttribute(true)]
        public virtual bool Suspect
        {
            get
            {
                return this._suspect;
            }
            set
            {
                if ((this._suspect != value))
                {
                    bool old = this._suspect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuspectChanging(e);
                    this.OnPropertyChanging("Suspect", e, _suspectAttribute);
                    this._suspect = value;
                    this.OnSuspectChanged(e);
                    this.OnPropertyChanged("Suspect", e, _suspectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The estimatorReplaced property
        /// </summary>
        [XmlElementNameAttribute("estimatorReplaced")]
        [XmlAttributeAttribute(true)]
        public virtual bool EstimatorReplaced
        {
            get
            {
                return this._estimatorReplaced;
            }
            set
            {
                if ((this._estimatorReplaced != value))
                {
                    bool old = this._estimatorReplaced;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatorReplacedChanging(e);
                    this.OnPropertyChanging("EstimatorReplaced", e, _estimatorReplacedAttribute);
                    this._estimatorReplaced = value;
                    this.OnEstimatorReplacedChanged(e);
                    this.OnPropertyChanged("EstimatorReplaced", e, _estimatorReplacedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The validity property
        /// </summary>
        [XmlElementNameAttribute("validity")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<Validity> Validity
        {
            get
            {
                return this._validity;
            }
            set
            {
                if ((this._validity != value))
                {
                    Nullable<Validity> old = this._validity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValidityChanging(e);
                    this.OnPropertyChanging("Validity", e, _validityAttribute);
                    this._validity = value;
                    this.OnValidityChanged(e);
                    this.OnPropertyChanged("Validity", e, _validityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The badReference property
        /// </summary>
        [XmlElementNameAttribute("badReference")]
        [XmlAttributeAttribute(true)]
        public virtual bool BadReference
        {
            get
            {
                return this._badReference;
            }
            set
            {
                if ((this._badReference != value))
                {
                    bool old = this._badReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBadReferenceChanging(e);
                    this.OnPropertyChanging("BadReference", e, _badReferenceAttribute);
                    this._badReference = value;
                    this.OnBadReferenceChanged(e);
                    this.OnPropertyChanged("BadReference", e, _badReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The oldData property
        /// </summary>
        [XmlElementNameAttribute("oldData")]
        [XmlAttributeAttribute(true)]
        public virtual bool OldData
        {
            get
            {
                return this._oldData;
            }
            set
            {
                if ((this._oldData != value))
                {
                    bool old = this._oldData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOldDataChanging(e);
                    this.OnPropertyChanging("OldData", e, _oldDataAttribute);
                    this._oldData = value;
                    this.OnOldDataChanged(e);
                    this.OnPropertyChanged("OldData", e, _oldDataAttribute);
                }
            }
        }
        
        /// <summary>
        /// The failure property
        /// </summary>
        [XmlElementNameAttribute("failure")]
        [XmlAttributeAttribute(true)]
        public virtual bool Failure
        {
            get
            {
                return this._failure;
            }
            set
            {
                if ((this._failure != value))
                {
                    bool old = this._failure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailureChanging(e);
                    this.OnPropertyChanging("Failure", e, _failureAttribute);
                    this._failure = value;
                    this.OnFailureChanged(e);
                    this.OnPropertyChanged("Failure", e, _failureAttribute);
                }
            }
        }
        
        /// <summary>
        /// The overFlow property
        /// </summary>
        [XmlElementNameAttribute("overFlow")]
        [XmlAttributeAttribute(true)]
        public virtual bool OverFlow
        {
            get
            {
                return this._overFlow;
            }
            set
            {
                if ((this._overFlow != value))
                {
                    bool old = this._overFlow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverFlowChanging(e);
                    this.OnPropertyChanging("OverFlow", e, _overFlowAttribute);
                    this._overFlow = value;
                    this.OnOverFlowChanged(e);
                    this.OnPropertyChanged("OverFlow", e, _overFlowAttribute);
                }
            }
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<Source> Source
        {
            get
            {
                return this._source;
            }
            set
            {
                if ((this._source != value))
                {
                    Nullable<Source> old = this._source;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceChanging(e);
                    this.OnPropertyChanging("Source", e, _sourceAttribute);
                    this._source = value;
                    this.OnSourceChanged(e);
                    this.OnPropertyChanged("Source", e, _sourceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The operatorBlocked property
        /// </summary>
        [XmlElementNameAttribute("operatorBlocked")]
        [XmlAttributeAttribute(true)]
        public virtual bool OperatorBlocked
        {
            get
            {
                return this._operatorBlocked;
            }
            set
            {
                if ((this._operatorBlocked != value))
                {
                    bool old = this._operatorBlocked;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatorBlockedChanging(e);
                    this.OnPropertyChanging("OperatorBlocked", e, _operatorBlockedAttribute);
                    this._operatorBlocked = value;
                    this.OnOperatorBlockedChanged(e);
                    this.OnPropertyChanged("OperatorBlocked", e, _operatorBlockedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The test property
        /// </summary>
        [XmlElementNameAttribute("test")]
        [XmlAttributeAttribute(true)]
        public virtual bool Test
        {
            get
            {
                return this._test;
            }
            set
            {
                if ((this._test != value))
                {
                    bool old = this._test;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTestChanging(e);
                    this.OnPropertyChanging("Test", e, _testAttribute);
                    this._test = value;
                    this.OnTestChanged(e);
                    this.OnPropertyChanged("Test", e, _testAttribute);
                }
            }
        }
        
        /// <summary>
        /// The oscillatory property
        /// </summary>
        [XmlElementNameAttribute("oscillatory")]
        [XmlAttributeAttribute(true)]
        public virtual bool Oscillatory
        {
            get
            {
                return this._oscillatory;
            }
            set
            {
                if ((this._oscillatory != value))
                {
                    bool old = this._oscillatory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOscillatoryChanging(e);
                    this.OnPropertyChanging("Oscillatory", e, _oscillatoryAttribute);
                    this._oscillatory = value;
                    this.OnOscillatoryChanged(e);
                    this.OnPropertyChanged("Oscillatory", e, _oscillatoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The outOfRange property
        /// </summary>
        [XmlElementNameAttribute("outOfRange")]
        [XmlAttributeAttribute(true)]
        public virtual bool OutOfRange
        {
            get
            {
                return this._outOfRange;
            }
            set
            {
                if ((this._outOfRange != value))
                {
                    bool old = this._outOfRange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutOfRangeChanging(e);
                    this.OnPropertyChanging("OutOfRange", e, _outOfRangeAttribute);
                    this._outOfRange = value;
                    this.OnOutOfRangeChanged(e);
                    this.OnPropertyChanged("OutOfRange", e, _outOfRangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Quality61850")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Suspect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuspectChanging;
        
        /// <summary>
        /// Gets fired when the Suspect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuspectChanged;
        
        /// <summary>
        /// Gets fired before the EstimatorReplaced property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatorReplacedChanging;
        
        /// <summary>
        /// Gets fired when the EstimatorReplaced property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatorReplacedChanged;
        
        /// <summary>
        /// Gets fired before the Validity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityChanging;
        
        /// <summary>
        /// Gets fired when the Validity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityChanged;
        
        /// <summary>
        /// Gets fired before the BadReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BadReferenceChanging;
        
        /// <summary>
        /// Gets fired when the BadReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BadReferenceChanged;
        
        /// <summary>
        /// Gets fired before the OldData property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldDataChanging;
        
        /// <summary>
        /// Gets fired when the OldData property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldDataChanged;
        
        /// <summary>
        /// Gets fired before the Failure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanging;
        
        /// <summary>
        /// Gets fired when the Failure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanged;
        
        /// <summary>
        /// Gets fired before the OverFlow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverFlowChanging;
        
        /// <summary>
        /// Gets fired when the OverFlow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverFlowChanged;
        
        /// <summary>
        /// Gets fired before the Source property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanging;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired before the OperatorBlocked property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanging;
        
        /// <summary>
        /// Gets fired when the OperatorBlocked property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanged;
        
        /// <summary>
        /// Gets fired before the Test property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanging;
        
        /// <summary>
        /// Gets fired when the Test property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestChanged;
        
        /// <summary>
        /// Gets fired before the Oscillatory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OscillatoryChanging;
        
        /// <summary>
        /// Gets fired when the Oscillatory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OscillatoryChanged;
        
        /// <summary>
        /// Gets fired before the OutOfRange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanging;
        
        /// <summary>
        /// Gets fired when the OutOfRange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanged;
        
        private static ITypedElement RetrieveSuspectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("suspect")));
        }
        
        /// <summary>
        /// Raises the SuspectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuspectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuspectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SuspectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuspectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuspectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEstimatorReplacedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("estimatorReplaced")));
        }
        
        /// <summary>
        /// Raises the EstimatorReplacedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatorReplacedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatorReplacedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatorReplacedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatorReplacedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatorReplacedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValidityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("validity")));
        }
        
        /// <summary>
        /// Raises the ValidityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValidityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBadReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("badReference")));
        }
        
        /// <summary>
        /// Raises the BadReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBadReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BadReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BadReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBadReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BadReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOldDataAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("oldData")));
        }
        
        /// <summary>
        /// Raises the OldDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OldDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("failure")));
        }
        
        /// <summary>
        /// Raises the FailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOverFlowAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("overFlow")));
        }
        
        /// <summary>
        /// Raises the OverFlowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverFlowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverFlowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverFlowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverFlowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverFlowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSourceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("source")));
        }
        
        /// <summary>
        /// Raises the SourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperatorBlockedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("operatorBlocked")));
        }
        
        /// <summary>
        /// Raises the OperatorBlockedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatorBlockedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatorBlockedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatorBlockedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatorBlockedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatorBlockedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTestAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("test")));
        }
        
        /// <summary>
        /// Raises the TestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOscillatoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("oscillatory")));
        }
        
        /// <summary>
        /// Raises the OscillatoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOscillatoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OscillatoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OscillatoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOscillatoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OscillatoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutOfRangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Quality61850.ClassInstance)).Resolve("outOfRange")));
        }
        
        /// <summary>
        /// Raises the OutOfRangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfRangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfRangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutOfRangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfRangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfRangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUSPECT"))
            {
                return this.Suspect;
            }
            if ((attribute == "ESTIMATORREPLACED"))
            {
                return this.EstimatorReplaced;
            }
            if ((attribute == "VALIDITY"))
            {
                return this.Validity;
            }
            if ((attribute == "BADREFERENCE"))
            {
                return this.BadReference;
            }
            if ((attribute == "OLDDATA"))
            {
                return this.OldData;
            }
            if ((attribute == "FAILURE"))
            {
                return this.Failure;
            }
            if ((attribute == "OVERFLOW"))
            {
                return this.OverFlow;
            }
            if ((attribute == "SOURCE"))
            {
                return this.Source;
            }
            if ((attribute == "OPERATORBLOCKED"))
            {
                return this.OperatorBlocked;
            }
            if ((attribute == "TEST"))
            {
                return this.Test;
            }
            if ((attribute == "OSCILLATORY"))
            {
                return this.Oscillatory;
            }
            if ((attribute == "OUTOFRANGE"))
            {
                return this.OutOfRange;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUSPECT"))
            {
                this.Suspect = ((bool)(value));
                return;
            }
            if ((feature == "ESTIMATORREPLACED"))
            {
                this.EstimatorReplaced = ((bool)(value));
                return;
            }
            if ((feature == "VALIDITY"))
            {
                this.Validity = ((Validity)(value));
                return;
            }
            if ((feature == "BADREFERENCE"))
            {
                this.BadReference = ((bool)(value));
                return;
            }
            if ((feature == "OLDDATA"))
            {
                this.OldData = ((bool)(value));
                return;
            }
            if ((feature == "FAILURE"))
            {
                this.Failure = ((bool)(value));
                return;
            }
            if ((feature == "OVERFLOW"))
            {
                this.OverFlow = ((bool)(value));
                return;
            }
            if ((feature == "SOURCE"))
            {
                this.Source = ((Source)(value));
                return;
            }
            if ((feature == "OPERATORBLOCKED"))
            {
                this.OperatorBlocked = ((bool)(value));
                return;
            }
            if ((feature == "TEST"))
            {
                this.Test = ((bool)(value));
                return;
            }
            if ((feature == "OSCILLATORY"))
            {
                this.Oscillatory = ((bool)(value));
                return;
            }
            if ((feature == "OUTOFRANGE"))
            {
                this.OutOfRange = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Quality61850")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the suspect property
        /// </summary>
        private sealed class SuspectProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuspectProxy(IQuality61850 modelElement) : 
                    base(modelElement, "suspect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Suspect;
                }
                set
                {
                    this.ModelElement.Suspect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatorReplaced property
        /// </summary>
        private sealed class EstimatorReplacedProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatorReplacedProxy(IQuality61850 modelElement) : 
                    base(modelElement, "estimatorReplaced")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.EstimatorReplaced;
                }
                set
                {
                    this.ModelElement.EstimatorReplaced = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the validity property
        /// </summary>
        private sealed class ValidityProxy : ModelPropertyChange<IQuality61850, Nullable<Validity>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValidityProxy(IQuality61850 modelElement) : 
                    base(modelElement, "validity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<Validity> Value
            {
                get
                {
                    return this.ModelElement.Validity;
                }
                set
                {
                    this.ModelElement.Validity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the badReference property
        /// </summary>
        private sealed class BadReferenceProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BadReferenceProxy(IQuality61850 modelElement) : 
                    base(modelElement, "badReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.BadReference;
                }
                set
                {
                    this.ModelElement.BadReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oldData property
        /// </summary>
        private sealed class OldDataProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OldDataProxy(IQuality61850 modelElement) : 
                    base(modelElement, "oldData")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OldData;
                }
                set
                {
                    this.ModelElement.OldData = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failure property
        /// </summary>
        private sealed class FailureProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailureProxy(IQuality61850 modelElement) : 
                    base(modelElement, "failure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Failure;
                }
                set
                {
                    this.ModelElement.Failure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overFlow property
        /// </summary>
        private sealed class OverFlowProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverFlowProxy(IQuality61850 modelElement) : 
                    base(modelElement, "overFlow")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OverFlow;
                }
                set
                {
                    this.ModelElement.OverFlow = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the source property
        /// </summary>
        private sealed class SourceProxy : ModelPropertyChange<IQuality61850, Nullable<Source>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceProxy(IQuality61850 modelElement) : 
                    base(modelElement, "source")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<Source> Value
            {
                get
                {
                    return this.ModelElement.Source;
                }
                set
                {
                    this.ModelElement.Source = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operatorBlocked property
        /// </summary>
        private sealed class OperatorBlockedProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatorBlockedProxy(IQuality61850 modelElement) : 
                    base(modelElement, "operatorBlocked")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OperatorBlocked;
                }
                set
                {
                    this.ModelElement.OperatorBlocked = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the test property
        /// </summary>
        private sealed class TestProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TestProxy(IQuality61850 modelElement) : 
                    base(modelElement, "test")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Test;
                }
                set
                {
                    this.ModelElement.Test = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oscillatory property
        /// </summary>
        private sealed class OscillatoryProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OscillatoryProxy(IQuality61850 modelElement) : 
                    base(modelElement, "oscillatory")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Oscillatory;
                }
                set
                {
                    this.ModelElement.Oscillatory = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outOfRange property
        /// </summary>
        private sealed class OutOfRangeProxy : ModelPropertyChange<IQuality61850, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutOfRangeProxy(IQuality61850 modelElement) : 
                    base(modelElement, "outOfRange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OutOfRange;
                }
                set
                {
                    this.ModelElement.OutOfRange = value;
                }
            }
        }
    }
}

