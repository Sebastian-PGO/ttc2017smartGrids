//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.ControlArea
{
    
    
    /// <summary>
    /// The public interface for ControlArea
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ControlArea))]
    [XmlDefaultImplementationTypeAttribute(typeof(ControlArea))]
    public interface IControlArea : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The type property
        /// </summary>
        Nullable<ControlAreaTypeKind> Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pTolerance property
        /// </summary>
        float PTolerance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The netInterchange property
        /// </summary>
        float NetInterchange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ControlAreaGeneratingUnit property
        /// </summary>
        IOrderedSetExpression<IControlAreaGeneratingUnit> ControlAreaGeneratingUnit
        {
            get;
        }
        
        /// <summary>
        /// The EnergyArea property
        /// </summary>
        IEnergyArea EnergyArea
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TieFlow property
        /// </summary>
        IOrderedSetExpression<ITieFlow> TieFlow
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the PTolerance property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PToleranceChanging;
        
        /// <summary>
        /// Gets fired when the PTolerance property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PToleranceChanged;
        
        /// <summary>
        /// Gets fired before the NetInterchange property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NetInterchangeChanging;
        
        /// <summary>
        /// Gets fired when the NetInterchange property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NetInterchangeChanged;
        
        /// <summary>
        /// Gets fired before the EnergyArea property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyAreaChanging;
        
        /// <summary>
        /// Gets fired when the EnergyArea property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyAreaChanged;
    }
}

