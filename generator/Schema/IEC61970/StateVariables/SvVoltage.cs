//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.StateVariables
{
    
    
    /// <summary>
    /// The default implementation of the SvVoltage class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#StateVariables")]
    [XmlNamespacePrefixAttribute("cimStateVariables")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvVoltage")]
    [DebuggerDisplayAttribute("SvVoltage {UUID}")]
    public partial class SvVoltage : StateVariable, ISvVoltage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the V property
        /// </summary>
        private float _v;
        
        private static Lazy<ITypedElement> _vAttribute = new Lazy<ITypedElement>(RetrieveVAttribute);
        
        /// <summary>
        /// The backing field for the Angle property
        /// </summary>
        private float _angle;
        
        private static Lazy<ITypedElement> _angleAttribute = new Lazy<ITypedElement>(RetrieveAngleAttribute);
        
        private static Lazy<ITypedElement> _topologicalNodeReference = new Lazy<ITypedElement>(RetrieveTopologicalNodeReference);
        
        /// <summary>
        /// The backing field for the TopologicalNode property
        /// </summary>
        private ITopologicalNode _topologicalNode;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The v property
        /// </summary>
        [XmlElementNameAttribute("v")]
        [XmlAttributeAttribute(true)]
        public virtual float V
        {
            get
            {
                return this._v;
            }
            set
            {
                if ((this._v != value))
                {
                    float old = this._v;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVChanging(e);
                    this.OnPropertyChanging("V", e, _vAttribute);
                    this._v = value;
                    this.OnVChanged(e);
                    this.OnPropertyChanged("V", e, _vAttribute);
                }
            }
        }
        
        /// <summary>
        /// The angle property
        /// </summary>
        [XmlElementNameAttribute("angle")]
        [XmlAttributeAttribute(true)]
        public virtual float Angle
        {
            get
            {
                return this._angle;
            }
            set
            {
                if ((this._angle != value))
                {
                    float old = this._angle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngleChanging(e);
                    this.OnPropertyChanging("Angle", e, _angleAttribute);
                    this._angle = value;
                    this.OnAngleChanged(e);
                    this.OnPropertyChanged("Angle", e, _angleAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TopologicalNode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SvVoltage")]
        public virtual ITopologicalNode TopologicalNode
        {
            get
            {
                return this._topologicalNode;
            }
            set
            {
                if ((this._topologicalNode != value))
                {
                    ITopologicalNode old = this._topologicalNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopologicalNodeChanging(e);
                    this.OnPropertyChanging("TopologicalNode", e, _topologicalNodeReference);
                    this._topologicalNode = value;
                    if ((old != null))
                    {
                        old.SvVoltage = null;
                        old.Deleted -= this.OnResetTopologicalNode;
                    }
                    if ((value != null))
                    {
                        value.SvVoltage = this;
                        value.Deleted += this.OnResetTopologicalNode;
                    }
                    this.OnTopologicalNodeChanged(e);
                    this.OnPropertyChanged("TopologicalNode", e, _topologicalNodeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SvVoltageReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvVoltage")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the V property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VChanging;
        
        /// <summary>
        /// Gets fired when the V property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VChanged;
        
        /// <summary>
        /// Gets fired before the Angle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngleChanging;
        
        /// <summary>
        /// Gets fired when the Angle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngleChanged;
        
        /// <summary>
        /// Gets fired before the TopologicalNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanging;
        
        /// <summary>
        /// Gets fired when the TopologicalNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanged;
        
        private static ITypedElement RetrieveVAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SvVoltage.ClassInstance)).Resolve("v")));
        }
        
        /// <summary>
        /// Raises the VChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAngleAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SvVoltage.ClassInstance)).Resolve("angle")));
        }
        
        /// <summary>
        /// Raises the AngleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTopologicalNodeReference()
        {
            return ((ITypedElement)(((ModelElement)(SvVoltage.ClassInstance)).Resolve("TopologicalNode")));
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TopologicalNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTopologicalNode(object sender, System.EventArgs eventArgs)
        {
            this.TopologicalNode = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "V"))
            {
                return this.V;
            }
            if ((attribute == "ANGLE"))
            {
                return this.Angle;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOPOLOGICALNODE"))
            {
                this.TopologicalNode = ((ITopologicalNode)(value));
                return;
            }
            if ((feature == "V"))
            {
                this.V = ((float)(value));
                return;
            }
            if ((feature == "ANGLE"))
            {
                this.Angle = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvVoltage")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SvVoltage class
        /// </summary>
        public class SvVoltageReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SvVoltage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SvVoltageReferencedElementsCollection(SvVoltage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TopologicalNode != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TopologicalNodeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TopologicalNodeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TopologicalNode == null))
                {
                    ITopologicalNode topologicalNodeCasted = item.As<ITopologicalNode>();
                    if ((topologicalNodeCasted != null))
                    {
                        this._parent.TopologicalNode = topologicalNodeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TopologicalNode = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TopologicalNode))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TopologicalNode != null))
                {
                    array[arrayIndex] = this._parent.TopologicalNode;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TopologicalNode == item))
                {
                    this._parent.TopologicalNode = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TopologicalNode).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the v property
        /// </summary>
        private sealed class VProxy : ModelPropertyChange<ISvVoltage, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VProxy(ISvVoltage modelElement) : 
                    base(modelElement, "v")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.V;
                }
                set
                {
                    this.ModelElement.V = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the angle property
        /// </summary>
        private sealed class AngleProxy : ModelPropertyChange<ISvVoltage, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngleProxy(ISvVoltage modelElement) : 
                    base(modelElement, "angle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Angle;
                }
                set
                {
                    this.ModelElement.Angle = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TopologicalNode property
        /// </summary>
        private sealed class TopologicalNodeProxy : ModelPropertyChange<ISvVoltage, ITopologicalNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopologicalNodeProxy(ISvVoltage modelElement) : 
                    base(modelElement, "TopologicalNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITopologicalNode Value
            {
                get
                {
                    return this.ModelElement.TopologicalNode;
                }
                set
                {
                    this.ModelElement.TopologicalNode = value;
                }
            }
        }
    }
}

