//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.StateVariables
{
    
    
    /// <summary>
    /// The default implementation of the SvShuntCompensatorSections class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#StateVariables")]
    [XmlNamespacePrefixAttribute("cimStateVariables")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvShuntCompens" +
        "atorSections")]
    [DebuggerDisplayAttribute("SvShuntCompensatorSections {UUID}")]
    public partial class SvShuntCompensatorSections : StateVariable, ISvShuntCompensatorSections, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ContinuousSections property
        /// </summary>
        private float _continuousSections;
        
        private static Lazy<ITypedElement> _continuousSectionsAttribute = new Lazy<ITypedElement>(RetrieveContinuousSectionsAttribute);
        
        /// <summary>
        /// The backing field for the Sections property
        /// </summary>
        private int _sections;
        
        private static Lazy<ITypedElement> _sectionsAttribute = new Lazy<ITypedElement>(RetrieveSectionsAttribute);
        
        private static Lazy<ITypedElement> _shuntCompensatorReference = new Lazy<ITypedElement>(RetrieveShuntCompensatorReference);
        
        /// <summary>
        /// The backing field for the ShuntCompensator property
        /// </summary>
        private IShuntCompensator _shuntCompensator;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The continuousSections property
        /// </summary>
        [XmlElementNameAttribute("continuousSections")]
        [XmlAttributeAttribute(true)]
        public virtual float ContinuousSections
        {
            get
            {
                return this._continuousSections;
            }
            set
            {
                if ((this._continuousSections != value))
                {
                    float old = this._continuousSections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContinuousSectionsChanging(e);
                    this.OnPropertyChanging("ContinuousSections", e, _continuousSectionsAttribute);
                    this._continuousSections = value;
                    this.OnContinuousSectionsChanged(e);
                    this.OnPropertyChanged("ContinuousSections", e, _continuousSectionsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sections property
        /// </summary>
        [XmlElementNameAttribute("sections")]
        [XmlAttributeAttribute(true)]
        public virtual int Sections
        {
            get
            {
                return this._sections;
            }
            set
            {
                if ((this._sections != value))
                {
                    int old = this._sections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSectionsChanging(e);
                    this.OnPropertyChanging("Sections", e, _sectionsAttribute);
                    this._sections = value;
                    this.OnSectionsChanged(e);
                    this.OnPropertyChanged("Sections", e, _sectionsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ShuntCompensator property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SvShuntCompensatorSections")]
        public virtual IShuntCompensator ShuntCompensator
        {
            get
            {
                return this._shuntCompensator;
            }
            set
            {
                if ((this._shuntCompensator != value))
                {
                    IShuntCompensator old = this._shuntCompensator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShuntCompensatorChanging(e);
                    this.OnPropertyChanging("ShuntCompensator", e, _shuntCompensatorReference);
                    this._shuntCompensator = value;
                    if ((old != null))
                    {
                        old.SvShuntCompensatorSections = null;
                        old.Deleted -= this.OnResetShuntCompensator;
                    }
                    if ((value != null))
                    {
                        value.SvShuntCompensatorSections = this;
                        value.Deleted += this.OnResetShuntCompensator;
                    }
                    this.OnShuntCompensatorChanged(e);
                    this.OnPropertyChanged("ShuntCompensator", e, _shuntCompensatorReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SvShuntCompensatorSectionsReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvShuntCompens" +
                            "atorSections")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ContinuousSections property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContinuousSectionsChanging;
        
        /// <summary>
        /// Gets fired when the ContinuousSections property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContinuousSectionsChanged;
        
        /// <summary>
        /// Gets fired before the Sections property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SectionsChanging;
        
        /// <summary>
        /// Gets fired when the Sections property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SectionsChanged;
        
        /// <summary>
        /// Gets fired before the ShuntCompensator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShuntCompensatorChanging;
        
        /// <summary>
        /// Gets fired when the ShuntCompensator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShuntCompensatorChanged;
        
        private static ITypedElement RetrieveContinuousSectionsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SvShuntCompensatorSections.ClassInstance)).Resolve("continuousSections")));
        }
        
        /// <summary>
        /// Raises the ContinuousSectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContinuousSectionsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContinuousSectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContinuousSectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContinuousSectionsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContinuousSectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSectionsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SvShuntCompensatorSections.ClassInstance)).Resolve("sections")));
        }
        
        /// <summary>
        /// Raises the SectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSectionsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSectionsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShuntCompensatorReference()
        {
            return ((ITypedElement)(((ModelElement)(SvShuntCompensatorSections.ClassInstance)).Resolve("ShuntCompensator")));
        }
        
        /// <summary>
        /// Raises the ShuntCompensatorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShuntCompensatorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShuntCompensatorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShuntCompensatorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShuntCompensatorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShuntCompensatorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ShuntCompensator property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetShuntCompensator(object sender, System.EventArgs eventArgs)
        {
            this.ShuntCompensator = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONTINUOUSSECTIONS"))
            {
                return this.ContinuousSections;
            }
            if ((attribute == "SECTIONS"))
            {
                return this.Sections;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SHUNTCOMPENSATOR"))
            {
                this.ShuntCompensator = ((IShuntCompensator)(value));
                return;
            }
            if ((feature == "CONTINUOUSSECTIONS"))
            {
                this.ContinuousSections = ((float)(value));
                return;
            }
            if ((feature == "SECTIONS"))
            {
                this.Sections = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ShuntCompensator"))
            {
                return new ShuntCompensatorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ShuntCompensator"))
            {
                return new ShuntCompensatorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/StateVariables/SvShuntCompens" +
                        "atorSections")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SvShuntCompensatorSections class
        /// </summary>
        public class SvShuntCompensatorSectionsReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SvShuntCompensatorSections _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SvShuntCompensatorSectionsReferencedElementsCollection(SvShuntCompensatorSections parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ShuntCompensator != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ShuntCompensatorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ShuntCompensatorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ShuntCompensator == null))
                {
                    IShuntCompensator shuntCompensatorCasted = item.As<IShuntCompensator>();
                    if ((shuntCompensatorCasted != null))
                    {
                        this._parent.ShuntCompensator = shuntCompensatorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ShuntCompensator = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ShuntCompensator))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ShuntCompensator != null))
                {
                    array[arrayIndex] = this._parent.ShuntCompensator;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ShuntCompensator == item))
                {
                    this._parent.ShuntCompensator = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ShuntCompensator).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the continuousSections property
        /// </summary>
        private sealed class ContinuousSectionsProxy : ModelPropertyChange<ISvShuntCompensatorSections, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContinuousSectionsProxy(ISvShuntCompensatorSections modelElement) : 
                    base(modelElement, "continuousSections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ContinuousSections;
                }
                set
                {
                    this.ModelElement.ContinuousSections = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sections property
        /// </summary>
        private sealed class SectionsProxy : ModelPropertyChange<ISvShuntCompensatorSections, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SectionsProxy(ISvShuntCompensatorSections modelElement) : 
                    base(modelElement, "sections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Sections;
                }
                set
                {
                    this.ModelElement.Sections = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ShuntCompensator property
        /// </summary>
        private sealed class ShuntCompensatorProxy : ModelPropertyChange<ISvShuntCompensatorSections, IShuntCompensator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShuntCompensatorProxy(ISvShuntCompensatorSections modelElement) : 
                    base(modelElement, "ShuntCompensator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IShuntCompensator Value
            {
                get
                {
                    return this.ModelElement.ShuntCompensator;
                }
                set
                {
                    this.ModelElement.ShuntCompensator = value;
                }
            }
        }
    }
}

