//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Protection
{
    
    
    /// <summary>
    /// The public interface for ProtectionEquipment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ProtectionEquipment))]
    [XmlDefaultImplementationTypeAttribute(typeof(ProtectionEquipment))]
    public interface IProtectionEquipment : IModelElement, IEquipment
    {
        
        /// <summary>
        /// The highLimit property
        /// </summary>
        float HighLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The relayDelayTime property
        /// </summary>
        float RelayDelayTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The powerDirectionFlag property
        /// </summary>
        bool PowerDirectionFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowLimit property
        /// </summary>
        float LowLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductingEquipments property
        /// </summary>
        IOrderedSetExpression<IConductingEquipment> ConductingEquipments
        {
            get;
        }
        
        /// <summary>
        /// The Unit property
        /// </summary>
        IUnit Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ProtectedSwitches property
        /// </summary>
        IOrderedSetExpression<IProtectedSwitch> ProtectedSwitches
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the HighLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighLimitChanged;
        
        /// <summary>
        /// Gets fired before the RelayDelayTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RelayDelayTimeChanging;
        
        /// <summary>
        /// Gets fired when the RelayDelayTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RelayDelayTimeChanged;
        
        /// <summary>
        /// Gets fired before the PowerDirectionFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerDirectionFlagChanging;
        
        /// <summary>
        /// Gets fired when the PowerDirectionFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerDirectionFlagChanged;
        
        /// <summary>
        /// Gets fired before the LowLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowLimitChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanged;
    }
}

