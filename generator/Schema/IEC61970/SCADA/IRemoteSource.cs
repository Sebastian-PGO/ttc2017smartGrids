//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.SCADA
{
    
    
    /// <summary>
    /// The public interface for RemoteSource
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RemoteSource))]
    [XmlDefaultImplementationTypeAttribute(typeof(RemoteSource))]
    public interface IRemoteSource : IModelElement, IRemotePoint
    {
        
        /// <summary>
        /// The deadband property
        /// </summary>
        float Deadband
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sensorMinimum property
        /// </summary>
        float SensorMinimum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scanInterval property
        /// </summary>
        float ScanInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sensorMaximum property
        /// </summary>
        float SensorMaximum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeasurementValue property
        /// </summary>
        IMeasurementValue MeasurementValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Deadband property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeadbandChanging;
        
        /// <summary>
        /// Gets fired when the Deadband property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeadbandChanged;
        
        /// <summary>
        /// Gets fired before the SensorMinimum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SensorMinimumChanging;
        
        /// <summary>
        /// Gets fired when the SensorMinimum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SensorMinimumChanged;
        
        /// <summary>
        /// Gets fired before the ScanInterval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScanIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ScanInterval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScanIntervalChanged;
        
        /// <summary>
        /// Gets fired before the SensorMaximum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SensorMaximumChanging;
        
        /// <summary>
        /// Gets fired when the SensorMaximum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SensorMaximumChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementValueChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementValueChanged;
    }
}

