//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Topology
{
    
    
    /// <summary>
    /// The default implementation of the TopologicalNode class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Topology")]
    [XmlNamespacePrefixAttribute("cimTopology")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Topology/TopologicalNode")]
    [DebuggerDisplayAttribute("TopologicalNode {UUID}")]
    public class TopologicalNode : IdentifiedObject, ITopologicalNode, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ReportingGroup property
        /// </summary>
        private IReportingGroup _reportingGroup;
        
        /// <summary>
        /// The backing field for the TopologicalIsland property
        /// </summary>
        private ITopologicalIsland _topologicalIsland;
        
        /// <summary>
        /// The backing field for the SvInjection property
        /// </summary>
        private ISvInjection _svInjection;
        
        /// <summary>
        /// The backing field for the Terminal property
        /// </summary>
        private TopologicalNodeTerminalCollection _terminal;
        
        /// <summary>
        /// The backing field for the ConnectivityNodeContainer property
        /// </summary>
        private IConnectivityNodeContainer _connectivityNodeContainer;
        
        /// <summary>
        /// The backing field for the ConnectivityNodes property
        /// </summary>
        private TopologicalNodeConnectivityNodesCollection _connectivityNodes;
        
        /// <summary>
        /// The backing field for the BaseVoltage property
        /// </summary>
        private IBaseVoltage _baseVoltage;
        
        /// <summary>
        /// The backing field for the SvVoltage property
        /// </summary>
        private ISvVoltage _svVoltage;
        
        /// <summary>
        /// The backing field for the SvShortCircuit property
        /// </summary>
        private ISvShortCircuit _svShortCircuit;
        
        /// <summary>
        /// The backing field for the AngleRef_TopologicalIsland property
        /// </summary>
        private ITopologicalIsland _angleRef_TopologicalIsland;
        
        private static IClass _classInstance;
        
        public TopologicalNode()
        {
            this._terminal = new TopologicalNodeTerminalCollection(this);
            this._terminal.CollectionChanging += this.TerminalCollectionChanging;
            this._terminal.CollectionChanged += this.TerminalCollectionChanged;
            this._connectivityNodes = new TopologicalNodeConnectivityNodesCollection(this);
            this._connectivityNodes.CollectionChanging += this.ConnectivityNodesCollectionChanging;
            this._connectivityNodes.CollectionChanged += this.ConnectivityNodesCollectionChanged;
        }
        
        /// <summary>
        /// The ReportingGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual IReportingGroup ReportingGroup
        {
            get
            {
                return this._reportingGroup;
            }
            set
            {
                if ((this._reportingGroup != value))
                {
                    IReportingGroup old = this._reportingGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReportingGroupChanging(e);
                    this.OnPropertyChanging("ReportingGroup", e);
                    this._reportingGroup = value;
                    if ((old != null))
                    {
                        old.TopologicalNode.Remove(this);
                        old.Deleted -= this.OnResetReportingGroup;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode.Add(this);
                        value.Deleted += this.OnResetReportingGroup;
                    }
                    this.OnReportingGroupChanged(e);
                    this.OnPropertyChanged("ReportingGroup", e);
                }
            }
        }
        
        /// <summary>
        /// The TopologicalIsland property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNodes")]
        public virtual ITopologicalIsland TopologicalIsland
        {
            get
            {
                return this._topologicalIsland;
            }
            set
            {
                if ((this._topologicalIsland != value))
                {
                    ITopologicalIsland old = this._topologicalIsland;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopologicalIslandChanging(e);
                    this.OnPropertyChanging("TopologicalIsland", e);
                    this._topologicalIsland = value;
                    if ((old != null))
                    {
                        old.TopologicalNodes.Remove(this);
                        old.Deleted -= this.OnResetTopologicalIsland;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNodes.Add(this);
                        value.Deleted += this.OnResetTopologicalIsland;
                    }
                    this.OnTopologicalIslandChanged(e);
                    this.OnPropertyChanged("TopologicalIsland", e);
                }
            }
        }
        
        /// <summary>
        /// The SvInjection property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual ISvInjection SvInjection
        {
            get
            {
                return this._svInjection;
            }
            set
            {
                if ((this._svInjection != value))
                {
                    ISvInjection old = this._svInjection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvInjectionChanging(e);
                    this.OnPropertyChanging("SvInjection", e);
                    this._svInjection = value;
                    if ((old != null))
                    {
                        old.TopologicalNode = null;
                        old.Deleted -= this.OnResetSvInjection;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode = this;
                        value.Deleted += this.OnResetSvInjection;
                    }
                    this.OnSvInjectionChanged(e);
                    this.OnPropertyChanged("SvInjection", e);
                }
            }
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITerminal> Terminal
        {
            get
            {
                return this._terminal;
            }
        }
        
        /// <summary>
        /// The ConnectivityNodeContainer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual IConnectivityNodeContainer ConnectivityNodeContainer
        {
            get
            {
                return this._connectivityNodeContainer;
            }
            set
            {
                if ((this._connectivityNodeContainer != value))
                {
                    IConnectivityNodeContainer old = this._connectivityNodeContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectivityNodeContainerChanging(e);
                    this.OnPropertyChanging("ConnectivityNodeContainer", e);
                    this._connectivityNodeContainer = value;
                    if ((old != null))
                    {
                        old.TopologicalNode.Remove(this);
                        old.Deleted -= this.OnResetConnectivityNodeContainer;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode.Add(this);
                        value.Deleted += this.OnResetConnectivityNodeContainer;
                    }
                    this.OnConnectivityNodeContainerChanged(e);
                    this.OnPropertyChanged("ConnectivityNodeContainer", e);
                }
            }
        }
        
        /// <summary>
        /// The ConnectivityNodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConnectivityNode> ConnectivityNodes
        {
            get
            {
                return this._connectivityNodes;
            }
        }
        
        /// <summary>
        /// The BaseVoltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual IBaseVoltage BaseVoltage
        {
            get
            {
                return this._baseVoltage;
            }
            set
            {
                if ((this._baseVoltage != value))
                {
                    IBaseVoltage old = this._baseVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseVoltageChanging(e);
                    this.OnPropertyChanging("BaseVoltage", e);
                    this._baseVoltage = value;
                    if ((old != null))
                    {
                        old.TopologicalNode.Remove(this);
                        old.Deleted -= this.OnResetBaseVoltage;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode.Add(this);
                        value.Deleted += this.OnResetBaseVoltage;
                    }
                    this.OnBaseVoltageChanged(e);
                    this.OnPropertyChanged("BaseVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The SvVoltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual ISvVoltage SvVoltage
        {
            get
            {
                return this._svVoltage;
            }
            set
            {
                if ((this._svVoltage != value))
                {
                    ISvVoltage old = this._svVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvVoltageChanging(e);
                    this.OnPropertyChanging("SvVoltage", e);
                    this._svVoltage = value;
                    if ((old != null))
                    {
                        old.TopologicalNode = null;
                        old.Deleted -= this.OnResetSvVoltage;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode = this;
                        value.Deleted += this.OnResetSvVoltage;
                    }
                    this.OnSvVoltageChanged(e);
                    this.OnPropertyChanged("SvVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The SvShortCircuit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TopologicalNode")]
        public virtual ISvShortCircuit SvShortCircuit
        {
            get
            {
                return this._svShortCircuit;
            }
            set
            {
                if ((this._svShortCircuit != value))
                {
                    ISvShortCircuit old = this._svShortCircuit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvShortCircuitChanging(e);
                    this.OnPropertyChanging("SvShortCircuit", e);
                    this._svShortCircuit = value;
                    if ((old != null))
                    {
                        old.TopologicalNode = null;
                        old.Deleted -= this.OnResetSvShortCircuit;
                    }
                    if ((value != null))
                    {
                        value.TopologicalNode = this;
                        value.Deleted += this.OnResetSvShortCircuit;
                    }
                    this.OnSvShortCircuitChanged(e);
                    this.OnPropertyChanged("SvShortCircuit", e);
                }
            }
        }
        
        /// <summary>
        /// The AngleRef_TopologicalIsland property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AngleRef_TopologicalNode")]
        public virtual ITopologicalIsland AngleRef_TopologicalIsland
        {
            get
            {
                return this._angleRef_TopologicalIsland;
            }
            set
            {
                if ((this._angleRef_TopologicalIsland != value))
                {
                    ITopologicalIsland old = this._angleRef_TopologicalIsland;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAngleRef_TopologicalIslandChanging(e);
                    this.OnPropertyChanging("AngleRef_TopologicalIsland", e);
                    this._angleRef_TopologicalIsland = value;
                    if ((old != null))
                    {
                        old.AngleRef_TopologicalNode = null;
                        old.Deleted -= this.OnResetAngleRef_TopologicalIsland;
                    }
                    if ((value != null))
                    {
                        value.AngleRef_TopologicalNode = this;
                        value.Deleted += this.OnResetAngleRef_TopologicalIsland;
                    }
                    this.OnAngleRef_TopologicalIslandChanged(e);
                    this.OnPropertyChanged("AngleRef_TopologicalIsland", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TopologicalNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Topology/TopologicalNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ReportingGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingGroupChanging;
        
        /// <summary>
        /// Gets fired when the ReportingGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingGroupChanged;
        
        /// <summary>
        /// Gets fired before the TopologicalIsland property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalIslandChanging;
        
        /// <summary>
        /// Gets fired when the TopologicalIsland property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalIslandChanged;
        
        /// <summary>
        /// Gets fired before the SvInjection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvInjectionChanging;
        
        /// <summary>
        /// Gets fired when the SvInjection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvInjectionChanged;
        
        /// <summary>
        /// Gets fired before the ConnectivityNodeContainer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanging;
        
        /// <summary>
        /// Gets fired when the ConnectivityNodeContainer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanged;
        
        /// <summary>
        /// Gets fired before the BaseVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BaseVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SvVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvVoltageChanging;
        
        /// <summary>
        /// Gets fired when the SvVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SvShortCircuit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvShortCircuitChanging;
        
        /// <summary>
        /// Gets fired when the SvShortCircuit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvShortCircuitChanged;
        
        /// <summary>
        /// Gets fired before the AngleRef_TopologicalIsland property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngleRef_TopologicalIslandChanging;
        
        /// <summary>
        /// Gets fired when the AngleRef_TopologicalIsland property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AngleRef_TopologicalIslandChanged;
        
        /// <summary>
        /// Raises the ReportingGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReportingGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReportingGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReportingGroup(object sender, System.EventArgs eventArgs)
        {
            this.ReportingGroup = null;
        }
        
        /// <summary>
        /// Raises the TopologicalIslandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalIslandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalIslandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopologicalIslandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalIslandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalIslandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TopologicalIsland property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTopologicalIsland(object sender, System.EventArgs eventArgs)
        {
            this.TopologicalIsland = null;
        }
        
        /// <summary>
        /// Raises the SvInjectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvInjectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvInjectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvInjectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvInjectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvInjectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvInjection property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvInjection(object sender, System.EventArgs eventArgs)
        {
            this.SvInjection = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Terminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Terminal", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Terminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Terminal", e);
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConnectivityNodeContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConnectivityNodeContainer(object sender, System.EventArgs eventArgs)
        {
            this.ConnectivityNodeContainer = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConnectivityNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectivityNodesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConnectivityNodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConnectivityNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectivityNodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConnectivityNodes", e);
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BaseVoltage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBaseVoltage(object sender, System.EventArgs eventArgs)
        {
            this.BaseVoltage = null;
        }
        
        /// <summary>
        /// Raises the SvVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvVoltage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvVoltage(object sender, System.EventArgs eventArgs)
        {
            this.SvVoltage = null;
        }
        
        /// <summary>
        /// Raises the SvShortCircuitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvShortCircuitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvShortCircuitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvShortCircuitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvShortCircuitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvShortCircuitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvShortCircuit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvShortCircuit(object sender, System.EventArgs eventArgs)
        {
            this.SvShortCircuit = null;
        }
        
        /// <summary>
        /// Raises the AngleRef_TopologicalIslandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngleRef_TopologicalIslandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngleRef_TopologicalIslandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AngleRef_TopologicalIslandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAngleRef_TopologicalIslandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AngleRef_TopologicalIslandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AngleRef_TopologicalIsland property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAngleRef_TopologicalIsland(object sender, System.EventArgs eventArgs)
        {
            this.AngleRef_TopologicalIsland = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TERMINAL"))
            {
                return this._terminal;
            }
            if ((feature == "CONNECTIVITYNODES"))
            {
                return this._connectivityNodes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPORTINGGROUP"))
            {
                this.ReportingGroup = ((IReportingGroup)(value));
                return;
            }
            if ((feature == "TOPOLOGICALISLAND"))
            {
                this.TopologicalIsland = ((ITopologicalIsland)(value));
                return;
            }
            if ((feature == "SVINJECTION"))
            {
                this.SvInjection = ((ISvInjection)(value));
                return;
            }
            if ((feature == "CONNECTIVITYNODECONTAINER"))
            {
                this.ConnectivityNodeContainer = ((IConnectivityNodeContainer)(value));
                return;
            }
            if ((feature == "BASEVOLTAGE"))
            {
                this.BaseVoltage = ((IBaseVoltage)(value));
                return;
            }
            if ((feature == "SVVOLTAGE"))
            {
                this.SvVoltage = ((ISvVoltage)(value));
                return;
            }
            if ((feature == "SVSHORTCIRCUIT"))
            {
                this.SvShortCircuit = ((ISvShortCircuit)(value));
                return;
            }
            if ((feature == "ANGLEREF_TOPOLOGICALISLAND"))
            {
                this.AngleRef_TopologicalIsland = ((ITopologicalIsland)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReportingGroup"))
            {
                return new ReportingGroupProxy(this);
            }
            if ((attribute == "TopologicalIsland"))
            {
                return new TopologicalIslandProxy(this);
            }
            if ((attribute == "SvInjection"))
            {
                return new SvInjectionProxy(this);
            }
            if ((attribute == "ConnectivityNodeContainer"))
            {
                return new ConnectivityNodeContainerProxy(this);
            }
            if ((attribute == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((attribute == "SvVoltage"))
            {
                return new SvVoltageProxy(this);
            }
            if ((attribute == "SvShortCircuit"))
            {
                return new SvShortCircuitProxy(this);
            }
            if ((attribute == "AngleRef_TopologicalIsland"))
            {
                return new AngleRef_TopologicalIslandProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReportingGroup"))
            {
                return new ReportingGroupProxy(this);
            }
            if ((reference == "TopologicalIsland"))
            {
                return new TopologicalIslandProxy(this);
            }
            if ((reference == "SvInjection"))
            {
                return new SvInjectionProxy(this);
            }
            if ((reference == "ConnectivityNodeContainer"))
            {
                return new ConnectivityNodeContainerProxy(this);
            }
            if ((reference == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((reference == "SvVoltage"))
            {
                return new SvVoltageProxy(this);
            }
            if ((reference == "SvShortCircuit"))
            {
                return new SvShortCircuitProxy(this);
            }
            if ((reference == "AngleRef_TopologicalIsland"))
            {
                return new AngleRef_TopologicalIslandProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Topology/TopologicalNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TopologicalNode class
        /// </summary>
        public class TopologicalNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TopologicalNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TopologicalNodeReferencedElementsCollection(TopologicalNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ReportingGroup != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TopologicalIsland != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SvInjection != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Terminal.Count);
                    if ((this._parent.ConnectivityNodeContainer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConnectivityNodes.Count);
                    if ((this._parent.BaseVoltage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SvVoltage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SvShortCircuit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AngleRef_TopologicalIsland != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReportingGroupChanged += this.PropagateValueChanges;
                this._parent.TopologicalIslandChanged += this.PropagateValueChanges;
                this._parent.SvInjectionChanged += this.PropagateValueChanges;
                this._parent.Terminal.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConnectivityNodeContainerChanged += this.PropagateValueChanges;
                this._parent.ConnectivityNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged += this.PropagateValueChanges;
                this._parent.SvVoltageChanged += this.PropagateValueChanges;
                this._parent.SvShortCircuitChanged += this.PropagateValueChanges;
                this._parent.AngleRef_TopologicalIslandChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReportingGroupChanged -= this.PropagateValueChanges;
                this._parent.TopologicalIslandChanged -= this.PropagateValueChanges;
                this._parent.SvInjectionChanged -= this.PropagateValueChanges;
                this._parent.Terminal.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConnectivityNodeContainerChanged -= this.PropagateValueChanges;
                this._parent.ConnectivityNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged -= this.PropagateValueChanges;
                this._parent.SvVoltageChanged -= this.PropagateValueChanges;
                this._parent.SvShortCircuitChanged -= this.PropagateValueChanges;
                this._parent.AngleRef_TopologicalIslandChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ReportingGroup == null))
                {
                    IReportingGroup reportingGroupCasted = item.As<IReportingGroup>();
                    if ((reportingGroupCasted != null))
                    {
                        this._parent.ReportingGroup = reportingGroupCasted;
                        return;
                    }
                }
                if ((this._parent.TopologicalIsland == null))
                {
                    ITopologicalIsland topologicalIslandCasted = item.As<ITopologicalIsland>();
                    if ((topologicalIslandCasted != null))
                    {
                        this._parent.TopologicalIsland = topologicalIslandCasted;
                        return;
                    }
                }
                if ((this._parent.SvInjection == null))
                {
                    ISvInjection svInjectionCasted = item.As<ISvInjection>();
                    if ((svInjectionCasted != null))
                    {
                        this._parent.SvInjection = svInjectionCasted;
                        return;
                    }
                }
                ITerminal terminalCasted = item.As<ITerminal>();
                if ((terminalCasted != null))
                {
                    this._parent.Terminal.Add(terminalCasted);
                }
                if ((this._parent.ConnectivityNodeContainer == null))
                {
                    IConnectivityNodeContainer connectivityNodeContainerCasted = item.As<IConnectivityNodeContainer>();
                    if ((connectivityNodeContainerCasted != null))
                    {
                        this._parent.ConnectivityNodeContainer = connectivityNodeContainerCasted;
                        return;
                    }
                }
                IConnectivityNode connectivityNodesCasted = item.As<IConnectivityNode>();
                if ((connectivityNodesCasted != null))
                {
                    this._parent.ConnectivityNodes.Add(connectivityNodesCasted);
                }
                if ((this._parent.BaseVoltage == null))
                {
                    IBaseVoltage baseVoltageCasted = item.As<IBaseVoltage>();
                    if ((baseVoltageCasted != null))
                    {
                        this._parent.BaseVoltage = baseVoltageCasted;
                        return;
                    }
                }
                if ((this._parent.SvVoltage == null))
                {
                    ISvVoltage svVoltageCasted = item.As<ISvVoltage>();
                    if ((svVoltageCasted != null))
                    {
                        this._parent.SvVoltage = svVoltageCasted;
                        return;
                    }
                }
                if ((this._parent.SvShortCircuit == null))
                {
                    ISvShortCircuit svShortCircuitCasted = item.As<ISvShortCircuit>();
                    if ((svShortCircuitCasted != null))
                    {
                        this._parent.SvShortCircuit = svShortCircuitCasted;
                        return;
                    }
                }
                if ((this._parent.AngleRef_TopologicalIsland == null))
                {
                    ITopologicalIsland angleRef_TopologicalIslandCasted = item.As<ITopologicalIsland>();
                    if ((angleRef_TopologicalIslandCasted != null))
                    {
                        this._parent.AngleRef_TopologicalIsland = angleRef_TopologicalIslandCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReportingGroup = null;
                this._parent.TopologicalIsland = null;
                this._parent.SvInjection = null;
                this._parent.Terminal.Clear();
                this._parent.ConnectivityNodeContainer = null;
                this._parent.ConnectivityNodes.Clear();
                this._parent.BaseVoltage = null;
                this._parent.SvVoltage = null;
                this._parent.SvShortCircuit = null;
                this._parent.AngleRef_TopologicalIsland = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ReportingGroup))
                {
                    return true;
                }
                if ((item == this._parent.TopologicalIsland))
                {
                    return true;
                }
                if ((item == this._parent.SvInjection))
                {
                    return true;
                }
                if (this._parent.Terminal.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ConnectivityNodeContainer))
                {
                    return true;
                }
                if (this._parent.ConnectivityNodes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BaseVoltage))
                {
                    return true;
                }
                if ((item == this._parent.SvVoltage))
                {
                    return true;
                }
                if ((item == this._parent.SvShortCircuit))
                {
                    return true;
                }
                if ((item == this._parent.AngleRef_TopologicalIsland))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ReportingGroup != null))
                {
                    array[arrayIndex] = this._parent.ReportingGroup;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TopologicalIsland != null))
                {
                    array[arrayIndex] = this._parent.TopologicalIsland;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SvInjection != null))
                {
                    array[arrayIndex] = this._parent.SvInjection;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> terminalEnumerator = this._parent.Terminal.GetEnumerator();
                try
                {
                    for (
                    ; terminalEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = terminalEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    terminalEnumerator.Dispose();
                }
                if ((this._parent.ConnectivityNodeContainer != null))
                {
                    array[arrayIndex] = this._parent.ConnectivityNodeContainer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> connectivityNodesEnumerator = this._parent.ConnectivityNodes.GetEnumerator();
                try
                {
                    for (
                    ; connectivityNodesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectivityNodesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectivityNodesEnumerator.Dispose();
                }
                if ((this._parent.BaseVoltage != null))
                {
                    array[arrayIndex] = this._parent.BaseVoltage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SvVoltage != null))
                {
                    array[arrayIndex] = this._parent.SvVoltage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SvShortCircuit != null))
                {
                    array[arrayIndex] = this._parent.SvShortCircuit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AngleRef_TopologicalIsland != null))
                {
                    array[arrayIndex] = this._parent.AngleRef_TopologicalIsland;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ReportingGroup == item))
                {
                    this._parent.ReportingGroup = null;
                    return true;
                }
                if ((this._parent.TopologicalIsland == item))
                {
                    this._parent.TopologicalIsland = null;
                    return true;
                }
                if ((this._parent.SvInjection == item))
                {
                    this._parent.SvInjection = null;
                    return true;
                }
                ITerminal terminalItem = item.As<ITerminal>();
                if (((terminalItem != null) 
                            && this._parent.Terminal.Remove(terminalItem)))
                {
                    return true;
                }
                if ((this._parent.ConnectivityNodeContainer == item))
                {
                    this._parent.ConnectivityNodeContainer = null;
                    return true;
                }
                IConnectivityNode connectivityNodeItem = item.As<IConnectivityNode>();
                if (((connectivityNodeItem != null) 
                            && this._parent.ConnectivityNodes.Remove(connectivityNodeItem)))
                {
                    return true;
                }
                if ((this._parent.BaseVoltage == item))
                {
                    this._parent.BaseVoltage = null;
                    return true;
                }
                if ((this._parent.SvVoltage == item))
                {
                    this._parent.SvVoltage = null;
                    return true;
                }
                if ((this._parent.SvShortCircuit == item))
                {
                    this._parent.SvShortCircuit = null;
                    return true;
                }
                if ((this._parent.AngleRef_TopologicalIsland == item))
                {
                    this._parent.AngleRef_TopologicalIsland = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReportingGroup).Concat(this._parent.TopologicalIsland).Concat(this._parent.SvInjection).Concat(this._parent.Terminal).Concat(this._parent.ConnectivityNodeContainer).Concat(this._parent.ConnectivityNodes).Concat(this._parent.BaseVoltage).Concat(this._parent.SvVoltage).Concat(this._parent.SvShortCircuit).Concat(this._parent.AngleRef_TopologicalIsland).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReportingGroup property
        /// </summary>
        private sealed class ReportingGroupProxy : ModelPropertyChange<ITopologicalNode, IReportingGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReportingGroupProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReportingGroup Value
            {
                get
                {
                    return this.ModelElement.ReportingGroup;
                }
                set
                {
                    this.ModelElement.ReportingGroup = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReportingGroupChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReportingGroupChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TopologicalIsland property
        /// </summary>
        private sealed class TopologicalIslandProxy : ModelPropertyChange<ITopologicalNode, ITopologicalIsland>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopologicalIslandProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITopologicalIsland Value
            {
                get
                {
                    return this.ModelElement.TopologicalIsland;
                }
                set
                {
                    this.ModelElement.TopologicalIsland = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopologicalIslandChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopologicalIslandChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvInjection property
        /// </summary>
        private sealed class SvInjectionProxy : ModelPropertyChange<ITopologicalNode, ISvInjection>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvInjectionProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvInjection Value
            {
                get
                {
                    return this.ModelElement.SvInjection;
                }
                set
                {
                    this.ModelElement.SvInjection = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvInjectionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvInjectionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConnectivityNodeContainer property
        /// </summary>
        private sealed class ConnectivityNodeContainerProxy : ModelPropertyChange<ITopologicalNode, IConnectivityNodeContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectivityNodeContainerProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectivityNodeContainer Value
            {
                get
                {
                    return this.ModelElement.ConnectivityNodeContainer;
                }
                set
                {
                    this.ModelElement.ConnectivityNodeContainer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectivityNodeContainerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectivityNodeContainerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BaseVoltage property
        /// </summary>
        private sealed class BaseVoltageProxy : ModelPropertyChange<ITopologicalNode, IBaseVoltage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseVoltageProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBaseVoltage Value
            {
                get
                {
                    return this.ModelElement.BaseVoltage;
                }
                set
                {
                    this.ModelElement.BaseVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvVoltage property
        /// </summary>
        private sealed class SvVoltageProxy : ModelPropertyChange<ITopologicalNode, ISvVoltage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvVoltageProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvVoltage Value
            {
                get
                {
                    return this.ModelElement.SvVoltage;
                }
                set
                {
                    this.ModelElement.SvVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvShortCircuit property
        /// </summary>
        private sealed class SvShortCircuitProxy : ModelPropertyChange<ITopologicalNode, ISvShortCircuit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvShortCircuitProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvShortCircuit Value
            {
                get
                {
                    return this.ModelElement.SvShortCircuit;
                }
                set
                {
                    this.ModelElement.SvShortCircuit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvShortCircuitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvShortCircuitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AngleRef_TopologicalIsland property
        /// </summary>
        private sealed class AngleRef_TopologicalIslandProxy : ModelPropertyChange<ITopologicalNode, ITopologicalIsland>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AngleRef_TopologicalIslandProxy(ITopologicalNode modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITopologicalIsland Value
            {
                get
                {
                    return this.ModelElement.AngleRef_TopologicalIsland;
                }
                set
                {
                    this.ModelElement.AngleRef_TopologicalIsland = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngleRef_TopologicalIslandChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AngleRef_TopologicalIslandChanged -= handler;
            }
        }
    }
}

