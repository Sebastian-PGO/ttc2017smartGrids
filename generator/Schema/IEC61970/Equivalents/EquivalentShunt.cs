//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.Equivalents
{
    
    
    /// <summary>
    /// The default implementation of the EquivalentShunt class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Equivalents")]
    [XmlNamespacePrefixAttribute("cimEquivalents")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Equivalents/EquivalentShunt")]
    [DebuggerDisplayAttribute("EquivalentShunt {UUID}")]
    public partial class EquivalentShunt : EquivalentEquipment, IEquivalentShunt, IModelElement
    {
        
        /// <summary>
        /// The backing field for the B property
        /// </summary>
        private float _b;
        
        private static Lazy<ITypedElement> _bAttribute = new Lazy<ITypedElement>(RetrieveBAttribute);
        
        /// <summary>
        /// The backing field for the G property
        /// </summary>
        private float _g;
        
        private static Lazy<ITypedElement> _gAttribute = new Lazy<ITypedElement>(RetrieveGAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The b property
        /// </summary>
        [XmlElementNameAttribute("b")]
        [XmlAttributeAttribute(true)]
        public virtual float B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    float old = this._b;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBChanging(e);
                    this.OnPropertyChanging("B", e, _bAttribute);
                    this._b = value;
                    this.OnBChanged(e);
                    this.OnPropertyChanged("B", e, _bAttribute);
                }
            }
        }
        
        /// <summary>
        /// The g property
        /// </summary>
        [XmlElementNameAttribute("g")]
        [XmlAttributeAttribute(true)]
        public virtual float G
        {
            get
            {
                return this._g;
            }
            set
            {
                if ((this._g != value))
                {
                    float old = this._g;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGChanging(e);
                    this.OnPropertyChanging("G", e, _gAttribute);
                    this._g = value;
                    this.OnGChanged(e);
                    this.OnPropertyChanged("G", e, _gAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Equivalents/EquivalentShunt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the B property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanging;
        
        /// <summary>
        /// Gets fired when the B property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanged;
        
        /// <summary>
        /// Gets fired before the G property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanging;
        
        /// <summary>
        /// Gets fired when the G property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanged;
        
        private static ITypedElement RetrieveBAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EquivalentShunt.ClassInstance)).Resolve("b")));
        }
        
        /// <summary>
        /// Raises the BChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EquivalentShunt.ClassInstance)).Resolve("g")));
        }
        
        /// <summary>
        /// Raises the GChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "B"))
            {
                return this.B;
            }
            if ((attribute == "G"))
            {
                return this.G;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "B"))
            {
                this.B = ((float)(value));
                return;
            }
            if ((feature == "G"))
            {
                this.G = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Equivalents/EquivalentShunt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b property
        /// </summary>
        private sealed class BProxy : ModelPropertyChange<IEquivalentShunt, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BProxy(IEquivalentShunt modelElement) : 
                    base(modelElement, "b")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B;
                }
                set
                {
                    this.ModelElement.B = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g property
        /// </summary>
        private sealed class GProxy : ModelPropertyChange<IEquivalentShunt, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GProxy(IEquivalentShunt modelElement) : 
                    base(modelElement, "g")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G;
                }
                set
                {
                    this.ModelElement.G = value;
                }
            }
        }
    }
}

