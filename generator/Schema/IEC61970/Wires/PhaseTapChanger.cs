//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the PhaseTapChanger class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/PhaseTapChanger")]
    [DebuggerDisplayAttribute("PhaseTapChanger {UUID}")]
    public class PhaseTapChanger : TapChanger, IPhaseTapChanger, IModelElement
    {
        
        /// <summary>
        /// The backing field for the WindingConnectionAngle property
        /// </summary>
        private float _windingConnectionAngle;
        
        /// <summary>
        /// The backing field for the PhaseTapChangerType property
        /// </summary>
        private Nullable<PhaseTapChangerKind> _phaseTapChangerType;
        
        /// <summary>
        /// The backing field for the StepPhaseShiftIncrement property
        /// </summary>
        private float _stepPhaseShiftIncrement;
        
        /// <summary>
        /// The backing field for the VoltageStepIncrementOutOfPhase property
        /// </summary>
        private float _voltageStepIncrementOutOfPhase;
        
        /// <summary>
        /// The backing field for the NominalVoltageOutOfPhase property
        /// </summary>
        private float _nominalVoltageOutOfPhase;
        
        /// <summary>
        /// The backing field for the XStepMax property
        /// </summary>
        private float _xStepMax;
        
        /// <summary>
        /// The backing field for the XStepMin property
        /// </summary>
        private float _xStepMin;
        
        /// <summary>
        /// The backing field for the TransformerWinding property
        /// </summary>
        private ITransformerWinding _transformerWinding;
        
        /// <summary>
        /// The backing field for the Winding property
        /// </summary>
        private IDistributionTransformerWinding _winding;
        
        /// <summary>
        /// The backing field for the PhaseVariationCurve property
        /// </summary>
        private IPhaseVariationCurve _phaseVariationCurve;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The windingConnectionAngle property
        /// </summary>
        [XmlElementNameAttribute("windingConnectionAngle")]
        [XmlAttributeAttribute(true)]
        public virtual float WindingConnectionAngle
        {
            get
            {
                return this._windingConnectionAngle;
            }
            set
            {
                if ((this._windingConnectionAngle != value))
                {
                    float old = this._windingConnectionAngle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingConnectionAngleChanging(e);
                    this.OnPropertyChanging("WindingConnectionAngle", e);
                    this._windingConnectionAngle = value;
                    this.OnWindingConnectionAngleChanged(e);
                    this.OnPropertyChanged("WindingConnectionAngle", e);
                }
            }
        }
        
        /// <summary>
        /// The phaseTapChangerType property
        /// </summary>
        [XmlElementNameAttribute("phaseTapChangerType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseTapChangerKind> PhaseTapChangerType
        {
            get
            {
                return this._phaseTapChangerType;
            }
            set
            {
                if ((this._phaseTapChangerType != value))
                {
                    Nullable<PhaseTapChangerKind> old = this._phaseTapChangerType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseTapChangerTypeChanging(e);
                    this.OnPropertyChanging("PhaseTapChangerType", e);
                    this._phaseTapChangerType = value;
                    this.OnPhaseTapChangerTypeChanged(e);
                    this.OnPropertyChanged("PhaseTapChangerType", e);
                }
            }
        }
        
        /// <summary>
        /// The stepPhaseShiftIncrement property
        /// </summary>
        [XmlElementNameAttribute("stepPhaseShiftIncrement")]
        [XmlAttributeAttribute(true)]
        public virtual float StepPhaseShiftIncrement
        {
            get
            {
                return this._stepPhaseShiftIncrement;
            }
            set
            {
                if ((this._stepPhaseShiftIncrement != value))
                {
                    float old = this._stepPhaseShiftIncrement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepPhaseShiftIncrementChanging(e);
                    this.OnPropertyChanging("StepPhaseShiftIncrement", e);
                    this._stepPhaseShiftIncrement = value;
                    this.OnStepPhaseShiftIncrementChanged(e);
                    this.OnPropertyChanged("StepPhaseShiftIncrement", e);
                }
            }
        }
        
        /// <summary>
        /// The voltageStepIncrementOutOfPhase property
        /// </summary>
        [XmlElementNameAttribute("voltageStepIncrementOutOfPhase")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltageStepIncrementOutOfPhase
        {
            get
            {
                return this._voltageStepIncrementOutOfPhase;
            }
            set
            {
                if ((this._voltageStepIncrementOutOfPhase != value))
                {
                    float old = this._voltageStepIncrementOutOfPhase;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageStepIncrementOutOfPhaseChanging(e);
                    this.OnPropertyChanging("VoltageStepIncrementOutOfPhase", e);
                    this._voltageStepIncrementOutOfPhase = value;
                    this.OnVoltageStepIncrementOutOfPhaseChanged(e);
                    this.OnPropertyChanged("VoltageStepIncrementOutOfPhase", e);
                }
            }
        }
        
        /// <summary>
        /// The nominalVoltageOutOfPhase property
        /// </summary>
        [XmlElementNameAttribute("nominalVoltageOutOfPhase")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalVoltageOutOfPhase
        {
            get
            {
                return this._nominalVoltageOutOfPhase;
            }
            set
            {
                if ((this._nominalVoltageOutOfPhase != value))
                {
                    float old = this._nominalVoltageOutOfPhase;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalVoltageOutOfPhaseChanging(e);
                    this.OnPropertyChanging("NominalVoltageOutOfPhase", e);
                    this._nominalVoltageOutOfPhase = value;
                    this.OnNominalVoltageOutOfPhaseChanged(e);
                    this.OnPropertyChanged("NominalVoltageOutOfPhase", e);
                }
            }
        }
        
        /// <summary>
        /// The xStepMax property
        /// </summary>
        [XmlElementNameAttribute("xStepMax")]
        [XmlAttributeAttribute(true)]
        public virtual float XStepMax
        {
            get
            {
                return this._xStepMax;
            }
            set
            {
                if ((this._xStepMax != value))
                {
                    float old = this._xStepMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXStepMaxChanging(e);
                    this.OnPropertyChanging("XStepMax", e);
                    this._xStepMax = value;
                    this.OnXStepMaxChanged(e);
                    this.OnPropertyChanged("XStepMax", e);
                }
            }
        }
        
        /// <summary>
        /// The xStepMin property
        /// </summary>
        [XmlElementNameAttribute("xStepMin")]
        [XmlAttributeAttribute(true)]
        public virtual float XStepMin
        {
            get
            {
                return this._xStepMin;
            }
            set
            {
                if ((this._xStepMin != value))
                {
                    float old = this._xStepMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXStepMinChanging(e);
                    this.OnPropertyChanging("XStepMin", e);
                    this._xStepMin = value;
                    this.OnXStepMinChanged(e);
                    this.OnPropertyChanged("XStepMin", e);
                }
            }
        }
        
        /// <summary>
        /// The TransformerWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PhaseTapChanger")]
        public virtual ITransformerWinding TransformerWinding
        {
            get
            {
                return this._transformerWinding;
            }
            set
            {
                if ((this._transformerWinding != value))
                {
                    ITransformerWinding old = this._transformerWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerWindingChanging(e);
                    this.OnPropertyChanging("TransformerWinding", e);
                    this._transformerWinding = value;
                    if ((old != null))
                    {
                        old.PhaseTapChanger = null;
                        old.Deleted -= this.OnResetTransformerWinding;
                    }
                    if ((value != null))
                    {
                        value.PhaseTapChanger = this;
                        value.Deleted += this.OnResetTransformerWinding;
                    }
                    this.OnTransformerWindingChanged(e);
                    this.OnPropertyChanged("TransformerWinding", e);
                }
            }
        }
        
        /// <summary>
        /// The Winding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PhaseTapChanger")]
        public virtual IDistributionTransformerWinding Winding
        {
            get
            {
                return this._winding;
            }
            set
            {
                if ((this._winding != value))
                {
                    IDistributionTransformerWinding old = this._winding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingChanging(e);
                    this.OnPropertyChanging("Winding", e);
                    this._winding = value;
                    if ((old != null))
                    {
                        old.PhaseTapChanger = null;
                        old.Deleted -= this.OnResetWinding;
                    }
                    if ((value != null))
                    {
                        value.PhaseTapChanger = this;
                        value.Deleted += this.OnResetWinding;
                    }
                    this.OnWindingChanged(e);
                    this.OnPropertyChanged("Winding", e);
                }
            }
        }
        
        /// <summary>
        /// The PhaseVariationCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PhaseTapChanger")]
        public virtual IPhaseVariationCurve PhaseVariationCurve
        {
            get
            {
                return this._phaseVariationCurve;
            }
            set
            {
                if ((this._phaseVariationCurve != value))
                {
                    IPhaseVariationCurve old = this._phaseVariationCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseVariationCurveChanging(e);
                    this.OnPropertyChanging("PhaseVariationCurve", e);
                    this._phaseVariationCurve = value;
                    if ((old != null))
                    {
                        old.PhaseTapChanger = null;
                        old.Deleted -= this.OnResetPhaseVariationCurve;
                    }
                    if ((value != null))
                    {
                        value.PhaseTapChanger = this;
                        value.Deleted += this.OnResetPhaseVariationCurve;
                    }
                    this.OnPhaseVariationCurveChanged(e);
                    this.OnPropertyChanged("PhaseVariationCurve", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PhaseTapChangerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/PhaseTapChanger")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the WindingConnectionAngle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingConnectionAngleChanging;
        
        /// <summary>
        /// Gets fired when the WindingConnectionAngle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingConnectionAngleChanged;
        
        /// <summary>
        /// Gets fired before the PhaseTapChangerType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerTypeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseTapChangerType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerTypeChanged;
        
        /// <summary>
        /// Gets fired before the StepPhaseShiftIncrement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepPhaseShiftIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepPhaseShiftIncrement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepPhaseShiftIncrementChanged;
        
        /// <summary>
        /// Gets fired before the VoltageStepIncrementOutOfPhase property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageStepIncrementOutOfPhaseChanging;
        
        /// <summary>
        /// Gets fired when the VoltageStepIncrementOutOfPhase property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageStepIncrementOutOfPhaseChanged;
        
        /// <summary>
        /// Gets fired before the NominalVoltageOutOfPhase property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageOutOfPhaseChanging;
        
        /// <summary>
        /// Gets fired when the NominalVoltageOutOfPhase property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageOutOfPhaseChanged;
        
        /// <summary>
        /// Gets fired before the XStepMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XStepMaxChanging;
        
        /// <summary>
        /// Gets fired when the XStepMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XStepMaxChanged;
        
        /// <summary>
        /// Gets fired before the XStepMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XStepMinChanging;
        
        /// <summary>
        /// Gets fired when the XStepMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XStepMinChanged;
        
        /// <summary>
        /// Gets fired before the TransformerWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerWindingChanging;
        
        /// <summary>
        /// Gets fired when the TransformerWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerWindingChanged;
        
        /// <summary>
        /// Gets fired before the Winding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingChanging;
        
        /// <summary>
        /// Gets fired when the Winding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingChanged;
        
        /// <summary>
        /// Gets fired before the PhaseVariationCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseVariationCurveChanging;
        
        /// <summary>
        /// Gets fired when the PhaseVariationCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseVariationCurveChanged;
        
        /// <summary>
        /// Raises the WindingConnectionAngleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingConnectionAngleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingConnectionAngleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingConnectionAngleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingConnectionAngleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingConnectionAngleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepPhaseShiftIncrementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepPhaseShiftIncrementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepPhaseShiftIncrementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepPhaseShiftIncrementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepPhaseShiftIncrementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepPhaseShiftIncrementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageStepIncrementOutOfPhaseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageStepIncrementOutOfPhaseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageStepIncrementOutOfPhaseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageStepIncrementOutOfPhaseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageStepIncrementOutOfPhaseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageStepIncrementOutOfPhaseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalVoltageOutOfPhaseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageOutOfPhaseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageOutOfPhaseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalVoltageOutOfPhaseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageOutOfPhaseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageOutOfPhaseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XStepMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXStepMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XStepMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XStepMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXStepMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XStepMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XStepMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXStepMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XStepMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XStepMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXStepMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XStepMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerWinding(object sender, System.EventArgs eventArgs)
        {
            this.TransformerWinding = null;
        }
        
        /// <summary>
        /// Raises the WindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Winding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWinding(object sender, System.EventArgs eventArgs)
        {
            this.Winding = null;
        }
        
        /// <summary>
        /// Raises the PhaseVariationCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseVariationCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseVariationCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseVariationCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseVariationCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseVariationCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhaseVariationCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseVariationCurve(object sender, System.EventArgs eventArgs)
        {
            this.PhaseVariationCurve = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "WINDINGCONNECTIONANGLE"))
            {
                return this.WindingConnectionAngle;
            }
            if ((attribute == "PHASETAPCHANGERTYPE"))
            {
                return this.PhaseTapChangerType;
            }
            if ((attribute == "STEPPHASESHIFTINCREMENT"))
            {
                return this.StepPhaseShiftIncrement;
            }
            if ((attribute == "VOLTAGESTEPINCREMENTOUTOFPHASE"))
            {
                return this.VoltageStepIncrementOutOfPhase;
            }
            if ((attribute == "NOMINALVOLTAGEOUTOFPHASE"))
            {
                return this.NominalVoltageOutOfPhase;
            }
            if ((attribute == "XSTEPMAX"))
            {
                return this.XStepMax;
            }
            if ((attribute == "XSTEPMIN"))
            {
                return this.XStepMin;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMERWINDING"))
            {
                this.TransformerWinding = ((ITransformerWinding)(value));
                return;
            }
            if ((feature == "WINDING"))
            {
                this.Winding = ((IDistributionTransformerWinding)(value));
                return;
            }
            if ((feature == "PHASEVARIATIONCURVE"))
            {
                this.PhaseVariationCurve = ((IPhaseVariationCurve)(value));
                return;
            }
            if ((feature == "WINDINGCONNECTIONANGLE"))
            {
                this.WindingConnectionAngle = ((float)(value));
                return;
            }
            if ((feature == "PHASETAPCHANGERTYPE"))
            {
                this.PhaseTapChangerType = ((PhaseTapChangerKind)(value));
                return;
            }
            if ((feature == "STEPPHASESHIFTINCREMENT"))
            {
                this.StepPhaseShiftIncrement = ((float)(value));
                return;
            }
            if ((feature == "VOLTAGESTEPINCREMENTOUTOFPHASE"))
            {
                this.VoltageStepIncrementOutOfPhase = ((float)(value));
                return;
            }
            if ((feature == "NOMINALVOLTAGEOUTOFPHASE"))
            {
                this.NominalVoltageOutOfPhase = ((float)(value));
                return;
            }
            if ((feature == "XSTEPMAX"))
            {
                this.XStepMax = ((float)(value));
                return;
            }
            if ((feature == "XSTEPMIN"))
            {
                this.XStepMin = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransformerWinding"))
            {
                return new TransformerWindingProxy(this);
            }
            if ((attribute == "Winding"))
            {
                return new WindingProxy(this);
            }
            if ((attribute == "PhaseVariationCurve"))
            {
                return new PhaseVariationCurveProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransformerWinding"))
            {
                return new TransformerWindingProxy(this);
            }
            if ((reference == "Winding"))
            {
                return new WindingProxy(this);
            }
            if ((reference == "PhaseVariationCurve"))
            {
                return new PhaseVariationCurveProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/PhaseTapChanger")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PhaseTapChanger class
        /// </summary>
        public class PhaseTapChangerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PhaseTapChanger _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PhaseTapChangerReferencedElementsCollection(PhaseTapChanger parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TransformerWinding != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Winding != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PhaseVariationCurve != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransformerWindingChanged += this.PropagateValueChanges;
                this._parent.WindingChanged += this.PropagateValueChanges;
                this._parent.PhaseVariationCurveChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransformerWindingChanged -= this.PropagateValueChanges;
                this._parent.WindingChanged -= this.PropagateValueChanges;
                this._parent.PhaseVariationCurveChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TransformerWinding == null))
                {
                    ITransformerWinding transformerWindingCasted = item.As<ITransformerWinding>();
                    if ((transformerWindingCasted != null))
                    {
                        this._parent.TransformerWinding = transformerWindingCasted;
                        return;
                    }
                }
                if ((this._parent.Winding == null))
                {
                    IDistributionTransformerWinding windingCasted = item.As<IDistributionTransformerWinding>();
                    if ((windingCasted != null))
                    {
                        this._parent.Winding = windingCasted;
                        return;
                    }
                }
                if ((this._parent.PhaseVariationCurve == null))
                {
                    IPhaseVariationCurve phaseVariationCurveCasted = item.As<IPhaseVariationCurve>();
                    if ((phaseVariationCurveCasted != null))
                    {
                        this._parent.PhaseVariationCurve = phaseVariationCurveCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransformerWinding = null;
                this._parent.Winding = null;
                this._parent.PhaseVariationCurve = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TransformerWinding))
                {
                    return true;
                }
                if ((item == this._parent.Winding))
                {
                    return true;
                }
                if ((item == this._parent.PhaseVariationCurve))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TransformerWinding != null))
                {
                    array[arrayIndex] = this._parent.TransformerWinding;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Winding != null))
                {
                    array[arrayIndex] = this._parent.Winding;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PhaseVariationCurve != null))
                {
                    array[arrayIndex] = this._parent.PhaseVariationCurve;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TransformerWinding == item))
                {
                    this._parent.TransformerWinding = null;
                    return true;
                }
                if ((this._parent.Winding == item))
                {
                    this._parent.Winding = null;
                    return true;
                }
                if ((this._parent.PhaseVariationCurve == item))
                {
                    this._parent.PhaseVariationCurve = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransformerWinding).Concat(this._parent.Winding).Concat(this._parent.PhaseVariationCurve).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the windingConnectionAngle property
        /// </summary>
        private sealed class WindingConnectionAngleProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingConnectionAngleProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.WindingConnectionAngle;
                }
                set
                {
                    this.ModelElement.WindingConnectionAngle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingConnectionAngleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingConnectionAngleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseTapChangerType property
        /// </summary>
        private sealed class PhaseTapChangerTypeProxy : ModelPropertyChange<IPhaseTapChanger, Nullable<PhaseTapChangerKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseTapChangerTypeProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseTapChangerKind> Value
            {
                get
                {
                    return this.ModelElement.PhaseTapChangerType;
                }
                set
                {
                    this.ModelElement.PhaseTapChangerType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseTapChangerTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseTapChangerTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepPhaseShiftIncrement property
        /// </summary>
        private sealed class StepPhaseShiftIncrementProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepPhaseShiftIncrementProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StepPhaseShiftIncrement;
                }
                set
                {
                    this.ModelElement.StepPhaseShiftIncrement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepPhaseShiftIncrementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepPhaseShiftIncrementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltageStepIncrementOutOfPhase property
        /// </summary>
        private sealed class VoltageStepIncrementOutOfPhaseProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageStepIncrementOutOfPhaseProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltageStepIncrementOutOfPhase;
                }
                set
                {
                    this.ModelElement.VoltageStepIncrementOutOfPhase = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageStepIncrementOutOfPhaseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageStepIncrementOutOfPhaseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalVoltageOutOfPhase property
        /// </summary>
        private sealed class NominalVoltageOutOfPhaseProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalVoltageOutOfPhaseProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalVoltageOutOfPhase;
                }
                set
                {
                    this.ModelElement.NominalVoltageOutOfPhase = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalVoltageOutOfPhaseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalVoltageOutOfPhaseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xStepMax property
        /// </summary>
        private sealed class XStepMaxProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XStepMaxProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XStepMax;
                }
                set
                {
                    this.ModelElement.XStepMax = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XStepMaxChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XStepMaxChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xStepMin property
        /// </summary>
        private sealed class XStepMinProxy : ModelPropertyChange<IPhaseTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XStepMinProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XStepMin;
                }
                set
                {
                    this.ModelElement.XStepMin = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XStepMinChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XStepMinChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerWinding property
        /// </summary>
        private sealed class TransformerWindingProxy : ModelPropertyChange<IPhaseTapChanger, ITransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerWindingProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerWinding Value
            {
                get
                {
                    return this.ModelElement.TransformerWinding;
                }
                set
                {
                    this.ModelElement.TransformerWinding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerWindingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerWindingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Winding property
        /// </summary>
        private sealed class WindingProxy : ModelPropertyChange<IPhaseTapChanger, IDistributionTransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformerWinding Value
            {
                get
                {
                    return this.ModelElement.Winding;
                }
                set
                {
                    this.ModelElement.Winding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhaseVariationCurve property
        /// </summary>
        private sealed class PhaseVariationCurveProxy : ModelPropertyChange<IPhaseTapChanger, IPhaseVariationCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseVariationCurveProxy(IPhaseTapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPhaseVariationCurve Value
            {
                get
                {
                    return this.ModelElement.PhaseVariationCurve;
                }
                set
                {
                    this.ModelElement.PhaseVariationCurve = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseVariationCurveChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseVariationCurveChanged -= handler;
            }
        }
    }
}

