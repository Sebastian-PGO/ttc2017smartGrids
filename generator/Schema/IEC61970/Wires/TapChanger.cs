//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the TapChanger class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TapChanger")]
    [DebuggerDisplayAttribute("TapChanger {UUID}")]
    public class TapChanger : PowerSystemResource, ITapChanger, IModelElement
    {
        
        /// <summary>
        /// The backing field for the InitialDelay property
        /// </summary>
        private float _initialDelay;
        
        /// <summary>
        /// The backing field for the SubsequentDelay property
        /// </summary>
        private float _subsequentDelay;
        
        /// <summary>
        /// The backing field for the LtcFlag property
        /// </summary>
        private bool _ltcFlag;
        
        /// <summary>
        /// The backing field for the RegulationStatus property
        /// </summary>
        private bool _regulationStatus;
        
        /// <summary>
        /// The backing field for the NeutralStep property
        /// </summary>
        private int _neutralStep;
        
        /// <summary>
        /// The backing field for the NeutralU property
        /// </summary>
        private float _neutralU;
        
        /// <summary>
        /// The backing field for the LowStep property
        /// </summary>
        private int _lowStep;
        
        /// <summary>
        /// The backing field for the HighStep property
        /// </summary>
        private int _highStep;
        
        /// <summary>
        /// The backing field for the StepVoltageIncrement property
        /// </summary>
        private float _stepVoltageIncrement;
        
        /// <summary>
        /// The backing field for the NormalStep property
        /// </summary>
        private int _normalStep;
        
        /// <summary>
        /// The backing field for the TapSchedules property
        /// </summary>
        private TapChangerTapSchedulesCollection _tapSchedules;
        
        /// <summary>
        /// The backing field for the RegulatingControl property
        /// </summary>
        private IRegulatingControl _regulatingControl;
        
        /// <summary>
        /// The backing field for the ImpedanceVariationCurve property
        /// </summary>
        private IImpedanceVariationCurve _impedanceVariationCurve;
        
        /// <summary>
        /// The backing field for the SvTapStep property
        /// </summary>
        private ISvTapStep _svTapStep;
        
        private static IClass _classInstance;
        
        public TapChanger()
        {
            this._tapSchedules = new TapChangerTapSchedulesCollection(this);
            this._tapSchedules.CollectionChanging += this.TapSchedulesCollectionChanging;
            this._tapSchedules.CollectionChanged += this.TapSchedulesCollectionChanged;
        }
        
        /// <summary>
        /// The initialDelay property
        /// </summary>
        [XmlElementNameAttribute("initialDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float InitialDelay
        {
            get
            {
                return this._initialDelay;
            }
            set
            {
                if ((this._initialDelay != value))
                {
                    float old = this._initialDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialDelayChanging(e);
                    this.OnPropertyChanging("InitialDelay", e);
                    this._initialDelay = value;
                    this.OnInitialDelayChanged(e);
                    this.OnPropertyChanged("InitialDelay", e);
                }
            }
        }
        
        /// <summary>
        /// The subsequentDelay property
        /// </summary>
        [XmlElementNameAttribute("subsequentDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float SubsequentDelay
        {
            get
            {
                return this._subsequentDelay;
            }
            set
            {
                if ((this._subsequentDelay != value))
                {
                    float old = this._subsequentDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubsequentDelayChanging(e);
                    this.OnPropertyChanging("SubsequentDelay", e);
                    this._subsequentDelay = value;
                    this.OnSubsequentDelayChanged(e);
                    this.OnPropertyChanged("SubsequentDelay", e);
                }
            }
        }
        
        /// <summary>
        /// The ltcFlag property
        /// </summary>
        [XmlElementNameAttribute("ltcFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool LtcFlag
        {
            get
            {
                return this._ltcFlag;
            }
            set
            {
                if ((this._ltcFlag != value))
                {
                    bool old = this._ltcFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLtcFlagChanging(e);
                    this.OnPropertyChanging("LtcFlag", e);
                    this._ltcFlag = value;
                    this.OnLtcFlagChanged(e);
                    this.OnPropertyChanged("LtcFlag", e);
                }
            }
        }
        
        /// <summary>
        /// The regulationStatus property
        /// </summary>
        [XmlElementNameAttribute("regulationStatus")]
        [XmlAttributeAttribute(true)]
        public virtual bool RegulationStatus
        {
            get
            {
                return this._regulationStatus;
            }
            set
            {
                if ((this._regulationStatus != value))
                {
                    bool old = this._regulationStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegulationStatusChanging(e);
                    this.OnPropertyChanging("RegulationStatus", e);
                    this._regulationStatus = value;
                    this.OnRegulationStatusChanged(e);
                    this.OnPropertyChanged("RegulationStatus", e);
                }
            }
        }
        
        /// <summary>
        /// The neutralStep property
        /// </summary>
        [XmlElementNameAttribute("neutralStep")]
        [XmlAttributeAttribute(true)]
        public virtual int NeutralStep
        {
            get
            {
                return this._neutralStep;
            }
            set
            {
                if ((this._neutralStep != value))
                {
                    int old = this._neutralStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralStepChanging(e);
                    this.OnPropertyChanging("NeutralStep", e);
                    this._neutralStep = value;
                    this.OnNeutralStepChanged(e);
                    this.OnPropertyChanged("NeutralStep", e);
                }
            }
        }
        
        /// <summary>
        /// The neutralU property
        /// </summary>
        [XmlElementNameAttribute("neutralU")]
        [XmlAttributeAttribute(true)]
        public virtual float NeutralU
        {
            get
            {
                return this._neutralU;
            }
            set
            {
                if ((this._neutralU != value))
                {
                    float old = this._neutralU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralUChanging(e);
                    this.OnPropertyChanging("NeutralU", e);
                    this._neutralU = value;
                    this.OnNeutralUChanged(e);
                    this.OnPropertyChanged("NeutralU", e);
                }
            }
        }
        
        /// <summary>
        /// The lowStep property
        /// </summary>
        [XmlElementNameAttribute("lowStep")]
        [XmlAttributeAttribute(true)]
        public virtual int LowStep
        {
            get
            {
                return this._lowStep;
            }
            set
            {
                if ((this._lowStep != value))
                {
                    int old = this._lowStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowStepChanging(e);
                    this.OnPropertyChanging("LowStep", e);
                    this._lowStep = value;
                    this.OnLowStepChanged(e);
                    this.OnPropertyChanged("LowStep", e);
                }
            }
        }
        
        /// <summary>
        /// The highStep property
        /// </summary>
        [XmlElementNameAttribute("highStep")]
        [XmlAttributeAttribute(true)]
        public virtual int HighStep
        {
            get
            {
                return this._highStep;
            }
            set
            {
                if ((this._highStep != value))
                {
                    int old = this._highStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighStepChanging(e);
                    this.OnPropertyChanging("HighStep", e);
                    this._highStep = value;
                    this.OnHighStepChanged(e);
                    this.OnPropertyChanged("HighStep", e);
                }
            }
        }
        
        /// <summary>
        /// The stepVoltageIncrement property
        /// </summary>
        [XmlElementNameAttribute("stepVoltageIncrement")]
        [XmlAttributeAttribute(true)]
        public virtual float StepVoltageIncrement
        {
            get
            {
                return this._stepVoltageIncrement;
            }
            set
            {
                if ((this._stepVoltageIncrement != value))
                {
                    float old = this._stepVoltageIncrement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepVoltageIncrementChanging(e);
                    this.OnPropertyChanging("StepVoltageIncrement", e);
                    this._stepVoltageIncrement = value;
                    this.OnStepVoltageIncrementChanged(e);
                    this.OnPropertyChanged("StepVoltageIncrement", e);
                }
            }
        }
        
        /// <summary>
        /// The normalStep property
        /// </summary>
        [XmlElementNameAttribute("normalStep")]
        [XmlAttributeAttribute(true)]
        public virtual int NormalStep
        {
            get
            {
                return this._normalStep;
            }
            set
            {
                if ((this._normalStep != value))
                {
                    int old = this._normalStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalStepChanging(e);
                    this.OnPropertyChanging("NormalStep", e);
                    this._normalStep = value;
                    this.OnNormalStepChanged(e);
                    this.OnPropertyChanged("NormalStep", e);
                }
            }
        }
        
        /// <summary>
        /// The TapSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TapChanger")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITapSchedule> TapSchedules
        {
            get
            {
                return this._tapSchedules;
            }
        }
        
        /// <summary>
        /// The RegulatingControl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TapChanger")]
        public virtual IRegulatingControl RegulatingControl
        {
            get
            {
                return this._regulatingControl;
            }
            set
            {
                if ((this._regulatingControl != value))
                {
                    IRegulatingControl old = this._regulatingControl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegulatingControlChanging(e);
                    this.OnPropertyChanging("RegulatingControl", e);
                    this._regulatingControl = value;
                    if ((old != null))
                    {
                        old.TapChanger.Remove(this);
                        old.Deleted -= this.OnResetRegulatingControl;
                    }
                    if ((value != null))
                    {
                        value.TapChanger.Add(this);
                        value.Deleted += this.OnResetRegulatingControl;
                    }
                    this.OnRegulatingControlChanged(e);
                    this.OnPropertyChanged("RegulatingControl", e);
                }
            }
        }
        
        /// <summary>
        /// The ImpedanceVariationCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TapChanger")]
        public virtual IImpedanceVariationCurve ImpedanceVariationCurve
        {
            get
            {
                return this._impedanceVariationCurve;
            }
            set
            {
                if ((this._impedanceVariationCurve != value))
                {
                    IImpedanceVariationCurve old = this._impedanceVariationCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImpedanceVariationCurveChanging(e);
                    this.OnPropertyChanging("ImpedanceVariationCurve", e);
                    this._impedanceVariationCurve = value;
                    if ((old != null))
                    {
                        old.TapChanger = null;
                        old.Deleted -= this.OnResetImpedanceVariationCurve;
                    }
                    if ((value != null))
                    {
                        value.TapChanger = this;
                        value.Deleted += this.OnResetImpedanceVariationCurve;
                    }
                    this.OnImpedanceVariationCurveChanged(e);
                    this.OnPropertyChanged("ImpedanceVariationCurve", e);
                }
            }
        }
        
        /// <summary>
        /// The SvTapStep property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TapChanger")]
        public virtual ISvTapStep SvTapStep
        {
            get
            {
                return this._svTapStep;
            }
            set
            {
                if ((this._svTapStep != value))
                {
                    ISvTapStep old = this._svTapStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvTapStepChanging(e);
                    this.OnPropertyChanging("SvTapStep", e);
                    this._svTapStep = value;
                    if ((old != null))
                    {
                        old.TapChanger = null;
                        old.Deleted -= this.OnResetSvTapStep;
                    }
                    if ((value != null))
                    {
                        value.TapChanger = this;
                        value.Deleted += this.OnResetSvTapStep;
                    }
                    this.OnSvTapStepChanged(e);
                    this.OnPropertyChanged("SvTapStep", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TapChangerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TapChanger")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InitialDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialDelayChanging;
        
        /// <summary>
        /// Gets fired when the InitialDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialDelayChanged;
        
        /// <summary>
        /// Gets fired before the SubsequentDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanging;
        
        /// <summary>
        /// Gets fired when the SubsequentDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanged;
        
        /// <summary>
        /// Gets fired before the LtcFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LtcFlagChanging;
        
        /// <summary>
        /// Gets fired when the LtcFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LtcFlagChanged;
        
        /// <summary>
        /// Gets fired before the RegulationStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanging;
        
        /// <summary>
        /// Gets fired when the RegulationStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanged;
        
        /// <summary>
        /// Gets fired before the NeutralStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralStepChanging;
        
        /// <summary>
        /// Gets fired when the NeutralStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralStepChanged;
        
        /// <summary>
        /// Gets fired before the NeutralU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralUChanging;
        
        /// <summary>
        /// Gets fired when the NeutralU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralUChanged;
        
        /// <summary>
        /// Gets fired before the LowStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowStepChanging;
        
        /// <summary>
        /// Gets fired when the LowStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowStepChanged;
        
        /// <summary>
        /// Gets fired before the HighStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighStepChanging;
        
        /// <summary>
        /// Gets fired when the HighStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighStepChanged;
        
        /// <summary>
        /// Gets fired before the StepVoltageIncrement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepVoltageIncrement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanged;
        
        /// <summary>
        /// Gets fired before the NormalStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalStepChanging;
        
        /// <summary>
        /// Gets fired when the NormalStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalStepChanged;
        
        /// <summary>
        /// Gets fired before the RegulatingControl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulatingControlChanging;
        
        /// <summary>
        /// Gets fired when the RegulatingControl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulatingControlChanged;
        
        /// <summary>
        /// Gets fired before the ImpedanceVariationCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImpedanceVariationCurveChanging;
        
        /// <summary>
        /// Gets fired when the ImpedanceVariationCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImpedanceVariationCurveChanged;
        
        /// <summary>
        /// Gets fired before the SvTapStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvTapStepChanging;
        
        /// <summary>
        /// Gets fired when the SvTapStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvTapStepChanged;
        
        /// <summary>
        /// Raises the InitialDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubsequentDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubsequentDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubsequentDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubsequentDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubsequentDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubsequentDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LtcFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLtcFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LtcFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LtcFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLtcFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LtcFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegulationStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulationStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulationStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegulationStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulationStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulationStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepVoltageIncrementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepVoltageIncrementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepVoltageIncrementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepVoltageIncrementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepVoltageIncrementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepVoltageIncrementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TapSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TapSchedules", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TapSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TapSchedules", e);
        }
        
        /// <summary>
        /// Raises the RegulatingControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulatingControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulatingControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegulatingControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulatingControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulatingControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegulatingControl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegulatingControl(object sender, System.EventArgs eventArgs)
        {
            this.RegulatingControl = null;
        }
        
        /// <summary>
        /// Raises the ImpedanceVariationCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImpedanceVariationCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImpedanceVariationCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImpedanceVariationCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImpedanceVariationCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImpedanceVariationCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ImpedanceVariationCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImpedanceVariationCurve(object sender, System.EventArgs eventArgs)
        {
            this.ImpedanceVariationCurve = null;
        }
        
        /// <summary>
        /// Raises the SvTapStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvTapStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvTapStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvTapStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvTapStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvTapStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvTapStep property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvTapStep(object sender, System.EventArgs eventArgs)
        {
            this.SvTapStep = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INITIALDELAY"))
            {
                return this.InitialDelay;
            }
            if ((attribute == "SUBSEQUENTDELAY"))
            {
                return this.SubsequentDelay;
            }
            if ((attribute == "LTCFLAG"))
            {
                return this.LtcFlag;
            }
            if ((attribute == "REGULATIONSTATUS"))
            {
                return this.RegulationStatus;
            }
            if ((attribute == "NEUTRALSTEP"))
            {
                return this.NeutralStep;
            }
            if ((attribute == "NEUTRALU"))
            {
                return this.NeutralU;
            }
            if ((attribute == "LOWSTEP"))
            {
                return this.LowStep;
            }
            if ((attribute == "HIGHSTEP"))
            {
                return this.HighStep;
            }
            if ((attribute == "STEPVOLTAGEINCREMENT"))
            {
                return this.StepVoltageIncrement;
            }
            if ((attribute == "NORMALSTEP"))
            {
                return this.NormalStep;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TAPSCHEDULES"))
            {
                return this._tapSchedules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REGULATINGCONTROL"))
            {
                this.RegulatingControl = ((IRegulatingControl)(value));
                return;
            }
            if ((feature == "IMPEDANCEVARIATIONCURVE"))
            {
                this.ImpedanceVariationCurve = ((IImpedanceVariationCurve)(value));
                return;
            }
            if ((feature == "SVTAPSTEP"))
            {
                this.SvTapStep = ((ISvTapStep)(value));
                return;
            }
            if ((feature == "INITIALDELAY"))
            {
                this.InitialDelay = ((float)(value));
                return;
            }
            if ((feature == "SUBSEQUENTDELAY"))
            {
                this.SubsequentDelay = ((float)(value));
                return;
            }
            if ((feature == "LTCFLAG"))
            {
                this.LtcFlag = ((bool)(value));
                return;
            }
            if ((feature == "REGULATIONSTATUS"))
            {
                this.RegulationStatus = ((bool)(value));
                return;
            }
            if ((feature == "NEUTRALSTEP"))
            {
                this.NeutralStep = ((int)(value));
                return;
            }
            if ((feature == "NEUTRALU"))
            {
                this.NeutralU = ((float)(value));
                return;
            }
            if ((feature == "LOWSTEP"))
            {
                this.LowStep = ((int)(value));
                return;
            }
            if ((feature == "HIGHSTEP"))
            {
                this.HighStep = ((int)(value));
                return;
            }
            if ((feature == "STEPVOLTAGEINCREMENT"))
            {
                this.StepVoltageIncrement = ((float)(value));
                return;
            }
            if ((feature == "NORMALSTEP"))
            {
                this.NormalStep = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RegulatingControl"))
            {
                return new RegulatingControlProxy(this);
            }
            if ((attribute == "ImpedanceVariationCurve"))
            {
                return new ImpedanceVariationCurveProxy(this);
            }
            if ((attribute == "SvTapStep"))
            {
                return new SvTapStepProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RegulatingControl"))
            {
                return new RegulatingControlProxy(this);
            }
            if ((reference == "ImpedanceVariationCurve"))
            {
                return new ImpedanceVariationCurveProxy(this);
            }
            if ((reference == "SvTapStep"))
            {
                return new SvTapStepProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TapChanger")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TapChanger class
        /// </summary>
        public class TapChangerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TapChanger _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TapChangerReferencedElementsCollection(TapChanger parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TapSchedules.Count);
                    if ((this._parent.RegulatingControl != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ImpedanceVariationCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SvTapStep != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegulatingControlChanged += this.PropagateValueChanges;
                this._parent.ImpedanceVariationCurveChanged += this.PropagateValueChanges;
                this._parent.SvTapStepChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegulatingControlChanged -= this.PropagateValueChanges;
                this._parent.ImpedanceVariationCurveChanged -= this.PropagateValueChanges;
                this._parent.SvTapStepChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITapSchedule tapSchedulesCasted = item.As<ITapSchedule>();
                if ((tapSchedulesCasted != null))
                {
                    this._parent.TapSchedules.Add(tapSchedulesCasted);
                }
                if ((this._parent.RegulatingControl == null))
                {
                    IRegulatingControl regulatingControlCasted = item.As<IRegulatingControl>();
                    if ((regulatingControlCasted != null))
                    {
                        this._parent.RegulatingControl = regulatingControlCasted;
                        return;
                    }
                }
                if ((this._parent.ImpedanceVariationCurve == null))
                {
                    IImpedanceVariationCurve impedanceVariationCurveCasted = item.As<IImpedanceVariationCurve>();
                    if ((impedanceVariationCurveCasted != null))
                    {
                        this._parent.ImpedanceVariationCurve = impedanceVariationCurveCasted;
                        return;
                    }
                }
                if ((this._parent.SvTapStep == null))
                {
                    ISvTapStep svTapStepCasted = item.As<ISvTapStep>();
                    if ((svTapStepCasted != null))
                    {
                        this._parent.SvTapStep = svTapStepCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapSchedules.Clear();
                this._parent.RegulatingControl = null;
                this._parent.ImpedanceVariationCurve = null;
                this._parent.SvTapStep = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TapSchedules.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RegulatingControl))
                {
                    return true;
                }
                if ((item == this._parent.ImpedanceVariationCurve))
                {
                    return true;
                }
                if ((item == this._parent.SvTapStep))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tapSchedulesEnumerator = this._parent.TapSchedules.GetEnumerator();
                try
                {
                    for (
                    ; tapSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tapSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tapSchedulesEnumerator.Dispose();
                }
                if ((this._parent.RegulatingControl != null))
                {
                    array[arrayIndex] = this._parent.RegulatingControl;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ImpedanceVariationCurve != null))
                {
                    array[arrayIndex] = this._parent.ImpedanceVariationCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SvTapStep != null))
                {
                    array[arrayIndex] = this._parent.SvTapStep;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITapSchedule tapScheduleItem = item.As<ITapSchedule>();
                if (((tapScheduleItem != null) 
                            && this._parent.TapSchedules.Remove(tapScheduleItem)))
                {
                    return true;
                }
                if ((this._parent.RegulatingControl == item))
                {
                    this._parent.RegulatingControl = null;
                    return true;
                }
                if ((this._parent.ImpedanceVariationCurve == item))
                {
                    this._parent.ImpedanceVariationCurve = null;
                    return true;
                }
                if ((this._parent.SvTapStep == item))
                {
                    this._parent.SvTapStep = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapSchedules).Concat(this._parent.RegulatingControl).Concat(this._parent.ImpedanceVariationCurve).Concat(this._parent.SvTapStep).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initialDelay property
        /// </summary>
        private sealed class InitialDelayProxy : ModelPropertyChange<ITapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialDelayProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InitialDelay;
                }
                set
                {
                    this.ModelElement.InitialDelay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InitialDelayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InitialDelayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subsequentDelay property
        /// </summary>
        private sealed class SubsequentDelayProxy : ModelPropertyChange<ITapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubsequentDelayProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SubsequentDelay;
                }
                set
                {
                    this.ModelElement.SubsequentDelay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubsequentDelayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubsequentDelayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ltcFlag property
        /// </summary>
        private sealed class LtcFlagProxy : ModelPropertyChange<ITapChanger, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LtcFlagProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LtcFlag;
                }
                set
                {
                    this.ModelElement.LtcFlag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LtcFlagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LtcFlagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the regulationStatus property
        /// </summary>
        private sealed class RegulationStatusProxy : ModelPropertyChange<ITapChanger, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegulationStatusProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RegulationStatus;
                }
                set
                {
                    this.ModelElement.RegulationStatus = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegulationStatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegulationStatusChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neutralStep property
        /// </summary>
        private sealed class NeutralStepProxy : ModelPropertyChange<ITapChanger, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralStepProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NeutralStep;
                }
                set
                {
                    this.ModelElement.NeutralStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralStepChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neutralU property
        /// </summary>
        private sealed class NeutralUProxy : ModelPropertyChange<ITapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralUProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NeutralU;
                }
                set
                {
                    this.ModelElement.NeutralU = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralUChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralUChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowStep property
        /// </summary>
        private sealed class LowStepProxy : ModelPropertyChange<ITapChanger, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowStepProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowStep;
                }
                set
                {
                    this.ModelElement.LowStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowStepChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highStep property
        /// </summary>
        private sealed class HighStepProxy : ModelPropertyChange<ITapChanger, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighStepProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.HighStep;
                }
                set
                {
                    this.ModelElement.HighStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighStepChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepVoltageIncrement property
        /// </summary>
        private sealed class StepVoltageIncrementProxy : ModelPropertyChange<ITapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepVoltageIncrementProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StepVoltageIncrement;
                }
                set
                {
                    this.ModelElement.StepVoltageIncrement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepVoltageIncrementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepVoltageIncrementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalStep property
        /// </summary>
        private sealed class NormalStepProxy : ModelPropertyChange<ITapChanger, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalStepProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NormalStep;
                }
                set
                {
                    this.ModelElement.NormalStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalStepChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegulatingControl property
        /// </summary>
        private sealed class RegulatingControlProxy : ModelPropertyChange<ITapChanger, IRegulatingControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegulatingControlProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegulatingControl Value
            {
                get
                {
                    return this.ModelElement.RegulatingControl;
                }
                set
                {
                    this.ModelElement.RegulatingControl = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegulatingControlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegulatingControlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ImpedanceVariationCurve property
        /// </summary>
        private sealed class ImpedanceVariationCurveProxy : ModelPropertyChange<ITapChanger, IImpedanceVariationCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImpedanceVariationCurveProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImpedanceVariationCurve Value
            {
                get
                {
                    return this.ModelElement.ImpedanceVariationCurve;
                }
                set
                {
                    this.ModelElement.ImpedanceVariationCurve = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ImpedanceVariationCurveChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ImpedanceVariationCurveChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvTapStep property
        /// </summary>
        private sealed class SvTapStepProxy : ModelPropertyChange<ITapChanger, ISvTapStep>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvTapStepProxy(ITapChanger modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvTapStep Value
            {
                get
                {
                    return this.ModelElement.SvTapStep;
                }
                set
                {
                    this.ModelElement.SvTapStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvTapStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvTapStepChanged -= handler;
            }
        }
    }
}

