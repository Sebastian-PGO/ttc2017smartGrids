//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the SynchronousMachine class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/SynchronousMachine")]
    [DebuggerDisplayAttribute("SynchronousMachine {UUID}")]
    public partial class SynchronousMachine : RegulatingCondEq, ISynchronousMachine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the XDirectSync property
        /// </summary>
        private float _xDirectSync;
        
        private static Lazy<ITypedElement> _xDirectSyncAttribute = new Lazy<ITypedElement>(RetrieveXDirectSyncAttribute);
        
        /// <summary>
        /// The backing field for the XQuadTrans property
        /// </summary>
        private float _xQuadTrans;
        
        private static Lazy<ITypedElement> _xQuadTransAttribute = new Lazy<ITypedElement>(RetrieveXQuadTransAttribute);
        
        /// <summary>
        /// The backing field for the CoolantCondition property
        /// </summary>
        private float _coolantCondition;
        
        private static Lazy<ITypedElement> _coolantConditionAttribute = new Lazy<ITypedElement>(RetrieveCoolantConditionAttribute);
        
        /// <summary>
        /// The backing field for the XQuadSubtrans property
        /// </summary>
        private float _xQuadSubtrans;
        
        private static Lazy<ITypedElement> _xQuadSubtransAttribute = new Lazy<ITypedElement>(RetrieveXQuadSubtransAttribute);
        
        /// <summary>
        /// The backing field for the CoolantType property
        /// </summary>
        private Nullable<CoolantType> _coolantType;
        
        private static Lazy<ITypedElement> _coolantTypeAttribute = new Lazy<ITypedElement>(RetrieveCoolantTypeAttribute);
        
        /// <summary>
        /// The backing field for the CondenserP property
        /// </summary>
        private float _condenserP;
        
        private static Lazy<ITypedElement> _condenserPAttribute = new Lazy<ITypedElement>(RetrieveCondenserPAttribute);
        
        /// <summary>
        /// The backing field for the AVRToManualLag property
        /// </summary>
        private float _aVRToManualLag;
        
        private static Lazy<ITypedElement> _aVRToManualLagAttribute = new Lazy<ITypedElement>(RetrieveAVRToManualLagAttribute);
        
        /// <summary>
        /// The backing field for the MinQ property
        /// </summary>
        private float _minQ;
        
        private static Lazy<ITypedElement> _minQAttribute = new Lazy<ITypedElement>(RetrieveMinQAttribute);
        
        /// <summary>
        /// The backing field for the AVRToManualLead property
        /// </summary>
        private float _aVRToManualLead;
        
        private static Lazy<ITypedElement> _aVRToManualLeadAttribute = new Lazy<ITypedElement>(RetrieveAVRToManualLeadAttribute);
        
        /// <summary>
        /// The backing field for the MaxU property
        /// </summary>
        private float _maxU;
        
        private static Lazy<ITypedElement> _maxUAttribute = new Lazy<ITypedElement>(RetrieveMaxUAttribute);
        
        /// <summary>
        /// The backing field for the Damping property
        /// </summary>
        private float _damping;
        
        private static Lazy<ITypedElement> _dampingAttribute = new Lazy<ITypedElement>(RetrieveDampingAttribute);
        
        /// <summary>
        /// The backing field for the MaxQ property
        /// </summary>
        private float _maxQ;
        
        private static Lazy<ITypedElement> _maxQAttribute = new Lazy<ITypedElement>(RetrieveMaxQAttribute);
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        private static Lazy<ITypedElement> _r0Attribute = new Lazy<ITypedElement>(RetrieveR0Attribute);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private Nullable<SynchronousMachineType> _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the R2 property
        /// </summary>
        private float _r2;
        
        private static Lazy<ITypedElement> _r2Attribute = new Lazy<ITypedElement>(RetrieveR2Attribute);
        
        /// <summary>
        /// The backing field for the ReferencePriority property
        /// </summary>
        private int _referencePriority;
        
        private static Lazy<ITypedElement> _referencePriorityAttribute = new Lazy<ITypedElement>(RetrieveReferencePriorityAttribute);
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        private static Lazy<ITypedElement> _x0Attribute = new Lazy<ITypedElement>(RetrieveX0Attribute);
        
        /// <summary>
        /// The backing field for the X2 property
        /// </summary>
        private float _x2;
        
        private static Lazy<ITypedElement> _x2Attribute = new Lazy<ITypedElement>(RetrieveX2Attribute);
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        private static Lazy<ITypedElement> _rAttribute = new Lazy<ITypedElement>(RetrieveRAttribute);
        
        /// <summary>
        /// The backing field for the XDirectSubtrans property
        /// </summary>
        private float _xDirectSubtrans;
        
        private static Lazy<ITypedElement> _xDirectSubtransAttribute = new Lazy<ITypedElement>(RetrieveXDirectSubtransAttribute);
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        private float _x;
        
        private static Lazy<ITypedElement> _xAttribute = new Lazy<ITypedElement>(RetrieveXAttribute);
        
        /// <summary>
        /// The backing field for the QPercent property
        /// </summary>
        private float _qPercent;
        
        private static Lazy<ITypedElement> _qPercentAttribute = new Lazy<ITypedElement>(RetrieveQPercentAttribute);
        
        /// <summary>
        /// The backing field for the XQuadSync property
        /// </summary>
        private float _xQuadSync;
        
        private static Lazy<ITypedElement> _xQuadSyncAttribute = new Lazy<ITypedElement>(RetrieveXQuadSyncAttribute);
        
        /// <summary>
        /// The backing field for the RatedS property
        /// </summary>
        private float _ratedS;
        
        private static Lazy<ITypedElement> _ratedSAttribute = new Lazy<ITypedElement>(RetrieveRatedSAttribute);
        
        /// <summary>
        /// The backing field for the ManualToAVR property
        /// </summary>
        private float _manualToAVR;
        
        private static Lazy<ITypedElement> _manualToAVRAttribute = new Lazy<ITypedElement>(RetrieveManualToAVRAttribute);
        
        /// <summary>
        /// The backing field for the Inertia property
        /// </summary>
        private float _inertia;
        
        private static Lazy<ITypedElement> _inertiaAttribute = new Lazy<ITypedElement>(RetrieveInertiaAttribute);
        
        /// <summary>
        /// The backing field for the MinU property
        /// </summary>
        private float _minU;
        
        private static Lazy<ITypedElement> _minUAttribute = new Lazy<ITypedElement>(RetrieveMinUAttribute);
        
        /// <summary>
        /// The backing field for the XDirectTrans property
        /// </summary>
        private float _xDirectTrans;
        
        private static Lazy<ITypedElement> _xDirectTransAttribute = new Lazy<ITypedElement>(RetrieveXDirectTransAttribute);
        
        /// <summary>
        /// The backing field for the BaseQ property
        /// </summary>
        private float _baseQ;
        
        private static Lazy<ITypedElement> _baseQAttribute = new Lazy<ITypedElement>(RetrieveBaseQAttribute);
        
        /// <summary>
        /// The backing field for the OperatingMode property
        /// </summary>
        private Nullable<SynchronousMachineOperatingMode> _operatingMode;
        
        private static Lazy<ITypedElement> _operatingModeAttribute = new Lazy<ITypedElement>(RetrieveOperatingModeAttribute);
        
        private static Lazy<ITypedElement> _reactiveCapabilityCurvesReference = new Lazy<ITypedElement>(RetrieveReactiveCapabilityCurvesReference);
        
        /// <summary>
        /// The backing field for the ReactiveCapabilityCurves property
        /// </summary>
        private SynchronousMachineReactiveCapabilityCurvesCollection _reactiveCapabilityCurves;
        
        private static Lazy<ITypedElement> _generatingUnitReference = new Lazy<ITypedElement>(RetrieveGeneratingUnitReference);
        
        /// <summary>
        /// The backing field for the GeneratingUnit property
        /// </summary>
        private IGeneratingUnit _generatingUnit;
        
        private static Lazy<ITypedElement> _initialReactiveCapabilityCurveReference = new Lazy<ITypedElement>(RetrieveInitialReactiveCapabilityCurveReference);
        
        /// <summary>
        /// The backing field for the InitialReactiveCapabilityCurve property
        /// </summary>
        private IReactiveCapabilityCurve _initialReactiveCapabilityCurve;
        
        private static Lazy<ITypedElement> _hydroPumpReference = new Lazy<ITypedElement>(RetrieveHydroPumpReference);
        
        /// <summary>
        /// The backing field for the HydroPump property
        /// </summary>
        private IHydroPump _hydroPump;
        
        private static Lazy<ITypedElement> _primeMoversReference = new Lazy<ITypedElement>(RetrievePrimeMoversReference);
        
        /// <summary>
        /// The backing field for the PrimeMovers property
        /// </summary>
        private SynchronousMachinePrimeMoversCollection _primeMovers;
        
        private static IClass _classInstance;
        
        public SynchronousMachine()
        {
            this._reactiveCapabilityCurves = new SynchronousMachineReactiveCapabilityCurvesCollection(this);
            this._reactiveCapabilityCurves.CollectionChanging += this.ReactiveCapabilityCurvesCollectionChanging;
            this._reactiveCapabilityCurves.CollectionChanged += this.ReactiveCapabilityCurvesCollectionChanged;
            this._primeMovers = new SynchronousMachinePrimeMoversCollection(this);
            this._primeMovers.CollectionChanging += this.PrimeMoversCollectionChanging;
            this._primeMovers.CollectionChanged += this.PrimeMoversCollectionChanged;
        }
        
        /// <summary>
        /// The xDirectSync property
        /// </summary>
        [XmlElementNameAttribute("xDirectSync")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectSync
        {
            get
            {
                return this._xDirectSync;
            }
            set
            {
                if ((this._xDirectSync != value))
                {
                    float old = this._xDirectSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectSyncChanging(e);
                    this.OnPropertyChanging("XDirectSync", e, _xDirectSyncAttribute);
                    this._xDirectSync = value;
                    this.OnXDirectSyncChanged(e);
                    this.OnPropertyChanged("XDirectSync", e, _xDirectSyncAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xQuadTrans property
        /// </summary>
        [XmlElementNameAttribute("xQuadTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadTrans
        {
            get
            {
                return this._xQuadTrans;
            }
            set
            {
                if ((this._xQuadTrans != value))
                {
                    float old = this._xQuadTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadTransChanging(e);
                    this.OnPropertyChanging("XQuadTrans", e, _xQuadTransAttribute);
                    this._xQuadTrans = value;
                    this.OnXQuadTransChanged(e);
                    this.OnPropertyChanged("XQuadTrans", e, _xQuadTransAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coolantCondition property
        /// </summary>
        [XmlElementNameAttribute("coolantCondition")]
        [XmlAttributeAttribute(true)]
        public virtual float CoolantCondition
        {
            get
            {
                return this._coolantCondition;
            }
            set
            {
                if ((this._coolantCondition != value))
                {
                    float old = this._coolantCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoolantConditionChanging(e);
                    this.OnPropertyChanging("CoolantCondition", e, _coolantConditionAttribute);
                    this._coolantCondition = value;
                    this.OnCoolantConditionChanged(e);
                    this.OnPropertyChanged("CoolantCondition", e, _coolantConditionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xQuadSubtrans property
        /// </summary>
        [XmlElementNameAttribute("xQuadSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadSubtrans
        {
            get
            {
                return this._xQuadSubtrans;
            }
            set
            {
                if ((this._xQuadSubtrans != value))
                {
                    float old = this._xQuadSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadSubtransChanging(e);
                    this.OnPropertyChanging("XQuadSubtrans", e, _xQuadSubtransAttribute);
                    this._xQuadSubtrans = value;
                    this.OnXQuadSubtransChanged(e);
                    this.OnPropertyChanged("XQuadSubtrans", e, _xQuadSubtransAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coolantType property
        /// </summary>
        [XmlElementNameAttribute("coolantType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CoolantType> CoolantType
        {
            get
            {
                return this._coolantType;
            }
            set
            {
                if ((this._coolantType != value))
                {
                    Nullable<CoolantType> old = this._coolantType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoolantTypeChanging(e);
                    this.OnPropertyChanging("CoolantType", e, _coolantTypeAttribute);
                    this._coolantType = value;
                    this.OnCoolantTypeChanged(e);
                    this.OnPropertyChanged("CoolantType", e, _coolantTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The condenserP property
        /// </summary>
        [XmlElementNameAttribute("condenserP")]
        [XmlAttributeAttribute(true)]
        public virtual float CondenserP
        {
            get
            {
                return this._condenserP;
            }
            set
            {
                if ((this._condenserP != value))
                {
                    float old = this._condenserP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCondenserPChanging(e);
                    this.OnPropertyChanging("CondenserP", e, _condenserPAttribute);
                    this._condenserP = value;
                    this.OnCondenserPChanged(e);
                    this.OnPropertyChanged("CondenserP", e, _condenserPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The aVRToManualLag property
        /// </summary>
        [XmlElementNameAttribute("aVRToManualLag")]
        [XmlAttributeAttribute(true)]
        public virtual float AVRToManualLag
        {
            get
            {
                return this._aVRToManualLag;
            }
            set
            {
                if ((this._aVRToManualLag != value))
                {
                    float old = this._aVRToManualLag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAVRToManualLagChanging(e);
                    this.OnPropertyChanging("AVRToManualLag", e, _aVRToManualLagAttribute);
                    this._aVRToManualLag = value;
                    this.OnAVRToManualLagChanged(e);
                    this.OnPropertyChanged("AVRToManualLag", e, _aVRToManualLagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minQ property
        /// </summary>
        [XmlElementNameAttribute("minQ")]
        [XmlAttributeAttribute(true)]
        public virtual float MinQ
        {
            get
            {
                return this._minQ;
            }
            set
            {
                if ((this._minQ != value))
                {
                    float old = this._minQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinQChanging(e);
                    this.OnPropertyChanging("MinQ", e, _minQAttribute);
                    this._minQ = value;
                    this.OnMinQChanged(e);
                    this.OnPropertyChanged("MinQ", e, _minQAttribute);
                }
            }
        }
        
        /// <summary>
        /// The aVRToManualLead property
        /// </summary>
        [XmlElementNameAttribute("aVRToManualLead")]
        [XmlAttributeAttribute(true)]
        public virtual float AVRToManualLead
        {
            get
            {
                return this._aVRToManualLead;
            }
            set
            {
                if ((this._aVRToManualLead != value))
                {
                    float old = this._aVRToManualLead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAVRToManualLeadChanging(e);
                    this.OnPropertyChanging("AVRToManualLead", e, _aVRToManualLeadAttribute);
                    this._aVRToManualLead = value;
                    this.OnAVRToManualLeadChanged(e);
                    this.OnPropertyChanged("AVRToManualLead", e, _aVRToManualLeadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxU property
        /// </summary>
        [XmlElementNameAttribute("maxU")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxU
        {
            get
            {
                return this._maxU;
            }
            set
            {
                if ((this._maxU != value))
                {
                    float old = this._maxU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxUChanging(e);
                    this.OnPropertyChanging("MaxU", e, _maxUAttribute);
                    this._maxU = value;
                    this.OnMaxUChanged(e);
                    this.OnPropertyChanged("MaxU", e, _maxUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The damping property
        /// </summary>
        [XmlElementNameAttribute("damping")]
        [XmlAttributeAttribute(true)]
        public virtual float Damping
        {
            get
            {
                return this._damping;
            }
            set
            {
                if ((this._damping != value))
                {
                    float old = this._damping;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDampingChanging(e);
                    this.OnPropertyChanging("Damping", e, _dampingAttribute);
                    this._damping = value;
                    this.OnDampingChanged(e);
                    this.OnPropertyChanged("Damping", e, _dampingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxQ property
        /// </summary>
        [XmlElementNameAttribute("maxQ")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxQ
        {
            get
            {
                return this._maxQ;
            }
            set
            {
                if ((this._maxQ != value))
                {
                    float old = this._maxQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxQChanging(e);
                    this.OnPropertyChanging("MaxQ", e, _maxQAttribute);
                    this._maxQ = value;
                    this.OnMaxQChanged(e);
                    this.OnPropertyChanged("MaxQ", e, _maxQAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e, _r0Attribute);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e, _r0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SynchronousMachineType> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    Nullable<SynchronousMachineType> old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r2 property
        /// </summary>
        [XmlElementNameAttribute("r2")]
        [XmlAttributeAttribute(true)]
        public virtual float R2
        {
            get
            {
                return this._r2;
            }
            set
            {
                if ((this._r2 != value))
                {
                    float old = this._r2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR2Changing(e);
                    this.OnPropertyChanging("R2", e, _r2Attribute);
                    this._r2 = value;
                    this.OnR2Changed(e);
                    this.OnPropertyChanged("R2", e, _r2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The referencePriority property
        /// </summary>
        [XmlElementNameAttribute("referencePriority")]
        [XmlAttributeAttribute(true)]
        public virtual int ReferencePriority
        {
            get
            {
                return this._referencePriority;
            }
            set
            {
                if ((this._referencePriority != value))
                {
                    int old = this._referencePriority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferencePriorityChanging(e);
                    this.OnPropertyChanging("ReferencePriority", e, _referencePriorityAttribute);
                    this._referencePriority = value;
                    this.OnReferencePriorityChanged(e);
                    this.OnPropertyChanged("ReferencePriority", e, _referencePriorityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e, _x0Attribute);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e, _x0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The x2 property
        /// </summary>
        [XmlElementNameAttribute("x2")]
        [XmlAttributeAttribute(true)]
        public virtual float X2
        {
            get
            {
                return this._x2;
            }
            set
            {
                if ((this._x2 != value))
                {
                    float old = this._x2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX2Changing(e);
                    this.OnPropertyChanging("X2", e, _x2Attribute);
                    this._x2 = value;
                    this.OnX2Changed(e);
                    this.OnPropertyChanged("X2", e, _x2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e, _rAttribute);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e, _rAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xDirectSubtrans property
        /// </summary>
        [XmlElementNameAttribute("xDirectSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectSubtrans
        {
            get
            {
                return this._xDirectSubtrans;
            }
            set
            {
                if ((this._xDirectSubtrans != value))
                {
                    float old = this._xDirectSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectSubtransChanging(e);
                    this.OnPropertyChanging("XDirectSubtrans", e, _xDirectSubtransAttribute);
                    this._xDirectSubtrans = value;
                    this.OnXDirectSubtransChanged(e);
                    this.OnPropertyChanged("XDirectSubtrans", e, _xDirectSubtransAttribute);
                }
            }
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public virtual float X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    float old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e, _xAttribute);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e, _xAttribute);
                }
            }
        }
        
        /// <summary>
        /// The qPercent property
        /// </summary>
        [XmlElementNameAttribute("qPercent")]
        [XmlAttributeAttribute(true)]
        public virtual float QPercent
        {
            get
            {
                return this._qPercent;
            }
            set
            {
                if ((this._qPercent != value))
                {
                    float old = this._qPercent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQPercentChanging(e);
                    this.OnPropertyChanging("QPercent", e, _qPercentAttribute);
                    this._qPercent = value;
                    this.OnQPercentChanged(e);
                    this.OnPropertyChanged("QPercent", e, _qPercentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xQuadSync property
        /// </summary>
        [XmlElementNameAttribute("xQuadSync")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadSync
        {
            get
            {
                return this._xQuadSync;
            }
            set
            {
                if ((this._xQuadSync != value))
                {
                    float old = this._xQuadSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadSyncChanging(e);
                    this.OnPropertyChanging("XQuadSync", e, _xQuadSyncAttribute);
                    this._xQuadSync = value;
                    this.OnXQuadSyncChanged(e);
                    this.OnPropertyChanged("XQuadSync", e, _xQuadSyncAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedS property
        /// </summary>
        [XmlElementNameAttribute("ratedS")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedS
        {
            get
            {
                return this._ratedS;
            }
            set
            {
                if ((this._ratedS != value))
                {
                    float old = this._ratedS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedSChanging(e);
                    this.OnPropertyChanging("RatedS", e, _ratedSAttribute);
                    this._ratedS = value;
                    this.OnRatedSChanged(e);
                    this.OnPropertyChanged("RatedS", e, _ratedSAttribute);
                }
            }
        }
        
        /// <summary>
        /// The manualToAVR property
        /// </summary>
        [XmlElementNameAttribute("manualToAVR")]
        [XmlAttributeAttribute(true)]
        public virtual float ManualToAVR
        {
            get
            {
                return this._manualToAVR;
            }
            set
            {
                if ((this._manualToAVR != value))
                {
                    float old = this._manualToAVR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManualToAVRChanging(e);
                    this.OnPropertyChanging("ManualToAVR", e, _manualToAVRAttribute);
                    this._manualToAVR = value;
                    this.OnManualToAVRChanged(e);
                    this.OnPropertyChanged("ManualToAVR", e, _manualToAVRAttribute);
                }
            }
        }
        
        /// <summary>
        /// The inertia property
        /// </summary>
        [XmlElementNameAttribute("inertia")]
        [XmlAttributeAttribute(true)]
        public virtual float Inertia
        {
            get
            {
                return this._inertia;
            }
            set
            {
                if ((this._inertia != value))
                {
                    float old = this._inertia;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInertiaChanging(e);
                    this.OnPropertyChanging("Inertia", e, _inertiaAttribute);
                    this._inertia = value;
                    this.OnInertiaChanged(e);
                    this.OnPropertyChanged("Inertia", e, _inertiaAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minU property
        /// </summary>
        [XmlElementNameAttribute("minU")]
        [XmlAttributeAttribute(true)]
        public virtual float MinU
        {
            get
            {
                return this._minU;
            }
            set
            {
                if ((this._minU != value))
                {
                    float old = this._minU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinUChanging(e);
                    this.OnPropertyChanging("MinU", e, _minUAttribute);
                    this._minU = value;
                    this.OnMinUChanged(e);
                    this.OnPropertyChanged("MinU", e, _minUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xDirectTrans property
        /// </summary>
        [XmlElementNameAttribute("xDirectTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectTrans
        {
            get
            {
                return this._xDirectTrans;
            }
            set
            {
                if ((this._xDirectTrans != value))
                {
                    float old = this._xDirectTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectTransChanging(e);
                    this.OnPropertyChanging("XDirectTrans", e, _xDirectTransAttribute);
                    this._xDirectTrans = value;
                    this.OnXDirectTransChanged(e);
                    this.OnPropertyChanged("XDirectTrans", e, _xDirectTransAttribute);
                }
            }
        }
        
        /// <summary>
        /// The baseQ property
        /// </summary>
        [XmlElementNameAttribute("baseQ")]
        [XmlAttributeAttribute(true)]
        public virtual float BaseQ
        {
            get
            {
                return this._baseQ;
            }
            set
            {
                if ((this._baseQ != value))
                {
                    float old = this._baseQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseQChanging(e);
                    this.OnPropertyChanging("BaseQ", e, _baseQAttribute);
                    this._baseQ = value;
                    this.OnBaseQChanged(e);
                    this.OnPropertyChanged("BaseQ", e, _baseQAttribute);
                }
            }
        }
        
        /// <summary>
        /// The operatingMode property
        /// </summary>
        [XmlElementNameAttribute("operatingMode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SynchronousMachineOperatingMode> OperatingMode
        {
            get
            {
                return this._operatingMode;
            }
            set
            {
                if ((this._operatingMode != value))
                {
                    Nullable<SynchronousMachineOperatingMode> old = this._operatingMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatingModeChanging(e);
                    this.OnPropertyChanging("OperatingMode", e, _operatingModeAttribute);
                    this._operatingMode = value;
                    this.OnOperatingModeChanged(e);
                    this.OnPropertyChanged("OperatingMode", e, _operatingModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReactiveCapabilityCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SynchronousMachines")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReactiveCapabilityCurve> ReactiveCapabilityCurves
        {
            get
            {
                return this._reactiveCapabilityCurves;
            }
        }
        
        /// <summary>
        /// The GeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SynchronousMachines")]
        public virtual IGeneratingUnit GeneratingUnit
        {
            get
            {
                return this._generatingUnit;
            }
            set
            {
                if ((this._generatingUnit != value))
                {
                    IGeneratingUnit old = this._generatingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneratingUnitChanging(e);
                    this.OnPropertyChanging("GeneratingUnit", e, _generatingUnitReference);
                    this._generatingUnit = value;
                    if ((old != null))
                    {
                        old.SynchronousMachines.Remove(this);
                        old.Deleted -= this.OnResetGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.SynchronousMachines.Add(this);
                        value.Deleted += this.OnResetGeneratingUnit;
                    }
                    this.OnGeneratingUnitChanged(e);
                    this.OnPropertyChanged("GeneratingUnit", e, _generatingUnitReference);
                }
            }
        }
        
        /// <summary>
        /// The InitialReactiveCapabilityCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("InitiallyUsedBySynchronousMachines")]
        public virtual IReactiveCapabilityCurve InitialReactiveCapabilityCurve
        {
            get
            {
                return this._initialReactiveCapabilityCurve;
            }
            set
            {
                if ((this._initialReactiveCapabilityCurve != value))
                {
                    IReactiveCapabilityCurve old = this._initialReactiveCapabilityCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialReactiveCapabilityCurveChanging(e);
                    this.OnPropertyChanging("InitialReactiveCapabilityCurve", e, _initialReactiveCapabilityCurveReference);
                    this._initialReactiveCapabilityCurve = value;
                    if ((old != null))
                    {
                        old.InitiallyUsedBySynchronousMachines.Remove(this);
                        old.Deleted -= this.OnResetInitialReactiveCapabilityCurve;
                    }
                    if ((value != null))
                    {
                        value.InitiallyUsedBySynchronousMachines.Add(this);
                        value.Deleted += this.OnResetInitialReactiveCapabilityCurve;
                    }
                    this.OnInitialReactiveCapabilityCurveChanged(e);
                    this.OnPropertyChanged("InitialReactiveCapabilityCurve", e, _initialReactiveCapabilityCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The HydroPump property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SynchronousMachine")]
        public virtual IHydroPump HydroPump
        {
            get
            {
                return this._hydroPump;
            }
            set
            {
                if ((this._hydroPump != value))
                {
                    IHydroPump old = this._hydroPump;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroPumpChanging(e);
                    this.OnPropertyChanging("HydroPump", e, _hydroPumpReference);
                    this._hydroPump = value;
                    if ((old != null))
                    {
                        old.SynchronousMachine = null;
                        old.Deleted -= this.OnResetHydroPump;
                    }
                    if ((value != null))
                    {
                        value.SynchronousMachine = this;
                        value.Deleted += this.OnResetHydroPump;
                    }
                    this.OnHydroPumpChanged(e);
                    this.OnPropertyChanged("HydroPump", e, _hydroPumpReference);
                }
            }
        }
        
        /// <summary>
        /// The PrimeMovers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SynchronousMachines")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPrimeMover> PrimeMovers
        {
            get
            {
                return this._primeMovers;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SynchronousMachineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/SynchronousMachine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the XDirectSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanged;
        
        /// <summary>
        /// Gets fired before the XQuadTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadTransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadTransChanged;
        
        /// <summary>
        /// Gets fired before the CoolantCondition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolantConditionChanging;
        
        /// <summary>
        /// Gets fired when the CoolantCondition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolantConditionChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanged;
        
        /// <summary>
        /// Gets fired before the CoolantType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolantTypeChanging;
        
        /// <summary>
        /// Gets fired when the CoolantType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolantTypeChanged;
        
        /// <summary>
        /// Gets fired before the CondenserP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CondenserPChanging;
        
        /// <summary>
        /// Gets fired when the CondenserP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CondenserPChanged;
        
        /// <summary>
        /// Gets fired before the AVRToManualLag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRToManualLagChanging;
        
        /// <summary>
        /// Gets fired when the AVRToManualLag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRToManualLagChanged;
        
        /// <summary>
        /// Gets fired before the MinQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinQChanging;
        
        /// <summary>
        /// Gets fired when the MinQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinQChanged;
        
        /// <summary>
        /// Gets fired before the AVRToManualLead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRToManualLeadChanging;
        
        /// <summary>
        /// Gets fired when the AVRToManualLead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRToManualLeadChanged;
        
        /// <summary>
        /// Gets fired before the MaxU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanging;
        
        /// <summary>
        /// Gets fired when the MaxU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanged;
        
        /// <summary>
        /// Gets fired before the Damping property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DampingChanging;
        
        /// <summary>
        /// Gets fired when the Damping property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DampingChanged;
        
        /// <summary>
        /// Gets fired before the MaxQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxQChanging;
        
        /// <summary>
        /// Gets fired when the MaxQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxQChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the R2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R2Changing;
        
        /// <summary>
        /// Gets fired when the R2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R2Changed;
        
        /// <summary>
        /// Gets fired before the ReferencePriority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferencePriorityChanging;
        
        /// <summary>
        /// Gets fired when the ReferencePriority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferencePriorityChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the X2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X2Changing;
        
        /// <summary>
        /// Gets fired when the X2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X2Changed;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the XDirectSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the QPercent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QPercentChanging;
        
        /// <summary>
        /// Gets fired when the QPercent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QPercentChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanged;
        
        /// <summary>
        /// Gets fired before the RatedS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanging;
        
        /// <summary>
        /// Gets fired when the RatedS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanged;
        
        /// <summary>
        /// Gets fired before the ManualToAVR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManualToAVRChanging;
        
        /// <summary>
        /// Gets fired when the ManualToAVR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManualToAVRChanged;
        
        /// <summary>
        /// Gets fired before the Inertia property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InertiaChanging;
        
        /// <summary>
        /// Gets fired when the Inertia property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InertiaChanged;
        
        /// <summary>
        /// Gets fired before the MinU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanging;
        
        /// <summary>
        /// Gets fired when the MinU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanged;
        
        /// <summary>
        /// Gets fired before the XDirectTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectTransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectTransChanged;
        
        /// <summary>
        /// Gets fired before the BaseQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseQChanging;
        
        /// <summary>
        /// Gets fired when the BaseQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseQChanged;
        
        /// <summary>
        /// Gets fired before the OperatingMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the OperatingMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the GeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the GeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanged;
        
        /// <summary>
        /// Gets fired before the InitialReactiveCapabilityCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialReactiveCapabilityCurveChanging;
        
        /// <summary>
        /// Gets fired when the InitialReactiveCapabilityCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialReactiveCapabilityCurveChanged;
        
        /// <summary>
        /// Gets fired before the HydroPump property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPumpChanging;
        
        /// <summary>
        /// Gets fired when the HydroPump property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPumpChanged;
        
        private static ITypedElement RetrieveXDirectSyncAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xDirectSync")));
        }
        
        /// <summary>
        /// Raises the XDirectSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXQuadTransAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xQuadTrans")));
        }
        
        /// <summary>
        /// Raises the XQuadTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoolantConditionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("coolantCondition")));
        }
        
        /// <summary>
        /// Raises the CoolantConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolantConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolantConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoolantConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolantConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolantConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXQuadSubtransAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xQuadSubtrans")));
        }
        
        /// <summary>
        /// Raises the XQuadSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoolantTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("coolantType")));
        }
        
        /// <summary>
        /// Raises the CoolantTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolantTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolantTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoolantTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolantTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolantTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCondenserPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("condenserP")));
        }
        
        /// <summary>
        /// Raises the CondenserPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCondenserPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CondenserPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CondenserPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCondenserPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CondenserPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAVRToManualLagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("aVRToManualLag")));
        }
        
        /// <summary>
        /// Raises the AVRToManualLagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRToManualLagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRToManualLagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AVRToManualLagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRToManualLagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRToManualLagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinQAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("minQ")));
        }
        
        /// <summary>
        /// Raises the MinQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAVRToManualLeadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("aVRToManualLead")));
        }
        
        /// <summary>
        /// Raises the AVRToManualLeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRToManualLeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRToManualLeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AVRToManualLeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRToManualLeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRToManualLeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("maxU")));
        }
        
        /// <summary>
        /// Raises the MaxUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDampingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("damping")));
        }
        
        /// <summary>
        /// Raises the DampingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDampingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DampingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DampingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDampingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DampingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxQAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("maxQ")));
        }
        
        /// <summary>
        /// Raises the MaxQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveR0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("r0")));
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveR2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("r2")));
        }
        
        /// <summary>
        /// Raises the R2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReferencePriorityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("referencePriority")));
        }
        
        /// <summary>
        /// Raises the ReferencePriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferencePriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferencePriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferencePriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferencePriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferencePriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveX0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("x0")));
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveX2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("x2")));
        }
        
        /// <summary>
        /// Raises the X2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("r")));
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXDirectSubtransAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xDirectSubtrans")));
        }
        
        /// <summary>
        /// Raises the XDirectSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("x")));
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQPercentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("qPercent")));
        }
        
        /// <summary>
        /// Raises the QPercentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQPercentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QPercentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QPercentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQPercentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QPercentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXQuadSyncAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xQuadSync")));
        }
        
        /// <summary>
        /// Raises the XQuadSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedSAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("ratedS")));
        }
        
        /// <summary>
        /// Raises the RatedSChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedSChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManualToAVRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("manualToAVR")));
        }
        
        /// <summary>
        /// Raises the ManualToAVRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManualToAVRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManualToAVRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManualToAVRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManualToAVRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManualToAVRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInertiaAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("inertia")));
        }
        
        /// <summary>
        /// Raises the InertiaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInertiaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InertiaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InertiaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInertiaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InertiaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("minU")));
        }
        
        /// <summary>
        /// Raises the MinUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXDirectTransAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("xDirectTrans")));
        }
        
        /// <summary>
        /// Raises the XDirectTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBaseQAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("baseQ")));
        }
        
        /// <summary>
        /// Raises the BaseQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperatingModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("operatingMode")));
        }
        
        /// <summary>
        /// Raises the OperatingModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatingModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactiveCapabilityCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("ReactiveCapabilityCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReactiveCapabilityCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReactiveCapabilityCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ReactiveCapabilityCurves", e, _reactiveCapabilityCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReactiveCapabilityCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReactiveCapabilityCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReactiveCapabilityCurves", e, _reactiveCapabilityCurvesReference);
        }
        
        private static ITypedElement RetrieveGeneratingUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("GeneratingUnit")));
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.GeneratingUnit = null;
        }
        
        private static ITypedElement RetrieveInitialReactiveCapabilityCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("InitialReactiveCapabilityCurve")));
        }
        
        /// <summary>
        /// Raises the InitialReactiveCapabilityCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialReactiveCapabilityCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialReactiveCapabilityCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialReactiveCapabilityCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialReactiveCapabilityCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialReactiveCapabilityCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InitialReactiveCapabilityCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInitialReactiveCapabilityCurve(object sender, System.EventArgs eventArgs)
        {
            this.InitialReactiveCapabilityCurve = null;
        }
        
        private static ITypedElement RetrieveHydroPumpReference()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("HydroPump")));
        }
        
        /// <summary>
        /// Raises the HydroPumpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPumpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPumpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPumpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPumpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPumpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HydroPump property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHydroPump(object sender, System.EventArgs eventArgs)
        {
            this.HydroPump = null;
        }
        
        private static ITypedElement RetrievePrimeMoversReference()
        {
            return ((ITypedElement)(((ModelElement)(SynchronousMachine.ClassInstance)).Resolve("PrimeMovers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PrimeMovers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PrimeMoversCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PrimeMovers", e, _primeMoversReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PrimeMovers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PrimeMoversCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PrimeMovers", e, _primeMoversReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "XDIRECTSYNC"))
            {
                return this.XDirectSync;
            }
            if ((attribute == "XQUADTRANS"))
            {
                return this.XQuadTrans;
            }
            if ((attribute == "COOLANTCONDITION"))
            {
                return this.CoolantCondition;
            }
            if ((attribute == "XQUADSUBTRANS"))
            {
                return this.XQuadSubtrans;
            }
            if ((attribute == "COOLANTTYPE"))
            {
                return this.CoolantType;
            }
            if ((attribute == "CONDENSERP"))
            {
                return this.CondenserP;
            }
            if ((attribute == "AVRTOMANUALLAG"))
            {
                return this.AVRToManualLag;
            }
            if ((attribute == "MINQ"))
            {
                return this.MinQ;
            }
            if ((attribute == "AVRTOMANUALLEAD"))
            {
                return this.AVRToManualLead;
            }
            if ((attribute == "MAXU"))
            {
                return this.MaxU;
            }
            if ((attribute == "DAMPING"))
            {
                return this.Damping;
            }
            if ((attribute == "MAXQ"))
            {
                return this.MaxQ;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "R2"))
            {
                return this.R2;
            }
            if ((attribute == "REFERENCEPRIORITY"))
            {
                return this.ReferencePriority;
            }
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            if ((attribute == "X2"))
            {
                return this.X2;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "XDIRECTSUBTRANS"))
            {
                return this.XDirectSubtrans;
            }
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "QPERCENT"))
            {
                return this.QPercent;
            }
            if ((attribute == "XQUADSYNC"))
            {
                return this.XQuadSync;
            }
            if ((attribute == "RATEDS"))
            {
                return this.RatedS;
            }
            if ((attribute == "MANUALTOAVR"))
            {
                return this.ManualToAVR;
            }
            if ((attribute == "INERTIA"))
            {
                return this.Inertia;
            }
            if ((attribute == "MINU"))
            {
                return this.MinU;
            }
            if ((attribute == "XDIRECTTRANS"))
            {
                return this.XDirectTrans;
            }
            if ((attribute == "BASEQ"))
            {
                return this.BaseQ;
            }
            if ((attribute == "OPERATINGMODE"))
            {
                return this.OperatingMode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REACTIVECAPABILITYCURVES"))
            {
                return this._reactiveCapabilityCurves;
            }
            if ((feature == "PRIMEMOVERS"))
            {
                return this._primeMovers;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERATINGUNIT"))
            {
                this.GeneratingUnit = ((IGeneratingUnit)(value));
                return;
            }
            if ((feature == "INITIALREACTIVECAPABILITYCURVE"))
            {
                this.InitialReactiveCapabilityCurve = ((IReactiveCapabilityCurve)(value));
                return;
            }
            if ((feature == "HYDROPUMP"))
            {
                this.HydroPump = ((IHydroPump)(value));
                return;
            }
            if ((feature == "XDIRECTSYNC"))
            {
                this.XDirectSync = ((float)(value));
                return;
            }
            if ((feature == "XQUADTRANS"))
            {
                this.XQuadTrans = ((float)(value));
                return;
            }
            if ((feature == "COOLANTCONDITION"))
            {
                this.CoolantCondition = ((float)(value));
                return;
            }
            if ((feature == "XQUADSUBTRANS"))
            {
                this.XQuadSubtrans = ((float)(value));
                return;
            }
            if ((feature == "COOLANTTYPE"))
            {
                this.CoolantType = ((CoolantType)(value));
                return;
            }
            if ((feature == "CONDENSERP"))
            {
                this.CondenserP = ((float)(value));
                return;
            }
            if ((feature == "AVRTOMANUALLAG"))
            {
                this.AVRToManualLag = ((float)(value));
                return;
            }
            if ((feature == "MINQ"))
            {
                this.MinQ = ((float)(value));
                return;
            }
            if ((feature == "AVRTOMANUALLEAD"))
            {
                this.AVRToManualLead = ((float)(value));
                return;
            }
            if ((feature == "MAXU"))
            {
                this.MaxU = ((float)(value));
                return;
            }
            if ((feature == "DAMPING"))
            {
                this.Damping = ((float)(value));
                return;
            }
            if ((feature == "MAXQ"))
            {
                this.MaxQ = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((SynchronousMachineType)(value));
                return;
            }
            if ((feature == "R2"))
            {
                this.R2 = ((float)(value));
                return;
            }
            if ((feature == "REFERENCEPRIORITY"))
            {
                this.ReferencePriority = ((int)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            if ((feature == "X2"))
            {
                this.X2 = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "XDIRECTSUBTRANS"))
            {
                this.XDirectSubtrans = ((float)(value));
                return;
            }
            if ((feature == "X"))
            {
                this.X = ((float)(value));
                return;
            }
            if ((feature == "QPERCENT"))
            {
                this.QPercent = ((float)(value));
                return;
            }
            if ((feature == "XQUADSYNC"))
            {
                this.XQuadSync = ((float)(value));
                return;
            }
            if ((feature == "RATEDS"))
            {
                this.RatedS = ((float)(value));
                return;
            }
            if ((feature == "MANUALTOAVR"))
            {
                this.ManualToAVR = ((float)(value));
                return;
            }
            if ((feature == "INERTIA"))
            {
                this.Inertia = ((float)(value));
                return;
            }
            if ((feature == "MINU"))
            {
                this.MinU = ((float)(value));
                return;
            }
            if ((feature == "XDIRECTTRANS"))
            {
                this.XDirectTrans = ((float)(value));
                return;
            }
            if ((feature == "BASEQ"))
            {
                this.BaseQ = ((float)(value));
                return;
            }
            if ((feature == "OPERATINGMODE"))
            {
                this.OperatingMode = ((SynchronousMachineOperatingMode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            if ((attribute == "InitialReactiveCapabilityCurve"))
            {
                return new InitialReactiveCapabilityCurveProxy(this);
            }
            if ((attribute == "HydroPump"))
            {
                return new HydroPumpProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            if ((reference == "InitialReactiveCapabilityCurve"))
            {
                return new InitialReactiveCapabilityCurveProxy(this);
            }
            if ((reference == "HydroPump"))
            {
                return new HydroPumpProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/SynchronousMachine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SynchronousMachine class
        /// </summary>
        public class SynchronousMachineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SynchronousMachine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SynchronousMachineReferencedElementsCollection(SynchronousMachine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ReactiveCapabilityCurves.Count);
                    if ((this._parent.GeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InitialReactiveCapabilityCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HydroPump != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PrimeMovers.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReactiveCapabilityCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GeneratingUnitChanged += this.PropagateValueChanges;
                this._parent.InitialReactiveCapabilityCurveChanged += this.PropagateValueChanges;
                this._parent.HydroPumpChanged += this.PropagateValueChanges;
                this._parent.PrimeMovers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReactiveCapabilityCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GeneratingUnitChanged -= this.PropagateValueChanges;
                this._parent.InitialReactiveCapabilityCurveChanged -= this.PropagateValueChanges;
                this._parent.HydroPumpChanged -= this.PropagateValueChanges;
                this._parent.PrimeMovers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IReactiveCapabilityCurve reactiveCapabilityCurvesCasted = item.As<IReactiveCapabilityCurve>();
                if ((reactiveCapabilityCurvesCasted != null))
                {
                    this._parent.ReactiveCapabilityCurves.Add(reactiveCapabilityCurvesCasted);
                }
                if ((this._parent.GeneratingUnit == null))
                {
                    IGeneratingUnit generatingUnitCasted = item.As<IGeneratingUnit>();
                    if ((generatingUnitCasted != null))
                    {
                        this._parent.GeneratingUnit = generatingUnitCasted;
                        return;
                    }
                }
                if ((this._parent.InitialReactiveCapabilityCurve == null))
                {
                    IReactiveCapabilityCurve initialReactiveCapabilityCurveCasted = item.As<IReactiveCapabilityCurve>();
                    if ((initialReactiveCapabilityCurveCasted != null))
                    {
                        this._parent.InitialReactiveCapabilityCurve = initialReactiveCapabilityCurveCasted;
                        return;
                    }
                }
                if ((this._parent.HydroPump == null))
                {
                    IHydroPump hydroPumpCasted = item.As<IHydroPump>();
                    if ((hydroPumpCasted != null))
                    {
                        this._parent.HydroPump = hydroPumpCasted;
                        return;
                    }
                }
                IPrimeMover primeMoversCasted = item.As<IPrimeMover>();
                if ((primeMoversCasted != null))
                {
                    this._parent.PrimeMovers.Add(primeMoversCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReactiveCapabilityCurves.Clear();
                this._parent.GeneratingUnit = null;
                this._parent.InitialReactiveCapabilityCurve = null;
                this._parent.HydroPump = null;
                this._parent.PrimeMovers.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ReactiveCapabilityCurves.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.GeneratingUnit))
                {
                    return true;
                }
                if ((item == this._parent.InitialReactiveCapabilityCurve))
                {
                    return true;
                }
                if ((item == this._parent.HydroPump))
                {
                    return true;
                }
                if (this._parent.PrimeMovers.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> reactiveCapabilityCurvesEnumerator = this._parent.ReactiveCapabilityCurves.GetEnumerator();
                try
                {
                    for (
                    ; reactiveCapabilityCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = reactiveCapabilityCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    reactiveCapabilityCurvesEnumerator.Dispose();
                }
                if ((this._parent.GeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.GeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InitialReactiveCapabilityCurve != null))
                {
                    array[arrayIndex] = this._parent.InitialReactiveCapabilityCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HydroPump != null))
                {
                    array[arrayIndex] = this._parent.HydroPump;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> primeMoversEnumerator = this._parent.PrimeMovers.GetEnumerator();
                try
                {
                    for (
                    ; primeMoversEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = primeMoversEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    primeMoversEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IReactiveCapabilityCurve reactiveCapabilityCurveItem = item.As<IReactiveCapabilityCurve>();
                if (((reactiveCapabilityCurveItem != null) 
                            && this._parent.ReactiveCapabilityCurves.Remove(reactiveCapabilityCurveItem)))
                {
                    return true;
                }
                if ((this._parent.GeneratingUnit == item))
                {
                    this._parent.GeneratingUnit = null;
                    return true;
                }
                if ((this._parent.InitialReactiveCapabilityCurve == item))
                {
                    this._parent.InitialReactiveCapabilityCurve = null;
                    return true;
                }
                if ((this._parent.HydroPump == item))
                {
                    this._parent.HydroPump = null;
                    return true;
                }
                IPrimeMover primeMoverItem = item.As<IPrimeMover>();
                if (((primeMoverItem != null) 
                            && this._parent.PrimeMovers.Remove(primeMoverItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReactiveCapabilityCurves).Concat(this._parent.GeneratingUnit).Concat(this._parent.InitialReactiveCapabilityCurve).Concat(this._parent.HydroPump).Concat(this._parent.PrimeMovers).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectSync property
        /// </summary>
        private sealed class XDirectSyncProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectSyncProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xDirectSync")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectSync;
                }
                set
                {
                    this.ModelElement.XDirectSync = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadTrans property
        /// </summary>
        private sealed class XQuadTransProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadTransProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xQuadTrans")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadTrans;
                }
                set
                {
                    this.ModelElement.XQuadTrans = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coolantCondition property
        /// </summary>
        private sealed class CoolantConditionProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoolantConditionProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "coolantCondition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoolantCondition;
                }
                set
                {
                    this.ModelElement.CoolantCondition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadSubtrans property
        /// </summary>
        private sealed class XQuadSubtransProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadSubtransProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xQuadSubtrans")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadSubtrans;
                }
                set
                {
                    this.ModelElement.XQuadSubtrans = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coolantType property
        /// </summary>
        private sealed class CoolantTypeProxy : ModelPropertyChange<ISynchronousMachine, Nullable<CoolantType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoolantTypeProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "coolantType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CoolantType> Value
            {
                get
                {
                    return this.ModelElement.CoolantType;
                }
                set
                {
                    this.ModelElement.CoolantType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the condenserP property
        /// </summary>
        private sealed class CondenserPProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CondenserPProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "condenserP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CondenserP;
                }
                set
                {
                    this.ModelElement.CondenserP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aVRToManualLag property
        /// </summary>
        private sealed class AVRToManualLagProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AVRToManualLagProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "aVRToManualLag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AVRToManualLag;
                }
                set
                {
                    this.ModelElement.AVRToManualLag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minQ property
        /// </summary>
        private sealed class MinQProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinQProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "minQ")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinQ;
                }
                set
                {
                    this.ModelElement.MinQ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aVRToManualLead property
        /// </summary>
        private sealed class AVRToManualLeadProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AVRToManualLeadProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "aVRToManualLead")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AVRToManualLead;
                }
                set
                {
                    this.ModelElement.AVRToManualLead = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxU property
        /// </summary>
        private sealed class MaxUProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxUProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "maxU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxU;
                }
                set
                {
                    this.ModelElement.MaxU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the damping property
        /// </summary>
        private sealed class DampingProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DampingProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "damping")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Damping;
                }
                set
                {
                    this.ModelElement.Damping = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxQ property
        /// </summary>
        private sealed class MaxQProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxQProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "maxQ")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxQ;
                }
                set
                {
                    this.ModelElement.MaxQ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "r0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<ISynchronousMachine, Nullable<SynchronousMachineType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SynchronousMachineType> Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r2 property
        /// </summary>
        private sealed class R2Proxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R2Proxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "r2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R2;
                }
                set
                {
                    this.ModelElement.R2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referencePriority property
        /// </summary>
        private sealed class ReferencePriorityProxy : ModelPropertyChange<ISynchronousMachine, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferencePriorityProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "referencePriority")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ReferencePriority;
                }
                set
                {
                    this.ModelElement.ReferencePriority = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "x0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x2 property
        /// </summary>
        private sealed class X2Proxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X2Proxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "x2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X2;
                }
                set
                {
                    this.ModelElement.X2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "r")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectSubtrans property
        /// </summary>
        private sealed class XDirectSubtransProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectSubtransProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xDirectSubtrans")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectSubtrans;
                }
                set
                {
                    this.ModelElement.XDirectSubtrans = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "x")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qPercent property
        /// </summary>
        private sealed class QPercentProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QPercentProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "qPercent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QPercent;
                }
                set
                {
                    this.ModelElement.QPercent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadSync property
        /// </summary>
        private sealed class XQuadSyncProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadSyncProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xQuadSync")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadSync;
                }
                set
                {
                    this.ModelElement.XQuadSync = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedS property
        /// </summary>
        private sealed class RatedSProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedSProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "ratedS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedS;
                }
                set
                {
                    this.ModelElement.RatedS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the manualToAVR property
        /// </summary>
        private sealed class ManualToAVRProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManualToAVRProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "manualToAVR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ManualToAVR;
                }
                set
                {
                    this.ModelElement.ManualToAVR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inertia property
        /// </summary>
        private sealed class InertiaProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InertiaProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "inertia")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Inertia;
                }
                set
                {
                    this.ModelElement.Inertia = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minU property
        /// </summary>
        private sealed class MinUProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinUProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "minU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinU;
                }
                set
                {
                    this.ModelElement.MinU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectTrans property
        /// </summary>
        private sealed class XDirectTransProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectTransProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "xDirectTrans")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectTrans;
                }
                set
                {
                    this.ModelElement.XDirectTrans = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the baseQ property
        /// </summary>
        private sealed class BaseQProxy : ModelPropertyChange<ISynchronousMachine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseQProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "baseQ")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BaseQ;
                }
                set
                {
                    this.ModelElement.BaseQ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operatingMode property
        /// </summary>
        private sealed class OperatingModeProxy : ModelPropertyChange<ISynchronousMachine, Nullable<SynchronousMachineOperatingMode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatingModeProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "operatingMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SynchronousMachineOperatingMode> Value
            {
                get
                {
                    return this.ModelElement.OperatingMode;
                }
                set
                {
                    this.ModelElement.OperatingMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GeneratingUnit property
        /// </summary>
        private sealed class GeneratingUnitProxy : ModelPropertyChange<ISynchronousMachine, IGeneratingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneratingUnitProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "GeneratingUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGeneratingUnit Value
            {
                get
                {
                    return this.ModelElement.GeneratingUnit;
                }
                set
                {
                    this.ModelElement.GeneratingUnit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InitialReactiveCapabilityCurve property
        /// </summary>
        private sealed class InitialReactiveCapabilityCurveProxy : ModelPropertyChange<ISynchronousMachine, IReactiveCapabilityCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialReactiveCapabilityCurveProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "InitialReactiveCapabilityCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReactiveCapabilityCurve Value
            {
                get
                {
                    return this.ModelElement.InitialReactiveCapabilityCurve;
                }
                set
                {
                    this.ModelElement.InitialReactiveCapabilityCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HydroPump property
        /// </summary>
        private sealed class HydroPumpProxy : ModelPropertyChange<ISynchronousMachine, IHydroPump>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroPumpProxy(ISynchronousMachine modelElement) : 
                    base(modelElement, "HydroPump")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHydroPump Value
            {
                get
                {
                    return this.ModelElement.HydroPump;
                }
                set
                {
                    this.ModelElement.HydroPump = value;
                }
            }
        }
    }
}

