//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the MutualCoupling class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/MutualCoupling")]
    [DebuggerDisplayAttribute("MutualCoupling {UUID}")]
    public class MutualCoupling : IdentifiedObject, IMutualCoupling, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Distance11 property
        /// </summary>
        private float _distance11;
        
        /// <summary>
        /// The backing field for the Distance12 property
        /// </summary>
        private float _distance12;
        
        /// <summary>
        /// The backing field for the B0ch property
        /// </summary>
        private float _b0ch;
        
        /// <summary>
        /// The backing field for the G0ch property
        /// </summary>
        private float _g0ch;
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        /// <summary>
        /// The backing field for the Distance22 property
        /// </summary>
        private float _distance22;
        
        /// <summary>
        /// The backing field for the Distance21 property
        /// </summary>
        private float _distance21;
        
        /// <summary>
        /// The backing field for the Second_Terminal property
        /// </summary>
        private ITerminal _second_Terminal;
        
        /// <summary>
        /// The backing field for the First_Terminal property
        /// </summary>
        private ITerminal _first_Terminal;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The distance11 property
        /// </summary>
        [XmlElementNameAttribute("distance11")]
        [XmlAttributeAttribute(true)]
        public virtual float Distance11
        {
            get
            {
                return this._distance11;
            }
            set
            {
                if ((this._distance11 != value))
                {
                    float old = this._distance11;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDistance11Changing(e);
                    this.OnPropertyChanging("Distance11", e);
                    this._distance11 = value;
                    this.OnDistance11Changed(e);
                    this.OnPropertyChanged("Distance11", e);
                }
            }
        }
        
        /// <summary>
        /// The distance12 property
        /// </summary>
        [XmlElementNameAttribute("distance12")]
        [XmlAttributeAttribute(true)]
        public virtual float Distance12
        {
            get
            {
                return this._distance12;
            }
            set
            {
                if ((this._distance12 != value))
                {
                    float old = this._distance12;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDistance12Changing(e);
                    this.OnPropertyChanging("Distance12", e);
                    this._distance12 = value;
                    this.OnDistance12Changed(e);
                    this.OnPropertyChanged("Distance12", e);
                }
            }
        }
        
        /// <summary>
        /// The b0ch property
        /// </summary>
        [XmlElementNameAttribute("b0ch")]
        [XmlAttributeAttribute(true)]
        public virtual float B0ch
        {
            get
            {
                return this._b0ch;
            }
            set
            {
                if ((this._b0ch != value))
                {
                    float old = this._b0ch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnB0chChanging(e);
                    this.OnPropertyChanging("B0ch", e);
                    this._b0ch = value;
                    this.OnB0chChanged(e);
                    this.OnPropertyChanged("B0ch", e);
                }
            }
        }
        
        /// <summary>
        /// The g0ch property
        /// </summary>
        [XmlElementNameAttribute("g0ch")]
        [XmlAttributeAttribute(true)]
        public virtual float G0ch
        {
            get
            {
                return this._g0ch;
            }
            set
            {
                if ((this._g0ch != value))
                {
                    float old = this._g0ch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnG0chChanging(e);
                    this.OnPropertyChanging("G0ch", e);
                    this._g0ch = value;
                    this.OnG0chChanged(e);
                    this.OnPropertyChanged("G0ch", e);
                }
            }
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e);
                }
            }
        }
        
        /// <summary>
        /// The distance22 property
        /// </summary>
        [XmlElementNameAttribute("distance22")]
        [XmlAttributeAttribute(true)]
        public virtual float Distance22
        {
            get
            {
                return this._distance22;
            }
            set
            {
                if ((this._distance22 != value))
                {
                    float old = this._distance22;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDistance22Changing(e);
                    this.OnPropertyChanging("Distance22", e);
                    this._distance22 = value;
                    this.OnDistance22Changed(e);
                    this.OnPropertyChanged("Distance22", e);
                }
            }
        }
        
        /// <summary>
        /// The distance21 property
        /// </summary>
        [XmlElementNameAttribute("distance21")]
        [XmlAttributeAttribute(true)]
        public virtual float Distance21
        {
            get
            {
                return this._distance21;
            }
            set
            {
                if ((this._distance21 != value))
                {
                    float old = this._distance21;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDistance21Changing(e);
                    this.OnPropertyChanging("Distance21", e);
                    this._distance21 = value;
                    this.OnDistance21Changed(e);
                    this.OnPropertyChanged("Distance21", e);
                }
            }
        }
        
        /// <summary>
        /// The Second_Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HasSecond_MutualCoupling")]
        public virtual ITerminal Second_Terminal
        {
            get
            {
                return this._second_Terminal;
            }
            set
            {
                if ((this._second_Terminal != value))
                {
                    ITerminal old = this._second_Terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecond_TerminalChanging(e);
                    this.OnPropertyChanging("Second_Terminal", e);
                    this._second_Terminal = value;
                    if ((old != null))
                    {
                        old.HasSecond_MutualCoupling.Remove(this);
                        old.Deleted -= this.OnResetSecond_Terminal;
                    }
                    if ((value != null))
                    {
                        value.HasSecond_MutualCoupling.Add(this);
                        value.Deleted += this.OnResetSecond_Terminal;
                    }
                    this.OnSecond_TerminalChanged(e);
                    this.OnPropertyChanged("Second_Terminal", e);
                }
            }
        }
        
        /// <summary>
        /// The First_Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HasFirst_MutualCoupling")]
        public virtual ITerminal First_Terminal
        {
            get
            {
                return this._first_Terminal;
            }
            set
            {
                if ((this._first_Terminal != value))
                {
                    ITerminal old = this._first_Terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirst_TerminalChanging(e);
                    this.OnPropertyChanging("First_Terminal", e);
                    this._first_Terminal = value;
                    if ((old != null))
                    {
                        old.HasFirst_MutualCoupling.Remove(this);
                        old.Deleted -= this.OnResetFirst_Terminal;
                    }
                    if ((value != null))
                    {
                        value.HasFirst_MutualCoupling.Add(this);
                        value.Deleted += this.OnResetFirst_Terminal;
                    }
                    this.OnFirst_TerminalChanged(e);
                    this.OnPropertyChanged("First_Terminal", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MutualCouplingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/MutualCoupling")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Distance11 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance11Changing;
        
        /// <summary>
        /// Gets fired when the Distance11 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance11Changed;
        
        /// <summary>
        /// Gets fired before the Distance12 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance12Changing;
        
        /// <summary>
        /// Gets fired when the Distance12 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance12Changed;
        
        /// <summary>
        /// Gets fired before the B0ch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0chChanging;
        
        /// <summary>
        /// Gets fired when the B0ch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0chChanged;
        
        /// <summary>
        /// Gets fired before the G0ch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0chChanging;
        
        /// <summary>
        /// Gets fired when the G0ch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0chChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the Distance22 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance22Changing;
        
        /// <summary>
        /// Gets fired when the Distance22 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance22Changed;
        
        /// <summary>
        /// Gets fired before the Distance21 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance21Changing;
        
        /// <summary>
        /// Gets fired when the Distance21 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Distance21Changed;
        
        /// <summary>
        /// Gets fired before the Second_Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Second_TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Second_Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Second_TerminalChanged;
        
        /// <summary>
        /// Gets fired before the First_Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> First_TerminalChanging;
        
        /// <summary>
        /// Gets fired when the First_Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> First_TerminalChanged;
        
        /// <summary>
        /// Raises the Distance11Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance11Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance11Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance11Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance11Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance11Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance12Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance12Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance12Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance12Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance12Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance12Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0chChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0chChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0chChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0chChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0chChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0chChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0chChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0chChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0chChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0chChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0chChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0chChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance22Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance22Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance22Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance22Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance22Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance22Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance21Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance21Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance21Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Distance21Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDistance21Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Distance21Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Second_TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecond_TerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Second_TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Second_TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecond_TerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Second_TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Second_Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecond_Terminal(object sender, System.EventArgs eventArgs)
        {
            this.Second_Terminal = null;
        }
        
        /// <summary>
        /// Raises the First_TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirst_TerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.First_TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the First_TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirst_TerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.First_TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the First_Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFirst_Terminal(object sender, System.EventArgs eventArgs)
        {
            this.First_Terminal = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DISTANCE11"))
            {
                return this.Distance11;
            }
            if ((attribute == "DISTANCE12"))
            {
                return this.Distance12;
            }
            if ((attribute == "B0CH"))
            {
                return this.B0ch;
            }
            if ((attribute == "G0CH"))
            {
                return this.G0ch;
            }
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "DISTANCE22"))
            {
                return this.Distance22;
            }
            if ((attribute == "DISTANCE21"))
            {
                return this.Distance21;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SECOND_TERMINAL"))
            {
                this.Second_Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "FIRST_TERMINAL"))
            {
                this.First_Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "DISTANCE11"))
            {
                this.Distance11 = ((float)(value));
                return;
            }
            if ((feature == "DISTANCE12"))
            {
                this.Distance12 = ((float)(value));
                return;
            }
            if ((feature == "B0CH"))
            {
                this.B0ch = ((float)(value));
                return;
            }
            if ((feature == "G0CH"))
            {
                this.G0ch = ((float)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "DISTANCE22"))
            {
                this.Distance22 = ((float)(value));
                return;
            }
            if ((feature == "DISTANCE21"))
            {
                this.Distance21 = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Second_Terminal"))
            {
                return new Second_TerminalProxy(this);
            }
            if ((attribute == "First_Terminal"))
            {
                return new First_TerminalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Second_Terminal"))
            {
                return new Second_TerminalProxy(this);
            }
            if ((reference == "First_Terminal"))
            {
                return new First_TerminalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/MutualCoupling")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MutualCoupling class
        /// </summary>
        public class MutualCouplingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MutualCoupling _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MutualCouplingReferencedElementsCollection(MutualCoupling parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Second_Terminal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.First_Terminal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Second_TerminalChanged += this.PropagateValueChanges;
                this._parent.First_TerminalChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Second_TerminalChanged -= this.PropagateValueChanges;
                this._parent.First_TerminalChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Second_Terminal == null))
                {
                    ITerminal second_TerminalCasted = item.As<ITerminal>();
                    if ((second_TerminalCasted != null))
                    {
                        this._parent.Second_Terminal = second_TerminalCasted;
                        return;
                    }
                }
                if ((this._parent.First_Terminal == null))
                {
                    ITerminal first_TerminalCasted = item.As<ITerminal>();
                    if ((first_TerminalCasted != null))
                    {
                        this._parent.First_Terminal = first_TerminalCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Second_Terminal = null;
                this._parent.First_Terminal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Second_Terminal))
                {
                    return true;
                }
                if ((item == this._parent.First_Terminal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Second_Terminal != null))
                {
                    array[arrayIndex] = this._parent.Second_Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.First_Terminal != null))
                {
                    array[arrayIndex] = this._parent.First_Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Second_Terminal == item))
                {
                    this._parent.Second_Terminal = null;
                    return true;
                }
                if ((this._parent.First_Terminal == item))
                {
                    this._parent.First_Terminal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Second_Terminal).Concat(this._parent.First_Terminal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the distance11 property
        /// </summary>
        private sealed class Distance11Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Distance11Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Distance11;
                }
                set
                {
                    this.ModelElement.Distance11 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance11Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance11Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the distance12 property
        /// </summary>
        private sealed class Distance12Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Distance12Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Distance12;
                }
                set
                {
                    this.ModelElement.Distance12 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance12Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance12Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b0ch property
        /// </summary>
        private sealed class B0chProxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public B0chProxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B0ch;
                }
                set
                {
                    this.ModelElement.B0ch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.B0chChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.B0chChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g0ch property
        /// </summary>
        private sealed class G0chProxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public G0chProxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G0ch;
                }
                set
                {
                    this.ModelElement.G0ch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.G0chChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.G0chChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the distance22 property
        /// </summary>
        private sealed class Distance22Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Distance22Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Distance22;
                }
                set
                {
                    this.ModelElement.Distance22 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance22Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance22Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the distance21 property
        /// </summary>
        private sealed class Distance21Proxy : ModelPropertyChange<IMutualCoupling, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Distance21Proxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Distance21;
                }
                set
                {
                    this.ModelElement.Distance21 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance21Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Distance21Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Second_Terminal property
        /// </summary>
        private sealed class Second_TerminalProxy : ModelPropertyChange<IMutualCoupling, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Second_TerminalProxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.Second_Terminal;
                }
                set
                {
                    this.ModelElement.Second_Terminal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Second_TerminalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Second_TerminalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the First_Terminal property
        /// </summary>
        private sealed class First_TerminalProxy : ModelPropertyChange<IMutualCoupling, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public First_TerminalProxy(IMutualCoupling modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.First_Terminal;
                }
                set
                {
                    this.ModelElement.First_Terminal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.First_TerminalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.First_TerminalChanged -= handler;
            }
        }
    }
}

