//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the EnergySource class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergySource")]
    [DebuggerDisplayAttribute("EnergySource {UUID}")]
    public class EnergySource : ConductingEquipment, IEnergySource, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActivePower property
        /// </summary>
        private float _activePower;
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        private float _x;
        
        /// <summary>
        /// The backing field for the Rn property
        /// </summary>
        private float _rn;
        
        /// <summary>
        /// The backing field for the VoltageMagnitude property
        /// </summary>
        private float _voltageMagnitude;
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        /// <summary>
        /// The backing field for the VoltageAngle property
        /// </summary>
        private float _voltageAngle;
        
        /// <summary>
        /// The backing field for the Xn property
        /// </summary>
        private float _xn;
        
        /// <summary>
        /// The backing field for the NominalVoltage property
        /// </summary>
        private float _nominalVoltage;
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The activePower property
        /// </summary>
        [XmlElementNameAttribute("activePower")]
        [XmlAttributeAttribute(true)]
        public virtual float ActivePower
        {
            get
            {
                return this._activePower;
            }
            set
            {
                if ((this._activePower != value))
                {
                    float old = this._activePower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivePowerChanging(e);
                    this.OnPropertyChanging("ActivePower", e);
                    this._activePower = value;
                    this.OnActivePowerChanged(e);
                    this.OnPropertyChanged("ActivePower", e);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e);
                }
            }
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public virtual float X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    float old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e);
                }
            }
        }
        
        /// <summary>
        /// The rn property
        /// </summary>
        [XmlElementNameAttribute("rn")]
        [XmlAttributeAttribute(true)]
        public virtual float Rn
        {
            get
            {
                return this._rn;
            }
            set
            {
                if ((this._rn != value))
                {
                    float old = this._rn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRnChanging(e);
                    this.OnPropertyChanging("Rn", e);
                    this._rn = value;
                    this.OnRnChanged(e);
                    this.OnPropertyChanged("Rn", e);
                }
            }
        }
        
        /// <summary>
        /// The voltageMagnitude property
        /// </summary>
        [XmlElementNameAttribute("voltageMagnitude")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltageMagnitude
        {
            get
            {
                return this._voltageMagnitude;
            }
            set
            {
                if ((this._voltageMagnitude != value))
                {
                    float old = this._voltageMagnitude;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageMagnitudeChanging(e);
                    this.OnPropertyChanging("VoltageMagnitude", e);
                    this._voltageMagnitude = value;
                    this.OnVoltageMagnitudeChanged(e);
                    this.OnPropertyChanged("VoltageMagnitude", e);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e);
                }
            }
        }
        
        /// <summary>
        /// The voltageAngle property
        /// </summary>
        [XmlElementNameAttribute("voltageAngle")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltageAngle
        {
            get
            {
                return this._voltageAngle;
            }
            set
            {
                if ((this._voltageAngle != value))
                {
                    float old = this._voltageAngle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageAngleChanging(e);
                    this.OnPropertyChanging("VoltageAngle", e);
                    this._voltageAngle = value;
                    this.OnVoltageAngleChanged(e);
                    this.OnPropertyChanged("VoltageAngle", e);
                }
            }
        }
        
        /// <summary>
        /// The xn property
        /// </summary>
        [XmlElementNameAttribute("xn")]
        [XmlAttributeAttribute(true)]
        public virtual float Xn
        {
            get
            {
                return this._xn;
            }
            set
            {
                if ((this._xn != value))
                {
                    float old = this._xn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXnChanging(e);
                    this.OnPropertyChanging("Xn", e);
                    this._xn = value;
                    this.OnXnChanged(e);
                    this.OnPropertyChanged("Xn", e);
                }
            }
        }
        
        /// <summary>
        /// The nominalVoltage property
        /// </summary>
        [XmlElementNameAttribute("nominalVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalVoltage
        {
            get
            {
                return this._nominalVoltage;
            }
            set
            {
                if ((this._nominalVoltage != value))
                {
                    float old = this._nominalVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalVoltageChanging(e);
                    this.OnPropertyChanging("NominalVoltage", e);
                    this._nominalVoltage = value;
                    this.OnNominalVoltageChanged(e);
                    this.OnPropertyChanged("NominalVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergySource")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActivePower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the ActivePower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Rn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RnChanging;
        
        /// <summary>
        /// Gets fired when the Rn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RnChanged;
        
        /// <summary>
        /// Gets fired before the VoltageMagnitude property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageMagnitudeChanging;
        
        /// <summary>
        /// Gets fired when the VoltageMagnitude property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageMagnitudeChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the VoltageAngle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAngleChanging;
        
        /// <summary>
        /// Gets fired when the VoltageAngle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAngleChanged;
        
        /// <summary>
        /// Gets fired before the Xn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XnChanging;
        
        /// <summary>
        /// Gets fired when the Xn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XnChanged;
        
        /// <summary>
        /// Gets fired before the NominalVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NominalVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Raises the ActivePowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivePowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivePowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivePowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageMagnitudeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageMagnitudeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageMagnitudeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageMagnitudeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageMagnitudeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageMagnitudeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAngleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAngleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAngleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAngleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAngleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAngleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XnChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXnChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XnChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XnChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXnChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XnChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVEPOWER"))
            {
                return this.ActivePower;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "RN"))
            {
                return this.Rn;
            }
            if ((attribute == "VOLTAGEMAGNITUDE"))
            {
                return this.VoltageMagnitude;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "VOLTAGEANGLE"))
            {
                return this.VoltageAngle;
            }
            if ((attribute == "XN"))
            {
                return this.Xn;
            }
            if ((attribute == "NOMINALVOLTAGE"))
            {
                return this.NominalVoltage;
            }
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVEPOWER"))
            {
                this.ActivePower = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "X"))
            {
                this.X = ((float)(value));
                return;
            }
            if ((feature == "RN"))
            {
                this.Rn = ((float)(value));
                return;
            }
            if ((feature == "VOLTAGEMAGNITUDE"))
            {
                this.VoltageMagnitude = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "VOLTAGEANGLE"))
            {
                this.VoltageAngle = ((float)(value));
                return;
            }
            if ((feature == "XN"))
            {
                this.Xn = ((float)(value));
                return;
            }
            if ((feature == "NOMINALVOLTAGE"))
            {
                this.NominalVoltage = ((float)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergySource")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activePower property
        /// </summary>
        private sealed class ActivePowerProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivePowerProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActivePower;
                }
                set
                {
                    this.ModelElement.ActivePower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivePowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rn property
        /// </summary>
        private sealed class RnProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RnProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Rn;
                }
                set
                {
                    this.ModelElement.Rn = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RnChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RnChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltageMagnitude property
        /// </summary>
        private sealed class VoltageMagnitudeProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageMagnitudeProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltageMagnitude;
                }
                set
                {
                    this.ModelElement.VoltageMagnitude = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageMagnitudeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageMagnitudeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltageAngle property
        /// </summary>
        private sealed class VoltageAngleProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageAngleProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltageAngle;
                }
                set
                {
                    this.ModelElement.VoltageAngle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageAngleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltageAngleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xn property
        /// </summary>
        private sealed class XnProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XnProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Xn;
                }
                set
                {
                    this.ModelElement.Xn = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XnChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XnChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalVoltage property
        /// </summary>
        private sealed class NominalVoltageProxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalVoltageProxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalVoltage;
                }
                set
                {
                    this.ModelElement.NominalVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<IEnergySource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(IEnergySource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed -= handler;
            }
        }
    }
}

