//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the Unit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Unit")]
    [DebuggerDisplayAttribute("Unit {UUID}")]
    public partial class Unit : IdentifiedObject, IUnit, IModelElement
    {
        
        private static Lazy<ITypedElement> _controlsReference = new Lazy<ITypedElement>(RetrieveControlsReference);
        
        /// <summary>
        /// The backing field for the Controls property
        /// </summary>
        private UnitControlsCollection _controls;
        
        private static Lazy<ITypedElement> _protectionEquipmentsReference = new Lazy<ITypedElement>(RetrieveProtectionEquipmentsReference);
        
        /// <summary>
        /// The backing field for the ProtectionEquipments property
        /// </summary>
        private UnitProtectionEquipmentsCollection _protectionEquipments;
        
        private static Lazy<ITypedElement> _measurementsReference = new Lazy<ITypedElement>(RetrieveMeasurementsReference);
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private UnitMeasurementsCollection _measurements;
        
        private static IClass _classInstance;
        
        public Unit()
        {
            this._controls = new UnitControlsCollection(this);
            this._controls.CollectionChanging += this.ControlsCollectionChanging;
            this._controls.CollectionChanged += this.ControlsCollectionChanged;
            this._protectionEquipments = new UnitProtectionEquipmentsCollection(this);
            this._protectionEquipments.CollectionChanging += this.ProtectionEquipmentsCollectionChanging;
            this._protectionEquipments.CollectionChanged += this.ProtectionEquipmentsCollectionChanged;
            this._measurements = new UnitMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
        }
        
        /// <summary>
        /// The Controls property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Unit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IControl> Controls
        {
            get
            {
                return this._controls;
            }
        }
        
        /// <summary>
        /// The ProtectionEquipments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Unit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProtectionEquipment> ProtectionEquipments
        {
            get
            {
                return this._protectionEquipments;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Unit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Unit")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveControlsReference()
        {
            return ((ITypedElement)(((ModelElement)(Unit.ClassInstance)).Resolve("Controls")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Controls property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Controls", e, _controlsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Controls property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Controls", e, _controlsReference);
        }
        
        private static ITypedElement RetrieveProtectionEquipmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(Unit.ClassInstance)).Resolve("ProtectionEquipments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProtectionEquipments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProtectionEquipmentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProtectionEquipments", e, _protectionEquipmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProtectionEquipments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProtectionEquipmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProtectionEquipments", e, _protectionEquipmentsReference);
        }
        
        private static ITypedElement RetrieveMeasurementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Unit.ClassInstance)).Resolve("Measurements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTROLS"))
            {
                return this._controls;
            }
            if ((feature == "PROTECTIONEQUIPMENTS"))
            {
                return this._protectionEquipments;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Unit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Unit class
        /// </summary>
        public class UnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Unit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UnitReferencedElementsCollection(Unit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Controls.Count);
                    count = (count + this._parent.ProtectionEquipments.Count);
                    count = (count + this._parent.Measurements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Controls.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProtectionEquipments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Controls.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProtectionEquipments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IControl controlsCasted = item.As<IControl>();
                if ((controlsCasted != null))
                {
                    this._parent.Controls.Add(controlsCasted);
                }
                IProtectionEquipment protectionEquipmentsCasted = item.As<IProtectionEquipment>();
                if ((protectionEquipmentsCasted != null))
                {
                    this._parent.ProtectionEquipments.Add(protectionEquipmentsCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Controls.Clear();
                this._parent.ProtectionEquipments.Clear();
                this._parent.Measurements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Controls.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProtectionEquipments.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> controlsEnumerator = this._parent.Controls.GetEnumerator();
                try
                {
                    for (
                    ; controlsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = controlsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    controlsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> protectionEquipmentsEnumerator = this._parent.ProtectionEquipments.GetEnumerator();
                try
                {
                    for (
                    ; protectionEquipmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = protectionEquipmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    protectionEquipmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IControl controlItem = item.As<IControl>();
                if (((controlItem != null) 
                            && this._parent.Controls.Remove(controlItem)))
                {
                    return true;
                }
                IProtectionEquipment protectionEquipmentItem = item.As<IProtectionEquipment>();
                if (((protectionEquipmentItem != null) 
                            && this._parent.ProtectionEquipments.Remove(protectionEquipmentItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Controls).Concat(this._parent.ProtectionEquipments).Concat(this._parent.Measurements).GetEnumerator();
            }
        }
    }
}

