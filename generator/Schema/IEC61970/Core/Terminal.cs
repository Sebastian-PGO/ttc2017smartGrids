//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the Terminal class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Terminal")]
    [DebuggerDisplayAttribute("Terminal {UUID}")]
    public class Terminal : IdentifiedObject, ITerminal, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Connected property
        /// </summary>
        private bool _connected;
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        /// <summary>
        /// The backing field for the ConnectivityNode property
        /// </summary>
        private IConnectivityNode _connectivityNode;
        
        /// <summary>
        /// The backing field for the SvPowerFlow property
        /// </summary>
        private ISvPowerFlow _svPowerFlow;
        
        /// <summary>
        /// The backing field for the HasFirst_MutualCoupling property
        /// </summary>
        private TerminalHasFirst_MutualCouplingCollection _hasFirst_MutualCoupling;
        
        /// <summary>
        /// The backing field for the TerminalConstraints property
        /// </summary>
        private TerminalTerminalConstraintsCollection _terminalConstraints;
        
        /// <summary>
        /// The backing field for the RegulatingControl property
        /// </summary>
        private TerminalRegulatingControlCollection _regulatingControl;
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private TerminalMeasurementsCollection _measurements;
        
        /// <summary>
        /// The backing field for the TieFlow property
        /// </summary>
        private TerminalTieFlowCollection _tieFlow;
        
        /// <summary>
        /// The backing field for the TopologicalNode property
        /// </summary>
        private ITopologicalNode _topologicalNode;
        
        /// <summary>
        /// The backing field for the BranchGroupTerminal property
        /// </summary>
        private TerminalBranchGroupTerminalCollection _branchGroupTerminal;
        
        /// <summary>
        /// The backing field for the BushingInfo property
        /// </summary>
        private IBushingInfo _bushingInfo;
        
        /// <summary>
        /// The backing field for the ConductingEquipment property
        /// </summary>
        private IConductingEquipment _conductingEquipment;
        
        /// <summary>
        /// The backing field for the HasSecond_MutualCoupling property
        /// </summary>
        private TerminalHasSecond_MutualCouplingCollection _hasSecond_MutualCoupling;
        
        /// <summary>
        /// The backing field for the OperationalLimitSet property
        /// </summary>
        private TerminalOperationalLimitSetCollection _operationalLimitSet;
        
        private static IClass _classInstance;
        
        public Terminal()
        {
            this._hasFirst_MutualCoupling = new TerminalHasFirst_MutualCouplingCollection(this);
            this._hasFirst_MutualCoupling.CollectionChanging += this.HasFirst_MutualCouplingCollectionChanging;
            this._hasFirst_MutualCoupling.CollectionChanged += this.HasFirst_MutualCouplingCollectionChanged;
            this._terminalConstraints = new TerminalTerminalConstraintsCollection(this);
            this._terminalConstraints.CollectionChanging += this.TerminalConstraintsCollectionChanging;
            this._terminalConstraints.CollectionChanged += this.TerminalConstraintsCollectionChanged;
            this._regulatingControl = new TerminalRegulatingControlCollection(this);
            this._regulatingControl.CollectionChanging += this.RegulatingControlCollectionChanging;
            this._regulatingControl.CollectionChanged += this.RegulatingControlCollectionChanged;
            this._measurements = new TerminalMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
            this._tieFlow = new TerminalTieFlowCollection(this);
            this._tieFlow.CollectionChanging += this.TieFlowCollectionChanging;
            this._tieFlow.CollectionChanged += this.TieFlowCollectionChanged;
            this._branchGroupTerminal = new TerminalBranchGroupTerminalCollection(this);
            this._branchGroupTerminal.CollectionChanging += this.BranchGroupTerminalCollectionChanging;
            this._branchGroupTerminal.CollectionChanged += this.BranchGroupTerminalCollectionChanged;
            this._hasSecond_MutualCoupling = new TerminalHasSecond_MutualCouplingCollection(this);
            this._hasSecond_MutualCoupling.CollectionChanging += this.HasSecond_MutualCouplingCollectionChanging;
            this._hasSecond_MutualCoupling.CollectionChanged += this.HasSecond_MutualCouplingCollectionChanged;
            this._operationalLimitSet = new TerminalOperationalLimitSetCollection(this);
            this._operationalLimitSet.CollectionChanging += this.OperationalLimitSetCollectionChanging;
            this._operationalLimitSet.CollectionChanged += this.OperationalLimitSetCollectionChanged;
        }
        
        /// <summary>
        /// The connected property
        /// </summary>
        [XmlElementNameAttribute("connected")]
        [XmlAttributeAttribute(true)]
        public virtual bool Connected
        {
            get
            {
                return this._connected;
            }
            set
            {
                if ((this._connected != value))
                {
                    bool old = this._connected;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectedChanging(e);
                    this.OnPropertyChanging("Connected", e);
                    this._connected = value;
                    this.OnConnectedChanged(e);
                    this.OnPropertyChanged("Connected", e);
                }
            }
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e);
                }
            }
        }
        
        /// <summary>
        /// The ConnectivityNode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminals")]
        public virtual IConnectivityNode ConnectivityNode
        {
            get
            {
                return this._connectivityNode;
            }
            set
            {
                if ((this._connectivityNode != value))
                {
                    IConnectivityNode old = this._connectivityNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectivityNodeChanging(e);
                    this.OnPropertyChanging("ConnectivityNode", e);
                    this._connectivityNode = value;
                    if ((old != null))
                    {
                        old.Terminals.Remove(this);
                        old.Deleted -= this.OnResetConnectivityNode;
                    }
                    if ((value != null))
                    {
                        value.Terminals.Add(this);
                        value.Deleted += this.OnResetConnectivityNode;
                    }
                    this.OnConnectivityNodeChanged(e);
                    this.OnPropertyChanged("ConnectivityNode", e);
                }
            }
        }
        
        /// <summary>
        /// The SvPowerFlow property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        public virtual ISvPowerFlow SvPowerFlow
        {
            get
            {
                return this._svPowerFlow;
            }
            set
            {
                if ((this._svPowerFlow != value))
                {
                    ISvPowerFlow old = this._svPowerFlow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvPowerFlowChanging(e);
                    this.OnPropertyChanging("SvPowerFlow", e);
                    this._svPowerFlow = value;
                    if ((old != null))
                    {
                        old.Terminal = null;
                        old.Deleted -= this.OnResetSvPowerFlow;
                    }
                    if ((value != null))
                    {
                        value.Terminal = this;
                        value.Deleted += this.OnResetSvPowerFlow;
                    }
                    this.OnSvPowerFlowChanged(e);
                    this.OnPropertyChanged("SvPowerFlow", e);
                }
            }
        }
        
        /// <summary>
        /// The HasFirst_MutualCoupling property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("First_Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMutualCoupling> HasFirst_MutualCoupling
        {
            get
            {
                return this._hasFirst_MutualCoupling;
            }
        }
        
        /// <summary>
        /// The TerminalConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITerminalConstraintTerm> TerminalConstraints
        {
            get
            {
                return this._terminalConstraints;
            }
        }
        
        /// <summary>
        /// The RegulatingControl property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegulatingControl> RegulatingControl
        {
            get
            {
                return this._regulatingControl;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// The TieFlow property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieFlow> TieFlow
        {
            get
            {
                return this._tieFlow;
            }
        }
        
        /// <summary>
        /// The TopologicalNode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        public virtual ITopologicalNode TopologicalNode
        {
            get
            {
                return this._topologicalNode;
            }
            set
            {
                if ((this._topologicalNode != value))
                {
                    ITopologicalNode old = this._topologicalNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopologicalNodeChanging(e);
                    this.OnPropertyChanging("TopologicalNode", e);
                    this._topologicalNode = value;
                    if ((old != null))
                    {
                        old.Terminal.Remove(this);
                        old.Deleted -= this.OnResetTopologicalNode;
                    }
                    if ((value != null))
                    {
                        value.Terminal.Add(this);
                        value.Deleted += this.OnResetTopologicalNode;
                    }
                    this.OnTopologicalNodeChanged(e);
                    this.OnPropertyChanged("TopologicalNode", e);
                }
            }
        }
        
        /// <summary>
        /// The BranchGroupTerminal property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBranchGroupTerminal> BranchGroupTerminal
        {
            get
            {
                return this._branchGroupTerminal;
            }
        }
        
        /// <summary>
        /// The BushingInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        public virtual IBushingInfo BushingInfo
        {
            get
            {
                return this._bushingInfo;
            }
            set
            {
                if ((this._bushingInfo != value))
                {
                    IBushingInfo old = this._bushingInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBushingInfoChanging(e);
                    this.OnPropertyChanging("BushingInfo", e);
                    this._bushingInfo = value;
                    if ((old != null))
                    {
                        old.Terminal = null;
                        old.Deleted -= this.OnResetBushingInfo;
                    }
                    if ((value != null))
                    {
                        value.Terminal = this;
                        value.Deleted += this.OnResetBushingInfo;
                    }
                    this.OnBushingInfoChanged(e);
                    this.OnPropertyChanged("BushingInfo", e);
                }
            }
        }
        
        /// <summary>
        /// The ConductingEquipment property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminals")]
        public virtual IConductingEquipment ConductingEquipment
        {
            get
            {
                return this._conductingEquipment;
            }
            set
            {
                if ((this._conductingEquipment != value))
                {
                    IConductingEquipment old = this._conductingEquipment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConductingEquipmentChanging(e);
                    this.OnPropertyChanging("ConductingEquipment", e);
                    this._conductingEquipment = value;
                    if ((old != null))
                    {
                        old.Terminals.Remove(this);
                        old.Deleted -= this.OnResetConductingEquipment;
                    }
                    if ((value != null))
                    {
                        value.Terminals.Add(this);
                        value.Deleted += this.OnResetConductingEquipment;
                    }
                    this.OnConductingEquipmentChanged(e);
                    this.OnPropertyChanged("ConductingEquipment", e);
                }
            }
        }
        
        /// <summary>
        /// The HasSecond_MutualCoupling property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Second_Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMutualCoupling> HasSecond_MutualCoupling
        {
            get
            {
                return this._hasSecond_MutualCoupling;
            }
        }
        
        /// <summary>
        /// The OperationalLimitSet property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Terminal")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOperationalLimitSet> OperationalLimitSet
        {
            get
            {
                return this._operationalLimitSet;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TerminalReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Terminal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Connected property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectedChanging;
        
        /// <summary>
        /// Gets fired when the Connected property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectedChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the ConnectivityNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeChanging;
        
        /// <summary>
        /// Gets fired when the ConnectivityNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeChanged;
        
        /// <summary>
        /// Gets fired before the SvPowerFlow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvPowerFlowChanging;
        
        /// <summary>
        /// Gets fired when the SvPowerFlow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvPowerFlowChanged;
        
        /// <summary>
        /// Gets fired before the TopologicalNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanging;
        
        /// <summary>
        /// Gets fired when the TopologicalNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanged;
        
        /// <summary>
        /// Gets fired before the BushingInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingInfoChanging;
        
        /// <summary>
        /// Gets fired when the BushingInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingInfoChanged;
        
        /// <summary>
        /// Gets fired before the ConductingEquipment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConductingEquipmentChanging;
        
        /// <summary>
        /// Gets fired when the ConductingEquipment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConductingEquipmentChanged;
        
        /// <summary>
        /// Raises the ConnectedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConnectivityNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConnectivityNode(object sender, System.EventArgs eventArgs)
        {
            this.ConnectivityNode = null;
        }
        
        /// <summary>
        /// Raises the SvPowerFlowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvPowerFlowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvPowerFlowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvPowerFlowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvPowerFlowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvPowerFlowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvPowerFlow property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvPowerFlow(object sender, System.EventArgs eventArgs)
        {
            this.SvPowerFlow = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HasFirst_MutualCoupling property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasFirst_MutualCouplingCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HasFirst_MutualCoupling", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HasFirst_MutualCoupling property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasFirst_MutualCouplingCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HasFirst_MutualCoupling", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TerminalConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalConstraintsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TerminalConstraints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TerminalConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalConstraintsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TerminalConstraints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegulatingControl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulatingControlCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RegulatingControl", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegulatingControl property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulatingControlCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegulatingControl", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TieFlow property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TieFlowCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TieFlow", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TieFlow property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TieFlowCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TieFlow", e);
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TopologicalNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTopologicalNode(object sender, System.EventArgs eventArgs)
        {
            this.TopologicalNode = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BranchGroupTerminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BranchGroupTerminalCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BranchGroupTerminal", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BranchGroupTerminal property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BranchGroupTerminalCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BranchGroupTerminal", e);
        }
        
        /// <summary>
        /// Raises the BushingInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BushingInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BushingInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBushingInfo(object sender, System.EventArgs eventArgs)
        {
            this.BushingInfo = null;
        }
        
        /// <summary>
        /// Raises the ConductingEquipmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConductingEquipmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConductingEquipmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConductingEquipmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConductingEquipmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConductingEquipmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConductingEquipment property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConductingEquipment(object sender, System.EventArgs eventArgs)
        {
            this.ConductingEquipment = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HasSecond_MutualCoupling property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasSecond_MutualCouplingCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HasSecond_MutualCoupling", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HasSecond_MutualCoupling property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasSecond_MutualCouplingCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HasSecond_MutualCoupling", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OperationalLimitSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitSetCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OperationalLimitSet", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OperationalLimitSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitSetCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OperationalLimitSet", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONNECTED"))
            {
                return this.Connected;
            }
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "HASFIRST_MUTUALCOUPLING"))
            {
                return this._hasFirst_MutualCoupling;
            }
            if ((feature == "TERMINALCONSTRAINTS"))
            {
                return this._terminalConstraints;
            }
            if ((feature == "REGULATINGCONTROL"))
            {
                return this._regulatingControl;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            if ((feature == "TIEFLOW"))
            {
                return this._tieFlow;
            }
            if ((feature == "BRANCHGROUPTERMINAL"))
            {
                return this._branchGroupTerminal;
            }
            if ((feature == "HASSECOND_MUTUALCOUPLING"))
            {
                return this._hasSecond_MutualCoupling;
            }
            if ((feature == "OPERATIONALLIMITSET"))
            {
                return this._operationalLimitSet;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONNECTIVITYNODE"))
            {
                this.ConnectivityNode = ((IConnectivityNode)(value));
                return;
            }
            if ((feature == "SVPOWERFLOW"))
            {
                this.SvPowerFlow = ((ISvPowerFlow)(value));
                return;
            }
            if ((feature == "TOPOLOGICALNODE"))
            {
                this.TopologicalNode = ((ITopologicalNode)(value));
                return;
            }
            if ((feature == "BUSHINGINFO"))
            {
                this.BushingInfo = ((IBushingInfo)(value));
                return;
            }
            if ((feature == "CONDUCTINGEQUIPMENT"))
            {
                this.ConductingEquipment = ((IConductingEquipment)(value));
                return;
            }
            if ((feature == "CONNECTED"))
            {
                this.Connected = ((bool)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ConnectivityNode"))
            {
                return new ConnectivityNodeProxy(this);
            }
            if ((attribute == "SvPowerFlow"))
            {
                return new SvPowerFlowProxy(this);
            }
            if ((attribute == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            if ((attribute == "BushingInfo"))
            {
                return new BushingInfoProxy(this);
            }
            if ((attribute == "ConductingEquipment"))
            {
                return new ConductingEquipmentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ConnectivityNode"))
            {
                return new ConnectivityNodeProxy(this);
            }
            if ((reference == "SvPowerFlow"))
            {
                return new SvPowerFlowProxy(this);
            }
            if ((reference == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            if ((reference == "BushingInfo"))
            {
                return new BushingInfoProxy(this);
            }
            if ((reference == "ConductingEquipment"))
            {
                return new ConductingEquipmentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Terminal")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Terminal class
        /// </summary>
        public class TerminalReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Terminal _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TerminalReferencedElementsCollection(Terminal parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ConnectivityNode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SvPowerFlow != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HasFirst_MutualCoupling.Count);
                    count = (count + this._parent.TerminalConstraints.Count);
                    count = (count + this._parent.RegulatingControl.Count);
                    count = (count + this._parent.Measurements.Count);
                    count = (count + this._parent.TieFlow.Count);
                    if ((this._parent.TopologicalNode != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.BranchGroupTerminal.Count);
                    if ((this._parent.BushingInfo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ConductingEquipment != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HasSecond_MutualCoupling.Count);
                    count = (count + this._parent.OperationalLimitSet.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConnectivityNodeChanged += this.PropagateValueChanges;
                this._parent.SvPowerFlowChanged += this.PropagateValueChanges;
                this._parent.HasFirst_MutualCoupling.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TerminalConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegulatingControl.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TieFlow.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TopologicalNodeChanged += this.PropagateValueChanges;
                this._parent.BranchGroupTerminal.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BushingInfoChanged += this.PropagateValueChanges;
                this._parent.ConductingEquipmentChanged += this.PropagateValueChanges;
                this._parent.HasSecond_MutualCoupling.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OperationalLimitSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConnectivityNodeChanged -= this.PropagateValueChanges;
                this._parent.SvPowerFlowChanged -= this.PropagateValueChanges;
                this._parent.HasFirst_MutualCoupling.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TerminalConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegulatingControl.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TieFlow.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TopologicalNodeChanged -= this.PropagateValueChanges;
                this._parent.BranchGroupTerminal.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BushingInfoChanged -= this.PropagateValueChanges;
                this._parent.ConductingEquipmentChanged -= this.PropagateValueChanges;
                this._parent.HasSecond_MutualCoupling.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OperationalLimitSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ConnectivityNode == null))
                {
                    IConnectivityNode connectivityNodeCasted = item.As<IConnectivityNode>();
                    if ((connectivityNodeCasted != null))
                    {
                        this._parent.ConnectivityNode = connectivityNodeCasted;
                        return;
                    }
                }
                if ((this._parent.SvPowerFlow == null))
                {
                    ISvPowerFlow svPowerFlowCasted = item.As<ISvPowerFlow>();
                    if ((svPowerFlowCasted != null))
                    {
                        this._parent.SvPowerFlow = svPowerFlowCasted;
                        return;
                    }
                }
                IMutualCoupling hasFirst_MutualCouplingCasted = item.As<IMutualCoupling>();
                if ((hasFirst_MutualCouplingCasted != null))
                {
                    this._parent.HasFirst_MutualCoupling.Add(hasFirst_MutualCouplingCasted);
                }
                ITerminalConstraintTerm terminalConstraintsCasted = item.As<ITerminalConstraintTerm>();
                if ((terminalConstraintsCasted != null))
                {
                    this._parent.TerminalConstraints.Add(terminalConstraintsCasted);
                }
                IRegulatingControl regulatingControlCasted = item.As<IRegulatingControl>();
                if ((regulatingControlCasted != null))
                {
                    this._parent.RegulatingControl.Add(regulatingControlCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
                ITieFlow tieFlowCasted = item.As<ITieFlow>();
                if ((tieFlowCasted != null))
                {
                    this._parent.TieFlow.Add(tieFlowCasted);
                }
                if ((this._parent.TopologicalNode == null))
                {
                    ITopologicalNode topologicalNodeCasted = item.As<ITopologicalNode>();
                    if ((topologicalNodeCasted != null))
                    {
                        this._parent.TopologicalNode = topologicalNodeCasted;
                        return;
                    }
                }
                IBranchGroupTerminal branchGroupTerminalCasted = item.As<IBranchGroupTerminal>();
                if ((branchGroupTerminalCasted != null))
                {
                    this._parent.BranchGroupTerminal.Add(branchGroupTerminalCasted);
                }
                if ((this._parent.BushingInfo == null))
                {
                    IBushingInfo bushingInfoCasted = item.As<IBushingInfo>();
                    if ((bushingInfoCasted != null))
                    {
                        this._parent.BushingInfo = bushingInfoCasted;
                        return;
                    }
                }
                if ((this._parent.ConductingEquipment == null))
                {
                    IConductingEquipment conductingEquipmentCasted = item.As<IConductingEquipment>();
                    if ((conductingEquipmentCasted != null))
                    {
                        this._parent.ConductingEquipment = conductingEquipmentCasted;
                        return;
                    }
                }
                IMutualCoupling hasSecond_MutualCouplingCasted = item.As<IMutualCoupling>();
                if ((hasSecond_MutualCouplingCasted != null))
                {
                    this._parent.HasSecond_MutualCoupling.Add(hasSecond_MutualCouplingCasted);
                }
                IOperationalLimitSet operationalLimitSetCasted = item.As<IOperationalLimitSet>();
                if ((operationalLimitSetCasted != null))
                {
                    this._parent.OperationalLimitSet.Add(operationalLimitSetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConnectivityNode = null;
                this._parent.SvPowerFlow = null;
                this._parent.HasFirst_MutualCoupling.Clear();
                this._parent.TerminalConstraints.Clear();
                this._parent.RegulatingControl.Clear();
                this._parent.Measurements.Clear();
                this._parent.TieFlow.Clear();
                this._parent.TopologicalNode = null;
                this._parent.BranchGroupTerminal.Clear();
                this._parent.BushingInfo = null;
                this._parent.ConductingEquipment = null;
                this._parent.HasSecond_MutualCoupling.Clear();
                this._parent.OperationalLimitSet.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ConnectivityNode))
                {
                    return true;
                }
                if ((item == this._parent.SvPowerFlow))
                {
                    return true;
                }
                if (this._parent.HasFirst_MutualCoupling.Contains(item))
                {
                    return true;
                }
                if (this._parent.TerminalConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.RegulatingControl.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                if (this._parent.TieFlow.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TopologicalNode))
                {
                    return true;
                }
                if (this._parent.BranchGroupTerminal.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BushingInfo))
                {
                    return true;
                }
                if ((item == this._parent.ConductingEquipment))
                {
                    return true;
                }
                if (this._parent.HasSecond_MutualCoupling.Contains(item))
                {
                    return true;
                }
                if (this._parent.OperationalLimitSet.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ConnectivityNode != null))
                {
                    array[arrayIndex] = this._parent.ConnectivityNode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SvPowerFlow != null))
                {
                    array[arrayIndex] = this._parent.SvPowerFlow;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hasFirst_MutualCouplingEnumerator = this._parent.HasFirst_MutualCoupling.GetEnumerator();
                try
                {
                    for (
                    ; hasFirst_MutualCouplingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hasFirst_MutualCouplingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hasFirst_MutualCouplingEnumerator.Dispose();
                }
                IEnumerator<IModelElement> terminalConstraintsEnumerator = this._parent.TerminalConstraints.GetEnumerator();
                try
                {
                    for (
                    ; terminalConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = terminalConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    terminalConstraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> regulatingControlEnumerator = this._parent.RegulatingControl.GetEnumerator();
                try
                {
                    for (
                    ; regulatingControlEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = regulatingControlEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    regulatingControlEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> tieFlowEnumerator = this._parent.TieFlow.GetEnumerator();
                try
                {
                    for (
                    ; tieFlowEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tieFlowEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tieFlowEnumerator.Dispose();
                }
                if ((this._parent.TopologicalNode != null))
                {
                    array[arrayIndex] = this._parent.TopologicalNode;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> branchGroupTerminalEnumerator = this._parent.BranchGroupTerminal.GetEnumerator();
                try
                {
                    for (
                    ; branchGroupTerminalEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = branchGroupTerminalEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    branchGroupTerminalEnumerator.Dispose();
                }
                if ((this._parent.BushingInfo != null))
                {
                    array[arrayIndex] = this._parent.BushingInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ConductingEquipment != null))
                {
                    array[arrayIndex] = this._parent.ConductingEquipment;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hasSecond_MutualCouplingEnumerator = this._parent.HasSecond_MutualCoupling.GetEnumerator();
                try
                {
                    for (
                    ; hasSecond_MutualCouplingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hasSecond_MutualCouplingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hasSecond_MutualCouplingEnumerator.Dispose();
                }
                IEnumerator<IModelElement> operationalLimitSetEnumerator = this._parent.OperationalLimitSet.GetEnumerator();
                try
                {
                    for (
                    ; operationalLimitSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationalLimitSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationalLimitSetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ConnectivityNode == item))
                {
                    this._parent.ConnectivityNode = null;
                    return true;
                }
                if ((this._parent.SvPowerFlow == item))
                {
                    this._parent.SvPowerFlow = null;
                    return true;
                }
                IMutualCoupling mutualCouplingItem = item.As<IMutualCoupling>();
                if (((mutualCouplingItem != null) 
                            && this._parent.HasFirst_MutualCoupling.Remove(mutualCouplingItem)))
                {
                    return true;
                }
                ITerminalConstraintTerm terminalConstraintTermItem = item.As<ITerminalConstraintTerm>();
                if (((terminalConstraintTermItem != null) 
                            && this._parent.TerminalConstraints.Remove(terminalConstraintTermItem)))
                {
                    return true;
                }
                IRegulatingControl regulatingControlItem = item.As<IRegulatingControl>();
                if (((regulatingControlItem != null) 
                            && this._parent.RegulatingControl.Remove(regulatingControlItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                ITieFlow tieFlowItem = item.As<ITieFlow>();
                if (((tieFlowItem != null) 
                            && this._parent.TieFlow.Remove(tieFlowItem)))
                {
                    return true;
                }
                if ((this._parent.TopologicalNode == item))
                {
                    this._parent.TopologicalNode = null;
                    return true;
                }
                IBranchGroupTerminal branchGroupTerminalItem = item.As<IBranchGroupTerminal>();
                if (((branchGroupTerminalItem != null) 
                            && this._parent.BranchGroupTerminal.Remove(branchGroupTerminalItem)))
                {
                    return true;
                }
                if ((this._parent.BushingInfo == item))
                {
                    this._parent.BushingInfo = null;
                    return true;
                }
                if ((this._parent.ConductingEquipment == item))
                {
                    this._parent.ConductingEquipment = null;
                    return true;
                }
                if (((mutualCouplingItem != null) 
                            && this._parent.HasSecond_MutualCoupling.Remove(mutualCouplingItem)))
                {
                    return true;
                }
                IOperationalLimitSet operationalLimitSetItem = item.As<IOperationalLimitSet>();
                if (((operationalLimitSetItem != null) 
                            && this._parent.OperationalLimitSet.Remove(operationalLimitSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConnectivityNode).Concat(this._parent.SvPowerFlow).Concat(this._parent.HasFirst_MutualCoupling).Concat(this._parent.TerminalConstraints).Concat(this._parent.RegulatingControl).Concat(this._parent.Measurements).Concat(this._parent.TieFlow).Concat(this._parent.TopologicalNode).Concat(this._parent.BranchGroupTerminal).Concat(this._parent.BushingInfo).Concat(this._parent.ConductingEquipment).Concat(this._parent.HasSecond_MutualCoupling).Concat(this._parent.OperationalLimitSet).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the connected property
        /// </summary>
        private sealed class ConnectedProxy : ModelPropertyChange<ITerminal, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectedProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Connected;
                }
                set
                {
                    this.ModelElement.Connected = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<ITerminal, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SequenceNumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SequenceNumberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConnectivityNode property
        /// </summary>
        private sealed class ConnectivityNodeProxy : ModelPropertyChange<ITerminal, IConnectivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectivityNodeProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectivityNode Value
            {
                get
                {
                    return this.ModelElement.ConnectivityNode;
                }
                set
                {
                    this.ModelElement.ConnectivityNode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectivityNodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConnectivityNodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvPowerFlow property
        /// </summary>
        private sealed class SvPowerFlowProxy : ModelPropertyChange<ITerminal, ISvPowerFlow>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvPowerFlowProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvPowerFlow Value
            {
                get
                {
                    return this.ModelElement.SvPowerFlow;
                }
                set
                {
                    this.ModelElement.SvPowerFlow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvPowerFlowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvPowerFlowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TopologicalNode property
        /// </summary>
        private sealed class TopologicalNodeProxy : ModelPropertyChange<ITerminal, ITopologicalNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopologicalNodeProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITopologicalNode Value
            {
                get
                {
                    return this.ModelElement.TopologicalNode;
                }
                set
                {
                    this.ModelElement.TopologicalNode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopologicalNodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopologicalNodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BushingInfo property
        /// </summary>
        private sealed class BushingInfoProxy : ModelPropertyChange<ITerminal, IBushingInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BushingInfoProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBushingInfo Value
            {
                get
                {
                    return this.ModelElement.BushingInfo;
                }
                set
                {
                    this.ModelElement.BushingInfo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BushingInfoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BushingInfoChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConductingEquipment property
        /// </summary>
        private sealed class ConductingEquipmentProxy : ModelPropertyChange<ITerminal, IConductingEquipment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConductingEquipmentProxy(ITerminal modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConductingEquipment Value
            {
                get
                {
                    return this.ModelElement.ConductingEquipment;
                }
                set
                {
                    this.ModelElement.ConductingEquipment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConductingEquipmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConductingEquipmentChanged -= handler;
            }
        }
    }
}

