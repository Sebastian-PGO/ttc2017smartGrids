//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the Curve class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Curve")]
    [DebuggerDisplayAttribute("Curve {UUID}")]
    public class Curve : IdentifiedObject, ICurve, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Y2Unit property
        /// </summary>
        private Nullable<UnitSymbol> _y2Unit;
        
        /// <summary>
        /// The backing field for the XMultiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _xMultiplier;
        
        /// <summary>
        /// The backing field for the Y3Multiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _y3Multiplier;
        
        /// <summary>
        /// The backing field for the Y1Unit property
        /// </summary>
        private Nullable<UnitSymbol> _y1Unit;
        
        /// <summary>
        /// The backing field for the CurveStyle property
        /// </summary>
        private Nullable<CurveStyle> _curveStyle;
        
        /// <summary>
        /// The backing field for the Y3Unit property
        /// </summary>
        private Nullable<UnitSymbol> _y3Unit;
        
        /// <summary>
        /// The backing field for the XUnit property
        /// </summary>
        private Nullable<UnitSymbol> _xUnit;
        
        /// <summary>
        /// The backing field for the Y2Multiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _y2Multiplier;
        
        /// <summary>
        /// The backing field for the Y1Multiplier property
        /// </summary>
        private Nullable<UnitMultiplier> _y1Multiplier;
        
        /// <summary>
        /// The backing field for the CurveDatas property
        /// </summary>
        private CurveCurveDatasCollection _curveDatas;
        
        private static IClass _classInstance;
        
        public Curve()
        {
            this._curveDatas = new CurveCurveDatasCollection(this);
            this._curveDatas.CollectionChanging += this.CurveDatasCollectionChanging;
            this._curveDatas.CollectionChanged += this.CurveDatasCollectionChanged;
        }
        
        /// <summary>
        /// The y2Unit property
        /// </summary>
        [XmlElementNameAttribute("y2Unit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitSymbol> Y2Unit
        {
            get
            {
                return this._y2Unit;
            }
            set
            {
                if ((this._y2Unit != value))
                {
                    Nullable<UnitSymbol> old = this._y2Unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY2UnitChanging(e);
                    this.OnPropertyChanging("Y2Unit", e);
                    this._y2Unit = value;
                    this.OnY2UnitChanged(e);
                    this.OnPropertyChanged("Y2Unit", e);
                }
            }
        }
        
        /// <summary>
        /// The xMultiplier property
        /// </summary>
        [XmlElementNameAttribute("xMultiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> XMultiplier
        {
            get
            {
                return this._xMultiplier;
            }
            set
            {
                if ((this._xMultiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._xMultiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXMultiplierChanging(e);
                    this.OnPropertyChanging("XMultiplier", e);
                    this._xMultiplier = value;
                    this.OnXMultiplierChanged(e);
                    this.OnPropertyChanged("XMultiplier", e);
                }
            }
        }
        
        /// <summary>
        /// The y3Multiplier property
        /// </summary>
        [XmlElementNameAttribute("y3Multiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> Y3Multiplier
        {
            get
            {
                return this._y3Multiplier;
            }
            set
            {
                if ((this._y3Multiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._y3Multiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY3MultiplierChanging(e);
                    this.OnPropertyChanging("Y3Multiplier", e);
                    this._y3Multiplier = value;
                    this.OnY3MultiplierChanged(e);
                    this.OnPropertyChanged("Y3Multiplier", e);
                }
            }
        }
        
        /// <summary>
        /// The y1Unit property
        /// </summary>
        [XmlElementNameAttribute("y1Unit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitSymbol> Y1Unit
        {
            get
            {
                return this._y1Unit;
            }
            set
            {
                if ((this._y1Unit != value))
                {
                    Nullable<UnitSymbol> old = this._y1Unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY1UnitChanging(e);
                    this.OnPropertyChanging("Y1Unit", e);
                    this._y1Unit = value;
                    this.OnY1UnitChanged(e);
                    this.OnPropertyChanged("Y1Unit", e);
                }
            }
        }
        
        /// <summary>
        /// The curveStyle property
        /// </summary>
        [XmlElementNameAttribute("curveStyle")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CurveStyle> CurveStyle
        {
            get
            {
                return this._curveStyle;
            }
            set
            {
                if ((this._curveStyle != value))
                {
                    Nullable<CurveStyle> old = this._curveStyle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurveStyleChanging(e);
                    this.OnPropertyChanging("CurveStyle", e);
                    this._curveStyle = value;
                    this.OnCurveStyleChanged(e);
                    this.OnPropertyChanged("CurveStyle", e);
                }
            }
        }
        
        /// <summary>
        /// The y3Unit property
        /// </summary>
        [XmlElementNameAttribute("y3Unit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitSymbol> Y3Unit
        {
            get
            {
                return this._y3Unit;
            }
            set
            {
                if ((this._y3Unit != value))
                {
                    Nullable<UnitSymbol> old = this._y3Unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY3UnitChanging(e);
                    this.OnPropertyChanging("Y3Unit", e);
                    this._y3Unit = value;
                    this.OnY3UnitChanged(e);
                    this.OnPropertyChanged("Y3Unit", e);
                }
            }
        }
        
        /// <summary>
        /// The xUnit property
        /// </summary>
        [XmlElementNameAttribute("xUnit")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitSymbol> XUnit
        {
            get
            {
                return this._xUnit;
            }
            set
            {
                if ((this._xUnit != value))
                {
                    Nullable<UnitSymbol> old = this._xUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXUnitChanging(e);
                    this.OnPropertyChanging("XUnit", e);
                    this._xUnit = value;
                    this.OnXUnitChanged(e);
                    this.OnPropertyChanged("XUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The y2Multiplier property
        /// </summary>
        [XmlElementNameAttribute("y2Multiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> Y2Multiplier
        {
            get
            {
                return this._y2Multiplier;
            }
            set
            {
                if ((this._y2Multiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._y2Multiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY2MultiplierChanging(e);
                    this.OnPropertyChanging("Y2Multiplier", e);
                    this._y2Multiplier = value;
                    this.OnY2MultiplierChanged(e);
                    this.OnPropertyChanged("Y2Multiplier", e);
                }
            }
        }
        
        /// <summary>
        /// The y1Multiplier property
        /// </summary>
        [XmlElementNameAttribute("y1Multiplier")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UnitMultiplier> Y1Multiplier
        {
            get
            {
                return this._y1Multiplier;
            }
            set
            {
                if ((this._y1Multiplier != value))
                {
                    Nullable<UnitMultiplier> old = this._y1Multiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnY1MultiplierChanging(e);
                    this.OnPropertyChanging("Y1Multiplier", e);
                    this._y1Multiplier = value;
                    this.OnY1MultiplierChanged(e);
                    this.OnPropertyChanged("Y1Multiplier", e);
                }
            }
        }
        
        /// <summary>
        /// The CurveDatas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Curve")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICurveData> CurveDatas
        {
            get
            {
                return this._curveDatas;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CurveReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Curve")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Y2Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y2UnitChanging;
        
        /// <summary>
        /// Gets fired when the Y2Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y2UnitChanged;
        
        /// <summary>
        /// Gets fired before the XMultiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XMultiplierChanging;
        
        /// <summary>
        /// Gets fired when the XMultiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XMultiplierChanged;
        
        /// <summary>
        /// Gets fired before the Y3Multiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y3MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Y3Multiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y3MultiplierChanged;
        
        /// <summary>
        /// Gets fired before the Y1Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y1UnitChanging;
        
        /// <summary>
        /// Gets fired when the Y1Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y1UnitChanged;
        
        /// <summary>
        /// Gets fired before the CurveStyle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurveStyleChanging;
        
        /// <summary>
        /// Gets fired when the CurveStyle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurveStyleChanged;
        
        /// <summary>
        /// Gets fired before the Y3Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y3UnitChanging;
        
        /// <summary>
        /// Gets fired when the Y3Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y3UnitChanged;
        
        /// <summary>
        /// Gets fired before the XUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XUnitChanging;
        
        /// <summary>
        /// Gets fired when the XUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XUnitChanged;
        
        /// <summary>
        /// Gets fired before the Y2Multiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y2MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Y2Multiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y2MultiplierChanged;
        
        /// <summary>
        /// Gets fired before the Y1Multiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y1MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Y1Multiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Y1MultiplierChanged;
        
        /// <summary>
        /// Raises the Y2UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY2UnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y2UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y2UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY2UnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y2UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XMultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XMultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XMultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XMultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y3MultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY3MultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y3MultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y3MultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY3MultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y3MultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y1UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY1UnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y1UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y1UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY1UnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y1UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurveStyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurveStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurveStyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurveStyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurveStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurveStyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y3UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY3UnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y3UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y3UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY3UnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y3UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y2MultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY2MultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y2MultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y2MultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY2MultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y2MultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y1MultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY1MultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y1MultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Y1MultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnY1MultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Y1MultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CurveDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CurveDatasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CurveDatas", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CurveDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CurveDatasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CurveDatas", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "Y2UNIT"))
            {
                return this.Y2Unit;
            }
            if ((attribute == "XMULTIPLIER"))
            {
                return this.XMultiplier;
            }
            if ((attribute == "Y3MULTIPLIER"))
            {
                return this.Y3Multiplier;
            }
            if ((attribute == "Y1UNIT"))
            {
                return this.Y1Unit;
            }
            if ((attribute == "CURVESTYLE"))
            {
                return this.CurveStyle;
            }
            if ((attribute == "Y3UNIT"))
            {
                return this.Y3Unit;
            }
            if ((attribute == "XUNIT"))
            {
                return this.XUnit;
            }
            if ((attribute == "Y2MULTIPLIER"))
            {
                return this.Y2Multiplier;
            }
            if ((attribute == "Y1MULTIPLIER"))
            {
                return this.Y1Multiplier;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CURVEDATAS"))
            {
                return this._curveDatas;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "Y2UNIT"))
            {
                this.Y2Unit = ((UnitSymbol)(value));
                return;
            }
            if ((feature == "XMULTIPLIER"))
            {
                this.XMultiplier = ((UnitMultiplier)(value));
                return;
            }
            if ((feature == "Y3MULTIPLIER"))
            {
                this.Y3Multiplier = ((UnitMultiplier)(value));
                return;
            }
            if ((feature == "Y1UNIT"))
            {
                this.Y1Unit = ((UnitSymbol)(value));
                return;
            }
            if ((feature == "CURVESTYLE"))
            {
                this.CurveStyle = ((CurveStyle)(value));
                return;
            }
            if ((feature == "Y3UNIT"))
            {
                this.Y3Unit = ((UnitSymbol)(value));
                return;
            }
            if ((feature == "XUNIT"))
            {
                this.XUnit = ((UnitSymbol)(value));
                return;
            }
            if ((feature == "Y2MULTIPLIER"))
            {
                this.Y2Multiplier = ((UnitMultiplier)(value));
                return;
            }
            if ((feature == "Y1MULTIPLIER"))
            {
                this.Y1Multiplier = ((UnitMultiplier)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Curve")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Curve class
        /// </summary>
        public class CurveReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Curve _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CurveReferencedElementsCollection(Curve parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CurveDatas.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CurveDatas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CurveDatas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICurveData curveDatasCasted = item.As<ICurveData>();
                if ((curveDatasCasted != null))
                {
                    this._parent.CurveDatas.Add(curveDatasCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CurveDatas.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CurveDatas.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> curveDatasEnumerator = this._parent.CurveDatas.GetEnumerator();
                try
                {
                    for (
                    ; curveDatasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = curveDatasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    curveDatasEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICurveData curveDataItem = item.As<ICurveData>();
                if (((curveDataItem != null) 
                            && this._parent.CurveDatas.Remove(curveDataItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CurveDatas).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y2Unit property
        /// </summary>
        private sealed class Y2UnitProxy : ModelPropertyChange<ICurve, Nullable<UnitSymbol>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y2UnitProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitSymbol> Value
            {
                get
                {
                    return this.ModelElement.Y2Unit;
                }
                set
                {
                    this.ModelElement.Y2Unit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y2UnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y2UnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xMultiplier property
        /// </summary>
        private sealed class XMultiplierProxy : ModelPropertyChange<ICurve, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XMultiplierProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.XMultiplier;
                }
                set
                {
                    this.ModelElement.XMultiplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XMultiplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XMultiplierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y3Multiplier property
        /// </summary>
        private sealed class Y3MultiplierProxy : ModelPropertyChange<ICurve, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y3MultiplierProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.Y3Multiplier;
                }
                set
                {
                    this.ModelElement.Y3Multiplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y3MultiplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y3MultiplierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y1Unit property
        /// </summary>
        private sealed class Y1UnitProxy : ModelPropertyChange<ICurve, Nullable<UnitSymbol>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y1UnitProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitSymbol> Value
            {
                get
                {
                    return this.ModelElement.Y1Unit;
                }
                set
                {
                    this.ModelElement.Y1Unit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y1UnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y1UnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the curveStyle property
        /// </summary>
        private sealed class CurveStyleProxy : ModelPropertyChange<ICurve, Nullable<CurveStyle>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurveStyleProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CurveStyle> Value
            {
                get
                {
                    return this.ModelElement.CurveStyle;
                }
                set
                {
                    this.ModelElement.CurveStyle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurveStyleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurveStyleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y3Unit property
        /// </summary>
        private sealed class Y3UnitProxy : ModelPropertyChange<ICurve, Nullable<UnitSymbol>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y3UnitProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitSymbol> Value
            {
                get
                {
                    return this.ModelElement.Y3Unit;
                }
                set
                {
                    this.ModelElement.Y3Unit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y3UnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y3UnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xUnit property
        /// </summary>
        private sealed class XUnitProxy : ModelPropertyChange<ICurve, Nullable<UnitSymbol>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XUnitProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitSymbol> Value
            {
                get
                {
                    return this.ModelElement.XUnit;
                }
                set
                {
                    this.ModelElement.XUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XUnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y2Multiplier property
        /// </summary>
        private sealed class Y2MultiplierProxy : ModelPropertyChange<ICurve, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y2MultiplierProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.Y2Multiplier;
                }
                set
                {
                    this.ModelElement.Y2Multiplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y2MultiplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y2MultiplierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y1Multiplier property
        /// </summary>
        private sealed class Y1MultiplierProxy : ModelPropertyChange<ICurve, Nullable<UnitMultiplier>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Y1MultiplierProxy(ICurve modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UnitMultiplier> Value
            {
                get
                {
                    return this.ModelElement.Y1Multiplier;
                }
                set
                {
                    this.ModelElement.Y1Multiplier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y1MultiplierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Y1MultiplierChanged -= handler;
            }
        }
    }
}

