//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the ConductingEquipment class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConductingEquipment")]
    [DebuggerDisplayAttribute("ConductingEquipment {UUID}")]
    public class ConductingEquipment : Equipment, IConductingEquipment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Phases property
        /// </summary>
        private Nullable<PhaseCode> _phases;
        
        /// <summary>
        /// The backing field for the ProtectionEquipments property
        /// </summary>
        private ConductingEquipmentProtectionEquipmentsCollection _protectionEquipments;
        
        /// <summary>
        /// The backing field for the OutageStepRoles property
        /// </summary>
        private ConductingEquipmentOutageStepRolesCollection _outageStepRoles;
        
        /// <summary>
        /// The backing field for the BaseVoltage property
        /// </summary>
        private IBaseVoltage _baseVoltage;
        
        /// <summary>
        /// The backing field for the ClearanceTags property
        /// </summary>
        private ConductingEquipmentClearanceTagsCollection _clearanceTags;
        
        /// <summary>
        /// The backing field for the SvStatus property
        /// </summary>
        private ISvStatus _svStatus;
        
        /// <summary>
        /// The backing field for the ElectricalAssets property
        /// </summary>
        private ConductingEquipmentElectricalAssetsCollection _electricalAssets;
        
        /// <summary>
        /// The backing field for the Terminals property
        /// </summary>
        private ConductingEquipmentTerminalsCollection _terminals;
        
        private static IClass _classInstance;
        
        public ConductingEquipment()
        {
            this._protectionEquipments = new ConductingEquipmentProtectionEquipmentsCollection(this);
            this._protectionEquipments.CollectionChanging += this.ProtectionEquipmentsCollectionChanging;
            this._protectionEquipments.CollectionChanged += this.ProtectionEquipmentsCollectionChanged;
            this._outageStepRoles = new ConductingEquipmentOutageStepRolesCollection(this);
            this._outageStepRoles.CollectionChanging += this.OutageStepRolesCollectionChanging;
            this._outageStepRoles.CollectionChanged += this.OutageStepRolesCollectionChanged;
            this._clearanceTags = new ConductingEquipmentClearanceTagsCollection(this);
            this._clearanceTags.CollectionChanging += this.ClearanceTagsCollectionChanging;
            this._clearanceTags.CollectionChanged += this.ClearanceTagsCollectionChanged;
            this._electricalAssets = new ConductingEquipmentElectricalAssetsCollection(this);
            this._electricalAssets.CollectionChanging += this.ElectricalAssetsCollectionChanging;
            this._electricalAssets.CollectionChanged += this.ElectricalAssetsCollectionChanged;
            this._terminals = new ConductingEquipmentTerminalsCollection(this);
            this._terminals.CollectionChanging += this.TerminalsCollectionChanging;
            this._terminals.CollectionChanged += this.TerminalsCollectionChanged;
        }
        
        /// <summary>
        /// The phases property
        /// </summary>
        [XmlElementNameAttribute("phases")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> Phases
        {
            get
            {
                return this._phases;
            }
            set
            {
                if ((this._phases != value))
                {
                    Nullable<PhaseCode> old = this._phases;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhasesChanging(e);
                    this.OnPropertyChanging("Phases", e);
                    this._phases = value;
                    this.OnPhasesChanged(e);
                    this.OnPropertyChanged("Phases", e);
                }
            }
        }
        
        /// <summary>
        /// The ProtectionEquipments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipments")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProtectionEquipment> ProtectionEquipments
        {
            get
            {
                return this._protectionEquipments;
            }
        }
        
        /// <summary>
        /// The OutageStepRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageStepPsrRole> OutageStepRoles
        {
            get
            {
                return this._outageStepRoles;
            }
        }
        
        /// <summary>
        /// The BaseVoltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        public virtual IBaseVoltage BaseVoltage
        {
            get
            {
                return this._baseVoltage;
            }
            set
            {
                if ((this._baseVoltage != value))
                {
                    IBaseVoltage old = this._baseVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseVoltageChanging(e);
                    this.OnPropertyChanging("BaseVoltage", e);
                    this._baseVoltage = value;
                    if ((old != null))
                    {
                        old.ConductingEquipment.Remove(this);
                        old.Deleted -= this.OnResetBaseVoltage;
                    }
                    if ((value != null))
                    {
                        value.ConductingEquipment.Add(this);
                        value.Deleted += this.OnResetBaseVoltage;
                    }
                    this.OnBaseVoltageChanged(e);
                    this.OnPropertyChanged("BaseVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The ClearanceTags property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IClearanceTag> ClearanceTags
        {
            get
            {
                return this._clearanceTags;
            }
        }
        
        /// <summary>
        /// The SvStatus property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        public virtual ISvStatus SvStatus
        {
            get
            {
                return this._svStatus;
            }
            set
            {
                if ((this._svStatus != value))
                {
                    ISvStatus old = this._svStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvStatusChanging(e);
                    this.OnPropertyChanging("SvStatus", e);
                    this._svStatus = value;
                    if ((old != null))
                    {
                        old.ConductingEquipment = null;
                        old.Deleted -= this.OnResetSvStatus;
                    }
                    if ((value != null))
                    {
                        value.ConductingEquipment = this;
                        value.Deleted += this.OnResetSvStatus;
                    }
                    this.OnSvStatusChanged(e);
                    this.OnPropertyChanged("SvStatus", e);
                }
            }
        }
        
        /// <summary>
        /// The ElectricalAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IElectricalAsset> ElectricalAssets
        {
            get
            {
                return this._electricalAssets;
            }
        }
        
        /// <summary>
        /// The Terminals property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductingEquipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITerminal> Terminals
        {
            get
            {
                return this._terminals;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConductingEquipmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConductingEquipment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Phases property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhasesChanging;
        
        /// <summary>
        /// Gets fired when the Phases property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhasesChanged;
        
        /// <summary>
        /// Gets fired before the BaseVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BaseVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SvStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvStatusChanging;
        
        /// <summary>
        /// Gets fired when the SvStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvStatusChanged;
        
        /// <summary>
        /// Raises the PhasesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhasesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhasesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhasesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhasesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhasesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProtectionEquipments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProtectionEquipmentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProtectionEquipments", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProtectionEquipments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProtectionEquipmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProtectionEquipments", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageStepRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageStepRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageStepRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageStepRoles", e);
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BaseVoltage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBaseVoltage(object sender, System.EventArgs eventArgs)
        {
            this.BaseVoltage = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ClearanceTags property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClearanceTagsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ClearanceTags", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ClearanceTags property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClearanceTagsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ClearanceTags", e);
        }
        
        /// <summary>
        /// Raises the SvStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvStatus property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvStatus(object sender, System.EventArgs eventArgs)
        {
            this.SvStatus = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElectricalAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ElectricalAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElectricalAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElectricalAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Terminals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Terminals", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Terminals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Terminals", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PHASES"))
            {
                return this.Phases;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROTECTIONEQUIPMENTS"))
            {
                return this._protectionEquipments;
            }
            if ((feature == "OUTAGESTEPROLES"))
            {
                return this._outageStepRoles;
            }
            if ((feature == "CLEARANCETAGS"))
            {
                return this._clearanceTags;
            }
            if ((feature == "ELECTRICALASSETS"))
            {
                return this._electricalAssets;
            }
            if ((feature == "TERMINALS"))
            {
                return this._terminals;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BASEVOLTAGE"))
            {
                this.BaseVoltage = ((IBaseVoltage)(value));
                return;
            }
            if ((feature == "SVSTATUS"))
            {
                this.SvStatus = ((ISvStatus)(value));
                return;
            }
            if ((feature == "PHASES"))
            {
                this.Phases = ((PhaseCode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((attribute == "SvStatus"))
            {
                return new SvStatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((reference == "SvStatus"))
            {
                return new SvStatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConductingEquipment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConductingEquipment class
        /// </summary>
        public class ConductingEquipmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConductingEquipment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConductingEquipmentReferencedElementsCollection(ConductingEquipment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ProtectionEquipments.Count);
                    count = (count + this._parent.OutageStepRoles.Count);
                    if ((this._parent.BaseVoltage != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ClearanceTags.Count);
                    if ((this._parent.SvStatus != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ElectricalAssets.Count);
                    count = (count + this._parent.Terminals.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProtectionEquipments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OutageStepRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged += this.PropagateValueChanges;
                this._parent.ClearanceTags.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SvStatusChanged += this.PropagateValueChanges;
                this._parent.ElectricalAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Terminals.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProtectionEquipments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OutageStepRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged -= this.PropagateValueChanges;
                this._parent.ClearanceTags.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SvStatusChanged -= this.PropagateValueChanges;
                this._parent.ElectricalAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Terminals.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProtectionEquipment protectionEquipmentsCasted = item.As<IProtectionEquipment>();
                if ((protectionEquipmentsCasted != null))
                {
                    this._parent.ProtectionEquipments.Add(protectionEquipmentsCasted);
                }
                IOutageStepPsrRole outageStepRolesCasted = item.As<IOutageStepPsrRole>();
                if ((outageStepRolesCasted != null))
                {
                    this._parent.OutageStepRoles.Add(outageStepRolesCasted);
                }
                if ((this._parent.BaseVoltage == null))
                {
                    IBaseVoltage baseVoltageCasted = item.As<IBaseVoltage>();
                    if ((baseVoltageCasted != null))
                    {
                        this._parent.BaseVoltage = baseVoltageCasted;
                        return;
                    }
                }
                IClearanceTag clearanceTagsCasted = item.As<IClearanceTag>();
                if ((clearanceTagsCasted != null))
                {
                    this._parent.ClearanceTags.Add(clearanceTagsCasted);
                }
                if ((this._parent.SvStatus == null))
                {
                    ISvStatus svStatusCasted = item.As<ISvStatus>();
                    if ((svStatusCasted != null))
                    {
                        this._parent.SvStatus = svStatusCasted;
                        return;
                    }
                }
                IElectricalAsset electricalAssetsCasted = item.As<IElectricalAsset>();
                if ((electricalAssetsCasted != null))
                {
                    this._parent.ElectricalAssets.Add(electricalAssetsCasted);
                }
                ITerminal terminalsCasted = item.As<ITerminal>();
                if ((terminalsCasted != null))
                {
                    this._parent.Terminals.Add(terminalsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProtectionEquipments.Clear();
                this._parent.OutageStepRoles.Clear();
                this._parent.BaseVoltage = null;
                this._parent.ClearanceTags.Clear();
                this._parent.SvStatus = null;
                this._parent.ElectricalAssets.Clear();
                this._parent.Terminals.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ProtectionEquipments.Contains(item))
                {
                    return true;
                }
                if (this._parent.OutageStepRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BaseVoltage))
                {
                    return true;
                }
                if (this._parent.ClearanceTags.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SvStatus))
                {
                    return true;
                }
                if (this._parent.ElectricalAssets.Contains(item))
                {
                    return true;
                }
                if (this._parent.Terminals.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> protectionEquipmentsEnumerator = this._parent.ProtectionEquipments.GetEnumerator();
                try
                {
                    for (
                    ; protectionEquipmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = protectionEquipmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    protectionEquipmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outageStepRolesEnumerator = this._parent.OutageStepRoles.GetEnumerator();
                try
                {
                    for (
                    ; outageStepRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageStepRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageStepRolesEnumerator.Dispose();
                }
                if ((this._parent.BaseVoltage != null))
                {
                    array[arrayIndex] = this._parent.BaseVoltage;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> clearanceTagsEnumerator = this._parent.ClearanceTags.GetEnumerator();
                try
                {
                    for (
                    ; clearanceTagsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = clearanceTagsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    clearanceTagsEnumerator.Dispose();
                }
                if ((this._parent.SvStatus != null))
                {
                    array[arrayIndex] = this._parent.SvStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> electricalAssetsEnumerator = this._parent.ElectricalAssets.GetEnumerator();
                try
                {
                    for (
                    ; electricalAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = electricalAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    electricalAssetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> terminalsEnumerator = this._parent.Terminals.GetEnumerator();
                try
                {
                    for (
                    ; terminalsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = terminalsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    terminalsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProtectionEquipment protectionEquipmentItem = item.As<IProtectionEquipment>();
                if (((protectionEquipmentItem != null) 
                            && this._parent.ProtectionEquipments.Remove(protectionEquipmentItem)))
                {
                    return true;
                }
                IOutageStepPsrRole outageStepPsrRoleItem = item.As<IOutageStepPsrRole>();
                if (((outageStepPsrRoleItem != null) 
                            && this._parent.OutageStepRoles.Remove(outageStepPsrRoleItem)))
                {
                    return true;
                }
                if ((this._parent.BaseVoltage == item))
                {
                    this._parent.BaseVoltage = null;
                    return true;
                }
                IClearanceTag clearanceTagItem = item.As<IClearanceTag>();
                if (((clearanceTagItem != null) 
                            && this._parent.ClearanceTags.Remove(clearanceTagItem)))
                {
                    return true;
                }
                if ((this._parent.SvStatus == item))
                {
                    this._parent.SvStatus = null;
                    return true;
                }
                IElectricalAsset electricalAssetItem = item.As<IElectricalAsset>();
                if (((electricalAssetItem != null) 
                            && this._parent.ElectricalAssets.Remove(electricalAssetItem)))
                {
                    return true;
                }
                ITerminal terminalItem = item.As<ITerminal>();
                if (((terminalItem != null) 
                            && this._parent.Terminals.Remove(terminalItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProtectionEquipments).Concat(this._parent.OutageStepRoles).Concat(this._parent.BaseVoltage).Concat(this._parent.ClearanceTags).Concat(this._parent.SvStatus).Concat(this._parent.ElectricalAssets).Concat(this._parent.Terminals).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phases property
        /// </summary>
        private sealed class PhasesProxy : ModelPropertyChange<IConductingEquipment, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhasesProxy(IConductingEquipment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.Phases;
                }
                set
                {
                    this.ModelElement.Phases = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhasesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhasesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BaseVoltage property
        /// </summary>
        private sealed class BaseVoltageProxy : ModelPropertyChange<IConductingEquipment, IBaseVoltage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseVoltageProxy(IConductingEquipment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBaseVoltage Value
            {
                get
                {
                    return this.ModelElement.BaseVoltage;
                }
                set
                {
                    this.ModelElement.BaseVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvStatus property
        /// </summary>
        private sealed class SvStatusProxy : ModelPropertyChange<IConductingEquipment, ISvStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvStatusProxy(IConductingEquipment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvStatus Value
            {
                get
                {
                    return this.ModelElement.SvStatus;
                }
                set
                {
                    this.ModelElement.SvStatus = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvStatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SvStatusChanged -= handler;
            }
        }
    }
}

