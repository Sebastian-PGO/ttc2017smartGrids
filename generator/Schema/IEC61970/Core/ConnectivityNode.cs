//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the ConnectivityNode class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConnectivityNode")]
    [DebuggerDisplayAttribute("ConnectivityNode {UUID}")]
    public partial class ConnectivityNode : IdentifiedObject, IConnectivityNode, IModelElement
    {
        
        private static Lazy<ITypedElement> _connectivityNodeContainerReference = new Lazy<ITypedElement>(RetrieveConnectivityNodeContainerReference);
        
        /// <summary>
        /// The backing field for the ConnectivityNodeContainer property
        /// </summary>
        private IConnectivityNodeContainer _connectivityNodeContainer;
        
        private static Lazy<ITypedElement> _topologicalNodeReference = new Lazy<ITypedElement>(RetrieveTopologicalNodeReference);
        
        /// <summary>
        /// The backing field for the TopologicalNode property
        /// </summary>
        private ITopologicalNode _topologicalNode;
        
        private static Lazy<ITypedElement> _busNameMarkerReference = new Lazy<ITypedElement>(RetrieveBusNameMarkerReference);
        
        /// <summary>
        /// The backing field for the BusNameMarker property
        /// </summary>
        private IBusNameMarker _busNameMarker;
        
        private static Lazy<ITypedElement> _lossPenaltyFactorsReference = new Lazy<ITypedElement>(RetrieveLossPenaltyFactorsReference);
        
        /// <summary>
        /// The backing field for the LossPenaltyFactors property
        /// </summary>
        private ConnectivityNodeLossPenaltyFactorsCollection _lossPenaltyFactors;
        
        private static Lazy<ITypedElement> _nodeConstraintTermsReference = new Lazy<ITypedElement>(RetrieveNodeConstraintTermsReference);
        
        /// <summary>
        /// The backing field for the NodeConstraintTerms property
        /// </summary>
        private ConnectivityNodeNodeConstraintTermsCollection _nodeConstraintTerms;
        
        private static Lazy<ITypedElement> _terminalsReference = new Lazy<ITypedElement>(RetrieveTerminalsReference);
        
        /// <summary>
        /// The backing field for the Terminals property
        /// </summary>
        private ConnectivityNodeTerminalsCollection _terminals;
        
        private static Lazy<ITypedElement> _pnodeReference = new Lazy<ITypedElement>(RetrievePnodeReference);
        
        /// <summary>
        /// The backing field for the Pnode property
        /// </summary>
        private IPnode _pnode;
        
        private static IClass _classInstance;
        
        public ConnectivityNode()
        {
            this._lossPenaltyFactors = new ConnectivityNodeLossPenaltyFactorsCollection(this);
            this._lossPenaltyFactors.CollectionChanging += this.LossPenaltyFactorsCollectionChanging;
            this._lossPenaltyFactors.CollectionChanged += this.LossPenaltyFactorsCollectionChanged;
            this._nodeConstraintTerms = new ConnectivityNodeNodeConstraintTermsCollection(this);
            this._nodeConstraintTerms.CollectionChanging += this.NodeConstraintTermsCollectionChanging;
            this._nodeConstraintTerms.CollectionChanged += this.NodeConstraintTermsCollectionChanged;
            this._terminals = new ConnectivityNodeTerminalsCollection(this);
            this._terminals.CollectionChanging += this.TerminalsCollectionChanging;
            this._terminals.CollectionChanged += this.TerminalsCollectionChanged;
        }
        
        /// <summary>
        /// The ConnectivityNodeContainer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNodes")]
        public virtual IConnectivityNodeContainer ConnectivityNodeContainer
        {
            get
            {
                return this._connectivityNodeContainer;
            }
            set
            {
                if ((this._connectivityNodeContainer != value))
                {
                    IConnectivityNodeContainer old = this._connectivityNodeContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectivityNodeContainerChanging(e);
                    this.OnPropertyChanging("ConnectivityNodeContainer", e, _connectivityNodeContainerReference);
                    this._connectivityNodeContainer = value;
                    if ((old != null))
                    {
                        old.ConnectivityNodes.Remove(this);
                        old.Deleted -= this.OnResetConnectivityNodeContainer;
                    }
                    if ((value != null))
                    {
                        value.ConnectivityNodes.Add(this);
                        value.Deleted += this.OnResetConnectivityNodeContainer;
                    }
                    this.OnConnectivityNodeContainerChanged(e);
                    this.OnPropertyChanged("ConnectivityNodeContainer", e, _connectivityNodeContainerReference);
                }
            }
        }
        
        /// <summary>
        /// The TopologicalNode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNodes")]
        public virtual ITopologicalNode TopologicalNode
        {
            get
            {
                return this._topologicalNode;
            }
            set
            {
                if ((this._topologicalNode != value))
                {
                    ITopologicalNode old = this._topologicalNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopologicalNodeChanging(e);
                    this.OnPropertyChanging("TopologicalNode", e, _topologicalNodeReference);
                    this._topologicalNode = value;
                    if ((old != null))
                    {
                        old.ConnectivityNodes.Remove(this);
                        old.Deleted -= this.OnResetTopologicalNode;
                    }
                    if ((value != null))
                    {
                        value.ConnectivityNodes.Add(this);
                        value.Deleted += this.OnResetTopologicalNode;
                    }
                    this.OnTopologicalNodeChanged(e);
                    this.OnPropertyChanged("TopologicalNode", e, _topologicalNodeReference);
                }
            }
        }
        
        /// <summary>
        /// The BusNameMarker property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNode")]
        public virtual IBusNameMarker BusNameMarker
        {
            get
            {
                return this._busNameMarker;
            }
            set
            {
                if ((this._busNameMarker != value))
                {
                    IBusNameMarker old = this._busNameMarker;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBusNameMarkerChanging(e);
                    this.OnPropertyChanging("BusNameMarker", e, _busNameMarkerReference);
                    this._busNameMarker = value;
                    if ((old != null))
                    {
                        old.ConnectivityNode.Remove(this);
                        old.Deleted -= this.OnResetBusNameMarker;
                    }
                    if ((value != null))
                    {
                        value.ConnectivityNode.Add(this);
                        value.Deleted += this.OnResetBusNameMarker;
                    }
                    this.OnBusNameMarkerChanged(e);
                    this.OnPropertyChanged("BusNameMarker", e, _busNameMarkerReference);
                }
            }
        }
        
        /// <summary>
        /// The LossPenaltyFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNodes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILossPenaltyFactor> LossPenaltyFactors
        {
            get
            {
                return this._lossPenaltyFactors;
            }
        }
        
        /// <summary>
        /// The NodeConstraintTerms property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INodeConstraintTerm> NodeConstraintTerms
        {
            get
            {
                return this._nodeConstraintTerms;
            }
        }
        
        /// <summary>
        /// The Terminals property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITerminal> Terminals
        {
            get
            {
                return this._terminals;
            }
        }
        
        /// <summary>
        /// The Pnode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConnectivityNode")]
        public virtual IPnode Pnode
        {
            get
            {
                return this._pnode;
            }
            set
            {
                if ((this._pnode != value))
                {
                    IPnode old = this._pnode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPnodeChanging(e);
                    this.OnPropertyChanging("Pnode", e, _pnodeReference);
                    this._pnode = value;
                    if ((old != null))
                    {
                        old.ConnectivityNode = null;
                        old.Deleted -= this.OnResetPnode;
                    }
                    if ((value != null))
                    {
                        value.ConnectivityNode = this;
                        value.Deleted += this.OnResetPnode;
                    }
                    this.OnPnodeChanged(e);
                    this.OnPropertyChanged("Pnode", e, _pnodeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConnectivityNodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConnectivityNode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ConnectivityNodeContainer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanging;
        
        /// <summary>
        /// Gets fired when the ConnectivityNodeContainer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanged;
        
        /// <summary>
        /// Gets fired before the TopologicalNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanging;
        
        /// <summary>
        /// Gets fired when the TopologicalNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopologicalNodeChanged;
        
        /// <summary>
        /// Gets fired before the BusNameMarker property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusNameMarkerChanging;
        
        /// <summary>
        /// Gets fired when the BusNameMarker property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusNameMarkerChanged;
        
        /// <summary>
        /// Gets fired before the Pnode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanging;
        
        /// <summary>
        /// Gets fired when the Pnode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanged;
        
        private static ITypedElement RetrieveConnectivityNodeContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("ConnectivityNodeContainer")));
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConnectivityNodeContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConnectivityNodeContainer(object sender, System.EventArgs eventArgs)
        {
            this.ConnectivityNodeContainer = null;
        }
        
        private static ITypedElement RetrieveTopologicalNodeReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("TopologicalNode")));
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopologicalNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopologicalNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopologicalNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TopologicalNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTopologicalNode(object sender, System.EventArgs eventArgs)
        {
            this.TopologicalNode = null;
        }
        
        private static ITypedElement RetrieveBusNameMarkerReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("BusNameMarker")));
        }
        
        /// <summary>
        /// Raises the BusNameMarkerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusNameMarkerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusNameMarkerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BusNameMarkerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusNameMarkerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusNameMarkerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BusNameMarker property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBusNameMarker(object sender, System.EventArgs eventArgs)
        {
            this.BusNameMarker = null;
        }
        
        private static ITypedElement RetrieveLossPenaltyFactorsReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("LossPenaltyFactors")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LossPenaltyFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LossPenaltyFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LossPenaltyFactors", e, _lossPenaltyFactorsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LossPenaltyFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LossPenaltyFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LossPenaltyFactors", e, _lossPenaltyFactorsReference);
        }
        
        private static ITypedElement RetrieveNodeConstraintTermsReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("NodeConstraintTerms")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NodeConstraintTerms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeConstraintTermsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NodeConstraintTerms", e, _nodeConstraintTermsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NodeConstraintTerms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeConstraintTermsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NodeConstraintTerms", e, _nodeConstraintTermsReference);
        }
        
        private static ITypedElement RetrieveTerminalsReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("Terminals")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Terminals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Terminals", e, _terminalsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Terminals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TerminalsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Terminals", e, _terminalsReference);
        }
        
        private static ITypedElement RetrievePnodeReference()
        {
            return ((ITypedElement)(((ModelElement)(ConnectivityNode.ClassInstance)).Resolve("Pnode")));
        }
        
        /// <summary>
        /// Raises the PnodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PnodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pnode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPnode(object sender, System.EventArgs eventArgs)
        {
            this.Pnode = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LOSSPENALTYFACTORS"))
            {
                return this._lossPenaltyFactors;
            }
            if ((feature == "NODECONSTRAINTTERMS"))
            {
                return this._nodeConstraintTerms;
            }
            if ((feature == "TERMINALS"))
            {
                return this._terminals;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONNECTIVITYNODECONTAINER"))
            {
                this.ConnectivityNodeContainer = ((IConnectivityNodeContainer)(value));
                return;
            }
            if ((feature == "TOPOLOGICALNODE"))
            {
                this.TopologicalNode = ((ITopologicalNode)(value));
                return;
            }
            if ((feature == "BUSNAMEMARKER"))
            {
                this.BusNameMarker = ((IBusNameMarker)(value));
                return;
            }
            if ((feature == "PNODE"))
            {
                this.Pnode = ((IPnode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ConnectivityNodeContainer"))
            {
                return new ConnectivityNodeContainerProxy(this);
            }
            if ((attribute == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            if ((attribute == "BusNameMarker"))
            {
                return new BusNameMarkerProxy(this);
            }
            if ((attribute == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ConnectivityNodeContainer"))
            {
                return new ConnectivityNodeContainerProxy(this);
            }
            if ((reference == "TopologicalNode"))
            {
                return new TopologicalNodeProxy(this);
            }
            if ((reference == "BusNameMarker"))
            {
                return new BusNameMarkerProxy(this);
            }
            if ((reference == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ConnectivityNode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConnectivityNode class
        /// </summary>
        public class ConnectivityNodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConnectivityNode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConnectivityNodeReferencedElementsCollection(ConnectivityNode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ConnectivityNodeContainer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TopologicalNode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BusNameMarker != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LossPenaltyFactors.Count);
                    count = (count + this._parent.NodeConstraintTerms.Count);
                    count = (count + this._parent.Terminals.Count);
                    if ((this._parent.Pnode != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConnectivityNodeContainerChanged += this.PropagateValueChanges;
                this._parent.TopologicalNodeChanged += this.PropagateValueChanges;
                this._parent.BusNameMarkerChanged += this.PropagateValueChanges;
                this._parent.LossPenaltyFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NodeConstraintTerms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Terminals.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PnodeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConnectivityNodeContainerChanged -= this.PropagateValueChanges;
                this._parent.TopologicalNodeChanged -= this.PropagateValueChanges;
                this._parent.BusNameMarkerChanged -= this.PropagateValueChanges;
                this._parent.LossPenaltyFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NodeConstraintTerms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Terminals.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PnodeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ConnectivityNodeContainer == null))
                {
                    IConnectivityNodeContainer connectivityNodeContainerCasted = item.As<IConnectivityNodeContainer>();
                    if ((connectivityNodeContainerCasted != null))
                    {
                        this._parent.ConnectivityNodeContainer = connectivityNodeContainerCasted;
                        return;
                    }
                }
                if ((this._parent.TopologicalNode == null))
                {
                    ITopologicalNode topologicalNodeCasted = item.As<ITopologicalNode>();
                    if ((topologicalNodeCasted != null))
                    {
                        this._parent.TopologicalNode = topologicalNodeCasted;
                        return;
                    }
                }
                if ((this._parent.BusNameMarker == null))
                {
                    IBusNameMarker busNameMarkerCasted = item.As<IBusNameMarker>();
                    if ((busNameMarkerCasted != null))
                    {
                        this._parent.BusNameMarker = busNameMarkerCasted;
                        return;
                    }
                }
                ILossPenaltyFactor lossPenaltyFactorsCasted = item.As<ILossPenaltyFactor>();
                if ((lossPenaltyFactorsCasted != null))
                {
                    this._parent.LossPenaltyFactors.Add(lossPenaltyFactorsCasted);
                }
                INodeConstraintTerm nodeConstraintTermsCasted = item.As<INodeConstraintTerm>();
                if ((nodeConstraintTermsCasted != null))
                {
                    this._parent.NodeConstraintTerms.Add(nodeConstraintTermsCasted);
                }
                ITerminal terminalsCasted = item.As<ITerminal>();
                if ((terminalsCasted != null))
                {
                    this._parent.Terminals.Add(terminalsCasted);
                }
                if ((this._parent.Pnode == null))
                {
                    IPnode pnodeCasted = item.As<IPnode>();
                    if ((pnodeCasted != null))
                    {
                        this._parent.Pnode = pnodeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConnectivityNodeContainer = null;
                this._parent.TopologicalNode = null;
                this._parent.BusNameMarker = null;
                this._parent.LossPenaltyFactors.Clear();
                this._parent.NodeConstraintTerms.Clear();
                this._parent.Terminals.Clear();
                this._parent.Pnode = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ConnectivityNodeContainer))
                {
                    return true;
                }
                if ((item == this._parent.TopologicalNode))
                {
                    return true;
                }
                if ((item == this._parent.BusNameMarker))
                {
                    return true;
                }
                if (this._parent.LossPenaltyFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.NodeConstraintTerms.Contains(item))
                {
                    return true;
                }
                if (this._parent.Terminals.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Pnode))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ConnectivityNodeContainer != null))
                {
                    array[arrayIndex] = this._parent.ConnectivityNodeContainer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TopologicalNode != null))
                {
                    array[arrayIndex] = this._parent.TopologicalNode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BusNameMarker != null))
                {
                    array[arrayIndex] = this._parent.BusNameMarker;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> lossPenaltyFactorsEnumerator = this._parent.LossPenaltyFactors.GetEnumerator();
                try
                {
                    for (
                    ; lossPenaltyFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lossPenaltyFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lossPenaltyFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nodeConstraintTermsEnumerator = this._parent.NodeConstraintTerms.GetEnumerator();
                try
                {
                    for (
                    ; nodeConstraintTermsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeConstraintTermsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeConstraintTermsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> terminalsEnumerator = this._parent.Terminals.GetEnumerator();
                try
                {
                    for (
                    ; terminalsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = terminalsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    terminalsEnumerator.Dispose();
                }
                if ((this._parent.Pnode != null))
                {
                    array[arrayIndex] = this._parent.Pnode;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ConnectivityNodeContainer == item))
                {
                    this._parent.ConnectivityNodeContainer = null;
                    return true;
                }
                if ((this._parent.TopologicalNode == item))
                {
                    this._parent.TopologicalNode = null;
                    return true;
                }
                if ((this._parent.BusNameMarker == item))
                {
                    this._parent.BusNameMarker = null;
                    return true;
                }
                ILossPenaltyFactor lossPenaltyFactorItem = item.As<ILossPenaltyFactor>();
                if (((lossPenaltyFactorItem != null) 
                            && this._parent.LossPenaltyFactors.Remove(lossPenaltyFactorItem)))
                {
                    return true;
                }
                INodeConstraintTerm nodeConstraintTermItem = item.As<INodeConstraintTerm>();
                if (((nodeConstraintTermItem != null) 
                            && this._parent.NodeConstraintTerms.Remove(nodeConstraintTermItem)))
                {
                    return true;
                }
                ITerminal terminalItem = item.As<ITerminal>();
                if (((terminalItem != null) 
                            && this._parent.Terminals.Remove(terminalItem)))
                {
                    return true;
                }
                if ((this._parent.Pnode == item))
                {
                    this._parent.Pnode = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConnectivityNodeContainer).Concat(this._parent.TopologicalNode).Concat(this._parent.BusNameMarker).Concat(this._parent.LossPenaltyFactors).Concat(this._parent.NodeConstraintTerms).Concat(this._parent.Terminals).Concat(this._parent.Pnode).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConnectivityNodeContainer property
        /// </summary>
        private sealed class ConnectivityNodeContainerProxy : ModelPropertyChange<IConnectivityNode, IConnectivityNodeContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectivityNodeContainerProxy(IConnectivityNode modelElement) : 
                    base(modelElement, "ConnectivityNodeContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectivityNodeContainer Value
            {
                get
                {
                    return this.ModelElement.ConnectivityNodeContainer;
                }
                set
                {
                    this.ModelElement.ConnectivityNodeContainer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TopologicalNode property
        /// </summary>
        private sealed class TopologicalNodeProxy : ModelPropertyChange<IConnectivityNode, ITopologicalNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopologicalNodeProxy(IConnectivityNode modelElement) : 
                    base(modelElement, "TopologicalNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITopologicalNode Value
            {
                get
                {
                    return this.ModelElement.TopologicalNode;
                }
                set
                {
                    this.ModelElement.TopologicalNode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BusNameMarker property
        /// </summary>
        private sealed class BusNameMarkerProxy : ModelPropertyChange<IConnectivityNode, IBusNameMarker>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BusNameMarkerProxy(IConnectivityNode modelElement) : 
                    base(modelElement, "BusNameMarker")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBusNameMarker Value
            {
                get
                {
                    return this.ModelElement.BusNameMarker;
                }
                set
                {
                    this.ModelElement.BusNameMarker = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pnode property
        /// </summary>
        private sealed class PnodeProxy : ModelPropertyChange<IConnectivityNode, IPnode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PnodeProxy(IConnectivityNode modelElement) : 
                    base(modelElement, "Pnode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnode Value
            {
                get
                {
                    return this.ModelElement.Pnode;
                }
                set
                {
                    this.ModelElement.Pnode = value;
                }
            }
        }
    }
}

