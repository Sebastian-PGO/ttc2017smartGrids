//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the ReportingGroup class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ReportingGroup")]
    [DebuggerDisplayAttribute("ReportingGroup {UUID}")]
    public class ReportingGroup : IdentifiedObject, IReportingGroup, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private ReportingGroupPowerSystemResourceCollection _powerSystemResource;
        
        /// <summary>
        /// The backing field for the BusNameMarker property
        /// </summary>
        private ReportingGroupBusNameMarkerCollection _busNameMarker;
        
        /// <summary>
        /// The backing field for the TopologicalNode property
        /// </summary>
        private ReportingGroupTopologicalNodeCollection _topologicalNode;
        
        /// <summary>
        /// The backing field for the ReportingSuperGroup property
        /// </summary>
        private IReportingSuperGroup _reportingSuperGroup;
        
        private static IClass _classInstance;
        
        public ReportingGroup()
        {
            this._powerSystemResource = new ReportingGroupPowerSystemResourceCollection(this);
            this._powerSystemResource.CollectionChanging += this.PowerSystemResourceCollectionChanging;
            this._powerSystemResource.CollectionChanged += this.PowerSystemResourceCollectionChanged;
            this._busNameMarker = new ReportingGroupBusNameMarkerCollection(this);
            this._busNameMarker.CollectionChanging += this.BusNameMarkerCollectionChanging;
            this._busNameMarker.CollectionChanged += this.BusNameMarkerCollectionChanged;
            this._topologicalNode = new ReportingGroupTopologicalNodeCollection(this);
            this._topologicalNode.CollectionChanging += this.TopologicalNodeCollectionChanging;
            this._topologicalNode.CollectionChanged += this.TopologicalNodeCollectionChanged;
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReportingGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
        }
        
        /// <summary>
        /// The BusNameMarker property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReportingGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBusNameMarker> BusNameMarker
        {
            get
            {
                return this._busNameMarker;
            }
        }
        
        /// <summary>
        /// The TopologicalNode property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReportingGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITopologicalNode> TopologicalNode
        {
            get
            {
                return this._topologicalNode;
            }
        }
        
        /// <summary>
        /// The ReportingSuperGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReportingGroup")]
        public virtual IReportingSuperGroup ReportingSuperGroup
        {
            get
            {
                return this._reportingSuperGroup;
            }
            set
            {
                if ((this._reportingSuperGroup != value))
                {
                    IReportingSuperGroup old = this._reportingSuperGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReportingSuperGroupChanging(e);
                    this.OnPropertyChanging("ReportingSuperGroup", e);
                    this._reportingSuperGroup = value;
                    if ((old != null))
                    {
                        old.ReportingGroup.Remove(this);
                        old.Deleted -= this.OnResetReportingSuperGroup;
                    }
                    if ((value != null))
                    {
                        value.ReportingGroup.Add(this);
                        value.Deleted += this.OnResetReportingSuperGroup;
                    }
                    this.OnReportingSuperGroupChanged(e);
                    this.OnPropertyChanged("ReportingSuperGroup", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReportingGroupReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ReportingGroup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ReportingSuperGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingSuperGroupChanging;
        
        /// <summary>
        /// Gets fired when the ReportingSuperGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingSuperGroupChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResource property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResource", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResource property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResource", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BusNameMarker property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BusNameMarkerCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BusNameMarker", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BusNameMarker property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BusNameMarkerCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BusNameMarker", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TopologicalNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TopologicalNodeCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TopologicalNode", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TopologicalNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TopologicalNodeCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TopologicalNode", e);
        }
        
        /// <summary>
        /// Raises the ReportingSuperGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingSuperGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingSuperGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReportingSuperGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingSuperGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingSuperGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReportingSuperGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReportingSuperGroup(object sender, System.EventArgs eventArgs)
        {
            this.ReportingSuperGroup = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                return this._powerSystemResource;
            }
            if ((feature == "BUSNAMEMARKER"))
            {
                return this._busNameMarker;
            }
            if ((feature == "TOPOLOGICALNODE"))
            {
                return this._topologicalNode;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPORTINGSUPERGROUP"))
            {
                this.ReportingSuperGroup = ((IReportingSuperGroup)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReportingSuperGroup"))
            {
                return new ReportingSuperGroupProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReportingSuperGroup"))
            {
                return new ReportingSuperGroupProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/ReportingGroup")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReportingGroup class
        /// </summary>
        public class ReportingGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReportingGroup _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReportingGroupReferencedElementsCollection(ReportingGroup parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PowerSystemResource.Count);
                    count = (count + this._parent.BusNameMarker.Count);
                    count = (count + this._parent.TopologicalNode.Count);
                    if ((this._parent.ReportingSuperGroup != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PowerSystemResource.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BusNameMarker.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TopologicalNode.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReportingSuperGroupChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PowerSystemResource.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BusNameMarker.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TopologicalNode.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReportingSuperGroupChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourceCasted != null))
                {
                    this._parent.PowerSystemResource.Add(powerSystemResourceCasted);
                }
                IBusNameMarker busNameMarkerCasted = item.As<IBusNameMarker>();
                if ((busNameMarkerCasted != null))
                {
                    this._parent.BusNameMarker.Add(busNameMarkerCasted);
                }
                ITopologicalNode topologicalNodeCasted = item.As<ITopologicalNode>();
                if ((topologicalNodeCasted != null))
                {
                    this._parent.TopologicalNode.Add(topologicalNodeCasted);
                }
                if ((this._parent.ReportingSuperGroup == null))
                {
                    IReportingSuperGroup reportingSuperGroupCasted = item.As<IReportingSuperGroup>();
                    if ((reportingSuperGroupCasted != null))
                    {
                        this._parent.ReportingSuperGroup = reportingSuperGroupCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PowerSystemResource.Clear();
                this._parent.BusNameMarker.Clear();
                this._parent.TopologicalNode.Clear();
                this._parent.ReportingSuperGroup = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PowerSystemResource.Contains(item))
                {
                    return true;
                }
                if (this._parent.BusNameMarker.Contains(item))
                {
                    return true;
                }
                if (this._parent.TopologicalNode.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReportingSuperGroup))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> powerSystemResourceEnumerator = this._parent.PowerSystemResource.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> busNameMarkerEnumerator = this._parent.BusNameMarker.GetEnumerator();
                try
                {
                    for (
                    ; busNameMarkerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = busNameMarkerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    busNameMarkerEnumerator.Dispose();
                }
                IEnumerator<IModelElement> topologicalNodeEnumerator = this._parent.TopologicalNode.GetEnumerator();
                try
                {
                    for (
                    ; topologicalNodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = topologicalNodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    topologicalNodeEnumerator.Dispose();
                }
                if ((this._parent.ReportingSuperGroup != null))
                {
                    array[arrayIndex] = this._parent.ReportingSuperGroup;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResource.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                IBusNameMarker busNameMarkerItem = item.As<IBusNameMarker>();
                if (((busNameMarkerItem != null) 
                            && this._parent.BusNameMarker.Remove(busNameMarkerItem)))
                {
                    return true;
                }
                ITopologicalNode topologicalNodeItem = item.As<ITopologicalNode>();
                if (((topologicalNodeItem != null) 
                            && this._parent.TopologicalNode.Remove(topologicalNodeItem)))
                {
                    return true;
                }
                if ((this._parent.ReportingSuperGroup == item))
                {
                    this._parent.ReportingSuperGroup = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PowerSystemResource).Concat(this._parent.BusNameMarker).Concat(this._parent.TopologicalNode).Concat(this._parent.ReportingSuperGroup).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReportingSuperGroup property
        /// </summary>
        private sealed class ReportingSuperGroupProxy : ModelPropertyChange<IReportingGroup, IReportingSuperGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReportingSuperGroupProxy(IReportingGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReportingSuperGroup Value
            {
                get
                {
                    return this.ModelElement.ReportingSuperGroup;
                }
                set
                {
                    this.ModelElement.ReportingSuperGroup = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReportingSuperGroupChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReportingSuperGroupChanged -= handler;
            }
        }
    }
}

