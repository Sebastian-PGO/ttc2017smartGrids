//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the VoltageLevel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/VoltageLevel")]
    [DebuggerDisplayAttribute("VoltageLevel {UUID}")]
    public class VoltageLevel : EquipmentContainer, IVoltageLevel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LowVoltageLimit property
        /// </summary>
        private float _lowVoltageLimit;
        
        /// <summary>
        /// The backing field for the HighVoltageLimit property
        /// </summary>
        private float _highVoltageLimit;
        
        /// <summary>
        /// The backing field for the Bays property
        /// </summary>
        private VoltageLevelBaysCollection _bays;
        
        /// <summary>
        /// The backing field for the BaseVoltage property
        /// </summary>
        private IBaseVoltage _baseVoltage;
        
        /// <summary>
        /// The backing field for the Substation property
        /// </summary>
        private ISubstation _substation;
        
        private static IClass _classInstance;
        
        public VoltageLevel()
        {
            this._bays = new VoltageLevelBaysCollection(this);
            this._bays.CollectionChanging += this.BaysCollectionChanging;
            this._bays.CollectionChanged += this.BaysCollectionChanged;
        }
        
        /// <summary>
        /// The lowVoltageLimit property
        /// </summary>
        [XmlElementNameAttribute("lowVoltageLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowVoltageLimit
        {
            get
            {
                return this._lowVoltageLimit;
            }
            set
            {
                if ((this._lowVoltageLimit != value))
                {
                    float old = this._lowVoltageLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowVoltageLimitChanging(e);
                    this.OnPropertyChanging("LowVoltageLimit", e);
                    this._lowVoltageLimit = value;
                    this.OnLowVoltageLimitChanged(e);
                    this.OnPropertyChanged("LowVoltageLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The highVoltageLimit property
        /// </summary>
        [XmlElementNameAttribute("highVoltageLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float HighVoltageLimit
        {
            get
            {
                return this._highVoltageLimit;
            }
            set
            {
                if ((this._highVoltageLimit != value))
                {
                    float old = this._highVoltageLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighVoltageLimitChanging(e);
                    this.OnPropertyChanging("HighVoltageLimit", e);
                    this._highVoltageLimit = value;
                    this.OnHighVoltageLimitChanged(e);
                    this.OnPropertyChanged("HighVoltageLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The Bays property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("VoltageLevel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBay> Bays
        {
            get
            {
                return this._bays;
            }
        }
        
        /// <summary>
        /// The BaseVoltage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("VoltageLevel")]
        public virtual IBaseVoltage BaseVoltage
        {
            get
            {
                return this._baseVoltage;
            }
            set
            {
                if ((this._baseVoltage != value))
                {
                    IBaseVoltage old = this._baseVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseVoltageChanging(e);
                    this.OnPropertyChanging("BaseVoltage", e);
                    this._baseVoltage = value;
                    if ((old != null))
                    {
                        old.VoltageLevel.Remove(this);
                        old.Deleted -= this.OnResetBaseVoltage;
                    }
                    if ((value != null))
                    {
                        value.VoltageLevel.Add(this);
                        value.Deleted += this.OnResetBaseVoltage;
                    }
                    this.OnBaseVoltageChanged(e);
                    this.OnPropertyChanged("BaseVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The Substation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("VoltageLevels")]
        public virtual ISubstation Substation
        {
            get
            {
                return this._substation;
            }
            set
            {
                if ((this._substation != value))
                {
                    ISubstation old = this._substation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubstationChanging(e);
                    this.OnPropertyChanging("Substation", e);
                    this._substation = value;
                    if ((old != null))
                    {
                        old.VoltageLevels.Remove(this);
                        old.Deleted -= this.OnResetSubstation;
                    }
                    if ((value != null))
                    {
                        value.VoltageLevels.Add(this);
                        value.Deleted += this.OnResetSubstation;
                    }
                    this.OnSubstationChanged(e);
                    this.OnPropertyChanged("Substation", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VoltageLevelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/VoltageLevel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LowVoltageLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowVoltageLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowVoltageLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowVoltageLimitChanged;
        
        /// <summary>
        /// Gets fired before the HighVoltageLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighVoltageLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighVoltageLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighVoltageLimitChanged;
        
        /// <summary>
        /// Gets fired before the BaseVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BaseVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanged;
        
        /// <summary>
        /// Gets fired before the Substation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubstationChanging;
        
        /// <summary>
        /// Gets fired when the Substation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubstationChanged;
        
        /// <summary>
        /// Raises the LowVoltageLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowVoltageLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowVoltageLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowVoltageLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowVoltageLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowVoltageLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighVoltageLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighVoltageLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighVoltageLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighVoltageLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighVoltageLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighVoltageLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Bays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaysCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Bays", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Bays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaysCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Bays", e);
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BaseVoltage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBaseVoltage(object sender, System.EventArgs eventArgs)
        {
            this.BaseVoltage = null;
        }
        
        /// <summary>
        /// Raises the SubstationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubstationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubstationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubstationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubstationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubstationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Substation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubstation(object sender, System.EventArgs eventArgs)
        {
            this.Substation = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOWVOLTAGELIMIT"))
            {
                return this.LowVoltageLimit;
            }
            if ((attribute == "HIGHVOLTAGELIMIT"))
            {
                return this.HighVoltageLimit;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BAYS"))
            {
                return this._bays;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BASEVOLTAGE"))
            {
                this.BaseVoltage = ((IBaseVoltage)(value));
                return;
            }
            if ((feature == "SUBSTATION"))
            {
                this.Substation = ((ISubstation)(value));
                return;
            }
            if ((feature == "LOWVOLTAGELIMIT"))
            {
                this.LowVoltageLimit = ((float)(value));
                return;
            }
            if ((feature == "HIGHVOLTAGELIMIT"))
            {
                this.HighVoltageLimit = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((attribute == "Substation"))
            {
                return new SubstationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BaseVoltage"))
            {
                return new BaseVoltageProxy(this);
            }
            if ((reference == "Substation"))
            {
                return new SubstationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/VoltageLevel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VoltageLevel class
        /// </summary>
        public class VoltageLevelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VoltageLevel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VoltageLevelReferencedElementsCollection(VoltageLevel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Bays.Count);
                    if ((this._parent.BaseVoltage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Substation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Bays.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged += this.PropagateValueChanges;
                this._parent.SubstationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Bays.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BaseVoltageChanged -= this.PropagateValueChanges;
                this._parent.SubstationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBay baysCasted = item.As<IBay>();
                if ((baysCasted != null))
                {
                    this._parent.Bays.Add(baysCasted);
                }
                if ((this._parent.BaseVoltage == null))
                {
                    IBaseVoltage baseVoltageCasted = item.As<IBaseVoltage>();
                    if ((baseVoltageCasted != null))
                    {
                        this._parent.BaseVoltage = baseVoltageCasted;
                        return;
                    }
                }
                if ((this._parent.Substation == null))
                {
                    ISubstation substationCasted = item.As<ISubstation>();
                    if ((substationCasted != null))
                    {
                        this._parent.Substation = substationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Bays.Clear();
                this._parent.BaseVoltage = null;
                this._parent.Substation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Bays.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BaseVoltage))
                {
                    return true;
                }
                if ((item == this._parent.Substation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> baysEnumerator = this._parent.Bays.GetEnumerator();
                try
                {
                    for (
                    ; baysEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baysEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baysEnumerator.Dispose();
                }
                if ((this._parent.BaseVoltage != null))
                {
                    array[arrayIndex] = this._parent.BaseVoltage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Substation != null))
                {
                    array[arrayIndex] = this._parent.Substation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBay bayItem = item.As<IBay>();
                if (((bayItem != null) 
                            && this._parent.Bays.Remove(bayItem)))
                {
                    return true;
                }
                if ((this._parent.BaseVoltage == item))
                {
                    this._parent.BaseVoltage = null;
                    return true;
                }
                if ((this._parent.Substation == item))
                {
                    this._parent.Substation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Bays).Concat(this._parent.BaseVoltage).Concat(this._parent.Substation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowVoltageLimit property
        /// </summary>
        private sealed class LowVoltageLimitProxy : ModelPropertyChange<IVoltageLevel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowVoltageLimitProxy(IVoltageLevel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowVoltageLimit;
                }
                set
                {
                    this.ModelElement.LowVoltageLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowVoltageLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowVoltageLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highVoltageLimit property
        /// </summary>
        private sealed class HighVoltageLimitProxy : ModelPropertyChange<IVoltageLevel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighVoltageLimitProxy(IVoltageLevel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighVoltageLimit;
                }
                set
                {
                    this.ModelElement.HighVoltageLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighVoltageLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighVoltageLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BaseVoltage property
        /// </summary>
        private sealed class BaseVoltageProxy : ModelPropertyChange<IVoltageLevel, IBaseVoltage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseVoltageProxy(IVoltageLevel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBaseVoltage Value
            {
                get
                {
                    return this.ModelElement.BaseVoltage;
                }
                set
                {
                    this.ModelElement.BaseVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Substation property
        /// </summary>
        private sealed class SubstationProxy : ModelPropertyChange<IVoltageLevel, ISubstation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubstationProxy(IVoltageLevel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubstation Value
            {
                get
                {
                    return this.ModelElement.Substation;
                }
                set
                {
                    this.ModelElement.Substation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubstationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubstationChanged -= handler;
            }
        }
    }
}

