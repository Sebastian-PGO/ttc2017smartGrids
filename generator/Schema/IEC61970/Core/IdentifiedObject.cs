//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the IdentifiedObject class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IdentifiedObject")]
    [DebuggerDisplayAttribute("IdentifiedObject {UUID}")]
    public class IdentifiedObject : Element, IIdentifiedObject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MRID property
        /// </summary>
        private string _mRID;
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Description property
        /// </summary>
        private string _description;
        
        /// <summary>
        /// The backing field for the PathName property
        /// </summary>
        private string _pathName;
        
        /// <summary>
        /// The backing field for the LocalName property
        /// </summary>
        private string _localName;
        
        /// <summary>
        /// The backing field for the AliasName property
        /// </summary>
        private string _aliasName;
        
        /// <summary>
        /// The backing field for the ModelingAuthoritySet property
        /// </summary>
        private IModelingAuthoritySet _modelingAuthoritySet;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The mRID property
        /// </summary>
        [XmlElementNameAttribute("mRID")]
        [XmlAttributeAttribute(true)]
        public virtual string MRID
        {
            get
            {
                return this._mRID;
            }
            set
            {
                if ((this._mRID != value))
                {
                    string old = this._mRID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMRIDChanging(e);
                    this.OnPropertyChanging("MRID", e);
                    this._mRID = value;
                    this.OnMRIDChanged(e);
                    this.OnPropertyChanged("MRID", e);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        [XmlElementNameAttribute("description")]
        [XmlAttributeAttribute(true)]
        public virtual string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    string old = this._description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDescriptionChanging(e);
                    this.OnPropertyChanging("Description", e);
                    this._description = value;
                    this.OnDescriptionChanged(e);
                    this.OnPropertyChanged("Description", e);
                }
            }
        }
        
        /// <summary>
        /// The pathName property
        /// </summary>
        [XmlElementNameAttribute("pathName")]
        [XmlAttributeAttribute(true)]
        public virtual string PathName
        {
            get
            {
                return this._pathName;
            }
            set
            {
                if ((this._pathName != value))
                {
                    string old = this._pathName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPathNameChanging(e);
                    this.OnPropertyChanging("PathName", e);
                    this._pathName = value;
                    this.OnPathNameChanged(e);
                    this.OnPropertyChanged("PathName", e);
                }
            }
        }
        
        /// <summary>
        /// The localName property
        /// </summary>
        [XmlElementNameAttribute("localName")]
        [XmlAttributeAttribute(true)]
        public virtual string LocalName
        {
            get
            {
                return this._localName;
            }
            set
            {
                if ((this._localName != value))
                {
                    string old = this._localName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalNameChanging(e);
                    this.OnPropertyChanging("LocalName", e);
                    this._localName = value;
                    this.OnLocalNameChanged(e);
                    this.OnPropertyChanged("LocalName", e);
                }
            }
        }
        
        /// <summary>
        /// The aliasName property
        /// </summary>
        [XmlElementNameAttribute("aliasName")]
        [XmlAttributeAttribute(true)]
        public virtual string AliasName
        {
            get
            {
                return this._aliasName;
            }
            set
            {
                if ((this._aliasName != value))
                {
                    string old = this._aliasName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAliasNameChanging(e);
                    this.OnPropertyChanging("AliasName", e);
                    this._aliasName = value;
                    this.OnAliasNameChanged(e);
                    this.OnPropertyChanged("AliasName", e);
                }
            }
        }
        
        /// <summary>
        /// The ModelingAuthoritySet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IdentifiedObjects")]
        public virtual IModelingAuthoritySet ModelingAuthoritySet
        {
            get
            {
                return this._modelingAuthoritySet;
            }
            set
            {
                if ((this._modelingAuthoritySet != value))
                {
                    IModelingAuthoritySet old = this._modelingAuthoritySet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModelingAuthoritySetChanging(e);
                    this.OnPropertyChanging("ModelingAuthoritySet", e);
                    this._modelingAuthoritySet = value;
                    if ((old != null))
                    {
                        old.IdentifiedObjects.Remove(this);
                        old.Deleted -= this.OnResetModelingAuthoritySet;
                    }
                    if ((value != null))
                    {
                        value.IdentifiedObjects.Add(this);
                        value.Deleted += this.OnResetModelingAuthoritySet;
                    }
                    this.OnModelingAuthoritySetChanged(e);
                    this.OnPropertyChanged("ModelingAuthoritySet", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IdentifiedObjectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IdentifiedObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MRID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MRIDChanging;
        
        /// <summary>
        /// Gets fired when the MRID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MRIDChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Gets fired before the PathName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathNameChanging;
        
        /// <summary>
        /// Gets fired when the PathName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathNameChanged;
        
        /// <summary>
        /// Gets fired before the LocalName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalNameChanging;
        
        /// <summary>
        /// Gets fired when the LocalName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalNameChanged;
        
        /// <summary>
        /// Gets fired before the AliasName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AliasNameChanging;
        
        /// <summary>
        /// Gets fired when the AliasName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AliasNameChanged;
        
        /// <summary>
        /// Gets fired before the ModelingAuthoritySet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelingAuthoritySetChanging;
        
        /// <summary>
        /// Gets fired when the ModelingAuthoritySet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelingAuthoritySetChanged;
        
        /// <summary>
        /// Raises the MRIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMRIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MRIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MRIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMRIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MRIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AliasNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAliasNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AliasNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AliasNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAliasNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AliasNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelingAuthoritySetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelingAuthoritySetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelingAuthoritySetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelingAuthoritySetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelingAuthoritySetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelingAuthoritySetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ModelingAuthoritySet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetModelingAuthoritySet(object sender, System.EventArgs eventArgs)
        {
            this.ModelingAuthoritySet = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MRID"))
            {
                return this.MRID;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "DESCRIPTION"))
            {
                return this.Description;
            }
            if ((attribute == "PATHNAME"))
            {
                return this.PathName;
            }
            if ((attribute == "LOCALNAME"))
            {
                return this.LocalName;
            }
            if ((attribute == "ALIASNAME"))
            {
                return this.AliasName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MODELINGAUTHORITYSET"))
            {
                this.ModelingAuthoritySet = ((IModelingAuthoritySet)(value));
                return;
            }
            if ((feature == "MRID"))
            {
                this.MRID = ((string)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "DESCRIPTION"))
            {
                this.Description = ((string)(value));
                return;
            }
            if ((feature == "PATHNAME"))
            {
                this.PathName = ((string)(value));
                return;
            }
            if ((feature == "LOCALNAME"))
            {
                this.LocalName = ((string)(value));
                return;
            }
            if ((feature == "ALIASNAME"))
            {
                this.AliasName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ModelingAuthoritySet"))
            {
                return new ModelingAuthoritySetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ModelingAuthoritySet"))
            {
                return new ModelingAuthoritySetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IdentifiedObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IdentifiedObject class
        /// </summary>
        public class IdentifiedObjectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IdentifiedObject _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IdentifiedObjectReferencedElementsCollection(IdentifiedObject parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ModelingAuthoritySet != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ModelingAuthoritySetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ModelingAuthoritySetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ModelingAuthoritySet == null))
                {
                    IModelingAuthoritySet modelingAuthoritySetCasted = item.As<IModelingAuthoritySet>();
                    if ((modelingAuthoritySetCasted != null))
                    {
                        this._parent.ModelingAuthoritySet = modelingAuthoritySetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ModelingAuthoritySet = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ModelingAuthoritySet))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ModelingAuthoritySet != null))
                {
                    array[arrayIndex] = this._parent.ModelingAuthoritySet;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ModelingAuthoritySet == item))
                {
                    this._parent.ModelingAuthoritySet = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ModelingAuthoritySet).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mRID property
        /// </summary>
        private sealed class MRIDProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MRIDProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MRID;
                }
                set
                {
                    this.ModelElement.MRID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MRIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MRIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the description property
        /// </summary>
        private sealed class DescriptionProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DescriptionProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Description;
                }
                set
                {
                    this.ModelElement.Description = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pathName property
        /// </summary>
        private sealed class PathNameProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PathNameProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PathName;
                }
                set
                {
                    this.ModelElement.PathName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localName property
        /// </summary>
        private sealed class LocalNameProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalNameProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalName;
                }
                set
                {
                    this.ModelElement.LocalName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocalNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocalNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aliasName property
        /// </summary>
        private sealed class AliasNameProxy : ModelPropertyChange<IIdentifiedObject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AliasNameProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AliasName;
                }
                set
                {
                    this.ModelElement.AliasName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AliasNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AliasNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ModelingAuthoritySet property
        /// </summary>
        private sealed class ModelingAuthoritySetProxy : ModelPropertyChange<IIdentifiedObject, IModelingAuthoritySet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModelingAuthoritySetProxy(IIdentifiedObject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelingAuthoritySet Value
            {
                get
                {
                    return this.ModelElement.ModelingAuthoritySet;
                }
                set
                {
                    this.ModelElement.ModelingAuthoritySet = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelingAuthoritySetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelingAuthoritySetChanged -= handler;
            }
        }
    }
}

