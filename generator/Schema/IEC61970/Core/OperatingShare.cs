//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the OperatingShare class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/OperatingShare")]
    [DebuggerDisplayAttribute("OperatingShare {UUID}")]
    public partial class OperatingShare : Element, IOperatingShare, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Percentage property
        /// </summary>
        private float _percentage;
        
        private static Lazy<ITypedElement> _percentageAttribute = new Lazy<ITypedElement>(RetrievePercentageAttribute);
        
        private static Lazy<ITypedElement> _powerSystemResourceReference = new Lazy<ITypedElement>(RetrievePowerSystemResourceReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private IPowerSystemResource _powerSystemResource;
        
        private static Lazy<ITypedElement> _operatingParticipantReference = new Lazy<ITypedElement>(RetrieveOperatingParticipantReference);
        
        /// <summary>
        /// The backing field for the OperatingParticipant property
        /// </summary>
        private IOperatingParticipant _operatingParticipant;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The percentage property
        /// </summary>
        [XmlElementNameAttribute("percentage")]
        [XmlAttributeAttribute(true)]
        public virtual float Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    float old = this._percentage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPercentageChanging(e);
                    this.OnPropertyChanging("Percentage", e, _percentageAttribute);
                    this._percentage = value;
                    this.OnPercentageChanged(e);
                    this.OnPropertyChanged("Percentage", e, _percentageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OperatingShare")]
        public virtual IPowerSystemResource PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
            set
            {
                if ((this._powerSystemResource != value))
                {
                    IPowerSystemResource old = this._powerSystemResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerSystemResourceChanging(e);
                    this.OnPropertyChanging("PowerSystemResource", e, _powerSystemResourceReference);
                    this._powerSystemResource = value;
                    if ((old != null))
                    {
                        old.OperatingShare.Remove(this);
                        old.Deleted -= this.OnResetPowerSystemResource;
                    }
                    if ((value != null))
                    {
                        value.OperatingShare.Add(this);
                        value.Deleted += this.OnResetPowerSystemResource;
                    }
                    this.OnPowerSystemResourceChanged(e);
                    this.OnPropertyChanged("PowerSystemResource", e, _powerSystemResourceReference);
                }
            }
        }
        
        /// <summary>
        /// The OperatingParticipant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OperatingShare")]
        public virtual IOperatingParticipant OperatingParticipant
        {
            get
            {
                return this._operatingParticipant;
            }
            set
            {
                if ((this._operatingParticipant != value))
                {
                    IOperatingParticipant old = this._operatingParticipant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatingParticipantChanging(e);
                    this.OnPropertyChanging("OperatingParticipant", e, _operatingParticipantReference);
                    this._operatingParticipant = value;
                    if ((old != null))
                    {
                        old.OperatingShare.Remove(this);
                        old.Deleted -= this.OnResetOperatingParticipant;
                    }
                    if ((value != null))
                    {
                        value.OperatingShare.Add(this);
                        value.Deleted += this.OnResetOperatingParticipant;
                    }
                    this.OnOperatingParticipantChanged(e);
                    this.OnPropertyChanged("OperatingParticipant", e, _operatingParticipantReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperatingShareReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/OperatingShare")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Percentage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PercentageChanging;
        
        /// <summary>
        /// Gets fired when the Percentage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PercentageChanged;
        
        /// <summary>
        /// Gets fired before the PowerSystemResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanging;
        
        /// <summary>
        /// Gets fired when the PowerSystemResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanged;
        
        /// <summary>
        /// Gets fired before the OperatingParticipant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingParticipantChanging;
        
        /// <summary>
        /// Gets fired when the OperatingParticipant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingParticipantChanged;
        
        private static ITypedElement RetrievePercentageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OperatingShare.ClassInstance)).Resolve("percentage")));
        }
        
        /// <summary>
        /// Raises the PercentageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPercentageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PercentageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PercentageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPercentageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PercentageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerSystemResourceReference()
        {
            return ((ITypedElement)(((ModelElement)(OperatingShare.ClassInstance)).Resolve("PowerSystemResource")));
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerSystemResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerSystemResource(object sender, System.EventArgs eventArgs)
        {
            this.PowerSystemResource = null;
        }
        
        private static ITypedElement RetrieveOperatingParticipantReference()
        {
            return ((ITypedElement)(((ModelElement)(OperatingShare.ClassInstance)).Resolve("OperatingParticipant")));
        }
        
        /// <summary>
        /// Raises the OperatingParticipantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingParticipantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingParticipantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatingParticipantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingParticipantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingParticipantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperatingParticipant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperatingParticipant(object sender, System.EventArgs eventArgs)
        {
            this.OperatingParticipant = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PERCENTAGE"))
            {
                return this.Percentage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                this.PowerSystemResource = ((IPowerSystemResource)(value));
                return;
            }
            if ((feature == "OPERATINGPARTICIPANT"))
            {
                this.OperatingParticipant = ((IOperatingParticipant)(value));
                return;
            }
            if ((feature == "PERCENTAGE"))
            {
                this.Percentage = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((attribute == "OperatingParticipant"))
            {
                return new OperatingParticipantProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((reference == "OperatingParticipant"))
            {
                return new OperatingParticipantProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/OperatingShare")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperatingShare class
        /// </summary>
        public class OperatingShareReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OperatingShare _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperatingShareReferencedElementsCollection(OperatingShare parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PowerSystemResource != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OperatingParticipant != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PowerSystemResourceChanged += this.PropagateValueChanges;
                this._parent.OperatingParticipantChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PowerSystemResourceChanged -= this.PropagateValueChanges;
                this._parent.OperatingParticipantChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PowerSystemResource == null))
                {
                    IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                    if ((powerSystemResourceCasted != null))
                    {
                        this._parent.PowerSystemResource = powerSystemResourceCasted;
                        return;
                    }
                }
                if ((this._parent.OperatingParticipant == null))
                {
                    IOperatingParticipant operatingParticipantCasted = item.As<IOperatingParticipant>();
                    if ((operatingParticipantCasted != null))
                    {
                        this._parent.OperatingParticipant = operatingParticipantCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PowerSystemResource = null;
                this._parent.OperatingParticipant = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PowerSystemResource))
                {
                    return true;
                }
                if ((item == this._parent.OperatingParticipant))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PowerSystemResource != null))
                {
                    array[arrayIndex] = this._parent.PowerSystemResource;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OperatingParticipant != null))
                {
                    array[arrayIndex] = this._parent.OperatingParticipant;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PowerSystemResource == item))
                {
                    this._parent.PowerSystemResource = null;
                    return true;
                }
                if ((this._parent.OperatingParticipant == item))
                {
                    this._parent.OperatingParticipant = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PowerSystemResource).Concat(this._parent.OperatingParticipant).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the percentage property
        /// </summary>
        private sealed class PercentageProxy : ModelPropertyChange<IOperatingShare, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PercentageProxy(IOperatingShare modelElement) : 
                    base(modelElement, "percentage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Percentage;
                }
                set
                {
                    this.ModelElement.Percentage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerSystemResource property
        /// </summary>
        private sealed class PowerSystemResourceProxy : ModelPropertyChange<IOperatingShare, IPowerSystemResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerSystemResourceProxy(IOperatingShare modelElement) : 
                    base(modelElement, "PowerSystemResource")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerSystemResource Value
            {
                get
                {
                    return this.ModelElement.PowerSystemResource;
                }
                set
                {
                    this.ModelElement.PowerSystemResource = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperatingParticipant property
        /// </summary>
        private sealed class OperatingParticipantProxy : ModelPropertyChange<IOperatingShare, IOperatingParticipant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatingParticipantProxy(IOperatingShare modelElement) : 
                    base(modelElement, "OperatingParticipant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperatingParticipant Value
            {
                get
                {
                    return this.ModelElement.OperatingParticipant;
                }
                set
                {
                    this.ModelElement.OperatingParticipant = value;
                }
            }
        }
    }
}

