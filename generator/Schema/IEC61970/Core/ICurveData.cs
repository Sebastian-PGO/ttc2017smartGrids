//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The public interface for CurveData
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CurveData))]
    [XmlDefaultImplementationTypeAttribute(typeof(CurveData))]
    public interface ICurveData : IModelElement, IElement
    {
        
        /// <summary>
        /// The xvalue property
        /// </summary>
        float Xvalue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The y2value property
        /// </summary>
        float Y2value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The y3value property
        /// </summary>
        float Y3value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The y1value property
        /// </summary>
        float Y1value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Curve property
        /// </summary>
        ICurve Curve
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Xvalue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XvalueChanging;
        
        /// <summary>
        /// Gets fired when the Xvalue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XvalueChanged;
        
        /// <summary>
        /// Gets fired before the Y2value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y2valueChanging;
        
        /// <summary>
        /// Gets fired when the Y2value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y2valueChanged;
        
        /// <summary>
        /// Gets fired before the Y3value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y3valueChanging;
        
        /// <summary>
        /// Gets fired when the Y3value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y3valueChanged;
        
        /// <summary>
        /// Gets fired before the Y1value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y1valueChanging;
        
        /// <summary>
        /// Gets fired when the Y1value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Y1valueChanged;
        
        /// <summary>
        /// Gets fired before the Curve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurveChanging;
        
        /// <summary>
        /// Gets fired when the Curve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurveChanged;
    }
}

