//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.LoadModel
{
    
    
    /// <summary>
    /// The default implementation of the LoadGroup class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel")]
    [XmlNamespacePrefixAttribute("cimLoadModel")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadGroup")]
    [DebuggerDisplayAttribute("LoadGroup {UUID}")]
    public class LoadGroup : IdentifiedObject, ILoadGroup, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RegisteredLoads property
        /// </summary>
        private LoadGroupRegisteredLoadsCollection _registeredLoads;
        
        /// <summary>
        /// The backing field for the SubLoadArea property
        /// </summary>
        private ISubLoadArea _subLoadArea;
        
        private static IClass _classInstance;
        
        public LoadGroup()
        {
            this._registeredLoads = new LoadGroupRegisteredLoadsCollection(this);
            this._registeredLoads.CollectionChanging += this.RegisteredLoadsCollectionChanging;
            this._registeredLoads.CollectionChanged += this.RegisteredLoadsCollectionChanged;
        }
        
        /// <summary>
        /// The RegisteredLoads property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegisteredLoad> RegisteredLoads
        {
            get
            {
                return this._registeredLoads;
            }
        }
        
        /// <summary>
        /// The SubLoadArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadGroups")]
        public virtual ISubLoadArea SubLoadArea
        {
            get
            {
                return this._subLoadArea;
            }
            set
            {
                if ((this._subLoadArea != value))
                {
                    ISubLoadArea old = this._subLoadArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubLoadAreaChanging(e);
                    this.OnPropertyChanging("SubLoadArea", e);
                    this._subLoadArea = value;
                    if ((old != null))
                    {
                        old.LoadGroups.Remove(this);
                        old.Deleted -= this.OnResetSubLoadArea;
                    }
                    if ((value != null))
                    {
                        value.LoadGroups.Add(this);
                        value.Deleted += this.OnResetSubLoadArea;
                    }
                    this.OnSubLoadAreaChanged(e);
                    this.OnPropertyChanged("SubLoadArea", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LoadGroupReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadGroup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SubLoadArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubLoadAreaChanging;
        
        /// <summary>
        /// Gets fired when the SubLoadArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubLoadAreaChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegisteredLoads property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredLoadsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RegisteredLoads", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegisteredLoads property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredLoadsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegisteredLoads", e);
        }
        
        /// <summary>
        /// Raises the SubLoadAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubLoadAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubLoadAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubLoadAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubLoadAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubLoadAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubLoadArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubLoadArea(object sender, System.EventArgs eventArgs)
        {
            this.SubLoadArea = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REGISTEREDLOADS"))
            {
                return this._registeredLoads;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUBLOADAREA"))
            {
                this.SubLoadArea = ((ISubLoadArea)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SubLoadArea"))
            {
                return new SubLoadAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SubLoadArea"))
            {
                return new SubLoadAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadGroup")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LoadGroup class
        /// </summary>
        public class LoadGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LoadGroup _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LoadGroupReferencedElementsCollection(LoadGroup parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RegisteredLoads.Count);
                    if ((this._parent.SubLoadArea != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RegisteredLoads.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubLoadAreaChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RegisteredLoads.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubLoadAreaChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRegisteredLoad registeredLoadsCasted = item.As<IRegisteredLoad>();
                if ((registeredLoadsCasted != null))
                {
                    this._parent.RegisteredLoads.Add(registeredLoadsCasted);
                }
                if ((this._parent.SubLoadArea == null))
                {
                    ISubLoadArea subLoadAreaCasted = item.As<ISubLoadArea>();
                    if ((subLoadAreaCasted != null))
                    {
                        this._parent.SubLoadArea = subLoadAreaCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RegisteredLoads.Clear();
                this._parent.SubLoadArea = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.RegisteredLoads.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SubLoadArea))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> registeredLoadsEnumerator = this._parent.RegisteredLoads.GetEnumerator();
                try
                {
                    for (
                    ; registeredLoadsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = registeredLoadsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    registeredLoadsEnumerator.Dispose();
                }
                if ((this._parent.SubLoadArea != null))
                {
                    array[arrayIndex] = this._parent.SubLoadArea;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRegisteredLoad registeredLoadItem = item.As<IRegisteredLoad>();
                if (((registeredLoadItem != null) 
                            && this._parent.RegisteredLoads.Remove(registeredLoadItem)))
                {
                    return true;
                }
                if ((this._parent.SubLoadArea == item))
                {
                    this._parent.SubLoadArea = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RegisteredLoads).Concat(this._parent.SubLoadArea).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SubLoadArea property
        /// </summary>
        private sealed class SubLoadAreaProxy : ModelPropertyChange<ILoadGroup, ISubLoadArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubLoadAreaProxy(ILoadGroup modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubLoadArea Value
            {
                get
                {
                    return this.ModelElement.SubLoadArea;
                }
                set
                {
                    this.ModelElement.SubLoadArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubLoadAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubLoadAreaChanged -= handler;
            }
        }
    }
}

