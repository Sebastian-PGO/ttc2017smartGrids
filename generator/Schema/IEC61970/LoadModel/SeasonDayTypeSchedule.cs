//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.LoadModel
{
    
    
    /// <summary>
    /// The default implementation of the SeasonDayTypeSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel")]
    [XmlNamespacePrefixAttribute("cimLoadModel")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/SeasonDayTypeSchedu" +
        "le")]
    [DebuggerDisplayAttribute("SeasonDayTypeSchedule {UUID}")]
    public partial class SeasonDayTypeSchedule : RegularIntervalSchedule, ISeasonDayTypeSchedule, IModelElement
    {
        
        private static Lazy<ITypedElement> _dayTypeReference = new Lazy<ITypedElement>(RetrieveDayTypeReference);
        
        /// <summary>
        /// The backing field for the DayType property
        /// </summary>
        private IDayType _dayType;
        
        private static Lazy<ITypedElement> _seasonReference = new Lazy<ITypedElement>(RetrieveSeasonReference);
        
        /// <summary>
        /// The backing field for the Season property
        /// </summary>
        private ISeason _season;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The DayType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SeasonDayTypeSchedules")]
        public virtual IDayType DayType
        {
            get
            {
                return this._dayType;
            }
            set
            {
                if ((this._dayType != value))
                {
                    IDayType old = this._dayType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDayTypeChanging(e);
                    this.OnPropertyChanging("DayType", e, _dayTypeReference);
                    this._dayType = value;
                    if ((old != null))
                    {
                        old.SeasonDayTypeSchedules.Remove(this);
                        old.Deleted -= this.OnResetDayType;
                    }
                    if ((value != null))
                    {
                        value.SeasonDayTypeSchedules.Add(this);
                        value.Deleted += this.OnResetDayType;
                    }
                    this.OnDayTypeChanged(e);
                    this.OnPropertyChanged("DayType", e, _dayTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The Season property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SeasonDayTypeSchedules")]
        public virtual ISeason Season
        {
            get
            {
                return this._season;
            }
            set
            {
                if ((this._season != value))
                {
                    ISeason old = this._season;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeasonChanging(e);
                    this.OnPropertyChanging("Season", e, _seasonReference);
                    this._season = value;
                    if ((old != null))
                    {
                        old.SeasonDayTypeSchedules.Remove(this);
                        old.Deleted -= this.OnResetSeason;
                    }
                    if ((value != null))
                    {
                        value.SeasonDayTypeSchedules.Add(this);
                        value.Deleted += this.OnResetSeason;
                    }
                    this.OnSeasonChanged(e);
                    this.OnPropertyChanged("Season", e, _seasonReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SeasonDayTypeScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/SeasonDayTypeSchedu" +
                            "le")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DayType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DayTypeChanging;
        
        /// <summary>
        /// Gets fired when the DayType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DayTypeChanged;
        
        /// <summary>
        /// Gets fired before the Season property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeasonChanging;
        
        /// <summary>
        /// Gets fired when the Season property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeasonChanged;
        
        private static ITypedElement RetrieveDayTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(SeasonDayTypeSchedule.ClassInstance)).Resolve("DayType")));
        }
        
        /// <summary>
        /// Raises the DayTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDayTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DayTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DayTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDayTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DayTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DayType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDayType(object sender, System.EventArgs eventArgs)
        {
            this.DayType = null;
        }
        
        private static ITypedElement RetrieveSeasonReference()
        {
            return ((ITypedElement)(((ModelElement)(SeasonDayTypeSchedule.ClassInstance)).Resolve("Season")));
        }
        
        /// <summary>
        /// Raises the SeasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Season property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSeason(object sender, System.EventArgs eventArgs)
        {
            this.Season = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DAYTYPE"))
            {
                this.DayType = ((IDayType)(value));
                return;
            }
            if ((feature == "SEASON"))
            {
                this.Season = ((ISeason)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DayType"))
            {
                return new DayTypeProxy(this);
            }
            if ((attribute == "Season"))
            {
                return new SeasonProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DayType"))
            {
                return new DayTypeProxy(this);
            }
            if ((reference == "Season"))
            {
                return new SeasonProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/SeasonDayTypeSchedu" +
                        "le")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SeasonDayTypeSchedule class
        /// </summary>
        public class SeasonDayTypeScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SeasonDayTypeSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SeasonDayTypeScheduleReferencedElementsCollection(SeasonDayTypeSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DayType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Season != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DayTypeChanged += this.PropagateValueChanges;
                this._parent.SeasonChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DayTypeChanged -= this.PropagateValueChanges;
                this._parent.SeasonChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DayType == null))
                {
                    IDayType dayTypeCasted = item.As<IDayType>();
                    if ((dayTypeCasted != null))
                    {
                        this._parent.DayType = dayTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Season == null))
                {
                    ISeason seasonCasted = item.As<ISeason>();
                    if ((seasonCasted != null))
                    {
                        this._parent.Season = seasonCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DayType = null;
                this._parent.Season = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DayType))
                {
                    return true;
                }
                if ((item == this._parent.Season))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DayType != null))
                {
                    array[arrayIndex] = this._parent.DayType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Season != null))
                {
                    array[arrayIndex] = this._parent.Season;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DayType == item))
                {
                    this._parent.DayType = null;
                    return true;
                }
                if ((this._parent.Season == item))
                {
                    this._parent.Season = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DayType).Concat(this._parent.Season).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DayType property
        /// </summary>
        private sealed class DayTypeProxy : ModelPropertyChange<ISeasonDayTypeSchedule, IDayType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DayTypeProxy(ISeasonDayTypeSchedule modelElement) : 
                    base(modelElement, "DayType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDayType Value
            {
                get
                {
                    return this.ModelElement.DayType;
                }
                set
                {
                    this.ModelElement.DayType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Season property
        /// </summary>
        private sealed class SeasonProxy : ModelPropertyChange<ISeasonDayTypeSchedule, ISeason>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeasonProxy(ISeasonDayTypeSchedule modelElement) : 
                    base(modelElement, "Season")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISeason Value
            {
                get
                {
                    return this.ModelElement.Season;
                }
                set
                {
                    this.ModelElement.Season = value;
                }
            }
        }
    }
}

