//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.LoadModel
{
    
    
    /// <summary>
    /// The default implementation of the LoadResponseCharacteristic class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel")]
    [XmlNamespacePrefixAttribute("cimLoadModel")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadResponseCharact" +
        "eristic")]
    [DebuggerDisplayAttribute("LoadResponseCharacteristic {UUID}")]
    public class LoadResponseCharacteristic : IdentifiedObject, ILoadResponseCharacteristic, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ExponentModel property
        /// </summary>
        private bool _exponentModel;
        
        /// <summary>
        /// The backing field for the PConstantCurrent property
        /// </summary>
        private float _pConstantCurrent;
        
        /// <summary>
        /// The backing field for the QConstantImpedance property
        /// </summary>
        private float _qConstantImpedance;
        
        /// <summary>
        /// The backing field for the QFrequencyExponent property
        /// </summary>
        private float _qFrequencyExponent;
        
        /// <summary>
        /// The backing field for the PFrequencyExponent property
        /// </summary>
        private float _pFrequencyExponent;
        
        /// <summary>
        /// The backing field for the PConstantImpedance property
        /// </summary>
        private float _pConstantImpedance;
        
        /// <summary>
        /// The backing field for the QVoltageExponent property
        /// </summary>
        private float _qVoltageExponent;
        
        /// <summary>
        /// The backing field for the PVoltageExponent property
        /// </summary>
        private float _pVoltageExponent;
        
        /// <summary>
        /// The backing field for the QConstantCurrent property
        /// </summary>
        private float _qConstantCurrent;
        
        /// <summary>
        /// The backing field for the PConstantPower property
        /// </summary>
        private float _pConstantPower;
        
        /// <summary>
        /// The backing field for the QConstantPower property
        /// </summary>
        private float _qConstantPower;
        
        /// <summary>
        /// The backing field for the EnergyConsumer property
        /// </summary>
        private LoadResponseCharacteristicEnergyConsumerCollection _energyConsumer;
        
        private static IClass _classInstance;
        
        public LoadResponseCharacteristic()
        {
            this._energyConsumer = new LoadResponseCharacteristicEnergyConsumerCollection(this);
            this._energyConsumer.CollectionChanging += this.EnergyConsumerCollectionChanging;
            this._energyConsumer.CollectionChanged += this.EnergyConsumerCollectionChanged;
        }
        
        /// <summary>
        /// The exponentModel property
        /// </summary>
        [XmlElementNameAttribute("exponentModel")]
        [XmlAttributeAttribute(true)]
        public virtual bool ExponentModel
        {
            get
            {
                return this._exponentModel;
            }
            set
            {
                if ((this._exponentModel != value))
                {
                    bool old = this._exponentModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExponentModelChanging(e);
                    this.OnPropertyChanging("ExponentModel", e);
                    this._exponentModel = value;
                    this.OnExponentModelChanged(e);
                    this.OnPropertyChanged("ExponentModel", e);
                }
            }
        }
        
        /// <summary>
        /// The pConstantCurrent property
        /// </summary>
        [XmlElementNameAttribute("pConstantCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float PConstantCurrent
        {
            get
            {
                return this._pConstantCurrent;
            }
            set
            {
                if ((this._pConstantCurrent != value))
                {
                    float old = this._pConstantCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPConstantCurrentChanging(e);
                    this.OnPropertyChanging("PConstantCurrent", e);
                    this._pConstantCurrent = value;
                    this.OnPConstantCurrentChanged(e);
                    this.OnPropertyChanged("PConstantCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The qConstantImpedance property
        /// </summary>
        [XmlElementNameAttribute("qConstantImpedance")]
        [XmlAttributeAttribute(true)]
        public virtual float QConstantImpedance
        {
            get
            {
                return this._qConstantImpedance;
            }
            set
            {
                if ((this._qConstantImpedance != value))
                {
                    float old = this._qConstantImpedance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQConstantImpedanceChanging(e);
                    this.OnPropertyChanging("QConstantImpedance", e);
                    this._qConstantImpedance = value;
                    this.OnQConstantImpedanceChanged(e);
                    this.OnPropertyChanged("QConstantImpedance", e);
                }
            }
        }
        
        /// <summary>
        /// The qFrequencyExponent property
        /// </summary>
        [XmlElementNameAttribute("qFrequencyExponent")]
        [XmlAttributeAttribute(true)]
        public virtual float QFrequencyExponent
        {
            get
            {
                return this._qFrequencyExponent;
            }
            set
            {
                if ((this._qFrequencyExponent != value))
                {
                    float old = this._qFrequencyExponent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQFrequencyExponentChanging(e);
                    this.OnPropertyChanging("QFrequencyExponent", e);
                    this._qFrequencyExponent = value;
                    this.OnQFrequencyExponentChanged(e);
                    this.OnPropertyChanged("QFrequencyExponent", e);
                }
            }
        }
        
        /// <summary>
        /// The pFrequencyExponent property
        /// </summary>
        [XmlElementNameAttribute("pFrequencyExponent")]
        [XmlAttributeAttribute(true)]
        public virtual float PFrequencyExponent
        {
            get
            {
                return this._pFrequencyExponent;
            }
            set
            {
                if ((this._pFrequencyExponent != value))
                {
                    float old = this._pFrequencyExponent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPFrequencyExponentChanging(e);
                    this.OnPropertyChanging("PFrequencyExponent", e);
                    this._pFrequencyExponent = value;
                    this.OnPFrequencyExponentChanged(e);
                    this.OnPropertyChanged("PFrequencyExponent", e);
                }
            }
        }
        
        /// <summary>
        /// The pConstantImpedance property
        /// </summary>
        [XmlElementNameAttribute("pConstantImpedance")]
        [XmlAttributeAttribute(true)]
        public virtual float PConstantImpedance
        {
            get
            {
                return this._pConstantImpedance;
            }
            set
            {
                if ((this._pConstantImpedance != value))
                {
                    float old = this._pConstantImpedance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPConstantImpedanceChanging(e);
                    this.OnPropertyChanging("PConstantImpedance", e);
                    this._pConstantImpedance = value;
                    this.OnPConstantImpedanceChanged(e);
                    this.OnPropertyChanged("PConstantImpedance", e);
                }
            }
        }
        
        /// <summary>
        /// The qVoltageExponent property
        /// </summary>
        [XmlElementNameAttribute("qVoltageExponent")]
        [XmlAttributeAttribute(true)]
        public virtual float QVoltageExponent
        {
            get
            {
                return this._qVoltageExponent;
            }
            set
            {
                if ((this._qVoltageExponent != value))
                {
                    float old = this._qVoltageExponent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQVoltageExponentChanging(e);
                    this.OnPropertyChanging("QVoltageExponent", e);
                    this._qVoltageExponent = value;
                    this.OnQVoltageExponentChanged(e);
                    this.OnPropertyChanged("QVoltageExponent", e);
                }
            }
        }
        
        /// <summary>
        /// The pVoltageExponent property
        /// </summary>
        [XmlElementNameAttribute("pVoltageExponent")]
        [XmlAttributeAttribute(true)]
        public virtual float PVoltageExponent
        {
            get
            {
                return this._pVoltageExponent;
            }
            set
            {
                if ((this._pVoltageExponent != value))
                {
                    float old = this._pVoltageExponent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPVoltageExponentChanging(e);
                    this.OnPropertyChanging("PVoltageExponent", e);
                    this._pVoltageExponent = value;
                    this.OnPVoltageExponentChanged(e);
                    this.OnPropertyChanged("PVoltageExponent", e);
                }
            }
        }
        
        /// <summary>
        /// The qConstantCurrent property
        /// </summary>
        [XmlElementNameAttribute("qConstantCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float QConstantCurrent
        {
            get
            {
                return this._qConstantCurrent;
            }
            set
            {
                if ((this._qConstantCurrent != value))
                {
                    float old = this._qConstantCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQConstantCurrentChanging(e);
                    this.OnPropertyChanging("QConstantCurrent", e);
                    this._qConstantCurrent = value;
                    this.OnQConstantCurrentChanged(e);
                    this.OnPropertyChanged("QConstantCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The pConstantPower property
        /// </summary>
        [XmlElementNameAttribute("pConstantPower")]
        [XmlAttributeAttribute(true)]
        public virtual float PConstantPower
        {
            get
            {
                return this._pConstantPower;
            }
            set
            {
                if ((this._pConstantPower != value))
                {
                    float old = this._pConstantPower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPConstantPowerChanging(e);
                    this.OnPropertyChanging("PConstantPower", e);
                    this._pConstantPower = value;
                    this.OnPConstantPowerChanged(e);
                    this.OnPropertyChanged("PConstantPower", e);
                }
            }
        }
        
        /// <summary>
        /// The qConstantPower property
        /// </summary>
        [XmlElementNameAttribute("qConstantPower")]
        [XmlAttributeAttribute(true)]
        public virtual float QConstantPower
        {
            get
            {
                return this._qConstantPower;
            }
            set
            {
                if ((this._qConstantPower != value))
                {
                    float old = this._qConstantPower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQConstantPowerChanging(e);
                    this.OnPropertyChanging("QConstantPower", e);
                    this._qConstantPower = value;
                    this.OnQConstantPowerChanged(e);
                    this.OnPropertyChanged("QConstantPower", e);
                }
            }
        }
        
        /// <summary>
        /// The EnergyConsumer property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadResponse")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyConsumer> EnergyConsumer
        {
            get
            {
                return this._energyConsumer;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LoadResponseCharacteristicReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadResponseCharact" +
                            "eristic")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ExponentModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExponentModelChanging;
        
        /// <summary>
        /// Gets fired when the ExponentModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExponentModelChanged;
        
        /// <summary>
        /// Gets fired before the PConstantCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantCurrentChanging;
        
        /// <summary>
        /// Gets fired when the PConstantCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantCurrentChanged;
        
        /// <summary>
        /// Gets fired before the QConstantImpedance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the QConstantImpedance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the QFrequencyExponent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QFrequencyExponentChanging;
        
        /// <summary>
        /// Gets fired when the QFrequencyExponent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QFrequencyExponentChanged;
        
        /// <summary>
        /// Gets fired before the PFrequencyExponent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PFrequencyExponentChanging;
        
        /// <summary>
        /// Gets fired when the PFrequencyExponent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PFrequencyExponentChanged;
        
        /// <summary>
        /// Gets fired before the PConstantImpedance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the PConstantImpedance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the QVoltageExponent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QVoltageExponentChanging;
        
        /// <summary>
        /// Gets fired when the QVoltageExponent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QVoltageExponentChanged;
        
        /// <summary>
        /// Gets fired before the PVoltageExponent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PVoltageExponentChanging;
        
        /// <summary>
        /// Gets fired when the PVoltageExponent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PVoltageExponentChanged;
        
        /// <summary>
        /// Gets fired before the QConstantCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantCurrentChanging;
        
        /// <summary>
        /// Gets fired when the QConstantCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantCurrentChanged;
        
        /// <summary>
        /// Gets fired before the PConstantPower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantPowerChanging;
        
        /// <summary>
        /// Gets fired when the PConstantPower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PConstantPowerChanged;
        
        /// <summary>
        /// Gets fired before the QConstantPower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantPowerChanging;
        
        /// <summary>
        /// Gets fired when the QConstantPower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QConstantPowerChanged;
        
        /// <summary>
        /// Raises the ExponentModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExponentModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExponentModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExponentModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExponentModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExponentModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantImpedanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantImpedanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantImpedanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantImpedanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantImpedanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantImpedanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QFrequencyExponentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQFrequencyExponentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QFrequencyExponentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QFrequencyExponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQFrequencyExponentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QFrequencyExponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PFrequencyExponentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPFrequencyExponentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PFrequencyExponentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PFrequencyExponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPFrequencyExponentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PFrequencyExponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantImpedanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantImpedanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantImpedanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantImpedanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantImpedanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantImpedanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QVoltageExponentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQVoltageExponentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QVoltageExponentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QVoltageExponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQVoltageExponentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QVoltageExponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PVoltageExponentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPVoltageExponentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PVoltageExponentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PVoltageExponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPVoltageExponentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PVoltageExponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantPowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantPowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantPowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PConstantPowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPConstantPowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PConstantPowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantPowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantPowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantPowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QConstantPowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQConstantPowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QConstantPowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyConsumer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumerCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EnergyConsumer", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyConsumer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumerCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyConsumer", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EXPONENTMODEL"))
            {
                return this.ExponentModel;
            }
            if ((attribute == "PCONSTANTCURRENT"))
            {
                return this.PConstantCurrent;
            }
            if ((attribute == "QCONSTANTIMPEDANCE"))
            {
                return this.QConstantImpedance;
            }
            if ((attribute == "QFREQUENCYEXPONENT"))
            {
                return this.QFrequencyExponent;
            }
            if ((attribute == "PFREQUENCYEXPONENT"))
            {
                return this.PFrequencyExponent;
            }
            if ((attribute == "PCONSTANTIMPEDANCE"))
            {
                return this.PConstantImpedance;
            }
            if ((attribute == "QVOLTAGEEXPONENT"))
            {
                return this.QVoltageExponent;
            }
            if ((attribute == "PVOLTAGEEXPONENT"))
            {
                return this.PVoltageExponent;
            }
            if ((attribute == "QCONSTANTCURRENT"))
            {
                return this.QConstantCurrent;
            }
            if ((attribute == "PCONSTANTPOWER"))
            {
                return this.PConstantPower;
            }
            if ((attribute == "QCONSTANTPOWER"))
            {
                return this.QConstantPower;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENERGYCONSUMER"))
            {
                return this._energyConsumer;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EXPONENTMODEL"))
            {
                this.ExponentModel = ((bool)(value));
                return;
            }
            if ((feature == "PCONSTANTCURRENT"))
            {
                this.PConstantCurrent = ((float)(value));
                return;
            }
            if ((feature == "QCONSTANTIMPEDANCE"))
            {
                this.QConstantImpedance = ((float)(value));
                return;
            }
            if ((feature == "QFREQUENCYEXPONENT"))
            {
                this.QFrequencyExponent = ((float)(value));
                return;
            }
            if ((feature == "PFREQUENCYEXPONENT"))
            {
                this.PFrequencyExponent = ((float)(value));
                return;
            }
            if ((feature == "PCONSTANTIMPEDANCE"))
            {
                this.PConstantImpedance = ((float)(value));
                return;
            }
            if ((feature == "QVOLTAGEEXPONENT"))
            {
                this.QVoltageExponent = ((float)(value));
                return;
            }
            if ((feature == "PVOLTAGEEXPONENT"))
            {
                this.PVoltageExponent = ((float)(value));
                return;
            }
            if ((feature == "QCONSTANTCURRENT"))
            {
                this.QConstantCurrent = ((float)(value));
                return;
            }
            if ((feature == "PCONSTANTPOWER"))
            {
                this.PConstantPower = ((float)(value));
                return;
            }
            if ((feature == "QCONSTANTPOWER"))
            {
                this.QConstantPower = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/LoadResponseCharact" +
                        "eristic")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LoadResponseCharacteristic class
        /// </summary>
        public class LoadResponseCharacteristicReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LoadResponseCharacteristic _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LoadResponseCharacteristicReferencedElementsCollection(LoadResponseCharacteristic parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EnergyConsumer.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EnergyConsumer.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EnergyConsumer.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEnergyConsumer energyConsumerCasted = item.As<IEnergyConsumer>();
                if ((energyConsumerCasted != null))
                {
                    this._parent.EnergyConsumer.Add(energyConsumerCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EnergyConsumer.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EnergyConsumer.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> energyConsumerEnumerator = this._parent.EnergyConsumer.GetEnumerator();
                try
                {
                    for (
                    ; energyConsumerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyConsumerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyConsumerEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEnergyConsumer energyConsumerItem = item.As<IEnergyConsumer>();
                if (((energyConsumerItem != null) 
                            && this._parent.EnergyConsumer.Remove(energyConsumerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EnergyConsumer).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the exponentModel property
        /// </summary>
        private sealed class ExponentModelProxy : ModelPropertyChange<ILoadResponseCharacteristic, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExponentModelProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ExponentModel;
                }
                set
                {
                    this.ModelElement.ExponentModel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExponentModelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExponentModelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pConstantCurrent property
        /// </summary>
        private sealed class PConstantCurrentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PConstantCurrentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PConstantCurrent;
                }
                set
                {
                    this.ModelElement.PConstantCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qConstantImpedance property
        /// </summary>
        private sealed class QConstantImpedanceProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QConstantImpedanceProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QConstantImpedance;
                }
                set
                {
                    this.ModelElement.QConstantImpedance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantImpedanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantImpedanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qFrequencyExponent property
        /// </summary>
        private sealed class QFrequencyExponentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QFrequencyExponentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QFrequencyExponent;
                }
                set
                {
                    this.ModelElement.QFrequencyExponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QFrequencyExponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QFrequencyExponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pFrequencyExponent property
        /// </summary>
        private sealed class PFrequencyExponentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PFrequencyExponentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PFrequencyExponent;
                }
                set
                {
                    this.ModelElement.PFrequencyExponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PFrequencyExponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PFrequencyExponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pConstantImpedance property
        /// </summary>
        private sealed class PConstantImpedanceProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PConstantImpedanceProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PConstantImpedance;
                }
                set
                {
                    this.ModelElement.PConstantImpedance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantImpedanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantImpedanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qVoltageExponent property
        /// </summary>
        private sealed class QVoltageExponentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QVoltageExponentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QVoltageExponent;
                }
                set
                {
                    this.ModelElement.QVoltageExponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QVoltageExponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QVoltageExponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pVoltageExponent property
        /// </summary>
        private sealed class PVoltageExponentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PVoltageExponentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PVoltageExponent;
                }
                set
                {
                    this.ModelElement.PVoltageExponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PVoltageExponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PVoltageExponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qConstantCurrent property
        /// </summary>
        private sealed class QConstantCurrentProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QConstantCurrentProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QConstantCurrent;
                }
                set
                {
                    this.ModelElement.QConstantCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pConstantPower property
        /// </summary>
        private sealed class PConstantPowerProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PConstantPowerProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PConstantPower;
                }
                set
                {
                    this.ModelElement.PConstantPower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantPowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PConstantPowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qConstantPower property
        /// </summary>
        private sealed class QConstantPowerProxy : ModelPropertyChange<ILoadResponseCharacteristic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QConstantPowerProxy(ILoadResponseCharacteristic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QConstantPower;
                }
                set
                {
                    this.ModelElement.QConstantPower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantPowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QConstantPowerChanged -= handler;
            }
        }
    }
}

