//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpOrganisation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "Organisation")]
    [DebuggerDisplayAttribute("ErpOrganisation {UUID}")]
    public class ErpOrganisation : Organisation, IErpOrganisation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Mode property
        /// </summary>
        private string _mode;
        
        /// <summary>
        /// The backing field for the OptOut property
        /// </summary>
        private bool _optOut;
        
        /// <summary>
        /// The backing field for the IsProfitCenter property
        /// </summary>
        private bool _isProfitCenter;
        
        /// <summary>
        /// The backing field for the IsCostCenter property
        /// </summary>
        private bool _isCostCenter;
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        /// <summary>
        /// The backing field for the IndustryID property
        /// </summary>
        private string _industryID;
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        /// <summary>
        /// The backing field for the GovernmentID property
        /// </summary>
        private string _governmentID;
        
        /// <summary>
        /// The backing field for the Crews property
        /// </summary>
        private ErpOrganisationCrewsCollection _crews;
        
        /// <summary>
        /// The backing field for the Requests property
        /// </summary>
        private ErpOrganisationRequestsCollection _requests;
        
        /// <summary>
        /// The backing field for the RegisteredResources property
        /// </summary>
        private ErpOrganisationRegisteredResourcesCollection _registeredResources;
        
        /// <summary>
        /// The backing field for the PowerSystemResourceRoles property
        /// </summary>
        private ErpOrganisationPowerSystemResourceRolesCollection _powerSystemResourceRoles;
        
        /// <summary>
        /// The backing field for the DocumentRoles property
        /// </summary>
        private ErpOrganisationDocumentRolesCollection _documentRoles;
        
        /// <summary>
        /// The backing field for the AssetRoles property
        /// </summary>
        private ErpOrganisationAssetRolesCollection _assetRoles;
        
        /// <summary>
        /// The backing field for the ViolationLimits property
        /// </summary>
        private ErpOrganisationViolationLimitsCollection _violationLimits;
        
        /// <summary>
        /// The backing field for the ParentOrganisationRoles property
        /// </summary>
        private ErpOrganisationParentOrganisationRolesCollection _parentOrganisationRoles;
        
        /// <summary>
        /// The backing field for the LandPropertyRoles property
        /// </summary>
        private ErpOrganisationLandPropertyRolesCollection _landPropertyRoles;
        
        /// <summary>
        /// The backing field for the ErpPersonRoles property
        /// </summary>
        private ErpOrganisationErpPersonRolesCollection _erpPersonRoles;
        
        /// <summary>
        /// The backing field for the ChildOrganisationRoles property
        /// </summary>
        private ErpOrganisationChildOrganisationRolesCollection _childOrganisationRoles;
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private ErpOrganisationChangeItemsCollection _changeItems;
        
        /// <summary>
        /// The backing field for the Locations property
        /// </summary>
        private ErpOrganisationLocationsCollection _locations;
        
        /// <summary>
        /// The backing field for the IntSchedAgreement property
        /// </summary>
        private ErpOrganisationIntSchedAgreementCollection _intSchedAgreement;
        
        /// <summary>
        /// The backing field for the ActivityRecords property
        /// </summary>
        private ErpOrganisationActivityRecordsCollection _activityRecords;
        
        private static IClass _classInstance;
        
        public ErpOrganisation()
        {
            this._crews = new ErpOrganisationCrewsCollection(this);
            this._crews.CollectionChanging += this.CrewsCollectionChanging;
            this._crews.CollectionChanged += this.CrewsCollectionChanged;
            this._requests = new ErpOrganisationRequestsCollection(this);
            this._requests.CollectionChanging += this.RequestsCollectionChanging;
            this._requests.CollectionChanged += this.RequestsCollectionChanged;
            this._registeredResources = new ErpOrganisationRegisteredResourcesCollection(this);
            this._registeredResources.CollectionChanging += this.RegisteredResourcesCollectionChanging;
            this._registeredResources.CollectionChanged += this.RegisteredResourcesCollectionChanged;
            this._powerSystemResourceRoles = new ErpOrganisationPowerSystemResourceRolesCollection(this);
            this._powerSystemResourceRoles.CollectionChanging += this.PowerSystemResourceRolesCollectionChanging;
            this._powerSystemResourceRoles.CollectionChanged += this.PowerSystemResourceRolesCollectionChanged;
            this._documentRoles = new ErpOrganisationDocumentRolesCollection(this);
            this._documentRoles.CollectionChanging += this.DocumentRolesCollectionChanging;
            this._documentRoles.CollectionChanged += this.DocumentRolesCollectionChanged;
            this._assetRoles = new ErpOrganisationAssetRolesCollection(this);
            this._assetRoles.CollectionChanging += this.AssetRolesCollectionChanging;
            this._assetRoles.CollectionChanged += this.AssetRolesCollectionChanged;
            this._violationLimits = new ErpOrganisationViolationLimitsCollection(this);
            this._violationLimits.CollectionChanging += this.ViolationLimitsCollectionChanging;
            this._violationLimits.CollectionChanged += this.ViolationLimitsCollectionChanged;
            this._parentOrganisationRoles = new ErpOrganisationParentOrganisationRolesCollection(this);
            this._parentOrganisationRoles.CollectionChanging += this.ParentOrganisationRolesCollectionChanging;
            this._parentOrganisationRoles.CollectionChanged += this.ParentOrganisationRolesCollectionChanged;
            this._landPropertyRoles = new ErpOrganisationLandPropertyRolesCollection(this);
            this._landPropertyRoles.CollectionChanging += this.LandPropertyRolesCollectionChanging;
            this._landPropertyRoles.CollectionChanged += this.LandPropertyRolesCollectionChanged;
            this._erpPersonRoles = new ErpOrganisationErpPersonRolesCollection(this);
            this._erpPersonRoles.CollectionChanging += this.ErpPersonRolesCollectionChanging;
            this._erpPersonRoles.CollectionChanged += this.ErpPersonRolesCollectionChanged;
            this._childOrganisationRoles = new ErpOrganisationChildOrganisationRolesCollection(this);
            this._childOrganisationRoles.CollectionChanging += this.ChildOrganisationRolesCollectionChanging;
            this._childOrganisationRoles.CollectionChanged += this.ChildOrganisationRolesCollectionChanged;
            this._changeItems = new ErpOrganisationChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._locations = new ErpOrganisationLocationsCollection(this);
            this._locations.CollectionChanging += this.LocationsCollectionChanging;
            this._locations.CollectionChanged += this.LocationsCollectionChanged;
            this._intSchedAgreement = new ErpOrganisationIntSchedAgreementCollection(this);
            this._intSchedAgreement.CollectionChanging += this.IntSchedAgreementCollectionChanging;
            this._intSchedAgreement.CollectionChanged += this.IntSchedAgreementCollectionChanged;
            this._activityRecords = new ErpOrganisationActivityRecordsCollection(this);
            this._activityRecords.CollectionChanging += this.ActivityRecordsCollectionChanging;
            this._activityRecords.CollectionChanged += this.ActivityRecordsCollectionChanged;
        }
        
        /// <summary>
        /// The mode property
        /// </summary>
        [XmlElementNameAttribute("mode")]
        [XmlAttributeAttribute(true)]
        public virtual string Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    string old = this._mode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModeChanging(e);
                    this.OnPropertyChanging("Mode", e);
                    this._mode = value;
                    this.OnModeChanged(e);
                    this.OnPropertyChanged("Mode", e);
                }
            }
        }
        
        /// <summary>
        /// The optOut property
        /// </summary>
        [XmlElementNameAttribute("optOut")]
        [XmlAttributeAttribute(true)]
        public virtual bool OptOut
        {
            get
            {
                return this._optOut;
            }
            set
            {
                if ((this._optOut != value))
                {
                    bool old = this._optOut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOptOutChanging(e);
                    this.OnPropertyChanging("OptOut", e);
                    this._optOut = value;
                    this.OnOptOutChanged(e);
                    this.OnPropertyChanged("OptOut", e);
                }
            }
        }
        
        /// <summary>
        /// The isProfitCenter property
        /// </summary>
        [XmlElementNameAttribute("isProfitCenter")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsProfitCenter
        {
            get
            {
                return this._isProfitCenter;
            }
            set
            {
                if ((this._isProfitCenter != value))
                {
                    bool old = this._isProfitCenter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsProfitCenterChanging(e);
                    this.OnPropertyChanging("IsProfitCenter", e);
                    this._isProfitCenter = value;
                    this.OnIsProfitCenterChanged(e);
                    this.OnPropertyChanged("IsProfitCenter", e);
                }
            }
        }
        
        /// <summary>
        /// The isCostCenter property
        /// </summary>
        [XmlElementNameAttribute("isCostCenter")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsCostCenter
        {
            get
            {
                return this._isCostCenter;
            }
            set
            {
                if ((this._isCostCenter != value))
                {
                    bool old = this._isCostCenter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsCostCenterChanging(e);
                    this.OnPropertyChanging("IsCostCenter", e);
                    this._isCostCenter = value;
                    this.OnIsCostCenterChanged(e);
                    this.OnPropertyChanged("IsCostCenter", e);
                }
            }
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e);
                }
            }
        }
        
        /// <summary>
        /// The industryID property
        /// </summary>
        [XmlElementNameAttribute("industryID")]
        [XmlAttributeAttribute(true)]
        public virtual string IndustryID
        {
            get
            {
                return this._industryID;
            }
            set
            {
                if ((this._industryID != value))
                {
                    string old = this._industryID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIndustryIDChanging(e);
                    this.OnPropertyChanging("IndustryID", e);
                    this._industryID = value;
                    this.OnIndustryIDChanged(e);
                    this.OnPropertyChanged("IndustryID", e);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e);
                }
            }
        }
        
        /// <summary>
        /// The governmentID property
        /// </summary>
        [XmlElementNameAttribute("governmentID")]
        [XmlAttributeAttribute(true)]
        public virtual string GovernmentID
        {
            get
            {
                return this._governmentID;
            }
            set
            {
                if ((this._governmentID != value))
                {
                    string old = this._governmentID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGovernmentIDChanging(e);
                    this.OnPropertyChanging("GovernmentID", e);
                    this._governmentID = value;
                    this.OnGovernmentIDChanged(e);
                    this.OnPropertyChanged("GovernmentID", e);
                }
            }
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICrew> Crews
        {
            get
            {
                return this._crews;
            }
        }
        
        /// <summary>
        /// The Requests property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRequest> Requests
        {
            get
            {
                return this._requests;
            }
        }
        
        /// <summary>
        /// The RegisteredResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegisteredResource> RegisteredResources
        {
            get
            {
                return this._registeredResources;
            }
        }
        
        /// <summary>
        /// The PowerSystemResourceRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgPsrRole> PowerSystemResourceRoles
        {
            get
            {
                return this._powerSystemResourceRoles;
            }
        }
        
        /// <summary>
        /// The DocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocOrgRole> DocumentRoles
        {
            get
            {
                return this._documentRoles;
            }
        }
        
        /// <summary>
        /// The AssetRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgAssetRole> AssetRoles
        {
            get
            {
                return this._assetRoles;
            }
        }
        
        /// <summary>
        /// The ViolationLimits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IViolationLimit> ViolationLimits
        {
            get
            {
                return this._violationLimits;
            }
        }
        
        /// <summary>
        /// The ParentOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgOrgRole> ParentOrganisationRoles
        {
            get
            {
                return this._parentOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The LandPropertyRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgPropertyRole> LandPropertyRoles
        {
            get
            {
                return this._landPropertyRoles;
            }
        }
        
        /// <summary>
        /// The ErpPersonRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgErpPersonRole> ErpPersonRoles
        {
            get
            {
                return this._erpPersonRoles;
            }
        }
        
        /// <summary>
        /// The ChildOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ParentOrganisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgOrgRole> ChildOrganisationRoles
        {
            get
            {
                return this._childOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The Locations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocation> Locations
        {
            get
            {
                return this._locations;
            }
        }
        
        /// <summary>
        /// The IntSchedAgreement property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIntSchedAgreement> IntSchedAgreement
        {
            get
            {
                return this._intSchedAgreement;
            }
        }
        
        /// <summary>
        /// The ActivityRecords property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IActivityRecord> ActivityRecords
        {
            get
            {
                return this._activityRecords;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpOrganisationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "Organisation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Mode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanging;
        
        /// <summary>
        /// Gets fired when the Mode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanged;
        
        /// <summary>
        /// Gets fired before the OptOut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptOutChanging;
        
        /// <summary>
        /// Gets fired when the OptOut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptOutChanged;
        
        /// <summary>
        /// Gets fired before the IsProfitCenter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsProfitCenterChanging;
        
        /// <summary>
        /// Gets fired when the IsProfitCenter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsProfitCenterChanged;
        
        /// <summary>
        /// Gets fired before the IsCostCenter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsCostCenterChanging;
        
        /// <summary>
        /// Gets fired when the IsCostCenter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsCostCenterChanged;
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the IndustryID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IndustryIDChanging;
        
        /// <summary>
        /// Gets fired when the IndustryID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IndustryIDChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the GovernmentID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernmentIDChanging;
        
        /// <summary>
        /// Gets fired when the GovernmentID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernmentIDChanged;
        
        /// <summary>
        /// Raises the ModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OptOutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptOutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptOutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OptOutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptOutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptOutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsProfitCenterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsProfitCenterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsProfitCenterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsProfitCenterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsProfitCenterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsProfitCenterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsCostCenterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsCostCenterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsCostCenterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsCostCenterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsCostCenterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsCostCenterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IndustryIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIndustryIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IndustryIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IndustryIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIndustryIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IndustryIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernmentIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernmentIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernmentIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernmentIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernmentIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernmentIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Crews", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crews", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Requests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequestsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Requests", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Requests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequestsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Requests", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RegisteredResources", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegisteredResources", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResourceRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResourceRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResourceRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourceRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResourceRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DocumentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ViolationLimits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ViolationLimits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ParentOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParentOrganisationRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ParentOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ParentOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParentOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ParentOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LandPropertyRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertyRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LandPropertyRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LandPropertyRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertyRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LandPropertyRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersonRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersonRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChildOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildOrganisationRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChildOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChildOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChildOrganisationRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IntSchedAgreement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntSchedAgreementCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("IntSchedAgreement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IntSchedAgreement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntSchedAgreementCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IntSchedAgreement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ActivityRecords", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActivityRecords", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MODE"))
            {
                return this.Mode;
            }
            if ((attribute == "OPTOUT"))
            {
                return this.OptOut;
            }
            if ((attribute == "ISPROFITCENTER"))
            {
                return this.IsProfitCenter;
            }
            if ((attribute == "ISCOSTCENTER"))
            {
                return this.IsCostCenter;
            }
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            if ((attribute == "INDUSTRYID"))
            {
                return this.IndustryID;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "GOVERNMENTID"))
            {
                return this.GovernmentID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CREWS"))
            {
                return this._crews;
            }
            if ((feature == "REQUESTS"))
            {
                return this._requests;
            }
            if ((feature == "REGISTEREDRESOURCES"))
            {
                return this._registeredResources;
            }
            if ((feature == "POWERSYSTEMRESOURCEROLES"))
            {
                return this._powerSystemResourceRoles;
            }
            if ((feature == "DOCUMENTROLES"))
            {
                return this._documentRoles;
            }
            if ((feature == "ASSETROLES"))
            {
                return this._assetRoles;
            }
            if ((feature == "VIOLATIONLIMITS"))
            {
                return this._violationLimits;
            }
            if ((feature == "PARENTORGANISATIONROLES"))
            {
                return this._parentOrganisationRoles;
            }
            if ((feature == "LANDPROPERTYROLES"))
            {
                return this._landPropertyRoles;
            }
            if ((feature == "ERPPERSONROLES"))
            {
                return this._erpPersonRoles;
            }
            if ((feature == "CHILDORGANISATIONROLES"))
            {
                return this._childOrganisationRoles;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "LOCATIONS"))
            {
                return this._locations;
            }
            if ((feature == "INTSCHEDAGREEMENT"))
            {
                return this._intSchedAgreement;
            }
            if ((feature == "ACTIVITYRECORDS"))
            {
                return this._activityRecords;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MODE"))
            {
                this.Mode = ((string)(value));
                return;
            }
            if ((feature == "OPTOUT"))
            {
                this.OptOut = ((bool)(value));
                return;
            }
            if ((feature == "ISPROFITCENTER"))
            {
                this.IsProfitCenter = ((bool)(value));
                return;
            }
            if ((feature == "ISCOSTCENTER"))
            {
                this.IsCostCenter = ((bool)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            if ((feature == "INDUSTRYID"))
            {
                this.IndustryID = ((string)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "GOVERNMENTID"))
            {
                this.GovernmentID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "Organisation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpOrganisation class
        /// </summary>
        public class ErpOrganisationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpOrganisation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpOrganisationReferencedElementsCollection(ErpOrganisation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Crews.Count);
                    count = (count + this._parent.Requests.Count);
                    count = (count + this._parent.RegisteredResources.Count);
                    count = (count + this._parent.PowerSystemResourceRoles.Count);
                    count = (count + this._parent.DocumentRoles.Count);
                    count = (count + this._parent.AssetRoles.Count);
                    count = (count + this._parent.ViolationLimits.Count);
                    count = (count + this._parent.ParentOrganisationRoles.Count);
                    count = (count + this._parent.LandPropertyRoles.Count);
                    count = (count + this._parent.ErpPersonRoles.Count);
                    count = (count + this._parent.ChildOrganisationRoles.Count);
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.Locations.Count);
                    count = (count + this._parent.IntSchedAgreement.Count);
                    count = (count + this._parent.ActivityRecords.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Crews.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Requests.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerSystemResourceRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LandPropertyRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChildOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.IntSchedAgreement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Crews.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Requests.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerSystemResourceRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LandPropertyRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChildOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.IntSchedAgreement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICrew crewsCasted = item.As<ICrew>();
                if ((crewsCasted != null))
                {
                    this._parent.Crews.Add(crewsCasted);
                }
                IRequest requestsCasted = item.As<IRequest>();
                if ((requestsCasted != null))
                {
                    this._parent.Requests.Add(requestsCasted);
                }
                IRegisteredResource registeredResourcesCasted = item.As<IRegisteredResource>();
                if ((registeredResourcesCasted != null))
                {
                    this._parent.RegisteredResources.Add(registeredResourcesCasted);
                }
                IOrgPsrRole powerSystemResourceRolesCasted = item.As<IOrgPsrRole>();
                if ((powerSystemResourceRolesCasted != null))
                {
                    this._parent.PowerSystemResourceRoles.Add(powerSystemResourceRolesCasted);
                }
                IDocOrgRole documentRolesCasted = item.As<IDocOrgRole>();
                if ((documentRolesCasted != null))
                {
                    this._parent.DocumentRoles.Add(documentRolesCasted);
                }
                IOrgAssetRole assetRolesCasted = item.As<IOrgAssetRole>();
                if ((assetRolesCasted != null))
                {
                    this._parent.AssetRoles.Add(assetRolesCasted);
                }
                IViolationLimit violationLimitsCasted = item.As<IViolationLimit>();
                if ((violationLimitsCasted != null))
                {
                    this._parent.ViolationLimits.Add(violationLimitsCasted);
                }
                IOrgOrgRole parentOrganisationRolesCasted = item.As<IOrgOrgRole>();
                if ((parentOrganisationRolesCasted != null))
                {
                    this._parent.ParentOrganisationRoles.Add(parentOrganisationRolesCasted);
                }
                IOrgPropertyRole landPropertyRolesCasted = item.As<IOrgPropertyRole>();
                if ((landPropertyRolesCasted != null))
                {
                    this._parent.LandPropertyRoles.Add(landPropertyRolesCasted);
                }
                IOrgErpPersonRole erpPersonRolesCasted = item.As<IOrgErpPersonRole>();
                if ((erpPersonRolesCasted != null))
                {
                    this._parent.ErpPersonRoles.Add(erpPersonRolesCasted);
                }
                IOrgOrgRole childOrganisationRolesCasted = item.As<IOrgOrgRole>();
                if ((childOrganisationRolesCasted != null))
                {
                    this._parent.ChildOrganisationRoles.Add(childOrganisationRolesCasted);
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                ILocation locationsCasted = item.As<ILocation>();
                if ((locationsCasted != null))
                {
                    this._parent.Locations.Add(locationsCasted);
                }
                IIntSchedAgreement intSchedAgreementCasted = item.As<IIntSchedAgreement>();
                if ((intSchedAgreementCasted != null))
                {
                    this._parent.IntSchedAgreement.Add(intSchedAgreementCasted);
                }
                IActivityRecord activityRecordsCasted = item.As<IActivityRecord>();
                if ((activityRecordsCasted != null))
                {
                    this._parent.ActivityRecords.Add(activityRecordsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Crews.Clear();
                this._parent.Requests.Clear();
                this._parent.RegisteredResources.Clear();
                this._parent.PowerSystemResourceRoles.Clear();
                this._parent.DocumentRoles.Clear();
                this._parent.AssetRoles.Clear();
                this._parent.ViolationLimits.Clear();
                this._parent.ParentOrganisationRoles.Clear();
                this._parent.LandPropertyRoles.Clear();
                this._parent.ErpPersonRoles.Clear();
                this._parent.ChildOrganisationRoles.Clear();
                this._parent.ChangeItems.Clear();
                this._parent.Locations.Clear();
                this._parent.IntSchedAgreement.Clear();
                this._parent.ActivityRecords.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Crews.Contains(item))
                {
                    return true;
                }
                if (this._parent.Requests.Contains(item))
                {
                    return true;
                }
                if (this._parent.RegisteredResources.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerSystemResourceRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.DocumentRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssetRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ViolationLimits.Contains(item))
                {
                    return true;
                }
                if (this._parent.ParentOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.LandPropertyRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersonRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChildOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Locations.Contains(item))
                {
                    return true;
                }
                if (this._parent.IntSchedAgreement.Contains(item))
                {
                    return true;
                }
                if (this._parent.ActivityRecords.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> crewsEnumerator = this._parent.Crews.GetEnumerator();
                try
                {
                    for (
                    ; crewsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requestsEnumerator = this._parent.Requests.GetEnumerator();
                try
                {
                    for (
                    ; requestsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requestsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requestsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> registeredResourcesEnumerator = this._parent.RegisteredResources.GetEnumerator();
                try
                {
                    for (
                    ; registeredResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = registeredResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    registeredResourcesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerSystemResourceRolesEnumerator = this._parent.PowerSystemResourceRoles.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourceRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourceRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourceRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> documentRolesEnumerator = this._parent.DocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; documentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetRolesEnumerator = this._parent.AssetRoles.GetEnumerator();
                try
                {
                    for (
                    ; assetRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> violationLimitsEnumerator = this._parent.ViolationLimits.GetEnumerator();
                try
                {
                    for (
                    ; violationLimitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = violationLimitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    violationLimitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> parentOrganisationRolesEnumerator = this._parent.ParentOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; parentOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parentOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parentOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> landPropertyRolesEnumerator = this._parent.LandPropertyRoles.GetEnumerator();
                try
                {
                    for (
                    ; landPropertyRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = landPropertyRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    landPropertyRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonRolesEnumerator = this._parent.ErpPersonRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> childOrganisationRolesEnumerator = this._parent.ChildOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; childOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> locationsEnumerator = this._parent.Locations.GetEnumerator();
                try
                {
                    for (
                    ; locationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> intSchedAgreementEnumerator = this._parent.IntSchedAgreement.GetEnumerator();
                try
                {
                    for (
                    ; intSchedAgreementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = intSchedAgreementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    intSchedAgreementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> activityRecordsEnumerator = this._parent.ActivityRecords.GetEnumerator();
                try
                {
                    for (
                    ; activityRecordsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activityRecordsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activityRecordsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICrew crewItem = item.As<ICrew>();
                if (((crewItem != null) 
                            && this._parent.Crews.Remove(crewItem)))
                {
                    return true;
                }
                IRequest requestItem = item.As<IRequest>();
                if (((requestItem != null) 
                            && this._parent.Requests.Remove(requestItem)))
                {
                    return true;
                }
                IRegisteredResource registeredResourceItem = item.As<IRegisteredResource>();
                if (((registeredResourceItem != null) 
                            && this._parent.RegisteredResources.Remove(registeredResourceItem)))
                {
                    return true;
                }
                IOrgPsrRole orgPsrRoleItem = item.As<IOrgPsrRole>();
                if (((orgPsrRoleItem != null) 
                            && this._parent.PowerSystemResourceRoles.Remove(orgPsrRoleItem)))
                {
                    return true;
                }
                IDocOrgRole docOrgRoleItem = item.As<IDocOrgRole>();
                if (((docOrgRoleItem != null) 
                            && this._parent.DocumentRoles.Remove(docOrgRoleItem)))
                {
                    return true;
                }
                IOrgAssetRole orgAssetRoleItem = item.As<IOrgAssetRole>();
                if (((orgAssetRoleItem != null) 
                            && this._parent.AssetRoles.Remove(orgAssetRoleItem)))
                {
                    return true;
                }
                IViolationLimit violationLimitItem = item.As<IViolationLimit>();
                if (((violationLimitItem != null) 
                            && this._parent.ViolationLimits.Remove(violationLimitItem)))
                {
                    return true;
                }
                IOrgOrgRole orgOrgRoleItem = item.As<IOrgOrgRole>();
                if (((orgOrgRoleItem != null) 
                            && this._parent.ParentOrganisationRoles.Remove(orgOrgRoleItem)))
                {
                    return true;
                }
                IOrgPropertyRole orgPropertyRoleItem = item.As<IOrgPropertyRole>();
                if (((orgPropertyRoleItem != null) 
                            && this._parent.LandPropertyRoles.Remove(orgPropertyRoleItem)))
                {
                    return true;
                }
                IOrgErpPersonRole orgErpPersonRoleItem = item.As<IOrgErpPersonRole>();
                if (((orgErpPersonRoleItem != null) 
                            && this._parent.ErpPersonRoles.Remove(orgErpPersonRoleItem)))
                {
                    return true;
                }
                if (((orgOrgRoleItem != null) 
                            && this._parent.ChildOrganisationRoles.Remove(orgOrgRoleItem)))
                {
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                ILocation locationItem = item.As<ILocation>();
                if (((locationItem != null) 
                            && this._parent.Locations.Remove(locationItem)))
                {
                    return true;
                }
                IIntSchedAgreement intSchedAgreementItem = item.As<IIntSchedAgreement>();
                if (((intSchedAgreementItem != null) 
                            && this._parent.IntSchedAgreement.Remove(intSchedAgreementItem)))
                {
                    return true;
                }
                IActivityRecord activityRecordItem = item.As<IActivityRecord>();
                if (((activityRecordItem != null) 
                            && this._parent.ActivityRecords.Remove(activityRecordItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Crews).Concat(this._parent.Requests).Concat(this._parent.RegisteredResources).Concat(this._parent.PowerSystemResourceRoles).Concat(this._parent.DocumentRoles).Concat(this._parent.AssetRoles).Concat(this._parent.ViolationLimits).Concat(this._parent.ParentOrganisationRoles).Concat(this._parent.LandPropertyRoles).Concat(this._parent.ErpPersonRoles).Concat(this._parent.ChildOrganisationRoles).Concat(this._parent.ChangeItems).Concat(this._parent.Locations).Concat(this._parent.IntSchedAgreement).Concat(this._parent.ActivityRecords).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mode property
        /// </summary>
        private sealed class ModeProxy : ModelPropertyChange<IErpOrganisation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModeProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Mode;
                }
                set
                {
                    this.ModelElement.Mode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the optOut property
        /// </summary>
        private sealed class OptOutProxy : ModelPropertyChange<IErpOrganisation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OptOutProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OptOut;
                }
                set
                {
                    this.ModelElement.OptOut = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OptOutChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OptOutChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isProfitCenter property
        /// </summary>
        private sealed class IsProfitCenterProxy : ModelPropertyChange<IErpOrganisation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsProfitCenterProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsProfitCenter;
                }
                set
                {
                    this.ModelElement.IsProfitCenter = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsProfitCenterChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsProfitCenterChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isCostCenter property
        /// </summary>
        private sealed class IsCostCenterProxy : ModelPropertyChange<IErpOrganisation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsCostCenterProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsCostCenter;
                }
                set
                {
                    this.ModelElement.IsCostCenter = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsCostCenterChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsCostCenterChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<IErpOrganisation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the industryID property
        /// </summary>
        private sealed class IndustryIDProxy : ModelPropertyChange<IErpOrganisation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IndustryIDProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IndustryID;
                }
                set
                {
                    this.ModelElement.IndustryID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IndustryIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IndustryIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IErpOrganisation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the governmentID property
        /// </summary>
        private sealed class GovernmentIDProxy : ModelPropertyChange<IErpOrganisation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GovernmentIDProxy(IErpOrganisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GovernmentID;
                }
                set
                {
                    this.ModelElement.GovernmentID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernmentIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernmentIDChanged -= handler;
            }
        }
    }
}

