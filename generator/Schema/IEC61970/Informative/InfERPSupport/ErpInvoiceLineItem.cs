//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpInvoiceLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "InvoiceLineItem")]
    [DebuggerDisplayAttribute("ErpInvoiceLineItem {UUID}")]
    public partial class ErpInvoiceLineItem : Document, IErpInvoiceLineItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NetAmount property
        /// </summary>
        private float _netAmount;
        
        private static Lazy<ITypedElement> _netAmountAttribute = new Lazy<ITypedElement>(RetrieveNetAmountAttribute);
        
        /// <summary>
        /// The backing field for the LineAmount property
        /// </summary>
        private float _lineAmount;
        
        private static Lazy<ITypedElement> _lineAmountAttribute = new Lazy<ITypedElement>(RetrieveLineAmountAttribute);
        
        /// <summary>
        /// The backing field for the PreviousAmount property
        /// </summary>
        private float _previousAmount;
        
        private static Lazy<ITypedElement> _previousAmountAttribute = new Lazy<ITypedElement>(RetrievePreviousAmountAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ErpInvoiceLineItemKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the GlDateTime property
        /// </summary>
        private DateTime _glDateTime;
        
        private static Lazy<ITypedElement> _glDateTimeAttribute = new Lazy<ITypedElement>(RetrieveGlDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the GlAccount property
        /// </summary>
        private string _glAccount;
        
        private static Lazy<ITypedElement> _glAccountAttribute = new Lazy<ITypedElement>(RetrieveGlAccountAttribute);
        
        /// <summary>
        /// The backing field for the LineNumber property
        /// </summary>
        private string _lineNumber;
        
        private static Lazy<ITypedElement> _lineNumberAttribute = new Lazy<ITypedElement>(RetrieveLineNumberAttribute);
        
        /// <summary>
        /// The backing field for the LineVersion property
        /// </summary>
        private string _lineVersion;
        
        private static Lazy<ITypedElement> _lineVersionAttribute = new Lazy<ITypedElement>(RetrieveLineVersionAttribute);
        
        private static Lazy<ITypedElement> _erpQuoteLineItemReference = new Lazy<ITypedElement>(RetrieveErpQuoteLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpQuoteLineItem property
        /// </summary>
        private IErpQuoteLineItem _erpQuoteLineItem;
        
        private static Lazy<ITypedElement> _erpPayableLineItemReference = new Lazy<ITypedElement>(RetrieveErpPayableLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpPayableLineItem property
        /// </summary>
        private IErpPayableLineItem _erpPayableLineItem;
        
        private static Lazy<ITypedElement> _erpRecLineItemReference = new Lazy<ITypedElement>(RetrieveErpRecLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpRecLineItem property
        /// </summary>
        private IErpRecLineItem _erpRecLineItem;
        
        private static Lazy<ITypedElement> _settlementsReference = new Lazy<ITypedElement>(RetrieveSettlementsReference);
        
        /// <summary>
        /// The backing field for the Settlements property
        /// </summary>
        private ErpInvoiceLineItemSettlementsCollection _settlements;
        
        private static Lazy<ITypedElement> _workBillingInfosReference = new Lazy<ITypedElement>(RetrieveWorkBillingInfosReference);
        
        /// <summary>
        /// The backing field for the WorkBillingInfos property
        /// </summary>
        private ErpInvoiceLineItemWorkBillingInfosCollection _workBillingInfos;
        
        private static Lazy<ITypedElement> _marketFactorsReference = new Lazy<ITypedElement>(RetrieveMarketFactorsReference);
        
        /// <summary>
        /// The backing field for the MarketFactors property
        /// </summary>
        private ErpInvoiceLineItemMarketFactorsCollection _marketFactors;
        
        private static Lazy<ITypedElement> _erpPaymentsReference = new Lazy<ITypedElement>(RetrieveErpPaymentsReference);
        
        /// <summary>
        /// The backing field for the ErpPayments property
        /// </summary>
        private ErpInvoiceLineItemErpPaymentsCollection _erpPayments;
        
        private static Lazy<ITypedElement> _containerErpInvoiceLineItemReference = new Lazy<ITypedElement>(RetrieveContainerErpInvoiceLineItemReference);
        
        /// <summary>
        /// The backing field for the ContainerErpInvoiceLineItem property
        /// </summary>
        private IErpInvoiceLineItem _containerErpInvoiceLineItem;
        
        private static Lazy<ITypedElement> _erpRecDelvLineItemReference = new Lazy<ITypedElement>(RetrieveErpRecDelvLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpRecDelvLineItem property
        /// </summary>
        private IErpRecDelvLineItem _erpRecDelvLineItem;
        
        private static Lazy<ITypedElement> _billPeriodReference = new Lazy<ITypedElement>(RetrieveBillPeriodReference);
        
        /// <summary>
        /// The backing field for the BillPeriod property
        /// </summary>
        private IDateTimeInterval _billPeriod;
        
        private static Lazy<ITypedElement> _userAttributesReference = new Lazy<ITypedElement>(RetrieveUserAttributesReference);
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private ErpInvoiceLineItemUserAttributesCollection _userAttributes;
        
        private static Lazy<ITypedElement> _erpInvoiceReference = new Lazy<ITypedElement>(RetrieveErpInvoiceReference);
        
        /// <summary>
        /// The backing field for the ErpInvoice property
        /// </summary>
        private IErpInvoice _erpInvoice;
        
        private static Lazy<ITypedElement> _customerBillingInfosReference = new Lazy<ITypedElement>(RetrieveCustomerBillingInfosReference);
        
        /// <summary>
        /// The backing field for the CustomerBillingInfos property
        /// </summary>
        private ErpInvoiceLineItemCustomerBillingInfosCollection _customerBillingInfos;
        
        private static Lazy<ITypedElement> _componentErpInvoiceLineItemsReference = new Lazy<ITypedElement>(RetrieveComponentErpInvoiceLineItemsReference);
        
        /// <summary>
        /// The backing field for the ComponentErpInvoiceLineItems property
        /// </summary>
        private ErpInvoiceLineItemComponentErpInvoiceLineItemsCollection _componentErpInvoiceLineItems;
        
        private static Lazy<ITypedElement> _erpJournalEntriesReference = new Lazy<ITypedElement>(RetrieveErpJournalEntriesReference);
        
        /// <summary>
        /// The backing field for the ErpJournalEntries property
        /// </summary>
        private ErpInvoiceLineItemErpJournalEntriesCollection _erpJournalEntries;
        
        private static IClass _classInstance;
        
        public ErpInvoiceLineItem()
        {
            this._settlements = new ErpInvoiceLineItemSettlementsCollection(this);
            this._settlements.CollectionChanging += this.SettlementsCollectionChanging;
            this._settlements.CollectionChanged += this.SettlementsCollectionChanged;
            this._workBillingInfos = new ErpInvoiceLineItemWorkBillingInfosCollection(this);
            this._workBillingInfos.CollectionChanging += this.WorkBillingInfosCollectionChanging;
            this._workBillingInfos.CollectionChanged += this.WorkBillingInfosCollectionChanged;
            this._marketFactors = new ErpInvoiceLineItemMarketFactorsCollection(this);
            this._marketFactors.CollectionChanging += this.MarketFactorsCollectionChanging;
            this._marketFactors.CollectionChanged += this.MarketFactorsCollectionChanged;
            this._erpPayments = new ErpInvoiceLineItemErpPaymentsCollection(this);
            this._erpPayments.CollectionChanging += this.ErpPaymentsCollectionChanging;
            this._erpPayments.CollectionChanged += this.ErpPaymentsCollectionChanged;
            this._userAttributes = new ErpInvoiceLineItemUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
            this._customerBillingInfos = new ErpInvoiceLineItemCustomerBillingInfosCollection(this);
            this._customerBillingInfos.CollectionChanging += this.CustomerBillingInfosCollectionChanging;
            this._customerBillingInfos.CollectionChanged += this.CustomerBillingInfosCollectionChanged;
            this._componentErpInvoiceLineItems = new ErpInvoiceLineItemComponentErpInvoiceLineItemsCollection(this);
            this._componentErpInvoiceLineItems.CollectionChanging += this.ComponentErpInvoiceLineItemsCollectionChanging;
            this._componentErpInvoiceLineItems.CollectionChanged += this.ComponentErpInvoiceLineItemsCollectionChanged;
            this._erpJournalEntries = new ErpInvoiceLineItemErpJournalEntriesCollection(this);
            this._erpJournalEntries.CollectionChanging += this.ErpJournalEntriesCollectionChanging;
            this._erpJournalEntries.CollectionChanged += this.ErpJournalEntriesCollectionChanged;
        }
        
        /// <summary>
        /// The netAmount property
        /// </summary>
        [XmlElementNameAttribute("netAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float NetAmount
        {
            get
            {
                return this._netAmount;
            }
            set
            {
                if ((this._netAmount != value))
                {
                    float old = this._netAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetAmountChanging(e);
                    this.OnPropertyChanging("NetAmount", e, _netAmountAttribute);
                    this._netAmount = value;
                    this.OnNetAmountChanged(e);
                    this.OnPropertyChanged("NetAmount", e, _netAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineAmount property
        /// </summary>
        [XmlElementNameAttribute("lineAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float LineAmount
        {
            get
            {
                return this._lineAmount;
            }
            set
            {
                if ((this._lineAmount != value))
                {
                    float old = this._lineAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineAmountChanging(e);
                    this.OnPropertyChanging("LineAmount", e, _lineAmountAttribute);
                    this._lineAmount = value;
                    this.OnLineAmountChanged(e);
                    this.OnPropertyChanged("LineAmount", e, _lineAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The previousAmount property
        /// </summary>
        [XmlElementNameAttribute("previousAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float PreviousAmount
        {
            get
            {
                return this._previousAmount;
            }
            set
            {
                if ((this._previousAmount != value))
                {
                    float old = this._previousAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousAmountChanging(e);
                    this.OnPropertyChanging("PreviousAmount", e, _previousAmountAttribute);
                    this._previousAmount = value;
                    this.OnPreviousAmountChanged(e);
                    this.OnPropertyChanged("PreviousAmount", e, _previousAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ErpInvoiceLineItemKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ErpInvoiceLineItemKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The glDateTime property
        /// </summary>
        [XmlElementNameAttribute("glDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime GlDateTime
        {
            get
            {
                return this._glDateTime;
            }
            set
            {
                if ((this._glDateTime != value))
                {
                    DateTime old = this._glDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGlDateTimeChanging(e);
                    this.OnPropertyChanging("GlDateTime", e, _glDateTimeAttribute);
                    this._glDateTime = value;
                    this.OnGlDateTimeChanged(e);
                    this.OnPropertyChanged("GlDateTime", e, _glDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The glAccount property
        /// </summary>
        [XmlElementNameAttribute("glAccount")]
        [XmlAttributeAttribute(true)]
        public virtual string GlAccount
        {
            get
            {
                return this._glAccount;
            }
            set
            {
                if ((this._glAccount != value))
                {
                    string old = this._glAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGlAccountChanging(e);
                    this.OnPropertyChanging("GlAccount", e, _glAccountAttribute);
                    this._glAccount = value;
                    this.OnGlAccountChanged(e);
                    this.OnPropertyChanged("GlAccount", e, _glAccountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineNumber property
        /// </summary>
        [XmlElementNameAttribute("lineNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string LineNumber
        {
            get
            {
                return this._lineNumber;
            }
            set
            {
                if ((this._lineNumber != value))
                {
                    string old = this._lineNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineNumberChanging(e);
                    this.OnPropertyChanging("LineNumber", e, _lineNumberAttribute);
                    this._lineNumber = value;
                    this.OnLineNumberChanged(e);
                    this.OnPropertyChanged("LineNumber", e, _lineNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineVersion property
        /// </summary>
        [XmlElementNameAttribute("lineVersion")]
        [XmlAttributeAttribute(true)]
        public virtual string LineVersion
        {
            get
            {
                return this._lineVersion;
            }
            set
            {
                if ((this._lineVersion != value))
                {
                    string old = this._lineVersion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineVersionChanging(e);
                    this.OnPropertyChanging("LineVersion", e, _lineVersionAttribute);
                    this._lineVersion = value;
                    this.OnLineVersionChanged(e);
                    this.OnPropertyChanged("LineVersion", e, _lineVersionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpQuoteLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItem")]
        public virtual IErpQuoteLineItem ErpQuoteLineItem
        {
            get
            {
                return this._erpQuoteLineItem;
            }
            set
            {
                if ((this._erpQuoteLineItem != value))
                {
                    IErpQuoteLineItem old = this._erpQuoteLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpQuoteLineItemChanging(e);
                    this.OnPropertyChanging("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                    this._erpQuoteLineItem = value;
                    if ((old != null))
                    {
                        old.ErpInvoiceLineItem = null;
                        old.Deleted -= this.OnResetErpQuoteLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoiceLineItem = this;
                        value.Deleted += this.OnResetErpQuoteLineItem;
                    }
                    this.OnErpQuoteLineItemChanged(e);
                    this.OnPropertyChanged("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPayableLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItem")]
        public virtual IErpPayableLineItem ErpPayableLineItem
        {
            get
            {
                return this._erpPayableLineItem;
            }
            set
            {
                if ((this._erpPayableLineItem != value))
                {
                    IErpPayableLineItem old = this._erpPayableLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPayableLineItemChanging(e);
                    this.OnPropertyChanging("ErpPayableLineItem", e, _erpPayableLineItemReference);
                    this._erpPayableLineItem = value;
                    if ((old != null))
                    {
                        old.ErpInvoiceLineItem = null;
                        old.Deleted -= this.OnResetErpPayableLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoiceLineItem = this;
                        value.Deleted += this.OnResetErpPayableLineItem;
                    }
                    this.OnErpPayableLineItemChanged(e);
                    this.OnPropertyChanged("ErpPayableLineItem", e, _erpPayableLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpRecLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItem")]
        public virtual IErpRecLineItem ErpRecLineItem
        {
            get
            {
                return this._erpRecLineItem;
            }
            set
            {
                if ((this._erpRecLineItem != value))
                {
                    IErpRecLineItem old = this._erpRecLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpRecLineItemChanging(e);
                    this.OnPropertyChanging("ErpRecLineItem", e, _erpRecLineItemReference);
                    this._erpRecLineItem = value;
                    if ((old != null))
                    {
                        old.ErpInvoiceLineItem = null;
                        old.Deleted -= this.OnResetErpRecLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoiceLineItem = this;
                        value.Deleted += this.OnResetErpRecLineItem;
                    }
                    this.OnErpRecLineItemChanged(e);
                    this.OnPropertyChanged("ErpRecLineItem", e, _erpRecLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The Settlements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISettlement> Settlements
        {
            get
            {
                return this._settlements;
            }
        }
        
        /// <summary>
        /// The WorkBillingInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkBillingInfo> WorkBillingInfos
        {
            get
            {
                return this._workBillingInfos;
            }
        }
        
        /// <summary>
        /// The MarketFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoices")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketFactors> MarketFactors
        {
            get
            {
                return this._marketFactors;
            }
        }
        
        /// <summary>
        /// The ErpPayments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPayment> ErpPayments
        {
            get
            {
                return this._erpPayments;
            }
        }
        
        /// <summary>
        /// The ContainerErpInvoiceLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ComponentErpInvoiceLineItems")]
        public virtual IErpInvoiceLineItem ContainerErpInvoiceLineItem
        {
            get
            {
                return this._containerErpInvoiceLineItem;
            }
            set
            {
                if ((this._containerErpInvoiceLineItem != value))
                {
                    IErpInvoiceLineItem old = this._containerErpInvoiceLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContainerErpInvoiceLineItemChanging(e);
                    this.OnPropertyChanging("ContainerErpInvoiceLineItem", e, _containerErpInvoiceLineItemReference);
                    this._containerErpInvoiceLineItem = value;
                    if ((old != null))
                    {
                        old.ComponentErpInvoiceLineItems.Remove(this);
                        old.Deleted -= this.OnResetContainerErpInvoiceLineItem;
                    }
                    if ((value != null))
                    {
                        value.ComponentErpInvoiceLineItems.Add(this);
                        value.Deleted += this.OnResetContainerErpInvoiceLineItem;
                    }
                    this.OnContainerErpInvoiceLineItemChanged(e);
                    this.OnPropertyChanged("ContainerErpInvoiceLineItem", e, _containerErpInvoiceLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpRecDelvLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItem")]
        public virtual IErpRecDelvLineItem ErpRecDelvLineItem
        {
            get
            {
                return this._erpRecDelvLineItem;
            }
            set
            {
                if ((this._erpRecDelvLineItem != value))
                {
                    IErpRecDelvLineItem old = this._erpRecDelvLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpRecDelvLineItemChanging(e);
                    this.OnPropertyChanging("ErpRecDelvLineItem", e, _erpRecDelvLineItemReference);
                    this._erpRecDelvLineItem = value;
                    if ((old != null))
                    {
                        old.ErpInvoiceLineItem = null;
                        old.Deleted -= this.OnResetErpRecDelvLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoiceLineItem = this;
                        value.Deleted += this.OnResetErpRecDelvLineItem;
                    }
                    this.OnErpRecDelvLineItemChanged(e);
                    this.OnPropertyChanged("ErpRecDelvLineItem", e, _erpRecDelvLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The billPeriod property
        /// </summary>
        [XmlElementNameAttribute("billPeriod")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval BillPeriod
        {
            get
            {
                return this._billPeriod;
            }
            set
            {
                if ((this._billPeriod != value))
                {
                    IDateTimeInterval old = this._billPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillPeriodChanging(e);
                    this.OnPropertyChanging("BillPeriod", e, _billPeriodReference);
                    this._billPeriod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBillPeriod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBillPeriod;
                    }
                    this.OnBillPeriodChanged(e);
                    this.OnPropertyChanged("BillPeriod", e, _billPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The ErpInvoice property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItems")]
        public virtual IErpInvoice ErpInvoice
        {
            get
            {
                return this._erpInvoice;
            }
            set
            {
                if ((this._erpInvoice != value))
                {
                    IErpInvoice old = this._erpInvoice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInvoiceChanging(e);
                    this.OnPropertyChanging("ErpInvoice", e, _erpInvoiceReference);
                    this._erpInvoice = value;
                    if ((old != null))
                    {
                        old.ErpInvoiceLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpInvoice;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoiceLineItems.Add(this);
                        value.Deleted += this.OnResetErpInvoice;
                    }
                    this.OnErpInvoiceChanged(e);
                    this.OnPropertyChanged("ErpInvoice", e, _erpInvoiceReference);
                }
            }
        }
        
        /// <summary>
        /// The CustomerBillingInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerBillingInfo> CustomerBillingInfos
        {
            get
            {
                return this._customerBillingInfos;
            }
        }
        
        /// <summary>
        /// The ComponentErpInvoiceLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ContainerErpInvoiceLineItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoiceLineItem> ComponentErpInvoiceLineItems
        {
            get
            {
                return this._componentErpInvoiceLineItems;
            }
        }
        
        /// <summary>
        /// The ErpJournalEntries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoiceLineItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpJournalEntry> ErpJournalEntries
        {
            get
            {
                return this._erpJournalEntries;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpInvoiceLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "InvoiceLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NetAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetAmountChanging;
        
        /// <summary>
        /// Gets fired when the NetAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetAmountChanged;
        
        /// <summary>
        /// Gets fired before the LineAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineAmountChanging;
        
        /// <summary>
        /// Gets fired when the LineAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineAmountChanged;
        
        /// <summary>
        /// Gets fired before the PreviousAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousAmountChanging;
        
        /// <summary>
        /// Gets fired when the PreviousAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousAmountChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the GlDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the GlDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the GlAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlAccountChanging;
        
        /// <summary>
        /// Gets fired when the GlAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GlAccountChanged;
        
        /// <summary>
        /// Gets fired before the LineNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineNumberChanging;
        
        /// <summary>
        /// Gets fired when the LineNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineNumberChanged;
        
        /// <summary>
        /// Gets fired before the LineVersion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineVersionChanging;
        
        /// <summary>
        /// Gets fired when the LineVersion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineVersionChanged;
        
        /// <summary>
        /// Gets fired before the ErpQuoteLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpQuoteLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpPayableLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPayableLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpPayableLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPayableLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpRecLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpRecLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ContainerErpInvoiceLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerErpInvoiceLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ContainerErpInvoiceLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerErpInvoiceLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpRecDelvLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecDelvLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpRecDelvLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecDelvLineItemChanged;
        
        /// <summary>
        /// Gets fired before the BillPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillPeriodChanging;
        
        /// <summary>
        /// Gets fired when the BillPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillPeriodChanged;
        
        /// <summary>
        /// Gets fired before the ErpInvoice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceChanging;
        
        /// <summary>
        /// Gets fired when the ErpInvoice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceChanged;
        
        private static ITypedElement RetrieveNetAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("netAmount")));
        }
        
        /// <summary>
        /// Raises the NetAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("lineAmount")));
        }
        
        /// <summary>
        /// Raises the LineAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreviousAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("previousAmount")));
        }
        
        /// <summary>
        /// Raises the PreviousAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGlDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("glDateTime")));
        }
        
        /// <summary>
        /// Raises the GlDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GlDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGlAccountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("glAccount")));
        }
        
        /// <summary>
        /// Raises the GlAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GlAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGlAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GlAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("lineNumber")));
        }
        
        /// <summary>
        /// Raises the LineNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineVersionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("lineVersion")));
        }
        
        /// <summary>
        /// Raises the LineVersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineVersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineVersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineVersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpQuoteLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpQuoteLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpQuoteLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpQuoteLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpQuoteLineItem = null;
        }
        
        private static ITypedElement RetrieveErpPayableLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpPayableLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpPayableLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPayableLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPayableLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPayableLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPayableLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPayableLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPayableLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPayableLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpPayableLineItem = null;
        }
        
        private static ITypedElement RetrieveErpRecLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpRecLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpRecLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpRecLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpRecLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpRecLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpRecLineItem = null;
        }
        
        private static ITypedElement RetrieveSettlementsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("Settlements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Settlements", e, _settlementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Settlements", e, _settlementsReference);
        }
        
        private static ITypedElement RetrieveWorkBillingInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("WorkBillingInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkBillingInfosCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkBillingInfos", e, _workBillingInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkBillingInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkBillingInfos", e, _workBillingInfosReference);
        }
        
        private static ITypedElement RetrieveMarketFactorsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("MarketFactors")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MarketFactors", e, _marketFactorsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketFactors", e, _marketFactorsReference);
        }
        
        private static ITypedElement RetrieveErpPaymentsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpPayments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPayments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPaymentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPayments", e, _erpPaymentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPayments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPaymentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPayments", e, _erpPaymentsReference);
        }
        
        private static ITypedElement RetrieveContainerErpInvoiceLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ContainerErpInvoiceLineItem")));
        }
        
        /// <summary>
        /// Raises the ContainerErpInvoiceLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerErpInvoiceLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerErpInvoiceLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContainerErpInvoiceLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerErpInvoiceLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerErpInvoiceLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ContainerErpInvoiceLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetContainerErpInvoiceLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ContainerErpInvoiceLineItem = null;
        }
        
        private static ITypedElement RetrieveErpRecDelvLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpRecDelvLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpRecDelvLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecDelvLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecDelvLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpRecDelvLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecDelvLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecDelvLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpRecDelvLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpRecDelvLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpRecDelvLineItem = null;
        }
        
        private static ITypedElement RetrieveBillPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("billPeriod")));
        }
        
        /// <summary>
        /// Raises the BillPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillPeriod(object sender, System.EventArgs eventArgs)
        {
            this.BillPeriod = null;
        }
        
        private static ITypedElement RetrieveUserAttributesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("UserAttributes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e, _userAttributesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e, _userAttributesReference);
        }
        
        private static ITypedElement RetrieveErpInvoiceReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpInvoice")));
        }
        
        /// <summary>
        /// Raises the ErpInvoiceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInvoiceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInvoice property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInvoice(object sender, System.EventArgs eventArgs)
        {
            this.ErpInvoice = null;
        }
        
        private static ITypedElement RetrieveCustomerBillingInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("CustomerBillingInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerBillingInfosCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CustomerBillingInfos", e, _customerBillingInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerBillingInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerBillingInfos", e, _customerBillingInfosReference);
        }
        
        private static ITypedElement RetrieveComponentErpInvoiceLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ComponentErpInvoiceLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ComponentErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentErpInvoiceLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ComponentErpInvoiceLineItems", e, _componentErpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ComponentErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentErpInvoiceLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ComponentErpInvoiceLineItems", e, _componentErpInvoiceLineItemsReference);
        }
        
        private static ITypedElement RetrieveErpJournalEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoiceLineItem.ClassInstance)).Resolve("ErpJournalEntries")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NETAMOUNT"))
            {
                return this.NetAmount;
            }
            if ((attribute == "LINEAMOUNT"))
            {
                return this.LineAmount;
            }
            if ((attribute == "PREVIOUSAMOUNT"))
            {
                return this.PreviousAmount;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "GLDATETIME"))
            {
                return this.GlDateTime;
            }
            if ((attribute == "GLACCOUNT"))
            {
                return this.GlAccount;
            }
            if ((attribute == "LINENUMBER"))
            {
                return this.LineNumber;
            }
            if ((attribute == "LINEVERSION"))
            {
                return this.LineVersion;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SETTLEMENTS"))
            {
                return this._settlements;
            }
            if ((feature == "WORKBILLINGINFOS"))
            {
                return this._workBillingInfos;
            }
            if ((feature == "MARKETFACTORS"))
            {
                return this._marketFactors;
            }
            if ((feature == "ERPPAYMENTS"))
            {
                return this._erpPayments;
            }
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            if ((feature == "CUSTOMERBILLINGINFOS"))
            {
                return this._customerBillingInfos;
            }
            if ((feature == "COMPONENTERPINVOICELINEITEMS"))
            {
                return this._componentErpInvoiceLineItems;
            }
            if ((feature == "ERPJOURNALENTRIES"))
            {
                return this._erpJournalEntries;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPQUOTELINEITEM"))
            {
                this.ErpQuoteLineItem = ((IErpQuoteLineItem)(value));
                return;
            }
            if ((feature == "ERPPAYABLELINEITEM"))
            {
                this.ErpPayableLineItem = ((IErpPayableLineItem)(value));
                return;
            }
            if ((feature == "ERPRECLINEITEM"))
            {
                this.ErpRecLineItem = ((IErpRecLineItem)(value));
                return;
            }
            if ((feature == "CONTAINERERPINVOICELINEITEM"))
            {
                this.ContainerErpInvoiceLineItem = ((IErpInvoiceLineItem)(value));
                return;
            }
            if ((feature == "ERPRECDELVLINEITEM"))
            {
                this.ErpRecDelvLineItem = ((IErpRecDelvLineItem)(value));
                return;
            }
            if ((feature == "BILLPERIOD"))
            {
                this.BillPeriod = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "ERPINVOICE"))
            {
                this.ErpInvoice = ((IErpInvoice)(value));
                return;
            }
            if ((feature == "NETAMOUNT"))
            {
                this.NetAmount = ((float)(value));
                return;
            }
            if ((feature == "LINEAMOUNT"))
            {
                this.LineAmount = ((float)(value));
                return;
            }
            if ((feature == "PREVIOUSAMOUNT"))
            {
                this.PreviousAmount = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ErpInvoiceLineItemKind)(value));
                return;
            }
            if ((feature == "GLDATETIME"))
            {
                this.GlDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "GLACCOUNT"))
            {
                this.GlAccount = ((string)(value));
                return;
            }
            if ((feature == "LINENUMBER"))
            {
                this.LineNumber = ((string)(value));
                return;
            }
            if ((feature == "LINEVERSION"))
            {
                this.LineVersion = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            if ((attribute == "ErpPayableLineItem"))
            {
                return new ErpPayableLineItemProxy(this);
            }
            if ((attribute == "ErpRecLineItem"))
            {
                return new ErpRecLineItemProxy(this);
            }
            if ((attribute == "ContainerErpInvoiceLineItem"))
            {
                return new ContainerErpInvoiceLineItemProxy(this);
            }
            if ((attribute == "ErpRecDelvLineItem"))
            {
                return new ErpRecDelvLineItemProxy(this);
            }
            if ((attribute == "BillPeriod"))
            {
                return new BillPeriodProxy(this);
            }
            if ((attribute == "ErpInvoice"))
            {
                return new ErpInvoiceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            if ((reference == "ErpPayableLineItem"))
            {
                return new ErpPayableLineItemProxy(this);
            }
            if ((reference == "ErpRecLineItem"))
            {
                return new ErpRecLineItemProxy(this);
            }
            if ((reference == "ContainerErpInvoiceLineItem"))
            {
                return new ContainerErpInvoiceLineItemProxy(this);
            }
            if ((reference == "ErpRecDelvLineItem"))
            {
                return new ErpRecDelvLineItemProxy(this);
            }
            if ((reference == "BillPeriod"))
            {
                return new BillPeriodProxy(this);
            }
            if ((reference == "ErpInvoice"))
            {
                return new ErpInvoiceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "InvoiceLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpInvoiceLineItem class
        /// </summary>
        public class ErpInvoiceLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpInvoiceLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpInvoiceLineItemReferencedElementsCollection(ErpInvoiceLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpQuoteLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPayableLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpRecLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Settlements.Count);
                    count = (count + this._parent.WorkBillingInfos.Count);
                    count = (count + this._parent.MarketFactors.Count);
                    count = (count + this._parent.ErpPayments.Count);
                    if ((this._parent.ContainerErpInvoiceLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpRecDelvLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillPeriod != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.UserAttributes.Count);
                    if ((this._parent.ErpInvoice != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CustomerBillingInfos.Count);
                    count = (count + this._parent.ComponentErpInvoiceLineItems.Count);
                    count = (count + this._parent.ErpJournalEntries.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpQuoteLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpPayableLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpRecLineItemChanged += this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkBillingInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MarketFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPayments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContainerErpInvoiceLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpRecDelvLineItemChanged += this.PropagateValueChanges;
                this._parent.BillPeriodChanged += this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpInvoiceChanged += this.PropagateValueChanges;
                this._parent.CustomerBillingInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ComponentErpInvoiceLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpQuoteLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpPayableLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpRecLineItemChanged -= this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkBillingInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MarketFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPayments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContainerErpInvoiceLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpRecDelvLineItemChanged -= this.PropagateValueChanges;
                this._parent.BillPeriodChanged -= this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpInvoiceChanged -= this.PropagateValueChanges;
                this._parent.CustomerBillingInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ComponentErpInvoiceLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpQuoteLineItem == null))
                {
                    IErpQuoteLineItem erpQuoteLineItemCasted = item.As<IErpQuoteLineItem>();
                    if ((erpQuoteLineItemCasted != null))
                    {
                        this._parent.ErpQuoteLineItem = erpQuoteLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPayableLineItem == null))
                {
                    IErpPayableLineItem erpPayableLineItemCasted = item.As<IErpPayableLineItem>();
                    if ((erpPayableLineItemCasted != null))
                    {
                        this._parent.ErpPayableLineItem = erpPayableLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpRecLineItem == null))
                {
                    IErpRecLineItem erpRecLineItemCasted = item.As<IErpRecLineItem>();
                    if ((erpRecLineItemCasted != null))
                    {
                        this._parent.ErpRecLineItem = erpRecLineItemCasted;
                        return;
                    }
                }
                ISettlement settlementsCasted = item.As<ISettlement>();
                if ((settlementsCasted != null))
                {
                    this._parent.Settlements.Add(settlementsCasted);
                }
                IWorkBillingInfo workBillingInfosCasted = item.As<IWorkBillingInfo>();
                if ((workBillingInfosCasted != null))
                {
                    this._parent.WorkBillingInfos.Add(workBillingInfosCasted);
                }
                IMarketFactors marketFactorsCasted = item.As<IMarketFactors>();
                if ((marketFactorsCasted != null))
                {
                    this._parent.MarketFactors.Add(marketFactorsCasted);
                }
                IErpPayment erpPaymentsCasted = item.As<IErpPayment>();
                if ((erpPaymentsCasted != null))
                {
                    this._parent.ErpPayments.Add(erpPaymentsCasted);
                }
                if ((this._parent.ContainerErpInvoiceLineItem == null))
                {
                    IErpInvoiceLineItem containerErpInvoiceLineItemCasted = item.As<IErpInvoiceLineItem>();
                    if ((containerErpInvoiceLineItemCasted != null))
                    {
                        this._parent.ContainerErpInvoiceLineItem = containerErpInvoiceLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpRecDelvLineItem == null))
                {
                    IErpRecDelvLineItem erpRecDelvLineItemCasted = item.As<IErpRecDelvLineItem>();
                    if ((erpRecDelvLineItemCasted != null))
                    {
                        this._parent.ErpRecDelvLineItem = erpRecDelvLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.BillPeriod == null))
                {
                    IDateTimeInterval billPeriodCasted = item.As<IDateTimeInterval>();
                    if ((billPeriodCasted != null))
                    {
                        this._parent.BillPeriod = billPeriodCasted;
                        return;
                    }
                }
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                if ((this._parent.ErpInvoice == null))
                {
                    IErpInvoice erpInvoiceCasted = item.As<IErpInvoice>();
                    if ((erpInvoiceCasted != null))
                    {
                        this._parent.ErpInvoice = erpInvoiceCasted;
                        return;
                    }
                }
                ICustomerBillingInfo customerBillingInfosCasted = item.As<ICustomerBillingInfo>();
                if ((customerBillingInfosCasted != null))
                {
                    this._parent.CustomerBillingInfos.Add(customerBillingInfosCasted);
                }
                IErpInvoiceLineItem componentErpInvoiceLineItemsCasted = item.As<IErpInvoiceLineItem>();
                if ((componentErpInvoiceLineItemsCasted != null))
                {
                    this._parent.ComponentErpInvoiceLineItems.Add(componentErpInvoiceLineItemsCasted);
                }
                IErpJournalEntry erpJournalEntriesCasted = item.As<IErpJournalEntry>();
                if ((erpJournalEntriesCasted != null))
                {
                    this._parent.ErpJournalEntries.Add(erpJournalEntriesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpQuoteLineItem = null;
                this._parent.ErpPayableLineItem = null;
                this._parent.ErpRecLineItem = null;
                this._parent.Settlements.Clear();
                this._parent.WorkBillingInfos.Clear();
                this._parent.MarketFactors.Clear();
                this._parent.ErpPayments.Clear();
                this._parent.ContainerErpInvoiceLineItem = null;
                this._parent.ErpRecDelvLineItem = null;
                this._parent.BillPeriod = null;
                this._parent.UserAttributes.Clear();
                this._parent.ErpInvoice = null;
                this._parent.CustomerBillingInfos.Clear();
                this._parent.ComponentErpInvoiceLineItems.Clear();
                this._parent.ErpJournalEntries.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpQuoteLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpPayableLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpRecLineItem))
                {
                    return true;
                }
                if (this._parent.Settlements.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkBillingInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.MarketFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPayments.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ContainerErpInvoiceLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpRecDelvLineItem))
                {
                    return true;
                }
                if ((item == this._parent.BillPeriod))
                {
                    return true;
                }
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpInvoice))
                {
                    return true;
                }
                if (this._parent.CustomerBillingInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.ComponentErpInvoiceLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpJournalEntries.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpQuoteLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpQuoteLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPayableLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpPayableLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpRecLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpRecLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> settlementsEnumerator = this._parent.Settlements.GetEnumerator();
                try
                {
                    for (
                    ; settlementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = settlementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    settlementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workBillingInfosEnumerator = this._parent.WorkBillingInfos.GetEnumerator();
                try
                {
                    for (
                    ; workBillingInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workBillingInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workBillingInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> marketFactorsEnumerator = this._parent.MarketFactors.GetEnumerator();
                try
                {
                    for (
                    ; marketFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPaymentsEnumerator = this._parent.ErpPayments.GetEnumerator();
                try
                {
                    for (
                    ; erpPaymentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPaymentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPaymentsEnumerator.Dispose();
                }
                if ((this._parent.ContainerErpInvoiceLineItem != null))
                {
                    array[arrayIndex] = this._parent.ContainerErpInvoiceLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpRecDelvLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpRecDelvLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillPeriod != null))
                {
                    array[arrayIndex] = this._parent.BillPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                if ((this._parent.ErpInvoice != null))
                {
                    array[arrayIndex] = this._parent.ErpInvoice;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> customerBillingInfosEnumerator = this._parent.CustomerBillingInfos.GetEnumerator();
                try
                {
                    for (
                    ; customerBillingInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerBillingInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerBillingInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> componentErpInvoiceLineItemsEnumerator = this._parent.ComponentErpInvoiceLineItems.GetEnumerator();
                try
                {
                    for (
                    ; componentErpInvoiceLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = componentErpInvoiceLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    componentErpInvoiceLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpJournalEntriesEnumerator = this._parent.ErpJournalEntries.GetEnumerator();
                try
                {
                    for (
                    ; erpJournalEntriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpJournalEntriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpJournalEntriesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpQuoteLineItem == item))
                {
                    this._parent.ErpQuoteLineItem = null;
                    return true;
                }
                if ((this._parent.ErpPayableLineItem == item))
                {
                    this._parent.ErpPayableLineItem = null;
                    return true;
                }
                if ((this._parent.ErpRecLineItem == item))
                {
                    this._parent.ErpRecLineItem = null;
                    return true;
                }
                ISettlement settlementItem = item.As<ISettlement>();
                if (((settlementItem != null) 
                            && this._parent.Settlements.Remove(settlementItem)))
                {
                    return true;
                }
                IWorkBillingInfo workBillingInfoItem = item.As<IWorkBillingInfo>();
                if (((workBillingInfoItem != null) 
                            && this._parent.WorkBillingInfos.Remove(workBillingInfoItem)))
                {
                    return true;
                }
                IMarketFactors marketFactorsItem = item.As<IMarketFactors>();
                if (((marketFactorsItem != null) 
                            && this._parent.MarketFactors.Remove(marketFactorsItem)))
                {
                    return true;
                }
                IErpPayment erpPaymentItem = item.As<IErpPayment>();
                if (((erpPaymentItem != null) 
                            && this._parent.ErpPayments.Remove(erpPaymentItem)))
                {
                    return true;
                }
                if ((this._parent.ContainerErpInvoiceLineItem == item))
                {
                    this._parent.ContainerErpInvoiceLineItem = null;
                    return true;
                }
                if ((this._parent.ErpRecDelvLineItem == item))
                {
                    this._parent.ErpRecDelvLineItem = null;
                    return true;
                }
                if ((this._parent.BillPeriod == item))
                {
                    this._parent.BillPeriod = null;
                    return true;
                }
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                if ((this._parent.ErpInvoice == item))
                {
                    this._parent.ErpInvoice = null;
                    return true;
                }
                ICustomerBillingInfo customerBillingInfoItem = item.As<ICustomerBillingInfo>();
                if (((customerBillingInfoItem != null) 
                            && this._parent.CustomerBillingInfos.Remove(customerBillingInfoItem)))
                {
                    return true;
                }
                IErpInvoiceLineItem erpInvoiceLineItemItem = item.As<IErpInvoiceLineItem>();
                if (((erpInvoiceLineItemItem != null) 
                            && this._parent.ComponentErpInvoiceLineItems.Remove(erpInvoiceLineItemItem)))
                {
                    return true;
                }
                IErpJournalEntry erpJournalEntryItem = item.As<IErpJournalEntry>();
                if (((erpJournalEntryItem != null) 
                            && this._parent.ErpJournalEntries.Remove(erpJournalEntryItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpQuoteLineItem).Concat(this._parent.ErpPayableLineItem).Concat(this._parent.ErpRecLineItem).Concat(this._parent.Settlements).Concat(this._parent.WorkBillingInfos).Concat(this._parent.MarketFactors).Concat(this._parent.ErpPayments).Concat(this._parent.ContainerErpInvoiceLineItem).Concat(this._parent.ErpRecDelvLineItem).Concat(this._parent.BillPeriod).Concat(this._parent.UserAttributes).Concat(this._parent.ErpInvoice).Concat(this._parent.CustomerBillingInfos).Concat(this._parent.ComponentErpInvoiceLineItems).Concat(this._parent.ErpJournalEntries).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netAmount property
        /// </summary>
        private sealed class NetAmountProxy : ModelPropertyChange<IErpInvoiceLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetAmountProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "netAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetAmount;
                }
                set
                {
                    this.ModelElement.NetAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineAmount property
        /// </summary>
        private sealed class LineAmountProxy : ModelPropertyChange<IErpInvoiceLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineAmountProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "lineAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LineAmount;
                }
                set
                {
                    this.ModelElement.LineAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousAmount property
        /// </summary>
        private sealed class PreviousAmountProxy : ModelPropertyChange<IErpInvoiceLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousAmountProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "previousAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PreviousAmount;
                }
                set
                {
                    this.ModelElement.PreviousAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IErpInvoiceLineItem, Nullable<ErpInvoiceLineItemKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ErpInvoiceLineItemKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the glDateTime property
        /// </summary>
        private sealed class GlDateTimeProxy : ModelPropertyChange<IErpInvoiceLineItem, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GlDateTimeProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "glDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.GlDateTime;
                }
                set
                {
                    this.ModelElement.GlDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the glAccount property
        /// </summary>
        private sealed class GlAccountProxy : ModelPropertyChange<IErpInvoiceLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GlAccountProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "glAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GlAccount;
                }
                set
                {
                    this.ModelElement.GlAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineNumber property
        /// </summary>
        private sealed class LineNumberProxy : ModelPropertyChange<IErpInvoiceLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineNumberProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "lineNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LineNumber;
                }
                set
                {
                    this.ModelElement.LineNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineVersion property
        /// </summary>
        private sealed class LineVersionProxy : ModelPropertyChange<IErpInvoiceLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineVersionProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "lineVersion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LineVersion;
                }
                set
                {
                    this.ModelElement.LineVersion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpQuoteLineItem property
        /// </summary>
        private sealed class ErpQuoteLineItemProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpQuoteLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpQuoteLineItemProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ErpQuoteLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpQuoteLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpQuoteLineItem;
                }
                set
                {
                    this.ModelElement.ErpQuoteLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPayableLineItem property
        /// </summary>
        private sealed class ErpPayableLineItemProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpPayableLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPayableLineItemProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ErpPayableLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPayableLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpPayableLineItem;
                }
                set
                {
                    this.ModelElement.ErpPayableLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpRecLineItem property
        /// </summary>
        private sealed class ErpRecLineItemProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpRecLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpRecLineItemProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ErpRecLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpRecLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpRecLineItem;
                }
                set
                {
                    this.ModelElement.ErpRecLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ContainerErpInvoiceLineItem property
        /// </summary>
        private sealed class ContainerErpInvoiceLineItemProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpInvoiceLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContainerErpInvoiceLineItemProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ContainerErpInvoiceLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoiceLineItem Value
            {
                get
                {
                    return this.ModelElement.ContainerErpInvoiceLineItem;
                }
                set
                {
                    this.ModelElement.ContainerErpInvoiceLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpRecDelvLineItem property
        /// </summary>
        private sealed class ErpRecDelvLineItemProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpRecDelvLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpRecDelvLineItemProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ErpRecDelvLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpRecDelvLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpRecDelvLineItem;
                }
                set
                {
                    this.ModelElement.ErpRecDelvLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billPeriod property
        /// </summary>
        private sealed class BillPeriodProxy : ModelPropertyChange<IErpInvoiceLineItem, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillPeriodProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "billPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.BillPeriod;
                }
                set
                {
                    this.ModelElement.BillPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInvoice property
        /// </summary>
        private sealed class ErpInvoiceProxy : ModelPropertyChange<IErpInvoiceLineItem, IErpInvoice>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInvoiceProxy(IErpInvoiceLineItem modelElement) : 
                    base(modelElement, "ErpInvoice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoice Value
            {
                get
                {
                    return this.ModelElement.ErpInvoice;
                }
                set
                {
                    this.ModelElement.ErpInvoice = value;
                }
            }
        }
    }
}

