//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the OrgOrgRole class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Org" +
        "OrgRole")]
    [DebuggerDisplayAttribute("OrgOrgRole {UUID}")]
    public class OrgOrgRole : Role, IOrgOrgRole, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ClientID property
        /// </summary>
        private string _clientID;
        
        /// <summary>
        /// The backing field for the ChildOrganisation property
        /// </summary>
        private IErpOrganisation _childOrganisation;
        
        /// <summary>
        /// The backing field for the ParentOrganisation property
        /// </summary>
        private IErpOrganisation _parentOrganisation;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The clientID property
        /// </summary>
        [XmlElementNameAttribute("clientID")]
        [XmlAttributeAttribute(true)]
        public virtual string ClientID
        {
            get
            {
                return this._clientID;
            }
            set
            {
                if ((this._clientID != value))
                {
                    string old = this._clientID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClientIDChanging(e);
                    this.OnPropertyChanging("ClientID", e);
                    this._clientID = value;
                    this.OnClientIDChanged(e);
                    this.OnPropertyChanged("ClientID", e);
                }
            }
        }
        
        /// <summary>
        /// The ChildOrganisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ParentOrganisationRoles")]
        public virtual IErpOrganisation ChildOrganisation
        {
            get
            {
                return this._childOrganisation;
            }
            set
            {
                if ((this._childOrganisation != value))
                {
                    IErpOrganisation old = this._childOrganisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChildOrganisationChanging(e);
                    this.OnPropertyChanging("ChildOrganisation", e);
                    this._childOrganisation = value;
                    if ((old != null))
                    {
                        old.ParentOrganisationRoles.Remove(this);
                        old.Deleted -= this.OnResetChildOrganisation;
                    }
                    if ((value != null))
                    {
                        value.ParentOrganisationRoles.Add(this);
                        value.Deleted += this.OnResetChildOrganisation;
                    }
                    this.OnChildOrganisationChanged(e);
                    this.OnPropertyChanged("ChildOrganisation", e);
                }
            }
        }
        
        /// <summary>
        /// The ParentOrganisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildOrganisationRoles")]
        public virtual IErpOrganisation ParentOrganisation
        {
            get
            {
                return this._parentOrganisation;
            }
            set
            {
                if ((this._parentOrganisation != value))
                {
                    IErpOrganisation old = this._parentOrganisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentOrganisationChanging(e);
                    this.OnPropertyChanging("ParentOrganisation", e);
                    this._parentOrganisation = value;
                    if ((old != null))
                    {
                        old.ChildOrganisationRoles.Remove(this);
                        old.Deleted -= this.OnResetParentOrganisation;
                    }
                    if ((value != null))
                    {
                        value.ChildOrganisationRoles.Add(this);
                        value.Deleted += this.OnResetParentOrganisation;
                    }
                    this.OnParentOrganisationChanged(e);
                    this.OnPropertyChanged("ParentOrganisation", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OrgOrgRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Org" +
                            "OrgRole")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ClientID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClientIDChanging;
        
        /// <summary>
        /// Gets fired when the ClientID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClientIDChanged;
        
        /// <summary>
        /// Gets fired before the ChildOrganisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChildOrganisationChanging;
        
        /// <summary>
        /// Gets fired when the ChildOrganisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChildOrganisationChanged;
        
        /// <summary>
        /// Gets fired before the ParentOrganisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentOrganisationChanging;
        
        /// <summary>
        /// Gets fired when the ParentOrganisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentOrganisationChanged;
        
        /// <summary>
        /// Raises the ClientIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClientIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClientIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClientIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClientIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClientIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChildOrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChildOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChildOrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChildOrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChildOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChildOrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChildOrganisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChildOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.ChildOrganisation = null;
        }
        
        /// <summary>
        /// Raises the ParentOrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentOrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentOrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentOrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParentOrganisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParentOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.ParentOrganisation = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CLIENTID"))
            {
                return this.ClientID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CHILDORGANISATION"))
            {
                this.ChildOrganisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "PARENTORGANISATION"))
            {
                this.ParentOrganisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "CLIENTID"))
            {
                this.ClientID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ChildOrganisation"))
            {
                return new ChildOrganisationProxy(this);
            }
            if ((attribute == "ParentOrganisation"))
            {
                return new ParentOrganisationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ChildOrganisation"))
            {
                return new ChildOrganisationProxy(this);
            }
            if ((reference == "ParentOrganisation"))
            {
                return new ParentOrganisationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Org" +
                        "OrgRole")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OrgOrgRole class
        /// </summary>
        public class OrgOrgRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OrgOrgRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrgOrgRoleReferencedElementsCollection(OrgOrgRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ChildOrganisation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ParentOrganisation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ChildOrganisationChanged += this.PropagateValueChanges;
                this._parent.ParentOrganisationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ChildOrganisationChanged -= this.PropagateValueChanges;
                this._parent.ParentOrganisationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ChildOrganisation == null))
                {
                    IErpOrganisation childOrganisationCasted = item.As<IErpOrganisation>();
                    if ((childOrganisationCasted != null))
                    {
                        this._parent.ChildOrganisation = childOrganisationCasted;
                        return;
                    }
                }
                if ((this._parent.ParentOrganisation == null))
                {
                    IErpOrganisation parentOrganisationCasted = item.As<IErpOrganisation>();
                    if ((parentOrganisationCasted != null))
                    {
                        this._parent.ParentOrganisation = parentOrganisationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ChildOrganisation = null;
                this._parent.ParentOrganisation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ChildOrganisation))
                {
                    return true;
                }
                if ((item == this._parent.ParentOrganisation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ChildOrganisation != null))
                {
                    array[arrayIndex] = this._parent.ChildOrganisation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ParentOrganisation != null))
                {
                    array[arrayIndex] = this._parent.ParentOrganisation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ChildOrganisation == item))
                {
                    this._parent.ChildOrganisation = null;
                    return true;
                }
                if ((this._parent.ParentOrganisation == item))
                {
                    this._parent.ParentOrganisation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ChildOrganisation).Concat(this._parent.ParentOrganisation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the clientID property
        /// </summary>
        private sealed class ClientIDProxy : ModelPropertyChange<IOrgOrgRole, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClientIDProxy(IOrgOrgRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ClientID;
                }
                set
                {
                    this.ModelElement.ClientID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClientIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClientIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChildOrganisation property
        /// </summary>
        private sealed class ChildOrganisationProxy : ModelPropertyChange<IOrgOrgRole, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChildOrganisationProxy(IOrgOrgRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.ChildOrganisation;
                }
                set
                {
                    this.ModelElement.ChildOrganisation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChildOrganisationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChildOrganisationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentOrganisation property
        /// </summary>
        private sealed class ParentOrganisationProxy : ModelPropertyChange<IOrgOrgRole, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentOrganisationProxy(IOrgOrgRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.ParentOrganisation;
                }
                set
                {
                    this.ModelElement.ParentOrganisation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentOrganisationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentOrganisationChanged -= handler;
            }
        }
    }
}

