//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpLedBudLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "LedBudLineItem")]
    [DebuggerDisplayAttribute("ErpLedBudLineItem {UUID}")]
    public class ErpLedBudLineItem : IdentifiedObject, IErpLedBudLineItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ErpLedgerBudget property
        /// </summary>
        private IErpLedgerBudget _erpLedgerBudget;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the ErpLedBudLineItem_ property
        /// </summary>
        private IErpLedgerEntry _erpLedBudLineItem_;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ErpLedgerBudget property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedBudLineItems")]
        public virtual IErpLedgerBudget ErpLedgerBudget
        {
            get
            {
                return this._erpLedgerBudget;
            }
            set
            {
                if ((this._erpLedgerBudget != value))
                {
                    IErpLedgerBudget old = this._erpLedgerBudget;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpLedgerBudgetChanging(e);
                    this.OnPropertyChanging("ErpLedgerBudget", e);
                    this._erpLedgerBudget = value;
                    if ((old != null))
                    {
                        old.ErpLedBudLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpLedgerBudget;
                    }
                    if ((value != null))
                    {
                        value.ErpLedBudLineItems.Add(this);
                        value.Deleted += this.OnResetErpLedgerBudget;
                    }
                    this.OnErpLedgerBudgetChanged(e);
                    this.OnPropertyChanged("ErpLedgerBudget", e);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpLedBudLineItem property
        /// </summary>
        [XmlElementNameAttribute("ErpLedBudLineItem")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedgerEntry")]
        public virtual IErpLedgerEntry ErpLedBudLineItem_
        {
            get
            {
                return this._erpLedBudLineItem_;
            }
            set
            {
                if ((this._erpLedBudLineItem_ != value))
                {
                    IErpLedgerEntry old = this._erpLedBudLineItem_;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpLedBudLineItem_Changing(e);
                    this.OnPropertyChanging("ErpLedBudLineItem_", e);
                    this._erpLedBudLineItem_ = value;
                    if ((old != null))
                    {
                        old.ErpLedgerEntry_ = null;
                        old.Deleted -= this.OnResetErpLedBudLineItem_;
                    }
                    if ((value != null))
                    {
                        value.ErpLedgerEntry_ = this;
                        value.Deleted += this.OnResetErpLedBudLineItem_;
                    }
                    this.OnErpLedBudLineItem_Changed(e);
                    this.OnPropertyChanged("ErpLedBudLineItem_", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpLedBudLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "LedBudLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ErpLedgerBudget property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerBudgetChanging;
        
        /// <summary>
        /// Gets fired when the ErpLedgerBudget property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerBudgetChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpLedBudLineItem_ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedBudLineItem_Changing;
        
        /// <summary>
        /// Gets fired when the ErpLedBudLineItem_ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedBudLineItem_Changed;
        
        /// <summary>
        /// Raises the ErpLedgerBudgetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerBudgetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerBudgetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpLedgerBudgetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerBudgetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerBudgetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpLedgerBudget property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpLedgerBudget(object sender, System.EventArgs eventArgs)
        {
            this.ErpLedgerBudget = null;
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Raises the ErpLedBudLineItem_Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedBudLineItem_Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedBudLineItem_Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpLedBudLineItem_Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedBudLineItem_Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedBudLineItem_Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpLedBudLineItem_ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpLedBudLineItem_(object sender, System.EventArgs eventArgs)
        {
            this.ErpLedBudLineItem_ = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPLEDGERBUDGET"))
            {
                this.ErpLedgerBudget = ((IErpLedgerBudget)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPLEDBUDLINEITEM"))
            {
                this.ErpLedBudLineItem_ = ((IErpLedgerEntry)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpLedgerBudget"))
            {
                return new ErpLedgerBudgetProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpLedBudLineItem_"))
            {
                return new ErpLedBudLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpLedgerBudget"))
            {
                return new ErpLedgerBudgetProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpLedBudLineItem_"))
            {
                return new ErpLedBudLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "LedBudLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpLedBudLineItem class
        /// </summary>
        public class ErpLedBudLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpLedBudLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpLedBudLineItemReferencedElementsCollection(ErpLedBudLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpLedgerBudget != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpLedBudLineItem_ != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpLedgerBudgetChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpLedBudLineItem_Changed += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpLedgerBudgetChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpLedBudLineItem_Changed -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpLedgerBudget == null))
                {
                    IErpLedgerBudget erpLedgerBudgetCasted = item.As<IErpLedgerBudget>();
                    if ((erpLedgerBudgetCasted != null))
                    {
                        this._parent.ErpLedgerBudget = erpLedgerBudgetCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.ErpLedBudLineItem_ == null))
                {
                    IErpLedgerEntry erpLedBudLineItemCasted = item.As<IErpLedgerEntry>();
                    if ((erpLedBudLineItemCasted != null))
                    {
                        this._parent.ErpLedBudLineItem_ = erpLedBudLineItemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpLedgerBudget = null;
                this._parent.Status = null;
                this._parent.ErpLedBudLineItem_ = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpLedgerBudget))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.ErpLedBudLineItem_))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpLedgerBudget != null))
                {
                    array[arrayIndex] = this._parent.ErpLedgerBudget;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpLedBudLineItem_ != null))
                {
                    array[arrayIndex] = this._parent.ErpLedBudLineItem_;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpLedgerBudget == item))
                {
                    this._parent.ErpLedgerBudget = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.ErpLedBudLineItem_ == item))
                {
                    this._parent.ErpLedBudLineItem_ = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpLedgerBudget).Concat(this._parent.Status).Concat(this._parent.ErpLedBudLineItem_).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpLedgerBudget property
        /// </summary>
        private sealed class ErpLedgerBudgetProxy : ModelPropertyChange<IErpLedBudLineItem, IErpLedgerBudget>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpLedgerBudgetProxy(IErpLedBudLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpLedgerBudget Value
            {
                get
                {
                    return this.ModelElement.ErpLedgerBudget;
                }
                set
                {
                    this.ModelElement.ErpLedgerBudget = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpLedgerBudgetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpLedgerBudgetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpLedBudLineItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpLedBudLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpLedBudLineItem property
        /// </summary>
        private sealed class ErpLedBudLineItemProxy : ModelPropertyChange<IErpLedBudLineItem, IErpLedgerEntry>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpLedBudLineItemProxy(IErpLedBudLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpLedgerEntry Value
            {
                get
                {
                    return this.ModelElement.ErpLedBudLineItem_;
                }
                set
                {
                    this.ModelElement.ErpLedBudLineItem_ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpLedBudLineItem_Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpLedBudLineItem_Changed -= handler;
            }
        }
    }
}

