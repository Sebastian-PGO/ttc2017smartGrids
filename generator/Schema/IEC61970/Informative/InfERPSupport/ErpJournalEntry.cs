//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpJournalEntry class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "JournalEntry")]
    [DebuggerDisplayAttribute("ErpJournalEntry {UUID}")]
    public partial class ErpJournalEntry : IdentifiedObject, IErpJournalEntry, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AccountID property
        /// </summary>
        private string _accountID;
        
        private static Lazy<ITypedElement> _accountIDAttribute = new Lazy<ITypedElement>(RetrieveAccountIDAttribute);
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the PostingDateTime property
        /// </summary>
        private DateTime _postingDateTime;
        
        private static Lazy<ITypedElement> _postingDateTimeAttribute = new Lazy<ITypedElement>(RetrievePostingDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the TransactionDateTime property
        /// </summary>
        private DateTime _transactionDateTime;
        
        private static Lazy<ITypedElement> _transactionDateTimeAttribute = new Lazy<ITypedElement>(RetrieveTransactionDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the SourceID property
        /// </summary>
        private string _sourceID;
        
        private static Lazy<ITypedElement> _sourceIDAttribute = new Lazy<ITypedElement>(RetrieveSourceIDAttribute);
        
        private static Lazy<ITypedElement> _erpLedgerEntryReference = new Lazy<ITypedElement>(RetrieveErpLedgerEntryReference);
        
        /// <summary>
        /// The backing field for the ErpLedgerEntry property
        /// </summary>
        private IErpLedgerEntry _erpLedgerEntry;
        
        private static Lazy<ITypedElement> _erpJournalReference = new Lazy<ITypedElement>(RetrieveErpJournalReference);
        
        /// <summary>
        /// The backing field for the ErpJournal property
        /// </summary>
        private IErpJournal _erpJournal;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _costTypesReference = new Lazy<ITypedElement>(RetrieveCostTypesReference);
        
        /// <summary>
        /// The backing field for the CostTypes property
        /// </summary>
        private ErpJournalEntryCostTypesCollection _costTypes;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItem property
        /// </summary>
        private IErpInvoiceLineItem _erpInvoiceLineItem;
        
        private static Lazy<ITypedElement> _erpPayableLineItemsReference = new Lazy<ITypedElement>(RetrieveErpPayableLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpPayableLineItems property
        /// </summary>
        private ErpJournalEntryErpPayableLineItemsCollection _erpPayableLineItems;
        
        private static Lazy<ITypedElement> _erpRecLineItemsReference = new Lazy<ITypedElement>(RetrieveErpRecLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpRecLineItems property
        /// </summary>
        private ErpJournalEntryErpRecLineItemsCollection _erpRecLineItems;
        
        private static IClass _classInstance;
        
        public ErpJournalEntry()
        {
            this._costTypes = new ErpJournalEntryCostTypesCollection(this);
            this._costTypes.CollectionChanging += this.CostTypesCollectionChanging;
            this._costTypes.CollectionChanged += this.CostTypesCollectionChanged;
            this._erpPayableLineItems = new ErpJournalEntryErpPayableLineItemsCollection(this);
            this._erpPayableLineItems.CollectionChanging += this.ErpPayableLineItemsCollectionChanging;
            this._erpPayableLineItems.CollectionChanged += this.ErpPayableLineItemsCollectionChanged;
            this._erpRecLineItems = new ErpJournalEntryErpRecLineItemsCollection(this);
            this._erpRecLineItems.CollectionChanging += this.ErpRecLineItemsCollectionChanging;
            this._erpRecLineItems.CollectionChanged += this.ErpRecLineItemsCollectionChanged;
        }
        
        /// <summary>
        /// The accountID property
        /// </summary>
        [XmlElementNameAttribute("accountID")]
        [XmlAttributeAttribute(true)]
        public virtual string AccountID
        {
            get
            {
                return this._accountID;
            }
            set
            {
                if ((this._accountID != value))
                {
                    string old = this._accountID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountIDChanging(e);
                    this.OnPropertyChanging("AccountID", e, _accountIDAttribute);
                    this._accountID = value;
                    this.OnAccountIDChanged(e);
                    this.OnPropertyChanged("AccountID", e, _accountIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The postingDateTime property
        /// </summary>
        [XmlElementNameAttribute("postingDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PostingDateTime
        {
            get
            {
                return this._postingDateTime;
            }
            set
            {
                if ((this._postingDateTime != value))
                {
                    DateTime old = this._postingDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPostingDateTimeChanging(e);
                    this.OnPropertyChanging("PostingDateTime", e, _postingDateTimeAttribute);
                    this._postingDateTime = value;
                    this.OnPostingDateTimeChanged(e);
                    this.OnPropertyChanged("PostingDateTime", e, _postingDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transactionDateTime property
        /// </summary>
        [XmlElementNameAttribute("transactionDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TransactionDateTime
        {
            get
            {
                return this._transactionDateTime;
            }
            set
            {
                if ((this._transactionDateTime != value))
                {
                    DateTime old = this._transactionDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionDateTimeChanging(e);
                    this.OnPropertyChanging("TransactionDateTime", e, _transactionDateTimeAttribute);
                    this._transactionDateTime = value;
                    this.OnTransactionDateTimeChanged(e);
                    this.OnPropertyChanged("TransactionDateTime", e, _transactionDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sourceID property
        /// </summary>
        [XmlElementNameAttribute("sourceID")]
        [XmlAttributeAttribute(true)]
        public virtual string SourceID
        {
            get
            {
                return this._sourceID;
            }
            set
            {
                if ((this._sourceID != value))
                {
                    string old = this._sourceID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceIDChanging(e);
                    this.OnPropertyChanging("SourceID", e, _sourceIDAttribute);
                    this._sourceID = value;
                    this.OnSourceIDChanged(e);
                    this.OnPropertyChanged("SourceID", e, _sourceIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpLedgerEntry property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJounalEntry")]
        public virtual IErpLedgerEntry ErpLedgerEntry
        {
            get
            {
                return this._erpLedgerEntry;
            }
            set
            {
                if ((this._erpLedgerEntry != value))
                {
                    IErpLedgerEntry old = this._erpLedgerEntry;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpLedgerEntryChanging(e);
                    this.OnPropertyChanging("ErpLedgerEntry", e, _erpLedgerEntryReference);
                    this._erpLedgerEntry = value;
                    if ((old != null))
                    {
                        old.ErpJounalEntry = null;
                        old.Deleted -= this.OnResetErpLedgerEntry;
                    }
                    if ((value != null))
                    {
                        value.ErpJounalEntry = this;
                        value.Deleted += this.OnResetErpLedgerEntry;
                    }
                    this.OnErpLedgerEntryChanged(e);
                    this.OnPropertyChanged("ErpLedgerEntry", e, _erpLedgerEntryReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpJournal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJournalEntries")]
        public virtual IErpJournal ErpJournal
        {
            get
            {
                return this._erpJournal;
            }
            set
            {
                if ((this._erpJournal != value))
                {
                    IErpJournal old = this._erpJournal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpJournalChanging(e);
                    this.OnPropertyChanging("ErpJournal", e, _erpJournalReference);
                    this._erpJournal = value;
                    if ((old != null))
                    {
                        old.ErpJournalEntries.Remove(this);
                        old.Deleted -= this.OnResetErpJournal;
                    }
                    if ((value != null))
                    {
                        value.ErpJournalEntries.Add(this);
                        value.Deleted += this.OnResetErpJournal;
                    }
                    this.OnErpJournalChanged(e);
                    this.OnPropertyChanged("ErpJournal", e, _erpJournalReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The CostTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJournalEntries")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICostType> CostTypes
        {
            get
            {
                return this._costTypes;
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJournalEntries")]
        public virtual IErpInvoiceLineItem ErpInvoiceLineItem
        {
            get
            {
                return this._erpInvoiceLineItem;
            }
            set
            {
                if ((this._erpInvoiceLineItem != value))
                {
                    IErpInvoiceLineItem old = this._erpInvoiceLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInvoiceLineItemChanging(e);
                    this.OnPropertyChanging("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                    this._erpInvoiceLineItem = value;
                    if ((old != null))
                    {
                        old.ErpJournalEntries.Remove(this);
                        old.Deleted -= this.OnResetErpInvoiceLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpJournalEntries.Add(this);
                        value.Deleted += this.OnResetErpInvoiceLineItem;
                    }
                    this.OnErpInvoiceLineItemChanged(e);
                    this.OnPropertyChanged("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPayableLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJournalEntries")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPayableLineItem> ErpPayableLineItems
        {
            get
            {
                return this._erpPayableLineItems;
            }
        }
        
        /// <summary>
        /// The ErpRecLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpJournalEntries")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpRecLineItem> ErpRecLineItems
        {
            get
            {
                return this._erpRecLineItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpJournalEntryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "JournalEntry")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AccountID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountIDChanging;
        
        /// <summary>
        /// Gets fired when the AccountID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountIDChanged;
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the PostingDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostingDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PostingDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostingDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the TransactionDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the SourceID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceIDChanging;
        
        /// <summary>
        /// Gets fired when the SourceID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceIDChanged;
        
        /// <summary>
        /// Gets fired before the ErpLedgerEntry property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerEntryChanging;
        
        /// <summary>
        /// Gets fired when the ErpLedgerEntry property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerEntryChanged;
        
        /// <summary>
        /// Gets fired before the ErpJournal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpJournalChanging;
        
        /// <summary>
        /// Gets fired when the ErpJournal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpJournalChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpInvoiceLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpInvoiceLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanged;
        
        private static ITypedElement RetrieveAccountIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("accountID")));
        }
        
        /// <summary>
        /// Raises the AccountIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePostingDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("postingDateTime")));
        }
        
        /// <summary>
        /// Raises the PostingDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostingDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostingDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PostingDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostingDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostingDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("transactionDateTime")));
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSourceIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("sourceID")));
        }
        
        /// <summary>
        /// Raises the SourceIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpLedgerEntryReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("ErpLedgerEntry")));
        }
        
        /// <summary>
        /// Raises the ErpLedgerEntryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerEntryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerEntryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpLedgerEntryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerEntryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerEntryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpLedgerEntry property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpLedgerEntry(object sender, System.EventArgs eventArgs)
        {
            this.ErpLedgerEntry = null;
        }
        
        private static ITypedElement RetrieveErpJournalReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("ErpJournal")));
        }
        
        /// <summary>
        /// Raises the ErpJournalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpJournalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpJournalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpJournalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpJournalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpJournalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpJournal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpJournal(object sender, System.EventArgs eventArgs)
        {
            this.ErpJournal = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveCostTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("CostTypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CostTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CostTypesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CostTypes", e, _costTypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CostTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CostTypesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CostTypes", e, _costTypesReference);
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("ErpInvoiceLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInvoiceLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInvoiceLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpInvoiceLineItem = null;
        }
        
        private static ITypedElement RetrieveErpPayableLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("ErpPayableLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPayableLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPayableLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPayableLineItems", e, _erpPayableLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPayableLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPayableLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPayableLineItems", e, _erpPayableLineItemsReference);
        }
        
        private static ITypedElement RetrieveErpRecLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpJournalEntry.ClassInstance)).Resolve("ErpRecLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpRecLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpRecLineItems", e, _erpRecLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpRecLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpRecLineItems", e, _erpRecLineItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACCOUNTID"))
            {
                return this.AccountID;
            }
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "POSTINGDATETIME"))
            {
                return this.PostingDateTime;
            }
            if ((attribute == "TRANSACTIONDATETIME"))
            {
                return this.TransactionDateTime;
            }
            if ((attribute == "SOURCEID"))
            {
                return this.SourceID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COSTTYPES"))
            {
                return this._costTypes;
            }
            if ((feature == "ERPPAYABLELINEITEMS"))
            {
                return this._erpPayableLineItems;
            }
            if ((feature == "ERPRECLINEITEMS"))
            {
                return this._erpRecLineItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPLEDGERENTRY"))
            {
                this.ErpLedgerEntry = ((IErpLedgerEntry)(value));
                return;
            }
            if ((feature == "ERPJOURNAL"))
            {
                this.ErpJournal = ((IErpJournal)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPINVOICELINEITEM"))
            {
                this.ErpInvoiceLineItem = ((IErpInvoiceLineItem)(value));
                return;
            }
            if ((feature == "ACCOUNTID"))
            {
                this.AccountID = ((string)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "POSTINGDATETIME"))
            {
                this.PostingDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "TRANSACTIONDATETIME"))
            {
                this.TransactionDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "SOURCEID"))
            {
                this.SourceID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpLedgerEntry"))
            {
                return new ErpLedgerEntryProxy(this);
            }
            if ((attribute == "ErpJournal"))
            {
                return new ErpJournalProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpLedgerEntry"))
            {
                return new ErpLedgerEntryProxy(this);
            }
            if ((reference == "ErpJournal"))
            {
                return new ErpJournalProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "JournalEntry")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpJournalEntry class
        /// </summary>
        public class ErpJournalEntryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpJournalEntry _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpJournalEntryReferencedElementsCollection(ErpJournalEntry parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpLedgerEntry != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpJournal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CostTypes.Count);
                    if ((this._parent.ErpInvoiceLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpPayableLineItems.Count);
                    count = (count + this._parent.ErpRecLineItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpLedgerEntryChanged += this.PropagateValueChanges;
                this._parent.ErpJournalChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.CostTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpInvoiceLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpPayableLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpRecLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpLedgerEntryChanged -= this.PropagateValueChanges;
                this._parent.ErpJournalChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.CostTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpInvoiceLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpPayableLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpRecLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpLedgerEntry == null))
                {
                    IErpLedgerEntry erpLedgerEntryCasted = item.As<IErpLedgerEntry>();
                    if ((erpLedgerEntryCasted != null))
                    {
                        this._parent.ErpLedgerEntry = erpLedgerEntryCasted;
                        return;
                    }
                }
                if ((this._parent.ErpJournal == null))
                {
                    IErpJournal erpJournalCasted = item.As<IErpJournal>();
                    if ((erpJournalCasted != null))
                    {
                        this._parent.ErpJournal = erpJournalCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICostType costTypesCasted = item.As<ICostType>();
                if ((costTypesCasted != null))
                {
                    this._parent.CostTypes.Add(costTypesCasted);
                }
                if ((this._parent.ErpInvoiceLineItem == null))
                {
                    IErpInvoiceLineItem erpInvoiceLineItemCasted = item.As<IErpInvoiceLineItem>();
                    if ((erpInvoiceLineItemCasted != null))
                    {
                        this._parent.ErpInvoiceLineItem = erpInvoiceLineItemCasted;
                        return;
                    }
                }
                IErpPayableLineItem erpPayableLineItemsCasted = item.As<IErpPayableLineItem>();
                if ((erpPayableLineItemsCasted != null))
                {
                    this._parent.ErpPayableLineItems.Add(erpPayableLineItemsCasted);
                }
                IErpRecLineItem erpRecLineItemsCasted = item.As<IErpRecLineItem>();
                if ((erpRecLineItemsCasted != null))
                {
                    this._parent.ErpRecLineItems.Add(erpRecLineItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpLedgerEntry = null;
                this._parent.ErpJournal = null;
                this._parent.Status = null;
                this._parent.CostTypes.Clear();
                this._parent.ErpInvoiceLineItem = null;
                this._parent.ErpPayableLineItems.Clear();
                this._parent.ErpRecLineItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpLedgerEntry))
                {
                    return true;
                }
                if ((item == this._parent.ErpJournal))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.CostTypes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpInvoiceLineItem))
                {
                    return true;
                }
                if (this._parent.ErpPayableLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpRecLineItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpLedgerEntry != null))
                {
                    array[arrayIndex] = this._parent.ErpLedgerEntry;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpJournal != null))
                {
                    array[arrayIndex] = this._parent.ErpJournal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> costTypesEnumerator = this._parent.CostTypes.GetEnumerator();
                try
                {
                    for (
                    ; costTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = costTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    costTypesEnumerator.Dispose();
                }
                if ((this._parent.ErpInvoiceLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpInvoiceLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpPayableLineItemsEnumerator = this._parent.ErpPayableLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpPayableLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPayableLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPayableLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpRecLineItemsEnumerator = this._parent.ErpRecLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpRecLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpRecLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpRecLineItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpLedgerEntry == item))
                {
                    this._parent.ErpLedgerEntry = null;
                    return true;
                }
                if ((this._parent.ErpJournal == item))
                {
                    this._parent.ErpJournal = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICostType costTypeItem = item.As<ICostType>();
                if (((costTypeItem != null) 
                            && this._parent.CostTypes.Remove(costTypeItem)))
                {
                    return true;
                }
                if ((this._parent.ErpInvoiceLineItem == item))
                {
                    this._parent.ErpInvoiceLineItem = null;
                    return true;
                }
                IErpPayableLineItem erpPayableLineItemItem = item.As<IErpPayableLineItem>();
                if (((erpPayableLineItemItem != null) 
                            && this._parent.ErpPayableLineItems.Remove(erpPayableLineItemItem)))
                {
                    return true;
                }
                IErpRecLineItem erpRecLineItemItem = item.As<IErpRecLineItem>();
                if (((erpRecLineItemItem != null) 
                            && this._parent.ErpRecLineItems.Remove(erpRecLineItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpLedgerEntry).Concat(this._parent.ErpJournal).Concat(this._parent.Status).Concat(this._parent.CostTypes).Concat(this._parent.ErpInvoiceLineItem).Concat(this._parent.ErpPayableLineItems).Concat(this._parent.ErpRecLineItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountID property
        /// </summary>
        private sealed class AccountIDProxy : ModelPropertyChange<IErpJournalEntry, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountIDProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "accountID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccountID;
                }
                set
                {
                    this.ModelElement.AccountID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<IErpJournalEntry, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the postingDateTime property
        /// </summary>
        private sealed class PostingDateTimeProxy : ModelPropertyChange<IErpJournalEntry, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PostingDateTimeProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "postingDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PostingDateTime;
                }
                set
                {
                    this.ModelElement.PostingDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionDateTime property
        /// </summary>
        private sealed class TransactionDateTimeProxy : ModelPropertyChange<IErpJournalEntry, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionDateTimeProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "transactionDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TransactionDateTime;
                }
                set
                {
                    this.ModelElement.TransactionDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sourceID property
        /// </summary>
        private sealed class SourceIDProxy : ModelPropertyChange<IErpJournalEntry, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceIDProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "sourceID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SourceID;
                }
                set
                {
                    this.ModelElement.SourceID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpLedgerEntry property
        /// </summary>
        private sealed class ErpLedgerEntryProxy : ModelPropertyChange<IErpJournalEntry, IErpLedgerEntry>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpLedgerEntryProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "ErpLedgerEntry")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpLedgerEntry Value
            {
                get
                {
                    return this.ModelElement.ErpLedgerEntry;
                }
                set
                {
                    this.ModelElement.ErpLedgerEntry = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpJournal property
        /// </summary>
        private sealed class ErpJournalProxy : ModelPropertyChange<IErpJournalEntry, IErpJournal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpJournalProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "ErpJournal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpJournal Value
            {
                get
                {
                    return this.ModelElement.ErpJournal;
                }
                set
                {
                    this.ModelElement.ErpJournal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpJournalEntry, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInvoiceLineItem property
        /// </summary>
        private sealed class ErpInvoiceLineItemProxy : ModelPropertyChange<IErpJournalEntry, IErpInvoiceLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInvoiceLineItemProxy(IErpJournalEntry modelElement) : 
                    base(modelElement, "ErpInvoiceLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoiceLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpInvoiceLineItem;
                }
                set
                {
                    this.ModelElement.ErpInvoiceLineItem = value;
                }
            }
        }
    }
}

