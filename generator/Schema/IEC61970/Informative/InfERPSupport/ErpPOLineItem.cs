//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpPOLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "POLineItem")]
    [DebuggerDisplayAttribute("ErpPOLineItem {UUID}")]
    public class ErpPOLineItem : Document, IErpPOLineItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ErpPurchaseOrder property
        /// </summary>
        private IErpPurchaseOrder _erpPurchaseOrder;
        
        /// <summary>
        /// The backing field for the MaterialItem property
        /// </summary>
        private IMaterialItem _materialItem;
        
        /// <summary>
        /// The backing field for the ErpReqLineItem property
        /// </summary>
        private IErpReqLineItem _erpReqLineItem;
        
        /// <summary>
        /// The backing field for the AssetModelCatalogueItem property
        /// </summary>
        private IAssetModelCatalogueItem _assetModelCatalogueItem;
        
        /// <summary>
        /// The backing field for the ErpRecDelLineItem property
        /// </summary>
        private IErpRecDelvLineItem _erpRecDelLineItem;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ErpPurchaseOrder property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPOLineItems")]
        public virtual IErpPurchaseOrder ErpPurchaseOrder
        {
            get
            {
                return this._erpPurchaseOrder;
            }
            set
            {
                if ((this._erpPurchaseOrder != value))
                {
                    IErpPurchaseOrder old = this._erpPurchaseOrder;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPurchaseOrderChanging(e);
                    this.OnPropertyChanging("ErpPurchaseOrder", e);
                    this._erpPurchaseOrder = value;
                    if ((old != null))
                    {
                        old.ErpPOLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpPurchaseOrder;
                    }
                    if ((value != null))
                    {
                        value.ErpPOLineItems.Add(this);
                        value.Deleted += this.OnResetErpPurchaseOrder;
                    }
                    this.OnErpPurchaseOrderChanged(e);
                    this.OnPropertyChanged("ErpPurchaseOrder", e);
                }
            }
        }
        
        /// <summary>
        /// The MaterialItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPOLineItems")]
        public virtual IMaterialItem MaterialItem
        {
            get
            {
                return this._materialItem;
            }
            set
            {
                if ((this._materialItem != value))
                {
                    IMaterialItem old = this._materialItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialItemChanging(e);
                    this.OnPropertyChanging("MaterialItem", e);
                    this._materialItem = value;
                    if ((old != null))
                    {
                        old.ErpPOLineItems.Remove(this);
                        old.Deleted -= this.OnResetMaterialItem;
                    }
                    if ((value != null))
                    {
                        value.ErpPOLineItems.Add(this);
                        value.Deleted += this.OnResetMaterialItem;
                    }
                    this.OnMaterialItemChanged(e);
                    this.OnPropertyChanged("MaterialItem", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpReqLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPOLineItem")]
        public virtual IErpReqLineItem ErpReqLineItem
        {
            get
            {
                return this._erpReqLineItem;
            }
            set
            {
                if ((this._erpReqLineItem != value))
                {
                    IErpReqLineItem old = this._erpReqLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpReqLineItemChanging(e);
                    this.OnPropertyChanging("ErpReqLineItem", e);
                    this._erpReqLineItem = value;
                    if ((old != null))
                    {
                        old.ErpPOLineItem = null;
                        old.Deleted -= this.OnResetErpReqLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpPOLineItem = this;
                        value.Deleted += this.OnResetErpReqLineItem;
                    }
                    this.OnErpReqLineItemChanged(e);
                    this.OnPropertyChanged("ErpReqLineItem", e);
                }
            }
        }
        
        /// <summary>
        /// The AssetModelCatalogueItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPOLineItems")]
        public virtual IAssetModelCatalogueItem AssetModelCatalogueItem
        {
            get
            {
                return this._assetModelCatalogueItem;
            }
            set
            {
                if ((this._assetModelCatalogueItem != value))
                {
                    IAssetModelCatalogueItem old = this._assetModelCatalogueItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetModelCatalogueItemChanging(e);
                    this.OnPropertyChanging("AssetModelCatalogueItem", e);
                    this._assetModelCatalogueItem = value;
                    if ((old != null))
                    {
                        old.ErpPOLineItems.Remove(this);
                        old.Deleted -= this.OnResetAssetModelCatalogueItem;
                    }
                    if ((value != null))
                    {
                        value.ErpPOLineItems.Add(this);
                        value.Deleted += this.OnResetAssetModelCatalogueItem;
                    }
                    this.OnAssetModelCatalogueItemChanged(e);
                    this.OnPropertyChanged("AssetModelCatalogueItem", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpRecDelLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPOLineItem")]
        public virtual IErpRecDelvLineItem ErpRecDelLineItem
        {
            get
            {
                return this._erpRecDelLineItem;
            }
            set
            {
                if ((this._erpRecDelLineItem != value))
                {
                    IErpRecDelvLineItem old = this._erpRecDelLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpRecDelLineItemChanging(e);
                    this.OnPropertyChanging("ErpRecDelLineItem", e);
                    this._erpRecDelLineItem = value;
                    if ((old != null))
                    {
                        old.ErpPOLineItem = null;
                        old.Deleted -= this.OnResetErpRecDelLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpPOLineItem = this;
                        value.Deleted += this.OnResetErpRecDelLineItem;
                    }
                    this.OnErpRecDelLineItemChanged(e);
                    this.OnPropertyChanged("ErpRecDelLineItem", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpPOLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "POLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ErpPurchaseOrder property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPurchaseOrderChanging;
        
        /// <summary>
        /// Gets fired when the ErpPurchaseOrder property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPurchaseOrderChanged;
        
        /// <summary>
        /// Gets fired before the MaterialItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialItemChanging;
        
        /// <summary>
        /// Gets fired when the MaterialItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpReqLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReqLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpReqLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReqLineItemChanged;
        
        /// <summary>
        /// Gets fired before the AssetModelCatalogueItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelCatalogueItemChanging;
        
        /// <summary>
        /// Gets fired when the AssetModelCatalogueItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelCatalogueItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpRecDelLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecDelLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpRecDelLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRecDelLineItemChanged;
        
        /// <summary>
        /// Raises the ErpPurchaseOrderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPurchaseOrderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPurchaseOrderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPurchaseOrderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPurchaseOrderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPurchaseOrderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPurchaseOrder property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPurchaseOrder(object sender, System.EventArgs eventArgs)
        {
            this.ErpPurchaseOrder = null;
        }
        
        /// <summary>
        /// Raises the MaterialItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MaterialItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMaterialItem(object sender, System.EventArgs eventArgs)
        {
            this.MaterialItem = null;
        }
        
        /// <summary>
        /// Raises the ErpReqLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReqLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReqLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpReqLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReqLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReqLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpReqLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpReqLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpReqLineItem = null;
        }
        
        /// <summary>
        /// Raises the AssetModelCatalogueItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelCatalogueItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelCatalogueItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetModelCatalogueItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelCatalogueItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelCatalogueItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetModelCatalogueItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetModelCatalogueItem(object sender, System.EventArgs eventArgs)
        {
            this.AssetModelCatalogueItem = null;
        }
        
        /// <summary>
        /// Raises the ErpRecDelLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecDelLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecDelLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpRecDelLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRecDelLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRecDelLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpRecDelLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpRecDelLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpRecDelLineItem = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPPURCHASEORDER"))
            {
                this.ErpPurchaseOrder = ((IErpPurchaseOrder)(value));
                return;
            }
            if ((feature == "MATERIALITEM"))
            {
                this.MaterialItem = ((IMaterialItem)(value));
                return;
            }
            if ((feature == "ERPREQLINEITEM"))
            {
                this.ErpReqLineItem = ((IErpReqLineItem)(value));
                return;
            }
            if ((feature == "ASSETMODELCATALOGUEITEM"))
            {
                this.AssetModelCatalogueItem = ((IAssetModelCatalogueItem)(value));
                return;
            }
            if ((feature == "ERPRECDELLINEITEM"))
            {
                this.ErpRecDelLineItem = ((IErpRecDelvLineItem)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpPurchaseOrder"))
            {
                return new ErpPurchaseOrderProxy(this);
            }
            if ((attribute == "MaterialItem"))
            {
                return new MaterialItemProxy(this);
            }
            if ((attribute == "ErpReqLineItem"))
            {
                return new ErpReqLineItemProxy(this);
            }
            if ((attribute == "AssetModelCatalogueItem"))
            {
                return new AssetModelCatalogueItemProxy(this);
            }
            if ((attribute == "ErpRecDelLineItem"))
            {
                return new ErpRecDelLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpPurchaseOrder"))
            {
                return new ErpPurchaseOrderProxy(this);
            }
            if ((reference == "MaterialItem"))
            {
                return new MaterialItemProxy(this);
            }
            if ((reference == "ErpReqLineItem"))
            {
                return new ErpReqLineItemProxy(this);
            }
            if ((reference == "AssetModelCatalogueItem"))
            {
                return new AssetModelCatalogueItemProxy(this);
            }
            if ((reference == "ErpRecDelLineItem"))
            {
                return new ErpRecDelLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "POLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpPOLineItem class
        /// </summary>
        public class ErpPOLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpPOLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpPOLineItemReferencedElementsCollection(ErpPOLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpPurchaseOrder != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MaterialItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpReqLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssetModelCatalogueItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpRecDelLineItem != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpPurchaseOrderChanged += this.PropagateValueChanges;
                this._parent.MaterialItemChanged += this.PropagateValueChanges;
                this._parent.ErpReqLineItemChanged += this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItemChanged += this.PropagateValueChanges;
                this._parent.ErpRecDelLineItemChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpPurchaseOrderChanged -= this.PropagateValueChanges;
                this._parent.MaterialItemChanged -= this.PropagateValueChanges;
                this._parent.ErpReqLineItemChanged -= this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItemChanged -= this.PropagateValueChanges;
                this._parent.ErpRecDelLineItemChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpPurchaseOrder == null))
                {
                    IErpPurchaseOrder erpPurchaseOrderCasted = item.As<IErpPurchaseOrder>();
                    if ((erpPurchaseOrderCasted != null))
                    {
                        this._parent.ErpPurchaseOrder = erpPurchaseOrderCasted;
                        return;
                    }
                }
                if ((this._parent.MaterialItem == null))
                {
                    IMaterialItem materialItemCasted = item.As<IMaterialItem>();
                    if ((materialItemCasted != null))
                    {
                        this._parent.MaterialItem = materialItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpReqLineItem == null))
                {
                    IErpReqLineItem erpReqLineItemCasted = item.As<IErpReqLineItem>();
                    if ((erpReqLineItemCasted != null))
                    {
                        this._parent.ErpReqLineItem = erpReqLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.AssetModelCatalogueItem == null))
                {
                    IAssetModelCatalogueItem assetModelCatalogueItemCasted = item.As<IAssetModelCatalogueItem>();
                    if ((assetModelCatalogueItemCasted != null))
                    {
                        this._parent.AssetModelCatalogueItem = assetModelCatalogueItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpRecDelLineItem == null))
                {
                    IErpRecDelvLineItem erpRecDelLineItemCasted = item.As<IErpRecDelvLineItem>();
                    if ((erpRecDelLineItemCasted != null))
                    {
                        this._parent.ErpRecDelLineItem = erpRecDelLineItemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpPurchaseOrder = null;
                this._parent.MaterialItem = null;
                this._parent.ErpReqLineItem = null;
                this._parent.AssetModelCatalogueItem = null;
                this._parent.ErpRecDelLineItem = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpPurchaseOrder))
                {
                    return true;
                }
                if ((item == this._parent.MaterialItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpReqLineItem))
                {
                    return true;
                }
                if ((item == this._parent.AssetModelCatalogueItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpRecDelLineItem))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpPurchaseOrder != null))
                {
                    array[arrayIndex] = this._parent.ErpPurchaseOrder;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MaterialItem != null))
                {
                    array[arrayIndex] = this._parent.MaterialItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpReqLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpReqLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssetModelCatalogueItem != null))
                {
                    array[arrayIndex] = this._parent.AssetModelCatalogueItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpRecDelLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpRecDelLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpPurchaseOrder == item))
                {
                    this._parent.ErpPurchaseOrder = null;
                    return true;
                }
                if ((this._parent.MaterialItem == item))
                {
                    this._parent.MaterialItem = null;
                    return true;
                }
                if ((this._parent.ErpReqLineItem == item))
                {
                    this._parent.ErpReqLineItem = null;
                    return true;
                }
                if ((this._parent.AssetModelCatalogueItem == item))
                {
                    this._parent.AssetModelCatalogueItem = null;
                    return true;
                }
                if ((this._parent.ErpRecDelLineItem == item))
                {
                    this._parent.ErpRecDelLineItem = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpPurchaseOrder).Concat(this._parent.MaterialItem).Concat(this._parent.ErpReqLineItem).Concat(this._parent.AssetModelCatalogueItem).Concat(this._parent.ErpRecDelLineItem).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPurchaseOrder property
        /// </summary>
        private sealed class ErpPurchaseOrderProxy : ModelPropertyChange<IErpPOLineItem, IErpPurchaseOrder>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPurchaseOrderProxy(IErpPOLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPurchaseOrder Value
            {
                get
                {
                    return this.ModelElement.ErpPurchaseOrder;
                }
                set
                {
                    this.ModelElement.ErpPurchaseOrder = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPurchaseOrderChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPurchaseOrderChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MaterialItem property
        /// </summary>
        private sealed class MaterialItemProxy : ModelPropertyChange<IErpPOLineItem, IMaterialItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialItemProxy(IErpPOLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMaterialItem Value
            {
                get
                {
                    return this.ModelElement.MaterialItem;
                }
                set
                {
                    this.ModelElement.MaterialItem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialItemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialItemChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpReqLineItem property
        /// </summary>
        private sealed class ErpReqLineItemProxy : ModelPropertyChange<IErpPOLineItem, IErpReqLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpReqLineItemProxy(IErpPOLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpReqLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpReqLineItem;
                }
                set
                {
                    this.ModelElement.ErpReqLineItem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpReqLineItemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpReqLineItemChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetModelCatalogueItem property
        /// </summary>
        private sealed class AssetModelCatalogueItemProxy : ModelPropertyChange<IErpPOLineItem, IAssetModelCatalogueItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetModelCatalogueItemProxy(IErpPOLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetModelCatalogueItem Value
            {
                get
                {
                    return this.ModelElement.AssetModelCatalogueItem;
                }
                set
                {
                    this.ModelElement.AssetModelCatalogueItem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssetModelCatalogueItemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssetModelCatalogueItemChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpRecDelLineItem property
        /// </summary>
        private sealed class ErpRecDelLineItemProxy : ModelPropertyChange<IErpPOLineItem, IErpRecDelvLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpRecDelLineItemProxy(IErpPOLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpRecDelvLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpRecDelLineItem;
                }
                set
                {
                    this.ModelElement.ErpRecDelLineItem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpRecDelLineItemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpRecDelLineItemChanged -= handler;
            }
        }
    }
}

