//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpRecLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "RecLineItem")]
    [DebuggerDisplayAttribute("ErpRecLineItem {UUID}")]
    public partial class ErpRecLineItem : IdentifiedObject, IErpRecLineItem, IModelElement
    {
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpJournalEntriesReference = new Lazy<ITypedElement>(RetrieveErpJournalEntriesReference);
        
        /// <summary>
        /// The backing field for the ErpJournalEntries property
        /// </summary>
        private ErpRecLineItemErpJournalEntriesCollection _erpJournalEntries;
        
        private static Lazy<ITypedElement> _erpReceivableReference = new Lazy<ITypedElement>(RetrieveErpReceivableReference);
        
        /// <summary>
        /// The backing field for the ErpReceivable property
        /// </summary>
        private IErpReceivable _erpReceivable;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItem property
        /// </summary>
        private IErpInvoiceLineItem _erpInvoiceLineItem;
        
        private static Lazy<ITypedElement> _erpPaymentsReference = new Lazy<ITypedElement>(RetrieveErpPaymentsReference);
        
        /// <summary>
        /// The backing field for the ErpPayments property
        /// </summary>
        private ErpRecLineItemErpPaymentsCollection _erpPayments;
        
        private static IClass _classInstance;
        
        public ErpRecLineItem()
        {
            this._erpJournalEntries = new ErpRecLineItemErpJournalEntriesCollection(this);
            this._erpJournalEntries.CollectionChanging += this.ErpJournalEntriesCollectionChanging;
            this._erpJournalEntries.CollectionChanged += this.ErpJournalEntriesCollectionChanged;
            this._erpPayments = new ErpRecLineItemErpPaymentsCollection(this);
            this._erpPayments.CollectionChanging += this.ErpPaymentsCollectionChanging;
            this._erpPayments.CollectionChanged += this.ErpPaymentsCollectionChanged;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpJournalEntries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpJournalEntry> ErpJournalEntries
        {
            get
            {
                return this._erpJournalEntries;
            }
        }
        
        /// <summary>
        /// The ErpReceivable property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecLineItems")]
        public virtual IErpReceivable ErpReceivable
        {
            get
            {
                return this._erpReceivable;
            }
            set
            {
                if ((this._erpReceivable != value))
                {
                    IErpReceivable old = this._erpReceivable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpReceivableChanging(e);
                    this.OnPropertyChanging("ErpReceivable", e, _erpReceivableReference);
                    this._erpReceivable = value;
                    if ((old != null))
                    {
                        old.ErpRecLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpReceivable;
                    }
                    if ((value != null))
                    {
                        value.ErpRecLineItems.Add(this);
                        value.Deleted += this.OnResetErpReceivable;
                    }
                    this.OnErpReceivableChanged(e);
                    this.OnPropertyChanged("ErpReceivable", e, _erpReceivableReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecLineItem")]
        public virtual IErpInvoiceLineItem ErpInvoiceLineItem
        {
            get
            {
                return this._erpInvoiceLineItem;
            }
            set
            {
                if ((this._erpInvoiceLineItem != value))
                {
                    IErpInvoiceLineItem old = this._erpInvoiceLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInvoiceLineItemChanging(e);
                    this.OnPropertyChanging("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                    this._erpInvoiceLineItem = value;
                    if ((old != null))
                    {
                        old.ErpRecLineItem = null;
                        old.Deleted -= this.OnResetErpInvoiceLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpRecLineItem = this;
                        value.Deleted += this.OnResetErpInvoiceLineItem;
                    }
                    this.OnErpInvoiceLineItemChanged(e);
                    this.OnPropertyChanged("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPayments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPayment> ErpPayments
        {
            get
            {
                return this._erpPayments;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpRecLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "RecLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpReceivable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReceivableChanging;
        
        /// <summary>
        /// Gets fired when the ErpReceivable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReceivableChanged;
        
        /// <summary>
        /// Gets fired before the ErpInvoiceLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpInvoiceLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanged;
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecLineItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpJournalEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecLineItem.ClassInstance)).Resolve("ErpJournalEntries")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        private static ITypedElement RetrieveErpReceivableReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecLineItem.ClassInstance)).Resolve("ErpReceivable")));
        }
        
        /// <summary>
        /// Raises the ErpReceivableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReceivableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReceivableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpReceivableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReceivableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReceivableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpReceivable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpReceivable(object sender, System.EventArgs eventArgs)
        {
            this.ErpReceivable = null;
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecLineItem.ClassInstance)).Resolve("ErpInvoiceLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInvoiceLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInvoiceLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpInvoiceLineItem = null;
        }
        
        private static ITypedElement RetrieveErpPaymentsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecLineItem.ClassInstance)).Resolve("ErpPayments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPayments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPaymentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPayments", e, _erpPaymentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPayments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPaymentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPayments", e, _erpPaymentsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPJOURNALENTRIES"))
            {
                return this._erpJournalEntries;
            }
            if ((feature == "ERPPAYMENTS"))
            {
                return this._erpPayments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPRECEIVABLE"))
            {
                this.ErpReceivable = ((IErpReceivable)(value));
                return;
            }
            if ((feature == "ERPINVOICELINEITEM"))
            {
                this.ErpInvoiceLineItem = ((IErpInvoiceLineItem)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpReceivable"))
            {
                return new ErpReceivableProxy(this);
            }
            if ((attribute == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpReceivable"))
            {
                return new ErpReceivableProxy(this);
            }
            if ((reference == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "RecLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpRecLineItem class
        /// </summary>
        public class ErpRecLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpRecLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpRecLineItemReferencedElementsCollection(ErpRecLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpJournalEntries.Count);
                    if ((this._parent.ErpReceivable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpInvoiceLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpPayments.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpReceivableChanged += this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpPayments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpReceivableChanged -= this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpPayments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IErpJournalEntry erpJournalEntriesCasted = item.As<IErpJournalEntry>();
                if ((erpJournalEntriesCasted != null))
                {
                    this._parent.ErpJournalEntries.Add(erpJournalEntriesCasted);
                }
                if ((this._parent.ErpReceivable == null))
                {
                    IErpReceivable erpReceivableCasted = item.As<IErpReceivable>();
                    if ((erpReceivableCasted != null))
                    {
                        this._parent.ErpReceivable = erpReceivableCasted;
                        return;
                    }
                }
                if ((this._parent.ErpInvoiceLineItem == null))
                {
                    IErpInvoiceLineItem erpInvoiceLineItemCasted = item.As<IErpInvoiceLineItem>();
                    if ((erpInvoiceLineItemCasted != null))
                    {
                        this._parent.ErpInvoiceLineItem = erpInvoiceLineItemCasted;
                        return;
                    }
                }
                IErpPayment erpPaymentsCasted = item.As<IErpPayment>();
                if ((erpPaymentsCasted != null))
                {
                    this._parent.ErpPayments.Add(erpPaymentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
                this._parent.ErpJournalEntries.Clear();
                this._parent.ErpReceivable = null;
                this._parent.ErpInvoiceLineItem = null;
                this._parent.ErpPayments.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ErpJournalEntries.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpReceivable))
                {
                    return true;
                }
                if ((item == this._parent.ErpInvoiceLineItem))
                {
                    return true;
                }
                if (this._parent.ErpPayments.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpJournalEntriesEnumerator = this._parent.ErpJournalEntries.GetEnumerator();
                try
                {
                    for (
                    ; erpJournalEntriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpJournalEntriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpJournalEntriesEnumerator.Dispose();
                }
                if ((this._parent.ErpReceivable != null))
                {
                    array[arrayIndex] = this._parent.ErpReceivable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpInvoiceLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpInvoiceLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpPaymentsEnumerator = this._parent.ErpPayments.GetEnumerator();
                try
                {
                    for (
                    ; erpPaymentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPaymentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPaymentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IErpJournalEntry erpJournalEntryItem = item.As<IErpJournalEntry>();
                if (((erpJournalEntryItem != null) 
                            && this._parent.ErpJournalEntries.Remove(erpJournalEntryItem)))
                {
                    return true;
                }
                if ((this._parent.ErpReceivable == item))
                {
                    this._parent.ErpReceivable = null;
                    return true;
                }
                if ((this._parent.ErpInvoiceLineItem == item))
                {
                    this._parent.ErpInvoiceLineItem = null;
                    return true;
                }
                IErpPayment erpPaymentItem = item.As<IErpPayment>();
                if (((erpPaymentItem != null) 
                            && this._parent.ErpPayments.Remove(erpPaymentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).Concat(this._parent.ErpJournalEntries).Concat(this._parent.ErpReceivable).Concat(this._parent.ErpInvoiceLineItem).Concat(this._parent.ErpPayments).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpRecLineItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpRecLineItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpReceivable property
        /// </summary>
        private sealed class ErpReceivableProxy : ModelPropertyChange<IErpRecLineItem, IErpReceivable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpReceivableProxy(IErpRecLineItem modelElement) : 
                    base(modelElement, "ErpReceivable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpReceivable Value
            {
                get
                {
                    return this.ModelElement.ErpReceivable;
                }
                set
                {
                    this.ModelElement.ErpReceivable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInvoiceLineItem property
        /// </summary>
        private sealed class ErpInvoiceLineItemProxy : ModelPropertyChange<IErpRecLineItem, IErpInvoiceLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInvoiceLineItemProxy(IErpRecLineItem modelElement) : 
                    base(modelElement, "ErpInvoiceLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoiceLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpInvoiceLineItem;
                }
                set
                {
                    this.ModelElement.ErpInvoiceLineItem = value;
                }
            }
        }
    }
}

