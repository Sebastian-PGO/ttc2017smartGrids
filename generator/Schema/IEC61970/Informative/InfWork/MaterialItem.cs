//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the MaterialItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MaterialI" +
        "tem")]
    [DebuggerDisplayAttribute("MaterialItem {UUID}")]
    public class MaterialItem : IdentifiedObject, IMaterialItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Account property
        /// </summary>
        private string _account;
        
        /// <summary>
        /// The backing field for the CostDescription property
        /// </summary>
        private string _costDescription;
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private object _quantity;
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private string _costType;
        
        /// <summary>
        /// The backing field for the ExternalRefID property
        /// </summary>
        private string _externalRefID;
        
        /// <summary>
        /// The backing field for the ActualCost property
        /// </summary>
        private float _actualCost;
        
        /// <summary>
        /// The backing field for the MaterialCode property
        /// </summary>
        private string _materialCode;
        
        /// <summary>
        /// The backing field for the ErpPOLineItems property
        /// </summary>
        private MaterialItemErpPOLineItemsCollection _erpPOLineItems;
        
        /// <summary>
        /// The backing field for the TypeMaterial property
        /// </summary>
        private ITypeMaterial _typeMaterial;
        
        /// <summary>
        /// The backing field for the ErpInventoryCounts property
        /// </summary>
        private MaterialItemErpInventoryCountsCollection _erpInventoryCounts;
        
        /// <summary>
        /// The backing field for the Usages property
        /// </summary>
        private MaterialItemUsagesCollection _usages;
        
        /// <summary>
        /// The backing field for the WorkCostDetail property
        /// </summary>
        private IWorkCostDetail _workCostDetail;
        
        /// <summary>
        /// The backing field for the WorkTask property
        /// </summary>
        private IWorkTask _workTask;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the ErpRecDelvLineItems property
        /// </summary>
        private MaterialItemErpRecDelvLineItemsCollection _erpRecDelvLineItems;
        
        /// <summary>
        /// The backing field for the DesignLocation property
        /// </summary>
        private IDesignLocation _designLocation;
        
        private static IClass _classInstance;
        
        public MaterialItem()
        {
            this._erpPOLineItems = new MaterialItemErpPOLineItemsCollection(this);
            this._erpPOLineItems.CollectionChanging += this.ErpPOLineItemsCollectionChanging;
            this._erpPOLineItems.CollectionChanged += this.ErpPOLineItemsCollectionChanged;
            this._erpInventoryCounts = new MaterialItemErpInventoryCountsCollection(this);
            this._erpInventoryCounts.CollectionChanging += this.ErpInventoryCountsCollectionChanging;
            this._erpInventoryCounts.CollectionChanged += this.ErpInventoryCountsCollectionChanged;
            this._usages = new MaterialItemUsagesCollection(this);
            this._usages.CollectionChanging += this.UsagesCollectionChanging;
            this._usages.CollectionChanged += this.UsagesCollectionChanged;
            this._erpRecDelvLineItems = new MaterialItemErpRecDelvLineItemsCollection(this);
            this._erpRecDelvLineItems.CollectionChanging += this.ErpRecDelvLineItemsCollectionChanging;
            this._erpRecDelvLineItems.CollectionChanged += this.ErpRecDelvLineItemsCollectionChanged;
        }
        
        /// <summary>
        /// The account property
        /// </summary>
        [XmlElementNameAttribute("account")]
        [XmlAttributeAttribute(true)]
        public virtual string Account
        {
            get
            {
                return this._account;
            }
            set
            {
                if ((this._account != value))
                {
                    string old = this._account;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountChanging(e);
                    this.OnPropertyChanging("Account", e);
                    this._account = value;
                    this.OnAccountChanged(e);
                    this.OnPropertyChanged("Account", e);
                }
            }
        }
        
        /// <summary>
        /// The costDescription property
        /// </summary>
        [XmlElementNameAttribute("costDescription")]
        [XmlAttributeAttribute(true)]
        public virtual string CostDescription
        {
            get
            {
                return this._costDescription;
            }
            set
            {
                if ((this._costDescription != value))
                {
                    string old = this._costDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostDescriptionChanging(e);
                    this.OnPropertyChanging("CostDescription", e);
                    this._costDescription = value;
                    this.OnCostDescriptionChanged(e);
                    this.OnPropertyChanged("CostDescription", e);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual object Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    object old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e);
                }
            }
        }
        
        /// <summary>
        /// The costType property
        /// </summary>
        [XmlElementNameAttribute("costType")]
        [XmlAttributeAttribute(true)]
        public virtual string CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    string old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e);
                    this._costType = value;
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e);
                }
            }
        }
        
        /// <summary>
        /// The externalRefID property
        /// </summary>
        [XmlElementNameAttribute("externalRefID")]
        [XmlAttributeAttribute(true)]
        public virtual string ExternalRefID
        {
            get
            {
                return this._externalRefID;
            }
            set
            {
                if ((this._externalRefID != value))
                {
                    string old = this._externalRefID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExternalRefIDChanging(e);
                    this.OnPropertyChanging("ExternalRefID", e);
                    this._externalRefID = value;
                    this.OnExternalRefIDChanged(e);
                    this.OnPropertyChanged("ExternalRefID", e);
                }
            }
        }
        
        /// <summary>
        /// The actualCost property
        /// </summary>
        [XmlElementNameAttribute("actualCost")]
        [XmlAttributeAttribute(true)]
        public virtual float ActualCost
        {
            get
            {
                return this._actualCost;
            }
            set
            {
                if ((this._actualCost != value))
                {
                    float old = this._actualCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActualCostChanging(e);
                    this.OnPropertyChanging("ActualCost", e);
                    this._actualCost = value;
                    this.OnActualCostChanged(e);
                    this.OnPropertyChanged("ActualCost", e);
                }
            }
        }
        
        /// <summary>
        /// The materialCode property
        /// </summary>
        [XmlElementNameAttribute("materialCode")]
        [XmlAttributeAttribute(true)]
        public virtual string MaterialCode
        {
            get
            {
                return this._materialCode;
            }
            set
            {
                if ((this._materialCode != value))
                {
                    string old = this._materialCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialCodeChanging(e);
                    this.OnPropertyChanging("MaterialCode", e);
                    this._materialCode = value;
                    this.OnMaterialCodeChanged(e);
                    this.OnPropertyChanged("MaterialCode", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpPOLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPOLineItem> ErpPOLineItems
        {
            get
            {
                return this._erpPOLineItems;
            }
        }
        
        /// <summary>
        /// The TypeMaterial property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItems")]
        public virtual ITypeMaterial TypeMaterial
        {
            get
            {
                return this._typeMaterial;
            }
            set
            {
                if ((this._typeMaterial != value))
                {
                    ITypeMaterial old = this._typeMaterial;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeMaterialChanging(e);
                    this.OnPropertyChanging("TypeMaterial", e);
                    this._typeMaterial = value;
                    if ((old != null))
                    {
                        old.MaterialItems.Remove(this);
                        old.Deleted -= this.OnResetTypeMaterial;
                    }
                    if ((value != null))
                    {
                        value.MaterialItems.Add(this);
                        value.Deleted += this.OnResetTypeMaterial;
                    }
                    this.OnTypeMaterialChanged(e);
                    this.OnPropertyChanged("TypeMaterial", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpInventoryCounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInventoryCount> ErpInventoryCounts
        {
            get
            {
                return this._erpInventoryCounts;
            }
        }
        
        /// <summary>
        /// The Usages property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUsage> Usages
        {
            get
            {
                return this._usages;
            }
        }
        
        /// <summary>
        /// The WorkCostDetail property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItems")]
        public virtual IWorkCostDetail WorkCostDetail
        {
            get
            {
                return this._workCostDetail;
            }
            set
            {
                if ((this._workCostDetail != value))
                {
                    IWorkCostDetail old = this._workCostDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkCostDetailChanging(e);
                    this.OnPropertyChanging("WorkCostDetail", e);
                    this._workCostDetail = value;
                    if ((old != null))
                    {
                        old.MaterialItems.Remove(this);
                        old.Deleted -= this.OnResetWorkCostDetail;
                    }
                    if ((value != null))
                    {
                        value.MaterialItems.Add(this);
                        value.Deleted += this.OnResetWorkCostDetail;
                    }
                    this.OnWorkCostDetailChanged(e);
                    this.OnPropertyChanged("WorkCostDetail", e);
                }
            }
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItems")]
        public virtual IWorkTask WorkTask
        {
            get
            {
                return this._workTask;
            }
            set
            {
                if ((this._workTask != value))
                {
                    IWorkTask old = this._workTask;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkTaskChanging(e);
                    this.OnPropertyChanging("WorkTask", e);
                    this._workTask = value;
                    if ((old != null))
                    {
                        old.MaterialItems.Remove(this);
                        old.Deleted -= this.OnResetWorkTask;
                    }
                    if ((value != null))
                    {
                        value.MaterialItems.Add(this);
                        value.Deleted += this.OnResetWorkTask;
                    }
                    this.OnWorkTaskChanged(e);
                    this.OnPropertyChanged("WorkTask", e);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpRecDelvLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpRecDelvLineItem> ErpRecDelvLineItems
        {
            get
            {
                return this._erpRecDelvLineItems;
            }
        }
        
        /// <summary>
        /// The DesignLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MaterialItems")]
        public virtual IDesignLocation DesignLocation
        {
            get
            {
                return this._designLocation;
            }
            set
            {
                if ((this._designLocation != value))
                {
                    IDesignLocation old = this._designLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignLocationChanging(e);
                    this.OnPropertyChanging("DesignLocation", e);
                    this._designLocation = value;
                    if ((old != null))
                    {
                        old.MaterialItems.Remove(this);
                        old.Deleted -= this.OnResetDesignLocation;
                    }
                    if ((value != null))
                    {
                        value.MaterialItems.Add(this);
                        value.Deleted += this.OnResetDesignLocation;
                    }
                    this.OnDesignLocationChanged(e);
                    this.OnPropertyChanged("DesignLocation", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MaterialItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MaterialI" +
                            "tem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Account property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanging;
        
        /// <summary>
        /// Gets fired when the Account property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanged;
        
        /// <summary>
        /// Gets fired before the CostDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the CostDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the ExternalRefID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRefIDChanging;
        
        /// <summary>
        /// Gets fired when the ExternalRefID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRefIDChanged;
        
        /// <summary>
        /// Gets fired before the ActualCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualCostChanging;
        
        /// <summary>
        /// Gets fired when the ActualCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualCostChanged;
        
        /// <summary>
        /// Gets fired before the MaterialCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialCodeChanging;
        
        /// <summary>
        /// Gets fired when the MaterialCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialCodeChanged;
        
        /// <summary>
        /// Gets fired before the TypeMaterial property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeMaterialChanging;
        
        /// <summary>
        /// Gets fired when the TypeMaterial property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeMaterialChanged;
        
        /// <summary>
        /// Gets fired before the WorkCostDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostDetailChanging;
        
        /// <summary>
        /// Gets fired when the WorkCostDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostDetailChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the DesignLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanging;
        
        /// <summary>
        /// Gets fired when the DesignLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanged;
        
        /// <summary>
        /// Raises the AccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExternalRefIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRefIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRefIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExternalRefIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRefIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRefIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActualCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActualCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPOLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPOLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPOLineItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPOLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPOLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPOLineItems", e);
        }
        
        /// <summary>
        /// Raises the TypeMaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeMaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeMaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeMaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeMaterial property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeMaterial(object sender, System.EventArgs eventArgs)
        {
            this.TypeMaterial = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInventoryCounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryCountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpInventoryCounts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInventoryCounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryCountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInventoryCounts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Usages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsagesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Usages", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Usages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsagesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Usages", e);
        }
        
        /// <summary>
        /// Raises the WorkCostDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkCostDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkCostDetail property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkCostDetail(object sender, System.EventArgs eventArgs)
        {
            this.WorkCostDetail = null;
        }
        
        /// <summary>
        /// Raises the WorkTaskChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkTaskChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkTask property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkTask(object sender, System.EventArgs eventArgs)
        {
            this.WorkTask = null;
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpRecDelvLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecDelvLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpRecDelvLineItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpRecDelvLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecDelvLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpRecDelvLineItems", e);
        }
        
        /// <summary>
        /// Raises the DesignLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DesignLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesignLocation(object sender, System.EventArgs eventArgs)
        {
            this.DesignLocation = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACCOUNT"))
            {
                return this.Account;
            }
            if ((attribute == "COSTDESCRIPTION"))
            {
                return this.CostDescription;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            if ((attribute == "COSTTYPE"))
            {
                return this.CostType;
            }
            if ((attribute == "EXTERNALREFID"))
            {
                return this.ExternalRefID;
            }
            if ((attribute == "ACTUALCOST"))
            {
                return this.ActualCost;
            }
            if ((attribute == "MATERIALCODE"))
            {
                return this.MaterialCode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPPOLINEITEMS"))
            {
                return this._erpPOLineItems;
            }
            if ((feature == "ERPINVENTORYCOUNTS"))
            {
                return this._erpInventoryCounts;
            }
            if ((feature == "USAGES"))
            {
                return this._usages;
            }
            if ((feature == "ERPRECDELVLINEITEMS"))
            {
                return this._erpRecDelvLineItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPEMATERIAL"))
            {
                this.TypeMaterial = ((ITypeMaterial)(value));
                return;
            }
            if ((feature == "WORKCOSTDETAIL"))
            {
                this.WorkCostDetail = ((IWorkCostDetail)(value));
                return;
            }
            if ((feature == "WORKTASK"))
            {
                this.WorkTask = ((IWorkTask)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "DESIGNLOCATION"))
            {
                this.DesignLocation = ((IDesignLocation)(value));
                return;
            }
            if ((feature == "ACCOUNT"))
            {
                this.Account = ((string)(value));
                return;
            }
            if ((feature == "COSTDESCRIPTION"))
            {
                this.CostDescription = ((string)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((object)(value));
                return;
            }
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((string)(value));
                return;
            }
            if ((feature == "EXTERNALREFID"))
            {
                this.ExternalRefID = ((string)(value));
                return;
            }
            if ((feature == "ACTUALCOST"))
            {
                this.ActualCost = ((float)(value));
                return;
            }
            if ((feature == "MATERIALCODE"))
            {
                this.MaterialCode = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TypeMaterial"))
            {
                return new TypeMaterialProxy(this);
            }
            if ((attribute == "WorkCostDetail"))
            {
                return new WorkCostDetailProxy(this);
            }
            if ((attribute == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TypeMaterial"))
            {
                return new TypeMaterialProxy(this);
            }
            if ((reference == "WorkCostDetail"))
            {
                return new WorkCostDetailProxy(this);
            }
            if ((reference == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MaterialI" +
                        "tem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MaterialItem class
        /// </summary>
        public class MaterialItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MaterialItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MaterialItemReferencedElementsCollection(MaterialItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ErpPOLineItems.Count);
                    if ((this._parent.TypeMaterial != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpInventoryCounts.Count);
                    count = (count + this._parent.Usages.Count);
                    if ((this._parent.WorkCostDetail != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WorkTask != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpRecDelvLineItems.Count);
                    if ((this._parent.DesignLocation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpPOLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TypeMaterialChanged += this.PropagateValueChanges;
                this._parent.ErpInventoryCounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Usages.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostDetailChanged += this.PropagateValueChanges;
                this._parent.WorkTaskChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpRecDelvLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignLocationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpPOLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TypeMaterialChanged -= this.PropagateValueChanges;
                this._parent.ErpInventoryCounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Usages.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostDetailChanged -= this.PropagateValueChanges;
                this._parent.WorkTaskChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpRecDelvLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignLocationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IErpPOLineItem erpPOLineItemsCasted = item.As<IErpPOLineItem>();
                if ((erpPOLineItemsCasted != null))
                {
                    this._parent.ErpPOLineItems.Add(erpPOLineItemsCasted);
                }
                if ((this._parent.TypeMaterial == null))
                {
                    ITypeMaterial typeMaterialCasted = item.As<ITypeMaterial>();
                    if ((typeMaterialCasted != null))
                    {
                        this._parent.TypeMaterial = typeMaterialCasted;
                        return;
                    }
                }
                IErpInventoryCount erpInventoryCountsCasted = item.As<IErpInventoryCount>();
                if ((erpInventoryCountsCasted != null))
                {
                    this._parent.ErpInventoryCounts.Add(erpInventoryCountsCasted);
                }
                IUsage usagesCasted = item.As<IUsage>();
                if ((usagesCasted != null))
                {
                    this._parent.Usages.Add(usagesCasted);
                }
                if ((this._parent.WorkCostDetail == null))
                {
                    IWorkCostDetail workCostDetailCasted = item.As<IWorkCostDetail>();
                    if ((workCostDetailCasted != null))
                    {
                        this._parent.WorkCostDetail = workCostDetailCasted;
                        return;
                    }
                }
                if ((this._parent.WorkTask == null))
                {
                    IWorkTask workTaskCasted = item.As<IWorkTask>();
                    if ((workTaskCasted != null))
                    {
                        this._parent.WorkTask = workTaskCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IErpRecDelvLineItem erpRecDelvLineItemsCasted = item.As<IErpRecDelvLineItem>();
                if ((erpRecDelvLineItemsCasted != null))
                {
                    this._parent.ErpRecDelvLineItems.Add(erpRecDelvLineItemsCasted);
                }
                if ((this._parent.DesignLocation == null))
                {
                    IDesignLocation designLocationCasted = item.As<IDesignLocation>();
                    if ((designLocationCasted != null))
                    {
                        this._parent.DesignLocation = designLocationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpPOLineItems.Clear();
                this._parent.TypeMaterial = null;
                this._parent.ErpInventoryCounts.Clear();
                this._parent.Usages.Clear();
                this._parent.WorkCostDetail = null;
                this._parent.WorkTask = null;
                this._parent.Status = null;
                this._parent.ErpRecDelvLineItems.Clear();
                this._parent.DesignLocation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ErpPOLineItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TypeMaterial))
                {
                    return true;
                }
                if (this._parent.ErpInventoryCounts.Contains(item))
                {
                    return true;
                }
                if (this._parent.Usages.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WorkCostDetail))
                {
                    return true;
                }
                if ((item == this._parent.WorkTask))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ErpRecDelvLineItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DesignLocation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> erpPOLineItemsEnumerator = this._parent.ErpPOLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpPOLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPOLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPOLineItemsEnumerator.Dispose();
                }
                if ((this._parent.TypeMaterial != null))
                {
                    array[arrayIndex] = this._parent.TypeMaterial;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpInventoryCountsEnumerator = this._parent.ErpInventoryCounts.GetEnumerator();
                try
                {
                    for (
                    ; erpInventoryCountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInventoryCountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInventoryCountsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> usagesEnumerator = this._parent.Usages.GetEnumerator();
                try
                {
                    for (
                    ; usagesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = usagesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    usagesEnumerator.Dispose();
                }
                if ((this._parent.WorkCostDetail != null))
                {
                    array[arrayIndex] = this._parent.WorkCostDetail;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WorkTask != null))
                {
                    array[arrayIndex] = this._parent.WorkTask;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpRecDelvLineItemsEnumerator = this._parent.ErpRecDelvLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpRecDelvLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpRecDelvLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpRecDelvLineItemsEnumerator.Dispose();
                }
                if ((this._parent.DesignLocation != null))
                {
                    array[arrayIndex] = this._parent.DesignLocation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IErpPOLineItem erpPOLineItemItem = item.As<IErpPOLineItem>();
                if (((erpPOLineItemItem != null) 
                            && this._parent.ErpPOLineItems.Remove(erpPOLineItemItem)))
                {
                    return true;
                }
                if ((this._parent.TypeMaterial == item))
                {
                    this._parent.TypeMaterial = null;
                    return true;
                }
                IErpInventoryCount erpInventoryCountItem = item.As<IErpInventoryCount>();
                if (((erpInventoryCountItem != null) 
                            && this._parent.ErpInventoryCounts.Remove(erpInventoryCountItem)))
                {
                    return true;
                }
                IUsage usageItem = item.As<IUsage>();
                if (((usageItem != null) 
                            && this._parent.Usages.Remove(usageItem)))
                {
                    return true;
                }
                if ((this._parent.WorkCostDetail == item))
                {
                    this._parent.WorkCostDetail = null;
                    return true;
                }
                if ((this._parent.WorkTask == item))
                {
                    this._parent.WorkTask = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IErpRecDelvLineItem erpRecDelvLineItemItem = item.As<IErpRecDelvLineItem>();
                if (((erpRecDelvLineItemItem != null) 
                            && this._parent.ErpRecDelvLineItems.Remove(erpRecDelvLineItemItem)))
                {
                    return true;
                }
                if ((this._parent.DesignLocation == item))
                {
                    this._parent.DesignLocation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpPOLineItems).Concat(this._parent.TypeMaterial).Concat(this._parent.ErpInventoryCounts).Concat(this._parent.Usages).Concat(this._parent.WorkCostDetail).Concat(this._parent.WorkTask).Concat(this._parent.Status).Concat(this._parent.ErpRecDelvLineItems).Concat(this._parent.DesignLocation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the account property
        /// </summary>
        private sealed class AccountProxy : ModelPropertyChange<IMaterialItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Account;
                }
                set
                {
                    this.ModelElement.Account = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AccountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AccountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costDescription property
        /// </summary>
        private sealed class CostDescriptionProxy : ModelPropertyChange<IMaterialItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostDescriptionProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostDescription;
                }
                set
                {
                    this.ModelElement.CostDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CostDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CostDescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<IMaterialItem, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<IMaterialItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CostTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CostTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the externalRefID property
        /// </summary>
        private sealed class ExternalRefIDProxy : ModelPropertyChange<IMaterialItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExternalRefIDProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ExternalRefID;
                }
                set
                {
                    this.ModelElement.ExternalRefID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExternalRefIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExternalRefIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actualCost property
        /// </summary>
        private sealed class ActualCostProxy : ModelPropertyChange<IMaterialItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActualCostProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActualCost;
                }
                set
                {
                    this.ModelElement.ActualCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActualCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActualCostChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the materialCode property
        /// </summary>
        private sealed class MaterialCodeProxy : ModelPropertyChange<IMaterialItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialCodeProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MaterialCode;
                }
                set
                {
                    this.ModelElement.MaterialCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeMaterial property
        /// </summary>
        private sealed class TypeMaterialProxy : ModelPropertyChange<IMaterialItem, ITypeMaterial>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeMaterialProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeMaterial Value
            {
                get
                {
                    return this.ModelElement.TypeMaterial;
                }
                set
                {
                    this.ModelElement.TypeMaterial = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeMaterialChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeMaterialChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkCostDetail property
        /// </summary>
        private sealed class WorkCostDetailProxy : ModelPropertyChange<IMaterialItem, IWorkCostDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkCostDetailProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkCostDetail Value
            {
                get
                {
                    return this.ModelElement.WorkCostDetail;
                }
                set
                {
                    this.ModelElement.WorkCostDetail = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkCostDetailChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkCostDetailChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkTask property
        /// </summary>
        private sealed class WorkTaskProxy : ModelPropertyChange<IMaterialItem, IWorkTask>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkTaskProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkTask Value
            {
                get
                {
                    return this.ModelElement.WorkTask;
                }
                set
                {
                    this.ModelElement.WorkTask = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkTaskChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkTaskChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IMaterialItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DesignLocation property
        /// </summary>
        private sealed class DesignLocationProxy : ModelPropertyChange<IMaterialItem, IDesignLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignLocationProxy(IMaterialItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesignLocation Value
            {
                get
                {
                    return this.ModelElement.DesignLocation;
                }
                set
                {
                    this.ModelElement.DesignLocation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesignLocationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesignLocationChanged -= handler;
            }
        }
    }
}

