//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the InfoQuestion class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/InfoQuest" +
        "ion")]
    [DebuggerDisplayAttribute("InfoQuestion {UUID}")]
    public class InfoQuestion : Document, IInfoQuestion, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Answer property
        /// </summary>
        private string _answer;
        
        /// <summary>
        /// The backing field for the QuestionText property
        /// </summary>
        private string _questionText;
        
        /// <summary>
        /// The backing field for the AnswerDateTime property
        /// </summary>
        private DateTime _answerDateTime;
        
        /// <summary>
        /// The backing field for the QuestionCategory property
        /// </summary>
        private string _questionCategory;
        
        /// <summary>
        /// The backing field for the AnswerRemark property
        /// </summary>
        private string _answerRemark;
        
        /// <summary>
        /// The backing field for the QuestionRemark property
        /// </summary>
        private string _questionRemark;
        
        /// <summary>
        /// The backing field for the QuestionCode property
        /// </summary>
        private string _questionCode;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The answer property
        /// </summary>
        [XmlElementNameAttribute("answer")]
        [XmlAttributeAttribute(true)]
        public virtual string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    string old = this._answer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnswerChanging(e);
                    this.OnPropertyChanging("Answer", e);
                    this._answer = value;
                    this.OnAnswerChanged(e);
                    this.OnPropertyChanged("Answer", e);
                }
            }
        }
        
        /// <summary>
        /// The questionText property
        /// </summary>
        [XmlElementNameAttribute("questionText")]
        [XmlAttributeAttribute(true)]
        public virtual string QuestionText
        {
            get
            {
                return this._questionText;
            }
            set
            {
                if ((this._questionText != value))
                {
                    string old = this._questionText;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuestionTextChanging(e);
                    this.OnPropertyChanging("QuestionText", e);
                    this._questionText = value;
                    this.OnQuestionTextChanged(e);
                    this.OnPropertyChanged("QuestionText", e);
                }
            }
        }
        
        /// <summary>
        /// The answerDateTime property
        /// </summary>
        [XmlElementNameAttribute("answerDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime AnswerDateTime
        {
            get
            {
                return this._answerDateTime;
            }
            set
            {
                if ((this._answerDateTime != value))
                {
                    DateTime old = this._answerDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnswerDateTimeChanging(e);
                    this.OnPropertyChanging("AnswerDateTime", e);
                    this._answerDateTime = value;
                    this.OnAnswerDateTimeChanged(e);
                    this.OnPropertyChanged("AnswerDateTime", e);
                }
            }
        }
        
        /// <summary>
        /// The questionCategory property
        /// </summary>
        [XmlElementNameAttribute("questionCategory")]
        [XmlAttributeAttribute(true)]
        public virtual string QuestionCategory
        {
            get
            {
                return this._questionCategory;
            }
            set
            {
                if ((this._questionCategory != value))
                {
                    string old = this._questionCategory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuestionCategoryChanging(e);
                    this.OnPropertyChanging("QuestionCategory", e);
                    this._questionCategory = value;
                    this.OnQuestionCategoryChanged(e);
                    this.OnPropertyChanged("QuestionCategory", e);
                }
            }
        }
        
        /// <summary>
        /// The answerRemark property
        /// </summary>
        [XmlElementNameAttribute("answerRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string AnswerRemark
        {
            get
            {
                return this._answerRemark;
            }
            set
            {
                if ((this._answerRemark != value))
                {
                    string old = this._answerRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnswerRemarkChanging(e);
                    this.OnPropertyChanging("AnswerRemark", e);
                    this._answerRemark = value;
                    this.OnAnswerRemarkChanged(e);
                    this.OnPropertyChanged("AnswerRemark", e);
                }
            }
        }
        
        /// <summary>
        /// The questionRemark property
        /// </summary>
        [XmlElementNameAttribute("questionRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string QuestionRemark
        {
            get
            {
                return this._questionRemark;
            }
            set
            {
                if ((this._questionRemark != value))
                {
                    string old = this._questionRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuestionRemarkChanging(e);
                    this.OnPropertyChanging("QuestionRemark", e);
                    this._questionRemark = value;
                    this.OnQuestionRemarkChanged(e);
                    this.OnPropertyChanged("QuestionRemark", e);
                }
            }
        }
        
        /// <summary>
        /// The questionCode property
        /// </summary>
        [XmlElementNameAttribute("questionCode")]
        [XmlAttributeAttribute(true)]
        public virtual string QuestionCode
        {
            get
            {
                return this._questionCode;
            }
            set
            {
                if ((this._questionCode != value))
                {
                    string old = this._questionCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuestionCodeChanging(e);
                    this.OnPropertyChanging("QuestionCode", e);
                    this._questionCode = value;
                    this.OnQuestionCodeChanged(e);
                    this.OnPropertyChanged("QuestionCode", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/InfoQuest" +
                            "ion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Answer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerChanging;
        
        /// <summary>
        /// Gets fired when the Answer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerChanged;
        
        /// <summary>
        /// Gets fired before the QuestionText property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionTextChanging;
        
        /// <summary>
        /// Gets fired when the QuestionText property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionTextChanged;
        
        /// <summary>
        /// Gets fired before the AnswerDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the AnswerDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the QuestionCategory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionCategoryChanging;
        
        /// <summary>
        /// Gets fired when the QuestionCategory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionCategoryChanged;
        
        /// <summary>
        /// Gets fired before the AnswerRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerRemarkChanging;
        
        /// <summary>
        /// Gets fired when the AnswerRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnswerRemarkChanged;
        
        /// <summary>
        /// Gets fired before the QuestionRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionRemarkChanging;
        
        /// <summary>
        /// Gets fired when the QuestionRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionRemarkChanged;
        
        /// <summary>
        /// Gets fired before the QuestionCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionCodeChanging;
        
        /// <summary>
        /// Gets fired when the QuestionCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionCodeChanged;
        
        /// <summary>
        /// Raises the AnswerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionTextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionTextChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionTextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionTextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionTextChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionTextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionCategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionCategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionCategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionCategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnswerRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnswerRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnswerRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ANSWER"))
            {
                return this.Answer;
            }
            if ((attribute == "QUESTIONTEXT"))
            {
                return this.QuestionText;
            }
            if ((attribute == "ANSWERDATETIME"))
            {
                return this.AnswerDateTime;
            }
            if ((attribute == "QUESTIONCATEGORY"))
            {
                return this.QuestionCategory;
            }
            if ((attribute == "ANSWERREMARK"))
            {
                return this.AnswerRemark;
            }
            if ((attribute == "QUESTIONREMARK"))
            {
                return this.QuestionRemark;
            }
            if ((attribute == "QUESTIONCODE"))
            {
                return this.QuestionCode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ANSWER"))
            {
                this.Answer = ((string)(value));
                return;
            }
            if ((feature == "QUESTIONTEXT"))
            {
                this.QuestionText = ((string)(value));
                return;
            }
            if ((feature == "ANSWERDATETIME"))
            {
                this.AnswerDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "QUESTIONCATEGORY"))
            {
                this.QuestionCategory = ((string)(value));
                return;
            }
            if ((feature == "ANSWERREMARK"))
            {
                this.AnswerRemark = ((string)(value));
                return;
            }
            if ((feature == "QUESTIONREMARK"))
            {
                this.QuestionRemark = ((string)(value));
                return;
            }
            if ((feature == "QUESTIONCODE"))
            {
                this.QuestionCode = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/InfoQuest" +
                        "ion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the answer property
        /// </summary>
        private sealed class AnswerProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnswerProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Answer;
                }
                set
                {
                    this.ModelElement.Answer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the questionText property
        /// </summary>
        private sealed class QuestionTextProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuestionTextProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QuestionText;
                }
                set
                {
                    this.ModelElement.QuestionText = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionTextChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionTextChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the answerDateTime property
        /// </summary>
        private sealed class AnswerDateTimeProxy : ModelPropertyChange<IInfoQuestion, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnswerDateTimeProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.AnswerDateTime;
                }
                set
                {
                    this.ModelElement.AnswerDateTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerDateTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerDateTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the questionCategory property
        /// </summary>
        private sealed class QuestionCategoryProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuestionCategoryProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QuestionCategory;
                }
                set
                {
                    this.ModelElement.QuestionCategory = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionCategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionCategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the answerRemark property
        /// </summary>
        private sealed class AnswerRemarkProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnswerRemarkProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AnswerRemark;
                }
                set
                {
                    this.ModelElement.AnswerRemark = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerRemarkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnswerRemarkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the questionRemark property
        /// </summary>
        private sealed class QuestionRemarkProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuestionRemarkProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QuestionRemark;
                }
                set
                {
                    this.ModelElement.QuestionRemark = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionRemarkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionRemarkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the questionCode property
        /// </summary>
        private sealed class QuestionCodeProxy : ModelPropertyChange<IInfoQuestion, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuestionCodeProxy(IInfoQuestion modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QuestionCode;
                }
                set
                {
                    this.ModelElement.QuestionCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuestionCodeChanged -= handler;
            }
        }
    }
}

