//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Appointment class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Appointme" +
        "nt")]
    [DebuggerDisplayAttribute("Appointment {UUID}")]
    public class Appointment : ScheduledEvent, IAppointment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Remark property
        /// </summary>
        private string _remark;
        
        /// <summary>
        /// The backing field for the CallAhead property
        /// </summary>
        private bool _callAhead;
        
        /// <summary>
        /// The backing field for the Address property
        /// </summary>
        private IStreetAddress _address;
        
        /// <summary>
        /// The backing field for the CallBack property
        /// </summary>
        private ICallBack _callBack;
        
        /// <summary>
        /// The backing field for the MeetingInterval property
        /// </summary>
        private IDateTimeInterval _meetingInterval;
        
        /// <summary>
        /// The backing field for the ErpPersons property
        /// </summary>
        private AppointmentErpPersonsCollection _erpPersons;
        
        private static IClass _classInstance;
        
        public Appointment()
        {
            this._erpPersons = new AppointmentErpPersonsCollection(this);
            this._erpPersons.CollectionChanging += this.ErpPersonsCollectionChanging;
            this._erpPersons.CollectionChanged += this.ErpPersonsCollectionChanged;
        }
        
        /// <summary>
        /// The remark property
        /// </summary>
        [XmlElementNameAttribute("remark")]
        [XmlAttributeAttribute(true)]
        public virtual string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    string old = this._remark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemarkChanging(e);
                    this.OnPropertyChanging("Remark", e);
                    this._remark = value;
                    this.OnRemarkChanged(e);
                    this.OnPropertyChanged("Remark", e);
                }
            }
        }
        
        /// <summary>
        /// The callAhead property
        /// </summary>
        [XmlElementNameAttribute("callAhead")]
        [XmlAttributeAttribute(true)]
        public virtual bool CallAhead
        {
            get
            {
                return this._callAhead;
            }
            set
            {
                if ((this._callAhead != value))
                {
                    bool old = this._callAhead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallAheadChanging(e);
                    this.OnPropertyChanging("CallAhead", e);
                    this._callAhead = value;
                    this.OnCallAheadChanged(e);
                    this.OnPropertyChanged("CallAhead", e);
                }
            }
        }
        
        /// <summary>
        /// The address property
        /// </summary>
        [XmlElementNameAttribute("address")]
        [XmlAttributeAttribute(true)]
        public virtual IStreetAddress Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    IStreetAddress old = this._address;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAddressChanging(e);
                    this.OnPropertyChanging("Address", e);
                    this._address = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAddress;
                    }
                    this.OnAddressChanged(e);
                    this.OnPropertyChanged("Address", e);
                }
            }
        }
        
        /// <summary>
        /// The CallBack property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Appointments")]
        public virtual ICallBack CallBack
        {
            get
            {
                return this._callBack;
            }
            set
            {
                if ((this._callBack != value))
                {
                    ICallBack old = this._callBack;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallBackChanging(e);
                    this.OnPropertyChanging("CallBack", e);
                    this._callBack = value;
                    if ((old != null))
                    {
                        old.Appointments.Remove(this);
                        old.Deleted -= this.OnResetCallBack;
                    }
                    if ((value != null))
                    {
                        value.Appointments.Add(this);
                        value.Deleted += this.OnResetCallBack;
                    }
                    this.OnCallBackChanged(e);
                    this.OnPropertyChanged("CallBack", e);
                }
            }
        }
        
        /// <summary>
        /// The meetingInterval property
        /// </summary>
        [XmlElementNameAttribute("meetingInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval MeetingInterval
        {
            get
            {
                return this._meetingInterval;
            }
            set
            {
                if ((this._meetingInterval != value))
                {
                    IDateTimeInterval old = this._meetingInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeetingIntervalChanging(e);
                    this.OnPropertyChanging("MeetingInterval", e);
                    this._meetingInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMeetingInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMeetingInterval;
                    }
                    this.OnMeetingIntervalChanged(e);
                    this.OnPropertyChanged("MeetingInterval", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Appointments")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get
            {
                return this._erpPersons;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AppointmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Appointme" +
                            "nt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Remark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemarkChanging;
        
        /// <summary>
        /// Gets fired when the Remark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemarkChanged;
        
        /// <summary>
        /// Gets fired before the CallAhead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallAheadChanging;
        
        /// <summary>
        /// Gets fired when the CallAhead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallAheadChanged;
        
        /// <summary>
        /// Gets fired before the Address property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddressChanging;
        
        /// <summary>
        /// Gets fired when the Address property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddressChanged;
        
        /// <summary>
        /// Gets fired before the CallBack property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallBackChanging;
        
        /// <summary>
        /// Gets fired when the CallBack property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallBackChanged;
        
        /// <summary>
        /// Gets fired before the MeetingInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeetingIntervalChanging;
        
        /// <summary>
        /// Gets fired when the MeetingInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeetingIntervalChanged;
        
        /// <summary>
        /// Raises the RemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallAheadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallAheadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallAheadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallAheadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallAheadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallAheadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Address property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAddress(object sender, System.EventArgs eventArgs)
        {
            this.Address = null;
        }
        
        /// <summary>
        /// Raises the CallBackChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallBackChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallBackChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallBackChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallBackChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallBackChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CallBack property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCallBack(object sender, System.EventArgs eventArgs)
        {
            this.CallBack = null;
        }
        
        /// <summary>
        /// Raises the MeetingIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeetingIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeetingIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeetingIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeetingIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeetingIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeetingInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeetingInterval(object sender, System.EventArgs eventArgs)
        {
            this.MeetingInterval = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersons", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersons", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REMARK"))
            {
                return this.Remark;
            }
            if ((attribute == "CALLAHEAD"))
            {
                return this.CallAhead;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPPERSONS"))
            {
                return this._erpPersons;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ADDRESS"))
            {
                this.Address = ((IStreetAddress)(value));
                return;
            }
            if ((feature == "CALLBACK"))
            {
                this.CallBack = ((ICallBack)(value));
                return;
            }
            if ((feature == "MEETINGINTERVAL"))
            {
                this.MeetingInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "REMARK"))
            {
                this.Remark = ((string)(value));
                return;
            }
            if ((feature == "CALLAHEAD"))
            {
                this.CallAhead = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Address"))
            {
                return new AddressProxy(this);
            }
            if ((attribute == "CallBack"))
            {
                return new CallBackProxy(this);
            }
            if ((attribute == "MeetingInterval"))
            {
                return new MeetingIntervalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Address"))
            {
                return new AddressProxy(this);
            }
            if ((reference == "CallBack"))
            {
                return new CallBackProxy(this);
            }
            if ((reference == "MeetingInterval"))
            {
                return new MeetingIntervalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Appointme" +
                        "nt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Appointment class
        /// </summary>
        public class AppointmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Appointment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AppointmentReferencedElementsCollection(Appointment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Address != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CallBack != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeetingInterval != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpPersons.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AddressChanged += this.PropagateValueChanges;
                this._parent.CallBackChanged += this.PropagateValueChanges;
                this._parent.MeetingIntervalChanged += this.PropagateValueChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AddressChanged -= this.PropagateValueChanges;
                this._parent.CallBackChanged -= this.PropagateValueChanges;
                this._parent.MeetingIntervalChanged -= this.PropagateValueChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Address == null))
                {
                    IStreetAddress addressCasted = item.As<IStreetAddress>();
                    if ((addressCasted != null))
                    {
                        this._parent.Address = addressCasted;
                        return;
                    }
                }
                if ((this._parent.CallBack == null))
                {
                    ICallBack callBackCasted = item.As<ICallBack>();
                    if ((callBackCasted != null))
                    {
                        this._parent.CallBack = callBackCasted;
                        return;
                    }
                }
                if ((this._parent.MeetingInterval == null))
                {
                    IDateTimeInterval meetingIntervalCasted = item.As<IDateTimeInterval>();
                    if ((meetingIntervalCasted != null))
                    {
                        this._parent.MeetingInterval = meetingIntervalCasted;
                        return;
                    }
                }
                IErpPerson erpPersonsCasted = item.As<IErpPerson>();
                if ((erpPersonsCasted != null))
                {
                    this._parent.ErpPersons.Add(erpPersonsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Address = null;
                this._parent.CallBack = null;
                this._parent.MeetingInterval = null;
                this._parent.ErpPersons.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Address))
                {
                    return true;
                }
                if ((item == this._parent.CallBack))
                {
                    return true;
                }
                if ((item == this._parent.MeetingInterval))
                {
                    return true;
                }
                if (this._parent.ErpPersons.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Address != null))
                {
                    array[arrayIndex] = this._parent.Address;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CallBack != null))
                {
                    array[arrayIndex] = this._parent.CallBack;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeetingInterval != null))
                {
                    array[arrayIndex] = this._parent.MeetingInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpPersonsEnumerator = this._parent.ErpPersons.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Address == item))
                {
                    this._parent.Address = null;
                    return true;
                }
                if ((this._parent.CallBack == item))
                {
                    this._parent.CallBack = null;
                    return true;
                }
                if ((this._parent.MeetingInterval == item))
                {
                    this._parent.MeetingInterval = null;
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.ErpPersons.Remove(erpPersonItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Address).Concat(this._parent.CallBack).Concat(this._parent.MeetingInterval).Concat(this._parent.ErpPersons).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remark property
        /// </summary>
        private sealed class RemarkProxy : ModelPropertyChange<IAppointment, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemarkProxy(IAppointment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Remark;
                }
                set
                {
                    this.ModelElement.Remark = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemarkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemarkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the callAhead property
        /// </summary>
        private sealed class CallAheadProxy : ModelPropertyChange<IAppointment, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallAheadProxy(IAppointment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.CallAhead;
                }
                set
                {
                    this.ModelElement.CallAhead = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallAheadChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallAheadChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the address property
        /// </summary>
        private sealed class AddressProxy : ModelPropertyChange<IAppointment, IStreetAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AddressProxy(IAppointment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStreetAddress Value
            {
                get
                {
                    return this.ModelElement.Address;
                }
                set
                {
                    this.ModelElement.Address = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AddressChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AddressChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CallBack property
        /// </summary>
        private sealed class CallBackProxy : ModelPropertyChange<IAppointment, ICallBack>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallBackProxy(IAppointment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICallBack Value
            {
                get
                {
                    return this.ModelElement.CallBack;
                }
                set
                {
                    this.ModelElement.CallBack = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallBackChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallBackChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the meetingInterval property
        /// </summary>
        private sealed class MeetingIntervalProxy : ModelPropertyChange<IAppointment, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeetingIntervalProxy(IAppointment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.MeetingInterval;
                }
                set
                {
                    this.ModelElement.MeetingInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeetingIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MeetingIntervalChanged -= handler;
            }
        }
    }
}

