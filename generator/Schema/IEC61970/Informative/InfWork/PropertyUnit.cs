//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the PropertyUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/PropertyU" +
        "nit")]
    [DebuggerDisplayAttribute("PropertyUnit {UUID}")]
    public partial class PropertyUnit : IdentifiedObject, IPropertyUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PropertyAccount property
        /// </summary>
        private string _propertyAccount;
        
        private static Lazy<ITypedElement> _propertyAccountAttribute = new Lazy<ITypedElement>(RetrievePropertyAccountAttribute);
        
        /// <summary>
        /// The backing field for the AccountingUsage property
        /// </summary>
        private string _accountingUsage;
        
        private static Lazy<ITypedElement> _accountingUsageAttribute = new Lazy<ITypedElement>(RetrieveAccountingUsageAttribute);
        
        /// <summary>
        /// The backing field for the ActivityCode property
        /// </summary>
        private Nullable<WorkActionKind> _activityCode;
        
        private static Lazy<ITypedElement> _activityCodeAttribute = new Lazy<ITypedElement>(RetrieveActivityCodeAttribute);
        
        private static Lazy<ITypedElement> _workCostDetailsReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailsReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private PropertyUnitWorkCostDetailsCollection _workCostDetails;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _compatibleUnitsReference = new Lazy<ITypedElement>(RetrieveCompatibleUnitsReference);
        
        /// <summary>
        /// The backing field for the CompatibleUnits property
        /// </summary>
        private PropertyUnitCompatibleUnitsCollection _compatibleUnits;
        
        private static Lazy<ITypedElement> _cUMaterialItemsReference = new Lazy<ITypedElement>(RetrieveCUMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the CUMaterialItems property
        /// </summary>
        private PropertyUnitCUMaterialItemsCollection _cUMaterialItems;
        
        private static IClass _classInstance;
        
        public PropertyUnit()
        {
            this._workCostDetails = new PropertyUnitWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._compatibleUnits = new PropertyUnitCompatibleUnitsCollection(this);
            this._compatibleUnits.CollectionChanging += this.CompatibleUnitsCollectionChanging;
            this._compatibleUnits.CollectionChanged += this.CompatibleUnitsCollectionChanged;
            this._cUMaterialItems = new PropertyUnitCUMaterialItemsCollection(this);
            this._cUMaterialItems.CollectionChanging += this.CUMaterialItemsCollectionChanging;
            this._cUMaterialItems.CollectionChanged += this.CUMaterialItemsCollectionChanged;
        }
        
        /// <summary>
        /// The propertyAccount property
        /// </summary>
        [XmlElementNameAttribute("propertyAccount")]
        [XmlAttributeAttribute(true)]
        public virtual string PropertyAccount
        {
            get
            {
                return this._propertyAccount;
            }
            set
            {
                if ((this._propertyAccount != value))
                {
                    string old = this._propertyAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyAccountChanging(e);
                    this.OnPropertyChanging("PropertyAccount", e, _propertyAccountAttribute);
                    this._propertyAccount = value;
                    this.OnPropertyAccountChanged(e);
                    this.OnPropertyChanged("PropertyAccount", e, _propertyAccountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accountingUsage property
        /// </summary>
        [XmlElementNameAttribute("accountingUsage")]
        [XmlAttributeAttribute(true)]
        public virtual string AccountingUsage
        {
            get
            {
                return this._accountingUsage;
            }
            set
            {
                if ((this._accountingUsage != value))
                {
                    string old = this._accountingUsage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountingUsageChanging(e);
                    this.OnPropertyChanging("AccountingUsage", e, _accountingUsageAttribute);
                    this._accountingUsage = value;
                    this.OnAccountingUsageChanged(e);
                    this.OnPropertyChanged("AccountingUsage", e, _accountingUsageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The activityCode property
        /// </summary>
        [XmlElementNameAttribute("activityCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WorkActionKind> ActivityCode
        {
            get
            {
                return this._activityCode;
            }
            set
            {
                if ((this._activityCode != value))
                {
                    Nullable<WorkActionKind> old = this._activityCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivityCodeChanging(e);
                    this.OnPropertyChanging("ActivityCode", e, _activityCodeAttribute);
                    this._activityCode = value;
                    this.OnActivityCodeChanged(e);
                    this.OnPropertyChanged("ActivityCode", e, _activityCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PropertyUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The CompatibleUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PropertyUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICompatibleUnit> CompatibleUnits
        {
            get
            {
                return this._compatibleUnits;
            }
        }
        
        /// <summary>
        /// The CUMaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PropertyUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUMaterialItem> CUMaterialItems
        {
            get
            {
                return this._cUMaterialItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PropertyUnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/PropertyU" +
                            "nit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PropertyAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyAccountChanging;
        
        /// <summary>
        /// Gets fired when the PropertyAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyAccountChanged;
        
        /// <summary>
        /// Gets fired before the AccountingUsage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountingUsageChanging;
        
        /// <summary>
        /// Gets fired when the AccountingUsage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountingUsageChanged;
        
        /// <summary>
        /// Gets fired before the ActivityCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityCodeChanging;
        
        /// <summary>
        /// Gets fired when the ActivityCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityCodeChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrievePropertyAccountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("propertyAccount")));
        }
        
        /// <summary>
        /// Raises the PropertyAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountingUsageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("accountingUsage")));
        }
        
        /// <summary>
        /// Raises the AccountingUsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountingUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountingUsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountingUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountingUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountingUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActivityCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("activityCode")));
        }
        
        /// <summary>
        /// Raises the ActivityCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivityCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkCostDetailsReference()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("WorkCostDetails")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveCompatibleUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("CompatibleUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        private static ITypedElement RetrieveCUMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(PropertyUnit.ClassInstance)).Resolve("CUMaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PROPERTYACCOUNT"))
            {
                return this.PropertyAccount;
            }
            if ((attribute == "ACCOUNTINGUSAGE"))
            {
                return this.AccountingUsage;
            }
            if ((attribute == "ACTIVITYCODE"))
            {
                return this.ActivityCode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "COMPATIBLEUNITS"))
            {
                return this._compatibleUnits;
            }
            if ((feature == "CUMATERIALITEMS"))
            {
                return this._cUMaterialItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "PROPERTYACCOUNT"))
            {
                this.PropertyAccount = ((string)(value));
                return;
            }
            if ((feature == "ACCOUNTINGUSAGE"))
            {
                this.AccountingUsage = ((string)(value));
                return;
            }
            if ((feature == "ACTIVITYCODE"))
            {
                this.ActivityCode = ((WorkActionKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/PropertyU" +
                        "nit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PropertyUnit class
        /// </summary>
        public class PropertyUnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PropertyUnit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PropertyUnitReferencedElementsCollection(PropertyUnit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkCostDetails.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CompatibleUnits.Count);
                    count = (count + this._parent.CUMaterialItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICompatibleUnit compatibleUnitsCasted = item.As<ICompatibleUnit>();
                if ((compatibleUnitsCasted != null))
                {
                    this._parent.CompatibleUnits.Add(compatibleUnitsCasted);
                }
                ICUMaterialItem cUMaterialItemsCasted = item.As<ICUMaterialItem>();
                if ((cUMaterialItemsCasted != null))
                {
                    this._parent.CUMaterialItems.Add(cUMaterialItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkCostDetails.Clear();
                this._parent.Status = null;
                this._parent.CompatibleUnits.Clear();
                this._parent.CUMaterialItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.CompatibleUnits.Contains(item))
                {
                    return true;
                }
                if (this._parent.CUMaterialItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> compatibleUnitsEnumerator = this._parent.CompatibleUnits.GetEnumerator();
                try
                {
                    for (
                    ; compatibleUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = compatibleUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    compatibleUnitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cUMaterialItemsEnumerator = this._parent.CUMaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; cUMaterialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUMaterialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUMaterialItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICompatibleUnit compatibleUnitItem = item.As<ICompatibleUnit>();
                if (((compatibleUnitItem != null) 
                            && this._parent.CompatibleUnits.Remove(compatibleUnitItem)))
                {
                    return true;
                }
                ICUMaterialItem cUMaterialItemItem = item.As<ICUMaterialItem>();
                if (((cUMaterialItemItem != null) 
                            && this._parent.CUMaterialItems.Remove(cUMaterialItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkCostDetails).Concat(this._parent.Status).Concat(this._parent.CompatibleUnits).Concat(this._parent.CUMaterialItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the propertyAccount property
        /// </summary>
        private sealed class PropertyAccountProxy : ModelPropertyChange<IPropertyUnit, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyAccountProxy(IPropertyUnit modelElement) : 
                    base(modelElement, "propertyAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PropertyAccount;
                }
                set
                {
                    this.ModelElement.PropertyAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountingUsage property
        /// </summary>
        private sealed class AccountingUsageProxy : ModelPropertyChange<IPropertyUnit, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountingUsageProxy(IPropertyUnit modelElement) : 
                    base(modelElement, "accountingUsage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccountingUsage;
                }
                set
                {
                    this.ModelElement.AccountingUsage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activityCode property
        /// </summary>
        private sealed class ActivityCodeProxy : ModelPropertyChange<IPropertyUnit, Nullable<WorkActionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivityCodeProxy(IPropertyUnit modelElement) : 
                    base(modelElement, "activityCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WorkActionKind> Value
            {
                get
                {
                    return this.ModelElement.ActivityCode;
                }
                set
                {
                    this.ModelElement.ActivityCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IPropertyUnit, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IPropertyUnit modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

