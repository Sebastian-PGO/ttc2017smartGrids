//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the DesignLocation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
        "ation")]
    [DebuggerDisplayAttribute("DesignLocation {UUID}")]
    public class DesignLocation : IdentifiedObject, IDesignLocation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SpanLength property
        /// </summary>
        private float _spanLength;
        
        /// <summary>
        /// The backing field for the ConditionFactors property
        /// </summary>
        private DesignLocationConditionFactorsCollection _conditionFactors;
        
        /// <summary>
        /// The backing field for the MaterialItems property
        /// </summary>
        private DesignLocationMaterialItemsCollection _materialItems;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the Diagrams property
        /// </summary>
        private DesignLocationDiagramsCollection _diagrams;
        
        /// <summary>
        /// The backing field for the WorkLocations property
        /// </summary>
        private DesignLocationWorkLocationsCollection _workLocations;
        
        /// <summary>
        /// The backing field for the DesignLocationCUs property
        /// </summary>
        private DesignLocationDesignLocationCUsCollection _designLocationCUs;
        
        /// <summary>
        /// The backing field for the Designs property
        /// </summary>
        private DesignLocationDesignsCollection _designs;
        
        /// <summary>
        /// The backing field for the ErpBomItemDatas property
        /// </summary>
        private DesignLocationErpBomItemDatasCollection _erpBomItemDatas;
        
        /// <summary>
        /// The backing field for the MiscCostItems property
        /// </summary>
        private DesignLocationMiscCostItemsCollection _miscCostItems;
        
        private static IClass _classInstance;
        
        public DesignLocation()
        {
            this._conditionFactors = new DesignLocationConditionFactorsCollection(this);
            this._conditionFactors.CollectionChanging += this.ConditionFactorsCollectionChanging;
            this._conditionFactors.CollectionChanged += this.ConditionFactorsCollectionChanged;
            this._materialItems = new DesignLocationMaterialItemsCollection(this);
            this._materialItems.CollectionChanging += this.MaterialItemsCollectionChanging;
            this._materialItems.CollectionChanged += this.MaterialItemsCollectionChanged;
            this._diagrams = new DesignLocationDiagramsCollection(this);
            this._diagrams.CollectionChanging += this.DiagramsCollectionChanging;
            this._diagrams.CollectionChanged += this.DiagramsCollectionChanged;
            this._workLocations = new DesignLocationWorkLocationsCollection(this);
            this._workLocations.CollectionChanging += this.WorkLocationsCollectionChanging;
            this._workLocations.CollectionChanged += this.WorkLocationsCollectionChanged;
            this._designLocationCUs = new DesignLocationDesignLocationCUsCollection(this);
            this._designLocationCUs.CollectionChanging += this.DesignLocationCUsCollectionChanging;
            this._designLocationCUs.CollectionChanged += this.DesignLocationCUsCollectionChanged;
            this._designs = new DesignLocationDesignsCollection(this);
            this._designs.CollectionChanging += this.DesignsCollectionChanging;
            this._designs.CollectionChanged += this.DesignsCollectionChanged;
            this._erpBomItemDatas = new DesignLocationErpBomItemDatasCollection(this);
            this._erpBomItemDatas.CollectionChanging += this.ErpBomItemDatasCollectionChanging;
            this._erpBomItemDatas.CollectionChanged += this.ErpBomItemDatasCollectionChanged;
            this._miscCostItems = new DesignLocationMiscCostItemsCollection(this);
            this._miscCostItems.CollectionChanging += this.MiscCostItemsCollectionChanging;
            this._miscCostItems.CollectionChanged += this.MiscCostItemsCollectionChanged;
        }
        
        /// <summary>
        /// The spanLength property
        /// </summary>
        [XmlElementNameAttribute("spanLength")]
        [XmlAttributeAttribute(true)]
        public virtual float SpanLength
        {
            get
            {
                return this._spanLength;
            }
            set
            {
                if ((this._spanLength != value))
                {
                    float old = this._spanLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpanLengthChanging(e);
                    this.OnPropertyChanging("SpanLength", e);
                    this._spanLength = value;
                    this.OnSpanLengthChanged(e);
                    this.OnPropertyChanged("SpanLength", e);
                }
            }
        }
        
        /// <summary>
        /// The ConditionFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConditionFactor> ConditionFactors
        {
            get
            {
                return this._conditionFactors;
            }
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get
            {
                return this._materialItems;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The Diagrams property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDiagram> Diagrams
        {
            get
            {
                return this._diagrams;
            }
        }
        
        /// <summary>
        /// The WorkLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkLocation> WorkLocations
        {
            get
            {
                return this._workLocations;
            }
        }
        
        /// <summary>
        /// The DesignLocationCUs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocationCU> DesignLocationCUs
        {
            get
            {
                return this._designLocationCUs;
            }
        }
        
        /// <summary>
        /// The Designs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesign> Designs
        {
            get
            {
                return this._designs;
            }
        }
        
        /// <summary>
        /// The ErpBomItemDatas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpBomItemData> ErpBomItemDatas
        {
            get
            {
                return this._erpBomItemDatas;
            }
        }
        
        /// <summary>
        /// The MiscCostItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMiscCostItem> MiscCostItems
        {
            get
            {
                return this._miscCostItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DesignLocationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
                            "ation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SpanLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpanLengthChanging;
        
        /// <summary>
        /// Gets fired when the SpanLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpanLengthChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Raises the SpanLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpanLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpanLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpanLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpanLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpanLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConditionFactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConditionFactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MaterialItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MaterialItems", e);
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Diagrams property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiagramsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Diagrams", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Diagrams property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiagramsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Diagrams", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkLocations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkLocations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocationCUs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocationCUs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Designs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Designs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpBomItemDatas", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpBomItemDatas", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MiscCostItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MiscCostItems", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SPANLENGTH"))
            {
                return this.SpanLength;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONDITIONFACTORS"))
            {
                return this._conditionFactors;
            }
            if ((feature == "MATERIALITEMS"))
            {
                return this._materialItems;
            }
            if ((feature == "DIAGRAMS"))
            {
                return this._diagrams;
            }
            if ((feature == "WORKLOCATIONS"))
            {
                return this._workLocations;
            }
            if ((feature == "DESIGNLOCATIONCUS"))
            {
                return this._designLocationCUs;
            }
            if ((feature == "DESIGNS"))
            {
                return this._designs;
            }
            if ((feature == "ERPBOMITEMDATAS"))
            {
                return this._erpBomItemDatas;
            }
            if ((feature == "MISCCOSTITEMS"))
            {
                return this._miscCostItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "SPANLENGTH"))
            {
                this.SpanLength = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
                        "ation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DesignLocation class
        /// </summary>
        public class DesignLocationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DesignLocation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DesignLocationReferencedElementsCollection(DesignLocation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConditionFactors.Count);
                    count = (count + this._parent.MaterialItems.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Diagrams.Count);
                    count = (count + this._parent.WorkLocations.Count);
                    count = (count + this._parent.DesignLocationCUs.Count);
                    count = (count + this._parent.Designs.Count);
                    count = (count + this._parent.ErpBomItemDatas.Count);
                    count = (count + this._parent.MiscCostItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.Diagrams.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Designs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.Diagrams.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Designs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IConditionFactor conditionFactorsCasted = item.As<IConditionFactor>();
                if ((conditionFactorsCasted != null))
                {
                    this._parent.ConditionFactors.Add(conditionFactorsCasted);
                }
                IMaterialItem materialItemsCasted = item.As<IMaterialItem>();
                if ((materialItemsCasted != null))
                {
                    this._parent.MaterialItems.Add(materialItemsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IDiagram diagramsCasted = item.As<IDiagram>();
                if ((diagramsCasted != null))
                {
                    this._parent.Diagrams.Add(diagramsCasted);
                }
                IWorkLocation workLocationsCasted = item.As<IWorkLocation>();
                if ((workLocationsCasted != null))
                {
                    this._parent.WorkLocations.Add(workLocationsCasted);
                }
                IDesignLocationCU designLocationCUsCasted = item.As<IDesignLocationCU>();
                if ((designLocationCUsCasted != null))
                {
                    this._parent.DesignLocationCUs.Add(designLocationCUsCasted);
                }
                IDesign designsCasted = item.As<IDesign>();
                if ((designsCasted != null))
                {
                    this._parent.Designs.Add(designsCasted);
                }
                IErpBomItemData erpBomItemDatasCasted = item.As<IErpBomItemData>();
                if ((erpBomItemDatasCasted != null))
                {
                    this._parent.ErpBomItemDatas.Add(erpBomItemDatasCasted);
                }
                IMiscCostItem miscCostItemsCasted = item.As<IMiscCostItem>();
                if ((miscCostItemsCasted != null))
                {
                    this._parent.MiscCostItems.Add(miscCostItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConditionFactors.Clear();
                this._parent.MaterialItems.Clear();
                this._parent.Status = null;
                this._parent.Diagrams.Clear();
                this._parent.WorkLocations.Clear();
                this._parent.DesignLocationCUs.Clear();
                this._parent.Designs.Clear();
                this._parent.ErpBomItemDatas.Clear();
                this._parent.MiscCostItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConditionFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.MaterialItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.Diagrams.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkLocations.Contains(item))
                {
                    return true;
                }
                if (this._parent.DesignLocationCUs.Contains(item))
                {
                    return true;
                }
                if (this._parent.Designs.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpBomItemDatas.Contains(item))
                {
                    return true;
                }
                if (this._parent.MiscCostItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> conditionFactorsEnumerator = this._parent.ConditionFactors.GetEnumerator();
                try
                {
                    for (
                    ; conditionFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conditionFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conditionFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> materialItemsEnumerator = this._parent.MaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; materialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = materialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    materialItemsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> diagramsEnumerator = this._parent.Diagrams.GetEnumerator();
                try
                {
                    for (
                    ; diagramsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = diagramsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    diagramsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workLocationsEnumerator = this._parent.WorkLocations.GetEnumerator();
                try
                {
                    for (
                    ; workLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workLocationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> designLocationCUsEnumerator = this._parent.DesignLocationCUs.GetEnumerator();
                try
                {
                    for (
                    ; designLocationCUsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationCUsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationCUsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> designsEnumerator = this._parent.Designs.GetEnumerator();
                try
                {
                    for (
                    ; designsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpBomItemDatasEnumerator = this._parent.ErpBomItemDatas.GetEnumerator();
                try
                {
                    for (
                    ; erpBomItemDatasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpBomItemDatasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpBomItemDatasEnumerator.Dispose();
                }
                IEnumerator<IModelElement> miscCostItemsEnumerator = this._parent.MiscCostItems.GetEnumerator();
                try
                {
                    for (
                    ; miscCostItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = miscCostItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    miscCostItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IConditionFactor conditionFactorItem = item.As<IConditionFactor>();
                if (((conditionFactorItem != null) 
                            && this._parent.ConditionFactors.Remove(conditionFactorItem)))
                {
                    return true;
                }
                IMaterialItem materialItemItem = item.As<IMaterialItem>();
                if (((materialItemItem != null) 
                            && this._parent.MaterialItems.Remove(materialItemItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IDiagram diagramItem = item.As<IDiagram>();
                if (((diagramItem != null) 
                            && this._parent.Diagrams.Remove(diagramItem)))
                {
                    return true;
                }
                IWorkLocation workLocationItem = item.As<IWorkLocation>();
                if (((workLocationItem != null) 
                            && this._parent.WorkLocations.Remove(workLocationItem)))
                {
                    return true;
                }
                IDesignLocationCU designLocationCUItem = item.As<IDesignLocationCU>();
                if (((designLocationCUItem != null) 
                            && this._parent.DesignLocationCUs.Remove(designLocationCUItem)))
                {
                    return true;
                }
                IDesign designItem = item.As<IDesign>();
                if (((designItem != null) 
                            && this._parent.Designs.Remove(designItem)))
                {
                    return true;
                }
                IErpBomItemData erpBomItemDataItem = item.As<IErpBomItemData>();
                if (((erpBomItemDataItem != null) 
                            && this._parent.ErpBomItemDatas.Remove(erpBomItemDataItem)))
                {
                    return true;
                }
                IMiscCostItem miscCostItemItem = item.As<IMiscCostItem>();
                if (((miscCostItemItem != null) 
                            && this._parent.MiscCostItems.Remove(miscCostItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConditionFactors).Concat(this._parent.MaterialItems).Concat(this._parent.Status).Concat(this._parent.Diagrams).Concat(this._parent.WorkLocations).Concat(this._parent.DesignLocationCUs).Concat(this._parent.Designs).Concat(this._parent.ErpBomItemDatas).Concat(this._parent.MiscCostItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spanLength property
        /// </summary>
        private sealed class SpanLengthProxy : ModelPropertyChange<IDesignLocation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpanLengthProxy(IDesignLocation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpanLength;
                }
                set
                {
                    this.ModelElement.SpanLength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpanLengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpanLengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IDesignLocation, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IDesignLocation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
    }
}

