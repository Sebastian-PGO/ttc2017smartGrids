//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the WorkTask class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkTask")]
    [DebuggerDisplayAttribute("WorkTask {UUID}")]
    public class WorkTask : Document, IWorkTask, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Priority property
        /// </summary>
        private string _priority;
        
        /// <summary>
        /// The backing field for the SchedOverride property
        /// </summary>
        private string _schedOverride;
        
        /// <summary>
        /// The backing field for the Crews property
        /// </summary>
        private WorkTaskCrewsCollection _crews;
        
        /// <summary>
        /// The backing field for the SwitchingSchedules property
        /// </summary>
        private WorkTaskSwitchingSchedulesCollection _switchingSchedules;
        
        /// <summary>
        /// The backing field for the MiscCostItems property
        /// </summary>
        private WorkTaskMiscCostItemsCollection _miscCostItems;
        
        /// <summary>
        /// The backing field for the LaborItems property
        /// </summary>
        private WorkTaskLaborItemsCollection _laborItems;
        
        /// <summary>
        /// The backing field for the WorkFlowStep property
        /// </summary>
        private IWorkFlowStep _workFlowStep;
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private WorkTaskAssetsCollection _assets;
        
        /// <summary>
        /// The backing field for the Capabilities property
        /// </summary>
        private WorkTaskCapabilitiesCollection _capabilities;
        
        /// <summary>
        /// The backing field for the Work property
        /// </summary>
        private IWork _work;
        
        /// <summary>
        /// The backing field for the DesignLocationCUs property
        /// </summary>
        private WorkTaskDesignLocationCUsCollection _designLocationCUs;
        
        /// <summary>
        /// The backing field for the ContractorItems property
        /// </summary>
        private WorkTaskContractorItemsCollection _contractorItems;
        
        /// <summary>
        /// The backing field for the Design property
        /// </summary>
        private IDesign _design;
        
        /// <summary>
        /// The backing field for the EquipmentItems property
        /// </summary>
        private WorkTaskEquipmentItemsCollection _equipmentItems;
        
        /// <summary>
        /// The backing field for the MaterialItems property
        /// </summary>
        private WorkTaskMaterialItemsCollection _materialItems;
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private WorkTaskWorkCostDetailsCollection _workCostDetails;
        
        /// <summary>
        /// The backing field for the QualificationRequirements property
        /// </summary>
        private WorkTaskQualificationRequirementsCollection _qualificationRequirements;
        
        /// <summary>
        /// The backing field for the Usages property
        /// </summary>
        private WorkTaskUsagesCollection _usages;
        
        /// <summary>
        /// The backing field for the OverheadCost property
        /// </summary>
        private IOverheadCost _overheadCost;
        
        private static IClass _classInstance;
        
        public WorkTask()
        {
            this._crews = new WorkTaskCrewsCollection(this);
            this._crews.CollectionChanging += this.CrewsCollectionChanging;
            this._crews.CollectionChanged += this.CrewsCollectionChanged;
            this._switchingSchedules = new WorkTaskSwitchingSchedulesCollection(this);
            this._switchingSchedules.CollectionChanging += this.SwitchingSchedulesCollectionChanging;
            this._switchingSchedules.CollectionChanged += this.SwitchingSchedulesCollectionChanged;
            this._miscCostItems = new WorkTaskMiscCostItemsCollection(this);
            this._miscCostItems.CollectionChanging += this.MiscCostItemsCollectionChanging;
            this._miscCostItems.CollectionChanged += this.MiscCostItemsCollectionChanged;
            this._laborItems = new WorkTaskLaborItemsCollection(this);
            this._laborItems.CollectionChanging += this.LaborItemsCollectionChanging;
            this._laborItems.CollectionChanged += this.LaborItemsCollectionChanged;
            this._assets = new WorkTaskAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
            this._capabilities = new WorkTaskCapabilitiesCollection(this);
            this._capabilities.CollectionChanging += this.CapabilitiesCollectionChanging;
            this._capabilities.CollectionChanged += this.CapabilitiesCollectionChanged;
            this._designLocationCUs = new WorkTaskDesignLocationCUsCollection(this);
            this._designLocationCUs.CollectionChanging += this.DesignLocationCUsCollectionChanging;
            this._designLocationCUs.CollectionChanged += this.DesignLocationCUsCollectionChanged;
            this._contractorItems = new WorkTaskContractorItemsCollection(this);
            this._contractorItems.CollectionChanging += this.ContractorItemsCollectionChanging;
            this._contractorItems.CollectionChanged += this.ContractorItemsCollectionChanged;
            this._equipmentItems = new WorkTaskEquipmentItemsCollection(this);
            this._equipmentItems.CollectionChanging += this.EquipmentItemsCollectionChanging;
            this._equipmentItems.CollectionChanged += this.EquipmentItemsCollectionChanged;
            this._materialItems = new WorkTaskMaterialItemsCollection(this);
            this._materialItems.CollectionChanging += this.MaterialItemsCollectionChanging;
            this._materialItems.CollectionChanged += this.MaterialItemsCollectionChanged;
            this._workCostDetails = new WorkTaskWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._qualificationRequirements = new WorkTaskQualificationRequirementsCollection(this);
            this._qualificationRequirements.CollectionChanging += this.QualificationRequirementsCollectionChanging;
            this._qualificationRequirements.CollectionChanged += this.QualificationRequirementsCollectionChanged;
            this._usages = new WorkTaskUsagesCollection(this);
            this._usages.CollectionChanging += this.UsagesCollectionChanging;
            this._usages.CollectionChanged += this.UsagesCollectionChanged;
        }
        
        /// <summary>
        /// The priority property
        /// </summary>
        [XmlElementNameAttribute("priority")]
        [XmlAttributeAttribute(true)]
        public virtual string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    string old = this._priority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriorityChanging(e);
                    this.OnPropertyChanging("Priority", e);
                    this._priority = value;
                    this.OnPriorityChanged(e);
                    this.OnPropertyChanged("Priority", e);
                }
            }
        }
        
        /// <summary>
        /// The schedOverride property
        /// </summary>
        [XmlElementNameAttribute("schedOverride")]
        [XmlAttributeAttribute(true)]
        public virtual string SchedOverride
        {
            get
            {
                return this._schedOverride;
            }
            set
            {
                if ((this._schedOverride != value))
                {
                    string old = this._schedOverride;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSchedOverrideChanging(e);
                    this.OnPropertyChanging("SchedOverride", e);
                    this._schedOverride = value;
                    this.OnSchedOverrideChanged(e);
                    this.OnPropertyChanged("SchedOverride", e);
                }
            }
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICrew> Crews
        {
            get
            {
                return this._crews;
            }
        }
        
        /// <summary>
        /// The SwitchingSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingSchedule> SwitchingSchedules
        {
            get
            {
                return this._switchingSchedules;
            }
        }
        
        /// <summary>
        /// The MiscCostItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMiscCostItem> MiscCostItems
        {
            get
            {
                return this._miscCostItems;
            }
        }
        
        /// <summary>
        /// The LaborItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILaborItem> LaborItems
        {
            get
            {
                return this._laborItems;
            }
        }
        
        /// <summary>
        /// The WorkFlowStep property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        public virtual IWorkFlowStep WorkFlowStep
        {
            get
            {
                return this._workFlowStep;
            }
            set
            {
                if ((this._workFlowStep != value))
                {
                    IWorkFlowStep old = this._workFlowStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkFlowStepChanging(e);
                    this.OnPropertyChanging("WorkFlowStep", e);
                    this._workFlowStep = value;
                    if ((old != null))
                    {
                        old.WorkTasks.Remove(this);
                        old.Deleted -= this.OnResetWorkFlowStep;
                    }
                    if ((value != null))
                    {
                        value.WorkTasks.Add(this);
                        value.Deleted += this.OnResetWorkFlowStep;
                    }
                    this.OnWorkFlowStepChanged(e);
                    this.OnPropertyChanged("WorkFlowStep", e);
                }
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// The Capabilities property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICapability> Capabilities
        {
            get
            {
                return this._capabilities;
            }
        }
        
        /// <summary>
        /// The Work property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        public virtual IWork Work
        {
            get
            {
                return this._work;
            }
            set
            {
                if ((this._work != value))
                {
                    IWork old = this._work;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkChanging(e);
                    this.OnPropertyChanging("Work", e);
                    this._work = value;
                    if ((old != null))
                    {
                        old.WorkTasks.Remove(this);
                        old.Deleted -= this.OnResetWork;
                    }
                    if ((value != null))
                    {
                        value.WorkTasks.Add(this);
                        value.Deleted += this.OnResetWork;
                    }
                    this.OnWorkChanged(e);
                    this.OnPropertyChanged("Work", e);
                }
            }
        }
        
        /// <summary>
        /// The DesignLocationCUs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocationCU> DesignLocationCUs
        {
            get
            {
                return this._designLocationCUs;
            }
        }
        
        /// <summary>
        /// The ContractorItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContractorItem> ContractorItems
        {
            get
            {
                return this._contractorItems;
            }
        }
        
        /// <summary>
        /// The Design property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        public virtual IDesign Design
        {
            get
            {
                return this._design;
            }
            set
            {
                if ((this._design != value))
                {
                    IDesign old = this._design;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignChanging(e);
                    this.OnPropertyChanging("Design", e);
                    this._design = value;
                    if ((old != null))
                    {
                        old.WorkTasks.Remove(this);
                        old.Deleted -= this.OnResetDesign;
                    }
                    if ((value != null))
                    {
                        value.WorkTasks.Add(this);
                        value.Deleted += this.OnResetDesign;
                    }
                    this.OnDesignChanged(e);
                    this.OnPropertyChanged("Design", e);
                }
            }
        }
        
        /// <summary>
        /// The EquipmentItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEquipmentItem> EquipmentItems
        {
            get
            {
                return this._equipmentItems;
            }
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get
            {
                return this._materialItems;
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The QualificationRequirements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IQualificationRequirement> QualificationRequirements
        {
            get
            {
                return this._qualificationRequirements;
            }
        }
        
        /// <summary>
        /// The Usages property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTask")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUsage> Usages
        {
            get
            {
                return this._usages;
            }
        }
        
        /// <summary>
        /// The OverheadCost property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkTasks")]
        public virtual IOverheadCost OverheadCost
        {
            get
            {
                return this._overheadCost;
            }
            set
            {
                if ((this._overheadCost != value))
                {
                    IOverheadCost old = this._overheadCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverheadCostChanging(e);
                    this.OnPropertyChanging("OverheadCost", e);
                    this._overheadCost = value;
                    if ((old != null))
                    {
                        old.WorkTasks.Remove(this);
                        old.Deleted -= this.OnResetOverheadCost;
                    }
                    if ((value != null))
                    {
                        value.WorkTasks.Add(this);
                        value.Deleted += this.OnResetOverheadCost;
                    }
                    this.OnOverheadCostChanged(e);
                    this.OnPropertyChanged("OverheadCost", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WorkTaskReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkTask")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Priority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanging;
        
        /// <summary>
        /// Gets fired when the Priority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanged;
        
        /// <summary>
        /// Gets fired before the SchedOverride property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchedOverrideChanging;
        
        /// <summary>
        /// Gets fired when the SchedOverride property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchedOverrideChanged;
        
        /// <summary>
        /// Gets fired before the WorkFlowStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkFlowStepChanging;
        
        /// <summary>
        /// Gets fired when the WorkFlowStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkFlowStepChanged;
        
        /// <summary>
        /// Gets fired before the Work property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkChanging;
        
        /// <summary>
        /// Gets fired when the Work property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkChanged;
        
        /// <summary>
        /// Gets fired before the Design property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanging;
        
        /// <summary>
        /// Gets fired when the Design property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanged;
        
        /// <summary>
        /// Gets fired before the OverheadCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverheadCostChanging;
        
        /// <summary>
        /// Gets fired when the OverheadCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverheadCostChanged;
        
        /// <summary>
        /// Raises the PriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SchedOverrideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedOverrideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchedOverrideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SchedOverrideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedOverrideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchedOverrideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Crews", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crews", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchingSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SwitchingSchedules", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchingSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchingSchedules", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MiscCostItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MiscCostItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LaborItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LaborItems", e);
        }
        
        /// <summary>
        /// Raises the WorkFlowStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkFlowStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkFlowStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkFlowStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkFlowStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkFlowStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkFlowStep property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkFlowStep(object sender, System.EventArgs eventArgs)
        {
            this.WorkFlowStep = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Assets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Capabilities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapabilitiesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Capabilities", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Capabilities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapabilitiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Capabilities", e);
        }
        
        /// <summary>
        /// Raises the WorkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Work property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWork(object sender, System.EventArgs eventArgs)
        {
            this.Work = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocationCUs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocationCUs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContractorItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContractorItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContractorItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContractorItems", e);
        }
        
        /// <summary>
        /// Raises the DesignChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Design property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesign(object sender, System.EventArgs eventArgs)
        {
            this.Design = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EquipmentItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EquipmentItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EquipmentItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EquipmentItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MaterialItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MaterialItems", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("QualificationRequirements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("QualificationRequirements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Usages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsagesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Usages", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Usages property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsagesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Usages", e);
        }
        
        /// <summary>
        /// Raises the OverheadCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverheadCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverheadCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverheadCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverheadCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverheadCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OverheadCost property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOverheadCost(object sender, System.EventArgs eventArgs)
        {
            this.OverheadCost = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PRIORITY"))
            {
                return this.Priority;
            }
            if ((attribute == "SCHEDOVERRIDE"))
            {
                return this.SchedOverride;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CREWS"))
            {
                return this._crews;
            }
            if ((feature == "SWITCHINGSCHEDULES"))
            {
                return this._switchingSchedules;
            }
            if ((feature == "MISCCOSTITEMS"))
            {
                return this._miscCostItems;
            }
            if ((feature == "LABORITEMS"))
            {
                return this._laborItems;
            }
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            if ((feature == "CAPABILITIES"))
            {
                return this._capabilities;
            }
            if ((feature == "DESIGNLOCATIONCUS"))
            {
                return this._designLocationCUs;
            }
            if ((feature == "CONTRACTORITEMS"))
            {
                return this._contractorItems;
            }
            if ((feature == "EQUIPMENTITEMS"))
            {
                return this._equipmentItems;
            }
            if ((feature == "MATERIALITEMS"))
            {
                return this._materialItems;
            }
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "QUALIFICATIONREQUIREMENTS"))
            {
                return this._qualificationRequirements;
            }
            if ((feature == "USAGES"))
            {
                return this._usages;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WORKFLOWSTEP"))
            {
                this.WorkFlowStep = ((IWorkFlowStep)(value));
                return;
            }
            if ((feature == "WORK"))
            {
                this.Work = ((IWork)(value));
                return;
            }
            if ((feature == "DESIGN"))
            {
                this.Design = ((IDesign)(value));
                return;
            }
            if ((feature == "OVERHEADCOST"))
            {
                this.OverheadCost = ((IOverheadCost)(value));
                return;
            }
            if ((feature == "PRIORITY"))
            {
                this.Priority = ((string)(value));
                return;
            }
            if ((feature == "SCHEDOVERRIDE"))
            {
                this.SchedOverride = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "WorkFlowStep"))
            {
                return new WorkFlowStepProxy(this);
            }
            if ((attribute == "Work"))
            {
                return new WorkProxy(this);
            }
            if ((attribute == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((attribute == "OverheadCost"))
            {
                return new OverheadCostProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "WorkFlowStep"))
            {
                return new WorkFlowStepProxy(this);
            }
            if ((reference == "Work"))
            {
                return new WorkProxy(this);
            }
            if ((reference == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((reference == "OverheadCost"))
            {
                return new OverheadCostProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkTask")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WorkTask class
        /// </summary>
        public class WorkTaskReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WorkTask _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WorkTaskReferencedElementsCollection(WorkTask parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Crews.Count);
                    count = (count + this._parent.SwitchingSchedules.Count);
                    count = (count + this._parent.MiscCostItems.Count);
                    count = (count + this._parent.LaborItems.Count);
                    if ((this._parent.WorkFlowStep != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Assets.Count);
                    count = (count + this._parent.Capabilities.Count);
                    if ((this._parent.Work != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DesignLocationCUs.Count);
                    count = (count + this._parent.ContractorItems.Count);
                    if ((this._parent.Design != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EquipmentItems.Count);
                    count = (count + this._parent.MaterialItems.Count);
                    count = (count + this._parent.WorkCostDetails.Count);
                    count = (count + this._parent.QualificationRequirements.Count);
                    count = (count + this._parent.Usages.Count);
                    if ((this._parent.OverheadCost != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Crews.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SwitchingSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkFlowStepChanged += this.PropagateValueChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Capabilities.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkChanged += this.PropagateValueChanges;
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContractorItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignChanged += this.PropagateValueChanges;
                this._parent.EquipmentItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Usages.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OverheadCostChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Crews.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SwitchingSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkFlowStepChanged -= this.PropagateValueChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Capabilities.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkChanged -= this.PropagateValueChanges;
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContractorItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignChanged -= this.PropagateValueChanges;
                this._parent.EquipmentItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Usages.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OverheadCostChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICrew crewsCasted = item.As<ICrew>();
                if ((crewsCasted != null))
                {
                    this._parent.Crews.Add(crewsCasted);
                }
                ISwitchingSchedule switchingSchedulesCasted = item.As<ISwitchingSchedule>();
                if ((switchingSchedulesCasted != null))
                {
                    this._parent.SwitchingSchedules.Add(switchingSchedulesCasted);
                }
                IMiscCostItem miscCostItemsCasted = item.As<IMiscCostItem>();
                if ((miscCostItemsCasted != null))
                {
                    this._parent.MiscCostItems.Add(miscCostItemsCasted);
                }
                ILaborItem laborItemsCasted = item.As<ILaborItem>();
                if ((laborItemsCasted != null))
                {
                    this._parent.LaborItems.Add(laborItemsCasted);
                }
                if ((this._parent.WorkFlowStep == null))
                {
                    IWorkFlowStep workFlowStepCasted = item.As<IWorkFlowStep>();
                    if ((workFlowStepCasted != null))
                    {
                        this._parent.WorkFlowStep = workFlowStepCasted;
                        return;
                    }
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
                ICapability capabilitiesCasted = item.As<ICapability>();
                if ((capabilitiesCasted != null))
                {
                    this._parent.Capabilities.Add(capabilitiesCasted);
                }
                if ((this._parent.Work == null))
                {
                    IWork workCasted = item.As<IWork>();
                    if ((workCasted != null))
                    {
                        this._parent.Work = workCasted;
                        return;
                    }
                }
                IDesignLocationCU designLocationCUsCasted = item.As<IDesignLocationCU>();
                if ((designLocationCUsCasted != null))
                {
                    this._parent.DesignLocationCUs.Add(designLocationCUsCasted);
                }
                IContractorItem contractorItemsCasted = item.As<IContractorItem>();
                if ((contractorItemsCasted != null))
                {
                    this._parent.ContractorItems.Add(contractorItemsCasted);
                }
                if ((this._parent.Design == null))
                {
                    IDesign designCasted = item.As<IDesign>();
                    if ((designCasted != null))
                    {
                        this._parent.Design = designCasted;
                        return;
                    }
                }
                IEquipmentItem equipmentItemsCasted = item.As<IEquipmentItem>();
                if ((equipmentItemsCasted != null))
                {
                    this._parent.EquipmentItems.Add(equipmentItemsCasted);
                }
                IMaterialItem materialItemsCasted = item.As<IMaterialItem>();
                if ((materialItemsCasted != null))
                {
                    this._parent.MaterialItems.Add(materialItemsCasted);
                }
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                IQualificationRequirement qualificationRequirementsCasted = item.As<IQualificationRequirement>();
                if ((qualificationRequirementsCasted != null))
                {
                    this._parent.QualificationRequirements.Add(qualificationRequirementsCasted);
                }
                IUsage usagesCasted = item.As<IUsage>();
                if ((usagesCasted != null))
                {
                    this._parent.Usages.Add(usagesCasted);
                }
                if ((this._parent.OverheadCost == null))
                {
                    IOverheadCost overheadCostCasted = item.As<IOverheadCost>();
                    if ((overheadCostCasted != null))
                    {
                        this._parent.OverheadCost = overheadCostCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Crews.Clear();
                this._parent.SwitchingSchedules.Clear();
                this._parent.MiscCostItems.Clear();
                this._parent.LaborItems.Clear();
                this._parent.WorkFlowStep = null;
                this._parent.Assets.Clear();
                this._parent.Capabilities.Clear();
                this._parent.Work = null;
                this._parent.DesignLocationCUs.Clear();
                this._parent.ContractorItems.Clear();
                this._parent.Design = null;
                this._parent.EquipmentItems.Clear();
                this._parent.MaterialItems.Clear();
                this._parent.WorkCostDetails.Clear();
                this._parent.QualificationRequirements.Clear();
                this._parent.Usages.Clear();
                this._parent.OverheadCost = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Crews.Contains(item))
                {
                    return true;
                }
                if (this._parent.SwitchingSchedules.Contains(item))
                {
                    return true;
                }
                if (this._parent.MiscCostItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.LaborItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WorkFlowStep))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                if (this._parent.Capabilities.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Work))
                {
                    return true;
                }
                if (this._parent.DesignLocationCUs.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContractorItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Design))
                {
                    return true;
                }
                if (this._parent.EquipmentItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.MaterialItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if (this._parent.QualificationRequirements.Contains(item))
                {
                    return true;
                }
                if (this._parent.Usages.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OverheadCost))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> crewsEnumerator = this._parent.Crews.GetEnumerator();
                try
                {
                    for (
                    ; crewsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> switchingSchedulesEnumerator = this._parent.SwitchingSchedules.GetEnumerator();
                try
                {
                    for (
                    ; switchingSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchingSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchingSchedulesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> miscCostItemsEnumerator = this._parent.MiscCostItems.GetEnumerator();
                try
                {
                    for (
                    ; miscCostItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = miscCostItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    miscCostItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> laborItemsEnumerator = this._parent.LaborItems.GetEnumerator();
                try
                {
                    for (
                    ; laborItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = laborItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    laborItemsEnumerator.Dispose();
                }
                if ((this._parent.WorkFlowStep != null))
                {
                    array[arrayIndex] = this._parent.WorkFlowStep;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> capabilitiesEnumerator = this._parent.Capabilities.GetEnumerator();
                try
                {
                    for (
                    ; capabilitiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = capabilitiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    capabilitiesEnumerator.Dispose();
                }
                if ((this._parent.Work != null))
                {
                    array[arrayIndex] = this._parent.Work;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> designLocationCUsEnumerator = this._parent.DesignLocationCUs.GetEnumerator();
                try
                {
                    for (
                    ; designLocationCUsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationCUsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationCUsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> contractorItemsEnumerator = this._parent.ContractorItems.GetEnumerator();
                try
                {
                    for (
                    ; contractorItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contractorItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contractorItemsEnumerator.Dispose();
                }
                if ((this._parent.Design != null))
                {
                    array[arrayIndex] = this._parent.Design;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> equipmentItemsEnumerator = this._parent.EquipmentItems.GetEnumerator();
                try
                {
                    for (
                    ; equipmentItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = equipmentItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    equipmentItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> materialItemsEnumerator = this._parent.MaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; materialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = materialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    materialItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> qualificationRequirementsEnumerator = this._parent.QualificationRequirements.GetEnumerator();
                try
                {
                    for (
                    ; qualificationRequirementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qualificationRequirementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qualificationRequirementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> usagesEnumerator = this._parent.Usages.GetEnumerator();
                try
                {
                    for (
                    ; usagesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = usagesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    usagesEnumerator.Dispose();
                }
                if ((this._parent.OverheadCost != null))
                {
                    array[arrayIndex] = this._parent.OverheadCost;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICrew crewItem = item.As<ICrew>();
                if (((crewItem != null) 
                            && this._parent.Crews.Remove(crewItem)))
                {
                    return true;
                }
                ISwitchingSchedule switchingScheduleItem = item.As<ISwitchingSchedule>();
                if (((switchingScheduleItem != null) 
                            && this._parent.SwitchingSchedules.Remove(switchingScheduleItem)))
                {
                    return true;
                }
                IMiscCostItem miscCostItemItem = item.As<IMiscCostItem>();
                if (((miscCostItemItem != null) 
                            && this._parent.MiscCostItems.Remove(miscCostItemItem)))
                {
                    return true;
                }
                ILaborItem laborItemItem = item.As<ILaborItem>();
                if (((laborItemItem != null) 
                            && this._parent.LaborItems.Remove(laborItemItem)))
                {
                    return true;
                }
                if ((this._parent.WorkFlowStep == item))
                {
                    this._parent.WorkFlowStep = null;
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                ICapability capabilityItem = item.As<ICapability>();
                if (((capabilityItem != null) 
                            && this._parent.Capabilities.Remove(capabilityItem)))
                {
                    return true;
                }
                if ((this._parent.Work == item))
                {
                    this._parent.Work = null;
                    return true;
                }
                IDesignLocationCU designLocationCUItem = item.As<IDesignLocationCU>();
                if (((designLocationCUItem != null) 
                            && this._parent.DesignLocationCUs.Remove(designLocationCUItem)))
                {
                    return true;
                }
                IContractorItem contractorItemItem = item.As<IContractorItem>();
                if (((contractorItemItem != null) 
                            && this._parent.ContractorItems.Remove(contractorItemItem)))
                {
                    return true;
                }
                if ((this._parent.Design == item))
                {
                    this._parent.Design = null;
                    return true;
                }
                IEquipmentItem equipmentItemItem = item.As<IEquipmentItem>();
                if (((equipmentItemItem != null) 
                            && this._parent.EquipmentItems.Remove(equipmentItemItem)))
                {
                    return true;
                }
                IMaterialItem materialItemItem = item.As<IMaterialItem>();
                if (((materialItemItem != null) 
                            && this._parent.MaterialItems.Remove(materialItemItem)))
                {
                    return true;
                }
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                IQualificationRequirement qualificationRequirementItem = item.As<IQualificationRequirement>();
                if (((qualificationRequirementItem != null) 
                            && this._parent.QualificationRequirements.Remove(qualificationRequirementItem)))
                {
                    return true;
                }
                IUsage usageItem = item.As<IUsage>();
                if (((usageItem != null) 
                            && this._parent.Usages.Remove(usageItem)))
                {
                    return true;
                }
                if ((this._parent.OverheadCost == item))
                {
                    this._parent.OverheadCost = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Crews).Concat(this._parent.SwitchingSchedules).Concat(this._parent.MiscCostItems).Concat(this._parent.LaborItems).Concat(this._parent.WorkFlowStep).Concat(this._parent.Assets).Concat(this._parent.Capabilities).Concat(this._parent.Work).Concat(this._parent.DesignLocationCUs).Concat(this._parent.ContractorItems).Concat(this._parent.Design).Concat(this._parent.EquipmentItems).Concat(this._parent.MaterialItems).Concat(this._parent.WorkCostDetails).Concat(this._parent.QualificationRequirements).Concat(this._parent.Usages).Concat(this._parent.OverheadCost).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the priority property
        /// </summary>
        private sealed class PriorityProxy : ModelPropertyChange<IWorkTask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriorityProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Priority;
                }
                set
                {
                    this.ModelElement.Priority = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PriorityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PriorityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the schedOverride property
        /// </summary>
        private sealed class SchedOverrideProxy : ModelPropertyChange<IWorkTask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SchedOverrideProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SchedOverride;
                }
                set
                {
                    this.ModelElement.SchedOverride = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SchedOverrideChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SchedOverrideChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkFlowStep property
        /// </summary>
        private sealed class WorkFlowStepProxy : ModelPropertyChange<IWorkTask, IWorkFlowStep>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkFlowStepProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkFlowStep Value
            {
                get
                {
                    return this.ModelElement.WorkFlowStep;
                }
                set
                {
                    this.ModelElement.WorkFlowStep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkFlowStepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkFlowStepChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Work property
        /// </summary>
        private sealed class WorkProxy : ModelPropertyChange<IWorkTask, IWork>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWork Value
            {
                get
                {
                    return this.ModelElement.Work;
                }
                set
                {
                    this.ModelElement.Work = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WorkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Design property
        /// </summary>
        private sealed class DesignProxy : ModelPropertyChange<IWorkTask, IDesign>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesign Value
            {
                get
                {
                    return this.ModelElement.Design;
                }
                set
                {
                    this.ModelElement.Design = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesignChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesignChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OverheadCost property
        /// </summary>
        private sealed class OverheadCostProxy : ModelPropertyChange<IWorkTask, IOverheadCost>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverheadCostProxy(IWorkTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOverheadCost Value
            {
                get
                {
                    return this.ModelElement.OverheadCost;
                }
                set
                {
                    this.ModelElement.OverheadCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverheadCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverheadCostChanged -= handler;
            }
        }
    }
}

