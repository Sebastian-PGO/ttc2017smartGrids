//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Crew class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Crew")]
    [DebuggerDisplayAttribute("Crew {UUID}")]
    public class Crew : IdentifiedObject, ICrew, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private CrewWorkTasksCollection _workTasks;
        
        /// <summary>
        /// The backing field for the Assignments property
        /// </summary>
        private CrewAssignmentsCollection _assignments;
        
        /// <summary>
        /// The backing field for the ShiftPatterns property
        /// </summary>
        private CrewShiftPatternsCollection _shiftPatterns;
        
        /// <summary>
        /// The backing field for the Route property
        /// </summary>
        private IRoute _route;
        
        /// <summary>
        /// The backing field for the Tools property
        /// </summary>
        private CrewToolsCollection _tools;
        
        /// <summary>
        /// The backing field for the Vehicles property
        /// </summary>
        private CrewVehiclesCollection _vehicles;
        
        /// <summary>
        /// The backing field for the CrewMembers property
        /// </summary>
        private CrewCrewMembersCollection _crewMembers;
        
        /// <summary>
        /// The backing field for the WorkEquipmentAssets property
        /// </summary>
        private CrewWorkEquipmentAssetsCollection _workEquipmentAssets;
        
        /// <summary>
        /// The backing field for the Locations property
        /// </summary>
        private CrewLocationsCollection _locations;
        
        /// <summary>
        /// The backing field for the Organisations property
        /// </summary>
        private CrewOrganisationsCollection _organisations;
        
        /// <summary>
        /// The backing field for the SwitchingSchedules property
        /// </summary>
        private CrewSwitchingSchedulesCollection _switchingSchedules;
        
        /// <summary>
        /// The backing field for the Capabilities property
        /// </summary>
        private CrewCapabilitiesCollection _capabilities;
        
        /// <summary>
        /// The backing field for the OutageSteps property
        /// </summary>
        private CrewOutageStepsCollection _outageSteps;
        
        private static IClass _classInstance;
        
        public Crew()
        {
            this._workTasks = new CrewWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
            this._assignments = new CrewAssignmentsCollection(this);
            this._assignments.CollectionChanging += this.AssignmentsCollectionChanging;
            this._assignments.CollectionChanged += this.AssignmentsCollectionChanged;
            this._shiftPatterns = new CrewShiftPatternsCollection(this);
            this._shiftPatterns.CollectionChanging += this.ShiftPatternsCollectionChanging;
            this._shiftPatterns.CollectionChanged += this.ShiftPatternsCollectionChanged;
            this._tools = new CrewToolsCollection(this);
            this._tools.CollectionChanging += this.ToolsCollectionChanging;
            this._tools.CollectionChanged += this.ToolsCollectionChanged;
            this._vehicles = new CrewVehiclesCollection(this);
            this._vehicles.CollectionChanging += this.VehiclesCollectionChanging;
            this._vehicles.CollectionChanged += this.VehiclesCollectionChanged;
            this._crewMembers = new CrewCrewMembersCollection(this);
            this._crewMembers.CollectionChanging += this.CrewMembersCollectionChanging;
            this._crewMembers.CollectionChanged += this.CrewMembersCollectionChanged;
            this._workEquipmentAssets = new CrewWorkEquipmentAssetsCollection(this);
            this._workEquipmentAssets.CollectionChanging += this.WorkEquipmentAssetsCollectionChanging;
            this._workEquipmentAssets.CollectionChanged += this.WorkEquipmentAssetsCollectionChanged;
            this._locations = new CrewLocationsCollection(this);
            this._locations.CollectionChanging += this.LocationsCollectionChanging;
            this._locations.CollectionChanged += this.LocationsCollectionChanged;
            this._organisations = new CrewOrganisationsCollection(this);
            this._organisations.CollectionChanging += this.OrganisationsCollectionChanging;
            this._organisations.CollectionChanged += this.OrganisationsCollectionChanged;
            this._switchingSchedules = new CrewSwitchingSchedulesCollection(this);
            this._switchingSchedules.CollectionChanging += this.SwitchingSchedulesCollectionChanging;
            this._switchingSchedules.CollectionChanged += this.SwitchingSchedulesCollectionChanged;
            this._capabilities = new CrewCapabilitiesCollection(this);
            this._capabilities.CollectionChanging += this.CapabilitiesCollectionChanging;
            this._capabilities.CollectionChanged += this.CapabilitiesCollectionChanged;
            this._outageSteps = new CrewOutageStepsCollection(this);
            this._outageSteps.CollectionChanging += this.OutageStepsCollectionChanging;
            this._outageSteps.CollectionChanged += this.OutageStepsCollectionChanged;
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e);
                }
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// The Assignments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssignment> Assignments
        {
            get
            {
                return this._assignments;
            }
        }
        
        /// <summary>
        /// The ShiftPatterns property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IShiftPattern> ShiftPatterns
        {
            get
            {
                return this._shiftPatterns;
            }
        }
        
        /// <summary>
        /// The Route property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        public virtual IRoute Route
        {
            get
            {
                return this._route;
            }
            set
            {
                if ((this._route != value))
                {
                    IRoute old = this._route;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRouteChanging(e);
                    this.OnPropertyChanging("Route", e);
                    this._route = value;
                    if ((old != null))
                    {
                        old.Crews.Remove(this);
                        old.Deleted -= this.OnResetRoute;
                    }
                    if ((value != null))
                    {
                        value.Crews.Add(this);
                        value.Deleted += this.OnResetRoute;
                    }
                    this.OnRouteChanged(e);
                    this.OnPropertyChanged("Route", e);
                }
            }
        }
        
        /// <summary>
        /// The Tools property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crew")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IToolInfo> Tools
        {
            get
            {
                return this._tools;
            }
        }
        
        /// <summary>
        /// The Vehicles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crew")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVehicleInfo> Vehicles
        {
            get
            {
                return this._vehicles;
            }
        }
        
        /// <summary>
        /// The CrewMembers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> CrewMembers
        {
            get
            {
                return this._crewMembers;
            }
        }
        
        /// <summary>
        /// The WorkEquipmentAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crew")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkEquipmentInfo> WorkEquipmentAssets
        {
            get
            {
                return this._workEquipmentAssets;
            }
        }
        
        /// <summary>
        /// The Locations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocation> Locations
        {
            get
            {
                return this._locations;
            }
        }
        
        /// <summary>
        /// The Organisations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpOrganisation> Organisations
        {
            get
            {
                return this._organisations;
            }
        }
        
        /// <summary>
        /// The SwitchingSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingSchedule> SwitchingSchedules
        {
            get
            {
                return this._switchingSchedules;
            }
        }
        
        /// <summary>
        /// The Capabilities property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crew")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICapability> Capabilities
        {
            get
            {
                return this._capabilities;
            }
        }
        
        /// <summary>
        /// The OutageSteps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Crews")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageStep> OutageSteps
        {
            get
            {
                return this._outageSteps;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CrewReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Crew")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the Route property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RouteChanging;
        
        /// <summary>
        /// Gets fired when the Route property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RouteChanged;
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assignments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssignmentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Assignments", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assignments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssignmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assignments", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ShiftPatterns property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShiftPatternsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ShiftPatterns", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ShiftPatterns property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShiftPatternsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ShiftPatterns", e);
        }
        
        /// <summary>
        /// Raises the RouteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRouteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RouteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RouteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRouteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RouteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Route property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRoute(object sender, System.EventArgs eventArgs)
        {
            this.Route = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Tools property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToolsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Tools", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Tools property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToolsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Tools", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Vehicles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VehiclesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Vehicles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Vehicles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VehiclesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Vehicles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CrewMembers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewMembersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CrewMembers", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CrewMembers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewMembersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CrewMembers", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkEquipmentAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkEquipmentAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkEquipmentAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkEquipmentAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkEquipmentAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkEquipmentAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Organisations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Organisations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchingSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SwitchingSchedules", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchingSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchingSchedules", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Capabilities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapabilitiesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Capabilities", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Capabilities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapabilitiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Capabilities", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageSteps", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageSteps", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            if ((feature == "ASSIGNMENTS"))
            {
                return this._assignments;
            }
            if ((feature == "SHIFTPATTERNS"))
            {
                return this._shiftPatterns;
            }
            if ((feature == "TOOLS"))
            {
                return this._tools;
            }
            if ((feature == "VEHICLES"))
            {
                return this._vehicles;
            }
            if ((feature == "CREWMEMBERS"))
            {
                return this._crewMembers;
            }
            if ((feature == "WORKEQUIPMENTASSETS"))
            {
                return this._workEquipmentAssets;
            }
            if ((feature == "LOCATIONS"))
            {
                return this._locations;
            }
            if ((feature == "ORGANISATIONS"))
            {
                return this._organisations;
            }
            if ((feature == "SWITCHINGSCHEDULES"))
            {
                return this._switchingSchedules;
            }
            if ((feature == "CAPABILITIES"))
            {
                return this._capabilities;
            }
            if ((feature == "OUTAGESTEPS"))
            {
                return this._outageSteps;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ROUTE"))
            {
                this.Route = ((IRoute)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Route"))
            {
                return new RouteProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Route"))
            {
                return new RouteProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Crew")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Crew class
        /// </summary>
        public class CrewReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Crew _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CrewReferencedElementsCollection(Crew parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkTasks.Count);
                    count = (count + this._parent.Assignments.Count);
                    count = (count + this._parent.ShiftPatterns.Count);
                    if ((this._parent.Route != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Tools.Count);
                    count = (count + this._parent.Vehicles.Count);
                    count = (count + this._parent.CrewMembers.Count);
                    count = (count + this._parent.WorkEquipmentAssets.Count);
                    count = (count + this._parent.Locations.Count);
                    count = (count + this._parent.Organisations.Count);
                    count = (count + this._parent.SwitchingSchedules.Count);
                    count = (count + this._parent.Capabilities.Count);
                    count = (count + this._parent.OutageSteps.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Assignments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ShiftPatterns.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RouteChanged += this.PropagateValueChanges;
                this._parent.Tools.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Vehicles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CrewMembers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkEquipmentAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SwitchingSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Capabilities.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OutageSteps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Assignments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ShiftPatterns.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RouteChanged -= this.PropagateValueChanges;
                this._parent.Tools.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Vehicles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CrewMembers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkEquipmentAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SwitchingSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Capabilities.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OutageSteps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
                IAssignment assignmentsCasted = item.As<IAssignment>();
                if ((assignmentsCasted != null))
                {
                    this._parent.Assignments.Add(assignmentsCasted);
                }
                IShiftPattern shiftPatternsCasted = item.As<IShiftPattern>();
                if ((shiftPatternsCasted != null))
                {
                    this._parent.ShiftPatterns.Add(shiftPatternsCasted);
                }
                if ((this._parent.Route == null))
                {
                    IRoute routeCasted = item.As<IRoute>();
                    if ((routeCasted != null))
                    {
                        this._parent.Route = routeCasted;
                        return;
                    }
                }
                IToolInfo toolsCasted = item.As<IToolInfo>();
                if ((toolsCasted != null))
                {
                    this._parent.Tools.Add(toolsCasted);
                }
                IVehicleInfo vehiclesCasted = item.As<IVehicleInfo>();
                if ((vehiclesCasted != null))
                {
                    this._parent.Vehicles.Add(vehiclesCasted);
                }
                IErpPerson crewMembersCasted = item.As<IErpPerson>();
                if ((crewMembersCasted != null))
                {
                    this._parent.CrewMembers.Add(crewMembersCasted);
                }
                IWorkEquipmentInfo workEquipmentAssetsCasted = item.As<IWorkEquipmentInfo>();
                if ((workEquipmentAssetsCasted != null))
                {
                    this._parent.WorkEquipmentAssets.Add(workEquipmentAssetsCasted);
                }
                ILocation locationsCasted = item.As<ILocation>();
                if ((locationsCasted != null))
                {
                    this._parent.Locations.Add(locationsCasted);
                }
                IErpOrganisation organisationsCasted = item.As<IErpOrganisation>();
                if ((organisationsCasted != null))
                {
                    this._parent.Organisations.Add(organisationsCasted);
                }
                ISwitchingSchedule switchingSchedulesCasted = item.As<ISwitchingSchedule>();
                if ((switchingSchedulesCasted != null))
                {
                    this._parent.SwitchingSchedules.Add(switchingSchedulesCasted);
                }
                ICapability capabilitiesCasted = item.As<ICapability>();
                if ((capabilitiesCasted != null))
                {
                    this._parent.Capabilities.Add(capabilitiesCasted);
                }
                IOutageStep outageStepsCasted = item.As<IOutageStep>();
                if ((outageStepsCasted != null))
                {
                    this._parent.OutageSteps.Add(outageStepsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkTasks.Clear();
                this._parent.Assignments.Clear();
                this._parent.ShiftPatterns.Clear();
                this._parent.Route = null;
                this._parent.Tools.Clear();
                this._parent.Vehicles.Clear();
                this._parent.CrewMembers.Clear();
                this._parent.WorkEquipmentAssets.Clear();
                this._parent.Locations.Clear();
                this._parent.Organisations.Clear();
                this._parent.SwitchingSchedules.Clear();
                this._parent.Capabilities.Clear();
                this._parent.OutageSteps.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                if (this._parent.Assignments.Contains(item))
                {
                    return true;
                }
                if (this._parent.ShiftPatterns.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Route))
                {
                    return true;
                }
                if (this._parent.Tools.Contains(item))
                {
                    return true;
                }
                if (this._parent.Vehicles.Contains(item))
                {
                    return true;
                }
                if (this._parent.CrewMembers.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkEquipmentAssets.Contains(item))
                {
                    return true;
                }
                if (this._parent.Locations.Contains(item))
                {
                    return true;
                }
                if (this._parent.Organisations.Contains(item))
                {
                    return true;
                }
                if (this._parent.SwitchingSchedules.Contains(item))
                {
                    return true;
                }
                if (this._parent.Capabilities.Contains(item))
                {
                    return true;
                }
                if (this._parent.OutageSteps.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assignmentsEnumerator = this._parent.Assignments.GetEnumerator();
                try
                {
                    for (
                    ; assignmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assignmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assignmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> shiftPatternsEnumerator = this._parent.ShiftPatterns.GetEnumerator();
                try
                {
                    for (
                    ; shiftPatternsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = shiftPatternsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    shiftPatternsEnumerator.Dispose();
                }
                if ((this._parent.Route != null))
                {
                    array[arrayIndex] = this._parent.Route;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> toolsEnumerator = this._parent.Tools.GetEnumerator();
                try
                {
                    for (
                    ; toolsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toolsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toolsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vehiclesEnumerator = this._parent.Vehicles.GetEnumerator();
                try
                {
                    for (
                    ; vehiclesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vehiclesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vehiclesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> crewMembersEnumerator = this._parent.CrewMembers.GetEnumerator();
                try
                {
                    for (
                    ; crewMembersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewMembersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewMembersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workEquipmentAssetsEnumerator = this._parent.WorkEquipmentAssets.GetEnumerator();
                try
                {
                    for (
                    ; workEquipmentAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workEquipmentAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workEquipmentAssetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> locationsEnumerator = this._parent.Locations.GetEnumerator();
                try
                {
                    for (
                    ; locationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> organisationsEnumerator = this._parent.Organisations.GetEnumerator();
                try
                {
                    for (
                    ; organisationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = organisationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    organisationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> switchingSchedulesEnumerator = this._parent.SwitchingSchedules.GetEnumerator();
                try
                {
                    for (
                    ; switchingSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchingSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchingSchedulesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> capabilitiesEnumerator = this._parent.Capabilities.GetEnumerator();
                try
                {
                    for (
                    ; capabilitiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = capabilitiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    capabilitiesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outageStepsEnumerator = this._parent.OutageSteps.GetEnumerator();
                try
                {
                    for (
                    ; outageStepsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageStepsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageStepsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                IAssignment assignmentItem = item.As<IAssignment>();
                if (((assignmentItem != null) 
                            && this._parent.Assignments.Remove(assignmentItem)))
                {
                    return true;
                }
                IShiftPattern shiftPatternItem = item.As<IShiftPattern>();
                if (((shiftPatternItem != null) 
                            && this._parent.ShiftPatterns.Remove(shiftPatternItem)))
                {
                    return true;
                }
                if ((this._parent.Route == item))
                {
                    this._parent.Route = null;
                    return true;
                }
                IToolInfo toolInfoItem = item.As<IToolInfo>();
                if (((toolInfoItem != null) 
                            && this._parent.Tools.Remove(toolInfoItem)))
                {
                    return true;
                }
                IVehicleInfo vehicleInfoItem = item.As<IVehicleInfo>();
                if (((vehicleInfoItem != null) 
                            && this._parent.Vehicles.Remove(vehicleInfoItem)))
                {
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.CrewMembers.Remove(erpPersonItem)))
                {
                    return true;
                }
                IWorkEquipmentInfo workEquipmentInfoItem = item.As<IWorkEquipmentInfo>();
                if (((workEquipmentInfoItem != null) 
                            && this._parent.WorkEquipmentAssets.Remove(workEquipmentInfoItem)))
                {
                    return true;
                }
                ILocation locationItem = item.As<ILocation>();
                if (((locationItem != null) 
                            && this._parent.Locations.Remove(locationItem)))
                {
                    return true;
                }
                IErpOrganisation erpOrganisationItem = item.As<IErpOrganisation>();
                if (((erpOrganisationItem != null) 
                            && this._parent.Organisations.Remove(erpOrganisationItem)))
                {
                    return true;
                }
                ISwitchingSchedule switchingScheduleItem = item.As<ISwitchingSchedule>();
                if (((switchingScheduleItem != null) 
                            && this._parent.SwitchingSchedules.Remove(switchingScheduleItem)))
                {
                    return true;
                }
                ICapability capabilityItem = item.As<ICapability>();
                if (((capabilityItem != null) 
                            && this._parent.Capabilities.Remove(capabilityItem)))
                {
                    return true;
                }
                IOutageStep outageStepItem = item.As<IOutageStep>();
                if (((outageStepItem != null) 
                            && this._parent.OutageSteps.Remove(outageStepItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkTasks).Concat(this._parent.Assignments).Concat(this._parent.ShiftPatterns).Concat(this._parent.Route).Concat(this._parent.Tools).Concat(this._parent.Vehicles).Concat(this._parent.CrewMembers).Concat(this._parent.WorkEquipmentAssets).Concat(this._parent.Locations).Concat(this._parent.Organisations).Concat(this._parent.SwitchingSchedules).Concat(this._parent.Capabilities).Concat(this._parent.OutageSteps).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<ICrew, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(ICrew modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CategoryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Route property
        /// </summary>
        private sealed class RouteProxy : ModelPropertyChange<ICrew, IRoute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RouteProxy(ICrew modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRoute Value
            {
                get
                {
                    return this.ModelElement.Route;
                }
                set
                {
                    this.ModelElement.Route = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RouteChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RouteChanged -= handler;
            }
        }
    }
}

