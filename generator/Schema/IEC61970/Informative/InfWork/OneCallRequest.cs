//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the OneCallRequest class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/OneCallRe" +
        "quest")]
    [DebuggerDisplayAttribute("OneCallRequest {UUID}")]
    public partial class OneCallRequest : Document, IOneCallRequest, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MarkingInstruction property
        /// </summary>
        private string _markingInstruction;
        
        private static Lazy<ITypedElement> _markingInstructionAttribute = new Lazy<ITypedElement>(RetrieveMarkingInstructionAttribute);
        
        /// <summary>
        /// The backing field for the ExplosivesUsed property
        /// </summary>
        private bool _explosivesUsed;
        
        private static Lazy<ITypedElement> _explosivesUsedAttribute = new Lazy<ITypedElement>(RetrieveExplosivesUsedAttribute);
        
        /// <summary>
        /// The backing field for the MarkedIndicator property
        /// </summary>
        private bool _markedIndicator;
        
        private static Lazy<ITypedElement> _markedIndicatorAttribute = new Lazy<ITypedElement>(RetrieveMarkedIndicatorAttribute);
        
        private static Lazy<ITypedElement> _workLocationsReference = new Lazy<ITypedElement>(RetrieveWorkLocationsReference);
        
        /// <summary>
        /// The backing field for the WorkLocations property
        /// </summary>
        private OneCallRequestWorkLocationsCollection _workLocations;
        
        private static IClass _classInstance;
        
        public OneCallRequest()
        {
            this._workLocations = new OneCallRequestWorkLocationsCollection(this);
            this._workLocations.CollectionChanging += this.WorkLocationsCollectionChanging;
            this._workLocations.CollectionChanged += this.WorkLocationsCollectionChanged;
        }
        
        /// <summary>
        /// The markingInstruction property
        /// </summary>
        [XmlElementNameAttribute("markingInstruction")]
        [XmlAttributeAttribute(true)]
        public virtual string MarkingInstruction
        {
            get
            {
                return this._markingInstruction;
            }
            set
            {
                if ((this._markingInstruction != value))
                {
                    string old = this._markingInstruction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarkingInstructionChanging(e);
                    this.OnPropertyChanging("MarkingInstruction", e, _markingInstructionAttribute);
                    this._markingInstruction = value;
                    this.OnMarkingInstructionChanged(e);
                    this.OnPropertyChanged("MarkingInstruction", e, _markingInstructionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The explosivesUsed property
        /// </summary>
        [XmlElementNameAttribute("explosivesUsed")]
        [XmlAttributeAttribute(true)]
        public virtual bool ExplosivesUsed
        {
            get
            {
                return this._explosivesUsed;
            }
            set
            {
                if ((this._explosivesUsed != value))
                {
                    bool old = this._explosivesUsed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExplosivesUsedChanging(e);
                    this.OnPropertyChanging("ExplosivesUsed", e, _explosivesUsedAttribute);
                    this._explosivesUsed = value;
                    this.OnExplosivesUsedChanged(e);
                    this.OnPropertyChanged("ExplosivesUsed", e, _explosivesUsedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The markedIndicator property
        /// </summary>
        [XmlElementNameAttribute("markedIndicator")]
        [XmlAttributeAttribute(true)]
        public virtual bool MarkedIndicator
        {
            get
            {
                return this._markedIndicator;
            }
            set
            {
                if ((this._markedIndicator != value))
                {
                    bool old = this._markedIndicator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarkedIndicatorChanging(e);
                    this.OnPropertyChanging("MarkedIndicator", e, _markedIndicatorAttribute);
                    this._markedIndicator = value;
                    this.OnMarkedIndicatorChanged(e);
                    this.OnPropertyChanged("MarkedIndicator", e, _markedIndicatorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The WorkLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OneCallRequest")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkLocation> WorkLocations
        {
            get
            {
                return this._workLocations;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OneCallRequestReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/OneCallRe" +
                            "quest")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MarkingInstruction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarkingInstructionChanging;
        
        /// <summary>
        /// Gets fired when the MarkingInstruction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarkingInstructionChanged;
        
        /// <summary>
        /// Gets fired before the ExplosivesUsed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExplosivesUsedChanging;
        
        /// <summary>
        /// Gets fired when the ExplosivesUsed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExplosivesUsedChanged;
        
        /// <summary>
        /// Gets fired before the MarkedIndicator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarkedIndicatorChanging;
        
        /// <summary>
        /// Gets fired when the MarkedIndicator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarkedIndicatorChanged;
        
        private static ITypedElement RetrieveMarkingInstructionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OneCallRequest.ClassInstance)).Resolve("markingInstruction")));
        }
        
        /// <summary>
        /// Raises the MarkingInstructionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarkingInstructionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarkingInstructionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarkingInstructionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarkingInstructionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarkingInstructionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExplosivesUsedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OneCallRequest.ClassInstance)).Resolve("explosivesUsed")));
        }
        
        /// <summary>
        /// Raises the ExplosivesUsedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExplosivesUsedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExplosivesUsedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExplosivesUsedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExplosivesUsedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExplosivesUsedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarkedIndicatorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OneCallRequest.ClassInstance)).Resolve("markedIndicator")));
        }
        
        /// <summary>
        /// Raises the MarkedIndicatorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarkedIndicatorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarkedIndicatorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarkedIndicatorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarkedIndicatorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarkedIndicatorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkLocationsReference()
        {
            return ((ITypedElement)(((ModelElement)(OneCallRequest.ClassInstance)).Resolve("WorkLocations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkLocations", e, _workLocationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkLocations", e, _workLocationsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MARKINGINSTRUCTION"))
            {
                return this.MarkingInstruction;
            }
            if ((attribute == "EXPLOSIVESUSED"))
            {
                return this.ExplosivesUsed;
            }
            if ((attribute == "MARKEDINDICATOR"))
            {
                return this.MarkedIndicator;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKLOCATIONS"))
            {
                return this._workLocations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MARKINGINSTRUCTION"))
            {
                this.MarkingInstruction = ((string)(value));
                return;
            }
            if ((feature == "EXPLOSIVESUSED"))
            {
                this.ExplosivesUsed = ((bool)(value));
                return;
            }
            if ((feature == "MARKEDINDICATOR"))
            {
                this.MarkedIndicator = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/OneCallRe" +
                        "quest")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OneCallRequest class
        /// </summary>
        public class OneCallRequestReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OneCallRequest _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OneCallRequestReferencedElementsCollection(OneCallRequest parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkLocations.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkLocation workLocationsCasted = item.As<IWorkLocation>();
                if ((workLocationsCasted != null))
                {
                    this._parent.WorkLocations.Add(workLocationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkLocations.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkLocations.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workLocationsEnumerator = this._parent.WorkLocations.GetEnumerator();
                try
                {
                    for (
                    ; workLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workLocationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkLocation workLocationItem = item.As<IWorkLocation>();
                if (((workLocationItem != null) 
                            && this._parent.WorkLocations.Remove(workLocationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkLocations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the markingInstruction property
        /// </summary>
        private sealed class MarkingInstructionProxy : ModelPropertyChange<IOneCallRequest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarkingInstructionProxy(IOneCallRequest modelElement) : 
                    base(modelElement, "markingInstruction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MarkingInstruction;
                }
                set
                {
                    this.ModelElement.MarkingInstruction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the explosivesUsed property
        /// </summary>
        private sealed class ExplosivesUsedProxy : ModelPropertyChange<IOneCallRequest, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExplosivesUsedProxy(IOneCallRequest modelElement) : 
                    base(modelElement, "explosivesUsed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ExplosivesUsed;
                }
                set
                {
                    this.ModelElement.ExplosivesUsed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the markedIndicator property
        /// </summary>
        private sealed class MarkedIndicatorProxy : ModelPropertyChange<IOneCallRequest, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarkedIndicatorProxy(IOneCallRequest modelElement) : 
                    base(modelElement, "markedIndicator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MarkedIndicator;
                }
                set
                {
                    this.ModelElement.MarkedIndicator = value;
                }
            }
        }
    }
}

