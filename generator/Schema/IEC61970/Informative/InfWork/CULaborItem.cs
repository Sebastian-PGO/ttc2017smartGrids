//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the CULaborItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CULaborIt" +
        "em")]
    [DebuggerDisplayAttribute("CULaborItem {UUID}")]
    public class CULaborItem : IdentifiedObject, ICULaborItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActivityCode property
        /// </summary>
        private string _activityCode;
        
        /// <summary>
        /// The backing field for the LaborDuration property
        /// </summary>
        private float _laborDuration;
        
        /// <summary>
        /// The backing field for the LaborRate property
        /// </summary>
        private float _laborRate;
        
        /// <summary>
        /// The backing field for the QualificationRequirements property
        /// </summary>
        private CULaborItemQualificationRequirementsCollection _qualificationRequirements;
        
        /// <summary>
        /// The backing field for the CULaborCode property
        /// </summary>
        private ICULaborCode _cULaborCode;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the CompatibleUnits property
        /// </summary>
        private CULaborItemCompatibleUnitsCollection _compatibleUnits;
        
        private static IClass _classInstance;
        
        public CULaborItem()
        {
            this._qualificationRequirements = new CULaborItemQualificationRequirementsCollection(this);
            this._qualificationRequirements.CollectionChanging += this.QualificationRequirementsCollectionChanging;
            this._qualificationRequirements.CollectionChanged += this.QualificationRequirementsCollectionChanged;
            this._compatibleUnits = new CULaborItemCompatibleUnitsCollection(this);
            this._compatibleUnits.CollectionChanging += this.CompatibleUnitsCollectionChanging;
            this._compatibleUnits.CollectionChanged += this.CompatibleUnitsCollectionChanged;
        }
        
        /// <summary>
        /// The activityCode property
        /// </summary>
        [XmlElementNameAttribute("activityCode")]
        [XmlAttributeAttribute(true)]
        public virtual string ActivityCode
        {
            get
            {
                return this._activityCode;
            }
            set
            {
                if ((this._activityCode != value))
                {
                    string old = this._activityCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivityCodeChanging(e);
                    this.OnPropertyChanging("ActivityCode", e);
                    this._activityCode = value;
                    this.OnActivityCodeChanged(e);
                    this.OnPropertyChanged("ActivityCode", e);
                }
            }
        }
        
        /// <summary>
        /// The laborDuration property
        /// </summary>
        [XmlElementNameAttribute("laborDuration")]
        [XmlAttributeAttribute(true)]
        public virtual float LaborDuration
        {
            get
            {
                return this._laborDuration;
            }
            set
            {
                if ((this._laborDuration != value))
                {
                    float old = this._laborDuration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLaborDurationChanging(e);
                    this.OnPropertyChanging("LaborDuration", e);
                    this._laborDuration = value;
                    this.OnLaborDurationChanged(e);
                    this.OnPropertyChanged("LaborDuration", e);
                }
            }
        }
        
        /// <summary>
        /// The laborRate property
        /// </summary>
        [XmlElementNameAttribute("laborRate")]
        [XmlAttributeAttribute(true)]
        public virtual float LaborRate
        {
            get
            {
                return this._laborRate;
            }
            set
            {
                if ((this._laborRate != value))
                {
                    float old = this._laborRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLaborRateChanging(e);
                    this.OnPropertyChanging("LaborRate", e);
                    this._laborRate = value;
                    this.OnLaborRateChanged(e);
                    this.OnPropertyChanged("LaborRate", e);
                }
            }
        }
        
        /// <summary>
        /// The QualificationRequirements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CULaborItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IQualificationRequirement> QualificationRequirements
        {
            get
            {
                return this._qualificationRequirements;
            }
        }
        
        /// <summary>
        /// The CULaborCode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CULaborItems")]
        public virtual ICULaborCode CULaborCode
        {
            get
            {
                return this._cULaborCode;
            }
            set
            {
                if ((this._cULaborCode != value))
                {
                    ICULaborCode old = this._cULaborCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCULaborCodeChanging(e);
                    this.OnPropertyChanging("CULaborCode", e);
                    this._cULaborCode = value;
                    if ((old != null))
                    {
                        old.CULaborItems.Remove(this);
                        old.Deleted -= this.OnResetCULaborCode;
                    }
                    if ((value != null))
                    {
                        value.CULaborItems.Add(this);
                        value.Deleted += this.OnResetCULaborCode;
                    }
                    this.OnCULaborCodeChanged(e);
                    this.OnPropertyChanged("CULaborCode", e);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The CompatibleUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CULaborItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICompatibleUnit> CompatibleUnits
        {
            get
            {
                return this._compatibleUnits;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CULaborItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CULaborIt" +
                            "em")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActivityCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityCodeChanging;
        
        /// <summary>
        /// Gets fired when the ActivityCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityCodeChanged;
        
        /// <summary>
        /// Gets fired before the LaborDuration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LaborDurationChanging;
        
        /// <summary>
        /// Gets fired when the LaborDuration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LaborDurationChanged;
        
        /// <summary>
        /// Gets fired before the LaborRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LaborRateChanging;
        
        /// <summary>
        /// Gets fired when the LaborRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LaborRateChanged;
        
        /// <summary>
        /// Gets fired before the CULaborCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CULaborCodeChanging;
        
        /// <summary>
        /// Gets fired when the CULaborCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CULaborCodeChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Raises the ActivityCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivityCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LaborDurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLaborDurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LaborDurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LaborDurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLaborDurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LaborDurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LaborRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLaborRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LaborRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LaborRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLaborRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LaborRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("QualificationRequirements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("QualificationRequirements", e);
        }
        
        /// <summary>
        /// Raises the CULaborCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCULaborCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CULaborCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CULaborCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCULaborCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CULaborCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CULaborCode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCULaborCode(object sender, System.EventArgs eventArgs)
        {
            this.CULaborCode = null;
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CompatibleUnits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CompatibleUnits", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVITYCODE"))
            {
                return this.ActivityCode;
            }
            if ((attribute == "LABORDURATION"))
            {
                return this.LaborDuration;
            }
            if ((attribute == "LABORRATE"))
            {
                return this.LaborRate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "QUALIFICATIONREQUIREMENTS"))
            {
                return this._qualificationRequirements;
            }
            if ((feature == "COMPATIBLEUNITS"))
            {
                return this._compatibleUnits;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CULABORCODE"))
            {
                this.CULaborCode = ((ICULaborCode)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ACTIVITYCODE"))
            {
                this.ActivityCode = ((string)(value));
                return;
            }
            if ((feature == "LABORDURATION"))
            {
                this.LaborDuration = ((float)(value));
                return;
            }
            if ((feature == "LABORRATE"))
            {
                this.LaborRate = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CULaborCode"))
            {
                return new CULaborCodeProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CULaborCode"))
            {
                return new CULaborCodeProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CULaborIt" +
                        "em")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CULaborItem class
        /// </summary>
        public class CULaborItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CULaborItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CULaborItemReferencedElementsCollection(CULaborItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.QualificationRequirements.Count);
                    if ((this._parent.CULaborCode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CompatibleUnits.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CULaborCodeChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CULaborCodeChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IQualificationRequirement qualificationRequirementsCasted = item.As<IQualificationRequirement>();
                if ((qualificationRequirementsCasted != null))
                {
                    this._parent.QualificationRequirements.Add(qualificationRequirementsCasted);
                }
                if ((this._parent.CULaborCode == null))
                {
                    ICULaborCode cULaborCodeCasted = item.As<ICULaborCode>();
                    if ((cULaborCodeCasted != null))
                    {
                        this._parent.CULaborCode = cULaborCodeCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICompatibleUnit compatibleUnitsCasted = item.As<ICompatibleUnit>();
                if ((compatibleUnitsCasted != null))
                {
                    this._parent.CompatibleUnits.Add(compatibleUnitsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.QualificationRequirements.Clear();
                this._parent.CULaborCode = null;
                this._parent.Status = null;
                this._parent.CompatibleUnits.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.QualificationRequirements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CULaborCode))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.CompatibleUnits.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> qualificationRequirementsEnumerator = this._parent.QualificationRequirements.GetEnumerator();
                try
                {
                    for (
                    ; qualificationRequirementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qualificationRequirementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qualificationRequirementsEnumerator.Dispose();
                }
                if ((this._parent.CULaborCode != null))
                {
                    array[arrayIndex] = this._parent.CULaborCode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> compatibleUnitsEnumerator = this._parent.CompatibleUnits.GetEnumerator();
                try
                {
                    for (
                    ; compatibleUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = compatibleUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    compatibleUnitsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IQualificationRequirement qualificationRequirementItem = item.As<IQualificationRequirement>();
                if (((qualificationRequirementItem != null) 
                            && this._parent.QualificationRequirements.Remove(qualificationRequirementItem)))
                {
                    return true;
                }
                if ((this._parent.CULaborCode == item))
                {
                    this._parent.CULaborCode = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICompatibleUnit compatibleUnitItem = item.As<ICompatibleUnit>();
                if (((compatibleUnitItem != null) 
                            && this._parent.CompatibleUnits.Remove(compatibleUnitItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.QualificationRequirements).Concat(this._parent.CULaborCode).Concat(this._parent.Status).Concat(this._parent.CompatibleUnits).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activityCode property
        /// </summary>
        private sealed class ActivityCodeProxy : ModelPropertyChange<ICULaborItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivityCodeProxy(ICULaborItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActivityCode;
                }
                set
                {
                    this.ModelElement.ActivityCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivityCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ActivityCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the laborDuration property
        /// </summary>
        private sealed class LaborDurationProxy : ModelPropertyChange<ICULaborItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LaborDurationProxy(ICULaborItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LaborDuration;
                }
                set
                {
                    this.ModelElement.LaborDuration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LaborDurationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LaborDurationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the laborRate property
        /// </summary>
        private sealed class LaborRateProxy : ModelPropertyChange<ICULaborItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LaborRateProxy(ICULaborItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LaborRate;
                }
                set
                {
                    this.ModelElement.LaborRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LaborRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LaborRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CULaborCode property
        /// </summary>
        private sealed class CULaborCodeProxy : ModelPropertyChange<ICULaborItem, ICULaborCode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CULaborCodeProxy(ICULaborItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICULaborCode Value
            {
                get
                {
                    return this.ModelElement.CULaborCode;
                }
                set
                {
                    this.ModelElement.CULaborCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CULaborCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CULaborCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ICULaborItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ICULaborItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
    }
}

