//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset
{
    
    
    /// <summary>
    /// The default implementation of the GeneratorTypeAsset class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfTypeAsset")]
    [XmlNamespacePrefixAttribute("cimInfTypeAsset")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Gene" +
        "ratorTypeAsset")]
    [DebuggerDisplayAttribute("GeneratorTypeAsset {UUID}")]
    public class GeneratorTypeAsset : ElectricalTypeAsset, IGeneratorTypeAsset, IModelElement
    {
        
        /// <summary>
        /// The backing field for the XDirectSync property
        /// </summary>
        private float _xDirectSync;
        
        /// <summary>
        /// The backing field for the RDirectSync property
        /// </summary>
        private float _rDirectSync;
        
        /// <summary>
        /// The backing field for the RQuadTrans property
        /// </summary>
        private float _rQuadTrans;
        
        /// <summary>
        /// The backing field for the XQuadSync property
        /// </summary>
        private float _xQuadSync;
        
        /// <summary>
        /// The backing field for the XQuadSubtrans property
        /// </summary>
        private float _xQuadSubtrans;
        
        /// <summary>
        /// The backing field for the MinP property
        /// </summary>
        private float _minP;
        
        /// <summary>
        /// The backing field for the MinQ property
        /// </summary>
        private float _minQ;
        
        /// <summary>
        /// The backing field for the MaxQ property
        /// </summary>
        private float _maxQ;
        
        /// <summary>
        /// The backing field for the MaxP property
        /// </summary>
        private float _maxP;
        
        /// <summary>
        /// The backing field for the RQuadSync property
        /// </summary>
        private float _rQuadSync;
        
        /// <summary>
        /// The backing field for the XDirectSubtrans property
        /// </summary>
        private float _xDirectSubtrans;
        
        /// <summary>
        /// The backing field for the XDirectTrans property
        /// </summary>
        private float _xDirectTrans;
        
        /// <summary>
        /// The backing field for the RDirectTrans property
        /// </summary>
        private float _rDirectTrans;
        
        /// <summary>
        /// The backing field for the RDirectSubtrans property
        /// </summary>
        private float _rDirectSubtrans;
        
        /// <summary>
        /// The backing field for the XQuadTrans property
        /// </summary>
        private float _xQuadTrans;
        
        /// <summary>
        /// The backing field for the RQuadSubtrans property
        /// </summary>
        private float _rQuadSubtrans;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The xDirectSync property
        /// </summary>
        [XmlElementNameAttribute("xDirectSync")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectSync
        {
            get
            {
                return this._xDirectSync;
            }
            set
            {
                if ((this._xDirectSync != value))
                {
                    float old = this._xDirectSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectSyncChanging(e);
                    this.OnPropertyChanging("XDirectSync", e);
                    this._xDirectSync = value;
                    this.OnXDirectSyncChanged(e);
                    this.OnPropertyChanged("XDirectSync", e);
                }
            }
        }
        
        /// <summary>
        /// The rDirectSync property
        /// </summary>
        [XmlElementNameAttribute("rDirectSync")]
        [XmlAttributeAttribute(true)]
        public virtual float RDirectSync
        {
            get
            {
                return this._rDirectSync;
            }
            set
            {
                if ((this._rDirectSync != value))
                {
                    float old = this._rDirectSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRDirectSyncChanging(e);
                    this.OnPropertyChanging("RDirectSync", e);
                    this._rDirectSync = value;
                    this.OnRDirectSyncChanged(e);
                    this.OnPropertyChanged("RDirectSync", e);
                }
            }
        }
        
        /// <summary>
        /// The rQuadTrans property
        /// </summary>
        [XmlElementNameAttribute("rQuadTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float RQuadTrans
        {
            get
            {
                return this._rQuadTrans;
            }
            set
            {
                if ((this._rQuadTrans != value))
                {
                    float old = this._rQuadTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRQuadTransChanging(e);
                    this.OnPropertyChanging("RQuadTrans", e);
                    this._rQuadTrans = value;
                    this.OnRQuadTransChanged(e);
                    this.OnPropertyChanged("RQuadTrans", e);
                }
            }
        }
        
        /// <summary>
        /// The xQuadSync property
        /// </summary>
        [XmlElementNameAttribute("xQuadSync")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadSync
        {
            get
            {
                return this._xQuadSync;
            }
            set
            {
                if ((this._xQuadSync != value))
                {
                    float old = this._xQuadSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadSyncChanging(e);
                    this.OnPropertyChanging("XQuadSync", e);
                    this._xQuadSync = value;
                    this.OnXQuadSyncChanged(e);
                    this.OnPropertyChanged("XQuadSync", e);
                }
            }
        }
        
        /// <summary>
        /// The xQuadSubtrans property
        /// </summary>
        [XmlElementNameAttribute("xQuadSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadSubtrans
        {
            get
            {
                return this._xQuadSubtrans;
            }
            set
            {
                if ((this._xQuadSubtrans != value))
                {
                    float old = this._xQuadSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadSubtransChanging(e);
                    this.OnPropertyChanging("XQuadSubtrans", e);
                    this._xQuadSubtrans = value;
                    this.OnXQuadSubtransChanged(e);
                    this.OnPropertyChanged("XQuadSubtrans", e);
                }
            }
        }
        
        /// <summary>
        /// The minP property
        /// </summary>
        [XmlElementNameAttribute("minP")]
        [XmlAttributeAttribute(true)]
        public virtual float MinP
        {
            get
            {
                return this._minP;
            }
            set
            {
                if ((this._minP != value))
                {
                    float old = this._minP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinPChanging(e);
                    this.OnPropertyChanging("MinP", e);
                    this._minP = value;
                    this.OnMinPChanged(e);
                    this.OnPropertyChanged("MinP", e);
                }
            }
        }
        
        /// <summary>
        /// The minQ property
        /// </summary>
        [XmlElementNameAttribute("minQ")]
        [XmlAttributeAttribute(true)]
        public virtual float MinQ
        {
            get
            {
                return this._minQ;
            }
            set
            {
                if ((this._minQ != value))
                {
                    float old = this._minQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinQChanging(e);
                    this.OnPropertyChanging("MinQ", e);
                    this._minQ = value;
                    this.OnMinQChanged(e);
                    this.OnPropertyChanged("MinQ", e);
                }
            }
        }
        
        /// <summary>
        /// The maxQ property
        /// </summary>
        [XmlElementNameAttribute("maxQ")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxQ
        {
            get
            {
                return this._maxQ;
            }
            set
            {
                if ((this._maxQ != value))
                {
                    float old = this._maxQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxQChanging(e);
                    this.OnPropertyChanging("MaxQ", e);
                    this._maxQ = value;
                    this.OnMaxQChanged(e);
                    this.OnPropertyChanged("MaxQ", e);
                }
            }
        }
        
        /// <summary>
        /// The maxP property
        /// </summary>
        [XmlElementNameAttribute("maxP")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxP
        {
            get
            {
                return this._maxP;
            }
            set
            {
                if ((this._maxP != value))
                {
                    float old = this._maxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxPChanging(e);
                    this.OnPropertyChanging("MaxP", e);
                    this._maxP = value;
                    this.OnMaxPChanged(e);
                    this.OnPropertyChanged("MaxP", e);
                }
            }
        }
        
        /// <summary>
        /// The rQuadSync property
        /// </summary>
        [XmlElementNameAttribute("rQuadSync")]
        [XmlAttributeAttribute(true)]
        public virtual float RQuadSync
        {
            get
            {
                return this._rQuadSync;
            }
            set
            {
                if ((this._rQuadSync != value))
                {
                    float old = this._rQuadSync;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRQuadSyncChanging(e);
                    this.OnPropertyChanging("RQuadSync", e);
                    this._rQuadSync = value;
                    this.OnRQuadSyncChanged(e);
                    this.OnPropertyChanged("RQuadSync", e);
                }
            }
        }
        
        /// <summary>
        /// The xDirectSubtrans property
        /// </summary>
        [XmlElementNameAttribute("xDirectSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectSubtrans
        {
            get
            {
                return this._xDirectSubtrans;
            }
            set
            {
                if ((this._xDirectSubtrans != value))
                {
                    float old = this._xDirectSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectSubtransChanging(e);
                    this.OnPropertyChanging("XDirectSubtrans", e);
                    this._xDirectSubtrans = value;
                    this.OnXDirectSubtransChanged(e);
                    this.OnPropertyChanged("XDirectSubtrans", e);
                }
            }
        }
        
        /// <summary>
        /// The xDirectTrans property
        /// </summary>
        [XmlElementNameAttribute("xDirectTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XDirectTrans
        {
            get
            {
                return this._xDirectTrans;
            }
            set
            {
                if ((this._xDirectTrans != value))
                {
                    float old = this._xDirectTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXDirectTransChanging(e);
                    this.OnPropertyChanging("XDirectTrans", e);
                    this._xDirectTrans = value;
                    this.OnXDirectTransChanged(e);
                    this.OnPropertyChanged("XDirectTrans", e);
                }
            }
        }
        
        /// <summary>
        /// The rDirectTrans property
        /// </summary>
        [XmlElementNameAttribute("rDirectTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float RDirectTrans
        {
            get
            {
                return this._rDirectTrans;
            }
            set
            {
                if ((this._rDirectTrans != value))
                {
                    float old = this._rDirectTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRDirectTransChanging(e);
                    this.OnPropertyChanging("RDirectTrans", e);
                    this._rDirectTrans = value;
                    this.OnRDirectTransChanged(e);
                    this.OnPropertyChanged("RDirectTrans", e);
                }
            }
        }
        
        /// <summary>
        /// The rDirectSubtrans property
        /// </summary>
        [XmlElementNameAttribute("rDirectSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float RDirectSubtrans
        {
            get
            {
                return this._rDirectSubtrans;
            }
            set
            {
                if ((this._rDirectSubtrans != value))
                {
                    float old = this._rDirectSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRDirectSubtransChanging(e);
                    this.OnPropertyChanging("RDirectSubtrans", e);
                    this._rDirectSubtrans = value;
                    this.OnRDirectSubtransChanged(e);
                    this.OnPropertyChanged("RDirectSubtrans", e);
                }
            }
        }
        
        /// <summary>
        /// The xQuadTrans property
        /// </summary>
        [XmlElementNameAttribute("xQuadTrans")]
        [XmlAttributeAttribute(true)]
        public virtual float XQuadTrans
        {
            get
            {
                return this._xQuadTrans;
            }
            set
            {
                if ((this._xQuadTrans != value))
                {
                    float old = this._xQuadTrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXQuadTransChanging(e);
                    this.OnPropertyChanging("XQuadTrans", e);
                    this._xQuadTrans = value;
                    this.OnXQuadTransChanged(e);
                    this.OnPropertyChanged("XQuadTrans", e);
                }
            }
        }
        
        /// <summary>
        /// The rQuadSubtrans property
        /// </summary>
        [XmlElementNameAttribute("rQuadSubtrans")]
        [XmlAttributeAttribute(true)]
        public virtual float RQuadSubtrans
        {
            get
            {
                return this._rQuadSubtrans;
            }
            set
            {
                if ((this._rQuadSubtrans != value))
                {
                    float old = this._rQuadSubtrans;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRQuadSubtransChanging(e);
                    this.OnPropertyChanging("RQuadSubtrans", e);
                    this._rQuadSubtrans = value;
                    this.OnRQuadSubtransChanged(e);
                    this.OnPropertyChanged("RQuadSubtrans", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Gene" +
                            "ratorTypeAsset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the XDirectSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanged;
        
        /// <summary>
        /// Gets fired before the RDirectSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectSyncChanging;
        
        /// <summary>
        /// Gets fired when the RDirectSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectSyncChanged;
        
        /// <summary>
        /// Gets fired before the RQuadTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadTransChanging;
        
        /// <summary>
        /// Gets fired when the RQuadTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadTransChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanged;
        
        /// <summary>
        /// Gets fired before the MinP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPChanging;
        
        /// <summary>
        /// Gets fired when the MinP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPChanged;
        
        /// <summary>
        /// Gets fired before the MinQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinQChanging;
        
        /// <summary>
        /// Gets fired when the MinQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinQChanged;
        
        /// <summary>
        /// Gets fired before the MaxQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxQChanging;
        
        /// <summary>
        /// Gets fired when the MaxQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxQChanged;
        
        /// <summary>
        /// Gets fired before the MaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxPChanging;
        
        /// <summary>
        /// Gets fired when the MaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxPChanged;
        
        /// <summary>
        /// Gets fired before the RQuadSync property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadSyncChanging;
        
        /// <summary>
        /// Gets fired when the RQuadSync property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadSyncChanged;
        
        /// <summary>
        /// Gets fired before the XDirectSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanged;
        
        /// <summary>
        /// Gets fired before the XDirectTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectTransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XDirectTransChanged;
        
        /// <summary>
        /// Gets fired before the RDirectTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectTransChanging;
        
        /// <summary>
        /// Gets fired when the RDirectTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectTransChanged;
        
        /// <summary>
        /// Gets fired before the RDirectSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectSubtransChanging;
        
        /// <summary>
        /// Gets fired when the RDirectSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDirectSubtransChanged;
        
        /// <summary>
        /// Gets fired before the XQuadTrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadTransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadTrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XQuadTransChanged;
        
        /// <summary>
        /// Gets fired before the RQuadSubtrans property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadSubtransChanging;
        
        /// <summary>
        /// Gets fired when the RQuadSubtrans property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RQuadSubtransChanged;
        
        /// <summary>
        /// Raises the XDirectSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadSyncChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadSyncChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadSyncChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadSyncChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadSyncChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadSyncChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XDirectTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXDirectTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XDirectTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDirectSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDirectSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDirectSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadTransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadTransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadTransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XQuadTransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXQuadTransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XQuadTransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadSubtransChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadSubtransChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadSubtransChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RQuadSubtransChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRQuadSubtransChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RQuadSubtransChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "XDIRECTSYNC"))
            {
                return this.XDirectSync;
            }
            if ((attribute == "RDIRECTSYNC"))
            {
                return this.RDirectSync;
            }
            if ((attribute == "RQUADTRANS"))
            {
                return this.RQuadTrans;
            }
            if ((attribute == "XQUADSYNC"))
            {
                return this.XQuadSync;
            }
            if ((attribute == "XQUADSUBTRANS"))
            {
                return this.XQuadSubtrans;
            }
            if ((attribute == "MINP"))
            {
                return this.MinP;
            }
            if ((attribute == "MINQ"))
            {
                return this.MinQ;
            }
            if ((attribute == "MAXQ"))
            {
                return this.MaxQ;
            }
            if ((attribute == "MAXP"))
            {
                return this.MaxP;
            }
            if ((attribute == "RQUADSYNC"))
            {
                return this.RQuadSync;
            }
            if ((attribute == "XDIRECTSUBTRANS"))
            {
                return this.XDirectSubtrans;
            }
            if ((attribute == "XDIRECTTRANS"))
            {
                return this.XDirectTrans;
            }
            if ((attribute == "RDIRECTTRANS"))
            {
                return this.RDirectTrans;
            }
            if ((attribute == "RDIRECTSUBTRANS"))
            {
                return this.RDirectSubtrans;
            }
            if ((attribute == "XQUADTRANS"))
            {
                return this.XQuadTrans;
            }
            if ((attribute == "RQUADSUBTRANS"))
            {
                return this.RQuadSubtrans;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "XDIRECTSYNC"))
            {
                this.XDirectSync = ((float)(value));
                return;
            }
            if ((feature == "RDIRECTSYNC"))
            {
                this.RDirectSync = ((float)(value));
                return;
            }
            if ((feature == "RQUADTRANS"))
            {
                this.RQuadTrans = ((float)(value));
                return;
            }
            if ((feature == "XQUADSYNC"))
            {
                this.XQuadSync = ((float)(value));
                return;
            }
            if ((feature == "XQUADSUBTRANS"))
            {
                this.XQuadSubtrans = ((float)(value));
                return;
            }
            if ((feature == "MINP"))
            {
                this.MinP = ((float)(value));
                return;
            }
            if ((feature == "MINQ"))
            {
                this.MinQ = ((float)(value));
                return;
            }
            if ((feature == "MAXQ"))
            {
                this.MaxQ = ((float)(value));
                return;
            }
            if ((feature == "MAXP"))
            {
                this.MaxP = ((float)(value));
                return;
            }
            if ((feature == "RQUADSYNC"))
            {
                this.RQuadSync = ((float)(value));
                return;
            }
            if ((feature == "XDIRECTSUBTRANS"))
            {
                this.XDirectSubtrans = ((float)(value));
                return;
            }
            if ((feature == "XDIRECTTRANS"))
            {
                this.XDirectTrans = ((float)(value));
                return;
            }
            if ((feature == "RDIRECTTRANS"))
            {
                this.RDirectTrans = ((float)(value));
                return;
            }
            if ((feature == "RDIRECTSUBTRANS"))
            {
                this.RDirectSubtrans = ((float)(value));
                return;
            }
            if ((feature == "XQUADTRANS"))
            {
                this.XQuadTrans = ((float)(value));
                return;
            }
            if ((feature == "RQUADSUBTRANS"))
            {
                this.RQuadSubtrans = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Gene" +
                        "ratorTypeAsset")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectSync property
        /// </summary>
        private sealed class XDirectSyncProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectSyncProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectSync;
                }
                set
                {
                    this.ModelElement.XDirectSync = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectSyncChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectSyncChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rDirectSync property
        /// </summary>
        private sealed class RDirectSyncProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RDirectSyncProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RDirectSync;
                }
                set
                {
                    this.ModelElement.RDirectSync = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectSyncChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectSyncChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rQuadTrans property
        /// </summary>
        private sealed class RQuadTransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RQuadTransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RQuadTrans;
                }
                set
                {
                    this.ModelElement.RQuadTrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadTransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadTransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadSync property
        /// </summary>
        private sealed class XQuadSyncProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadSyncProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadSync;
                }
                set
                {
                    this.ModelElement.XQuadSync = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadSyncChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadSyncChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadSubtrans property
        /// </summary>
        private sealed class XQuadSubtransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadSubtransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadSubtrans;
                }
                set
                {
                    this.ModelElement.XQuadSubtrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadSubtransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadSubtransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minP property
        /// </summary>
        private sealed class MinPProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinPProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinP;
                }
                set
                {
                    this.ModelElement.MinP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minQ property
        /// </summary>
        private sealed class MinQProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinQProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinQ;
                }
                set
                {
                    this.ModelElement.MinQ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinQChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinQChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxQ property
        /// </summary>
        private sealed class MaxQProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxQProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxQ;
                }
                set
                {
                    this.ModelElement.MaxQ = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxQChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxQChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxP property
        /// </summary>
        private sealed class MaxPProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxPProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxP;
                }
                set
                {
                    this.ModelElement.MaxP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rQuadSync property
        /// </summary>
        private sealed class RQuadSyncProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RQuadSyncProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RQuadSync;
                }
                set
                {
                    this.ModelElement.RQuadSync = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadSyncChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadSyncChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectSubtrans property
        /// </summary>
        private sealed class XDirectSubtransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectSubtransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectSubtrans;
                }
                set
                {
                    this.ModelElement.XDirectSubtrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectSubtransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectSubtransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xDirectTrans property
        /// </summary>
        private sealed class XDirectTransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XDirectTransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XDirectTrans;
                }
                set
                {
                    this.ModelElement.XDirectTrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectTransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XDirectTransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rDirectTrans property
        /// </summary>
        private sealed class RDirectTransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RDirectTransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RDirectTrans;
                }
                set
                {
                    this.ModelElement.RDirectTrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectTransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectTransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rDirectSubtrans property
        /// </summary>
        private sealed class RDirectSubtransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RDirectSubtransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RDirectSubtrans;
                }
                set
                {
                    this.ModelElement.RDirectSubtrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectSubtransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RDirectSubtransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xQuadTrans property
        /// </summary>
        private sealed class XQuadTransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XQuadTransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XQuadTrans;
                }
                set
                {
                    this.ModelElement.XQuadTrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadTransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XQuadTransChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rQuadSubtrans property
        /// </summary>
        private sealed class RQuadSubtransProxy : ModelPropertyChange<IGeneratorTypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RQuadSubtransProxy(IGeneratorTypeAsset modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RQuadSubtrans;
                }
                set
                {
                    this.ModelElement.RQuadSubtrans = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadSubtransChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RQuadSubtransChanged -= handler;
            }
        }
    }
}

