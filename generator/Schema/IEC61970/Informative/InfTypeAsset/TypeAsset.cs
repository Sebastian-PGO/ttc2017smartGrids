//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset
{
    
    
    /// <summary>
    /// The default implementation of the TypeAsset class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfTypeAsset")]
    [XmlNamespacePrefixAttribute("cimInfTypeAsset")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Type" +
        "Asset")]
    [DebuggerDisplayAttribute("TypeAsset {UUID}")]
    public partial class TypeAsset : IdentifiedObject, ITypeAsset, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StockItem property
        /// </summary>
        private bool _stockItem;
        
        private static Lazy<ITypedElement> _stockItemAttribute = new Lazy<ITypedElement>(RetrieveStockItemAttribute);
        
        /// <summary>
        /// The backing field for the EstimatedUnitCost property
        /// </summary>
        private float _estimatedUnitCost;
        
        private static Lazy<ITypedElement> _estimatedUnitCostAttribute = new Lazy<ITypedElement>(RetrieveEstimatedUnitCostAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private string _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        private static Lazy<ITypedElement> _typeAssetCatalogueReference = new Lazy<ITypedElement>(RetrieveTypeAssetCatalogueReference);
        
        /// <summary>
        /// The backing field for the TypeAssetCatalogue property
        /// </summary>
        private ITypeAssetCatalogue _typeAssetCatalogue;
        
        private static Lazy<ITypedElement> _erpBomItemDatasReference = new Lazy<ITypedElement>(RetrieveErpBomItemDatasReference);
        
        /// <summary>
        /// The backing field for the ErpBomItemDatas property
        /// </summary>
        private TypeAssetErpBomItemDatasCollection _erpBomItemDatas;
        
        private static Lazy<ITypedElement> _assetInfoReference = new Lazy<ITypedElement>(RetrieveAssetInfoReference);
        
        /// <summary>
        /// The backing field for the AssetInfo property
        /// </summary>
        private IAssetInfo _assetInfo;
        
        private static Lazy<ITypedElement> _erpReqLineItemsReference = new Lazy<ITypedElement>(RetrieveErpReqLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpReqLineItems property
        /// </summary>
        private TypeAssetErpReqLineItemsCollection _erpReqLineItems;
        
        private static Lazy<ITypedElement> _erpInventoryIssuesReference = new Lazy<ITypedElement>(RetrieveErpInventoryIssuesReference);
        
        /// <summary>
        /// The backing field for the ErpInventoryIssues property
        /// </summary>
        private TypeAssetErpInventoryIssuesCollection _erpInventoryIssues;
        
        private static Lazy<ITypedElement> _cUWorkEquipmentAssetReference = new Lazy<ITypedElement>(RetrieveCUWorkEquipmentAssetReference);
        
        /// <summary>
        /// The backing field for the CUWorkEquipmentAsset property
        /// </summary>
        private ICUWorkEquipmentItem _cUWorkEquipmentAsset;
        
        private static Lazy<ITypedElement> _assetModelsReference = new Lazy<ITypedElement>(RetrieveAssetModelsReference);
        
        /// <summary>
        /// The backing field for the AssetModels property
        /// </summary>
        private TypeAssetAssetModelsCollection _assetModels;
        
        private static Lazy<ITypedElement> _cUAssetReference = new Lazy<ITypedElement>(RetrieveCUAssetReference);
        
        /// <summary>
        /// The backing field for the CUAsset property
        /// </summary>
        private ICUAsset _cUAsset;
        
        private static IClass _classInstance;
        
        public TypeAsset()
        {
            this._erpBomItemDatas = new TypeAssetErpBomItemDatasCollection(this);
            this._erpBomItemDatas.CollectionChanging += this.ErpBomItemDatasCollectionChanging;
            this._erpBomItemDatas.CollectionChanged += this.ErpBomItemDatasCollectionChanged;
            this._erpReqLineItems = new TypeAssetErpReqLineItemsCollection(this);
            this._erpReqLineItems.CollectionChanging += this.ErpReqLineItemsCollectionChanging;
            this._erpReqLineItems.CollectionChanged += this.ErpReqLineItemsCollectionChanged;
            this._erpInventoryIssues = new TypeAssetErpInventoryIssuesCollection(this);
            this._erpInventoryIssues.CollectionChanging += this.ErpInventoryIssuesCollectionChanging;
            this._erpInventoryIssues.CollectionChanged += this.ErpInventoryIssuesCollectionChanged;
            this._assetModels = new TypeAssetAssetModelsCollection(this);
            this._assetModels.CollectionChanging += this.AssetModelsCollectionChanging;
            this._assetModels.CollectionChanged += this.AssetModelsCollectionChanged;
        }
        
        /// <summary>
        /// The stockItem property
        /// </summary>
        [XmlElementNameAttribute("stockItem")]
        [XmlAttributeAttribute(true)]
        public virtual bool StockItem
        {
            get
            {
                return this._stockItem;
            }
            set
            {
                if ((this._stockItem != value))
                {
                    bool old = this._stockItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStockItemChanging(e);
                    this.OnPropertyChanging("StockItem", e, _stockItemAttribute);
                    this._stockItem = value;
                    this.OnStockItemChanged(e);
                    this.OnPropertyChanged("StockItem", e, _stockItemAttribute);
                }
            }
        }
        
        /// <summary>
        /// The estimatedUnitCost property
        /// </summary>
        [XmlElementNameAttribute("estimatedUnitCost")]
        [XmlAttributeAttribute(true)]
        public virtual float EstimatedUnitCost
        {
            get
            {
                return this._estimatedUnitCost;
            }
            set
            {
                if ((this._estimatedUnitCost != value))
                {
                    float old = this._estimatedUnitCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatedUnitCostChanging(e);
                    this.OnPropertyChanging("EstimatedUnitCost", e, _estimatedUnitCostAttribute);
                    this._estimatedUnitCost = value;
                    this.OnEstimatedUnitCostChanged(e);
                    this.OnPropertyChanged("EstimatedUnitCost", e, _estimatedUnitCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual string Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    string old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TypeAssetCatalogue property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAssets")]
        public virtual ITypeAssetCatalogue TypeAssetCatalogue
        {
            get
            {
                return this._typeAssetCatalogue;
            }
            set
            {
                if ((this._typeAssetCatalogue != value))
                {
                    ITypeAssetCatalogue old = this._typeAssetCatalogue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeAssetCatalogueChanging(e);
                    this.OnPropertyChanging("TypeAssetCatalogue", e, _typeAssetCatalogueReference);
                    this._typeAssetCatalogue = value;
                    if ((old != null))
                    {
                        old.TypeAssets.Remove(this);
                        old.Deleted -= this.OnResetTypeAssetCatalogue;
                    }
                    if ((value != null))
                    {
                        value.TypeAssets.Add(this);
                        value.Deleted += this.OnResetTypeAssetCatalogue;
                    }
                    this.OnTypeAssetCatalogueChanged(e);
                    this.OnPropertyChanged("TypeAssetCatalogue", e, _typeAssetCatalogueReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpBomItemDatas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpBomItemData> ErpBomItemDatas
        {
            get
            {
                return this._erpBomItemDatas;
            }
        }
        
        /// <summary>
        /// The AssetInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        public virtual IAssetInfo AssetInfo
        {
            get
            {
                return this._assetInfo;
            }
            set
            {
                if ((this._assetInfo != value))
                {
                    IAssetInfo old = this._assetInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetInfoChanging(e);
                    this.OnPropertyChanging("AssetInfo", e, _assetInfoReference);
                    this._assetInfo = value;
                    if ((old != null))
                    {
                        old.TypeAsset = null;
                        old.Deleted -= this.OnResetAssetInfo;
                    }
                    if ((value != null))
                    {
                        value.TypeAsset = this;
                        value.Deleted += this.OnResetAssetInfo;
                    }
                    this.OnAssetInfoChanged(e);
                    this.OnPropertyChanged("AssetInfo", e, _assetInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpReqLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpReqLineItem> ErpReqLineItems
        {
            get
            {
                return this._erpReqLineItems;
            }
        }
        
        /// <summary>
        /// The ErpInventoryIssues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpIssueInventory> ErpInventoryIssues
        {
            get
            {
                return this._erpInventoryIssues;
            }
        }
        
        /// <summary>
        /// The CUWorkEquipmentAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        public virtual ICUWorkEquipmentItem CUWorkEquipmentAsset
        {
            get
            {
                return this._cUWorkEquipmentAsset;
            }
            set
            {
                if ((this._cUWorkEquipmentAsset != value))
                {
                    ICUWorkEquipmentItem old = this._cUWorkEquipmentAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCUWorkEquipmentAssetChanging(e);
                    this.OnPropertyChanging("CUWorkEquipmentAsset", e, _cUWorkEquipmentAssetReference);
                    this._cUWorkEquipmentAsset = value;
                    if ((old != null))
                    {
                        old.TypeAsset = null;
                        old.Deleted -= this.OnResetCUWorkEquipmentAsset;
                    }
                    if ((value != null))
                    {
                        value.TypeAsset = this;
                        value.Deleted += this.OnResetCUWorkEquipmentAsset;
                    }
                    this.OnCUWorkEquipmentAssetChanged(e);
                    this.OnPropertyChanged("CUWorkEquipmentAsset", e, _cUWorkEquipmentAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The AssetModels property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetModel> AssetModels
        {
            get
            {
                return this._assetModels;
            }
        }
        
        /// <summary>
        /// The CUAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeAsset")]
        public virtual ICUAsset CUAsset
        {
            get
            {
                return this._cUAsset;
            }
            set
            {
                if ((this._cUAsset != value))
                {
                    ICUAsset old = this._cUAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCUAssetChanging(e);
                    this.OnPropertyChanging("CUAsset", e, _cUAssetReference);
                    this._cUAsset = value;
                    if ((old != null))
                    {
                        old.TypeAsset = null;
                        old.Deleted -= this.OnResetCUAsset;
                    }
                    if ((value != null))
                    {
                        value.TypeAsset = this;
                        value.Deleted += this.OnResetCUAsset;
                    }
                    this.OnCUAssetChanged(e);
                    this.OnPropertyChanged("CUAsset", e, _cUAssetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TypeAssetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Type" +
                            "Asset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StockItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StockItemChanging;
        
        /// <summary>
        /// Gets fired when the StockItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StockItemChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedUnitCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedUnitCostChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedUnitCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedUnitCostChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the TypeAssetCatalogue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetCatalogueChanging;
        
        /// <summary>
        /// Gets fired when the TypeAssetCatalogue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetCatalogueChanged;
        
        /// <summary>
        /// Gets fired before the AssetInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanging;
        
        /// <summary>
        /// Gets fired when the AssetInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanged;
        
        /// <summary>
        /// Gets fired before the CUWorkEquipmentAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUWorkEquipmentAssetChanging;
        
        /// <summary>
        /// Gets fired when the CUWorkEquipmentAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUWorkEquipmentAssetChanged;
        
        /// <summary>
        /// Gets fired before the CUAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUAssetChanging;
        
        /// <summary>
        /// Gets fired when the CUAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUAssetChanged;
        
        private static ITypedElement RetrieveStockItemAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("stockItem")));
        }
        
        /// <summary>
        /// Raises the StockItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStockItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StockItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StockItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStockItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StockItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEstimatedUnitCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("estimatedUnitCost")));
        }
        
        /// <summary>
        /// Raises the EstimatedUnitCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedUnitCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedUnitCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedUnitCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedUnitCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedUnitCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAssetCatalogueReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("TypeAssetCatalogue")));
        }
        
        /// <summary>
        /// Raises the TypeAssetCatalogueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetCatalogueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetCatalogueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeAssetCatalogueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetCatalogueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetCatalogueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeAssetCatalogue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeAssetCatalogue(object sender, System.EventArgs eventArgs)
        {
            this.TypeAssetCatalogue = null;
        }
        
        private static ITypedElement RetrieveErpBomItemDatasReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("ErpBomItemDatas")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpBomItemDatas", e, _erpBomItemDatasReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpBomItemDatas", e, _erpBomItemDatasReference);
        }
        
        private static ITypedElement RetrieveAssetInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("AssetInfo")));
        }
        
        /// <summary>
        /// Raises the AssetInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetInfo(object sender, System.EventArgs eventArgs)
        {
            this.AssetInfo = null;
        }
        
        private static ITypedElement RetrieveErpReqLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("ErpReqLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpReqLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpReqLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpReqLineItems", e, _erpReqLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpReqLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpReqLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpReqLineItems", e, _erpReqLineItemsReference);
        }
        
        private static ITypedElement RetrieveErpInventoryIssuesReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("ErpInventoryIssues")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInventoryIssues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryIssuesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpInventoryIssues", e, _erpInventoryIssuesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInventoryIssues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInventoryIssuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInventoryIssues", e, _erpInventoryIssuesReference);
        }
        
        private static ITypedElement RetrieveCUWorkEquipmentAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("CUWorkEquipmentAsset")));
        }
        
        /// <summary>
        /// Raises the CUWorkEquipmentAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUWorkEquipmentAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUWorkEquipmentAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CUWorkEquipmentAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUWorkEquipmentAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUWorkEquipmentAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CUWorkEquipmentAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCUWorkEquipmentAsset(object sender, System.EventArgs eventArgs)
        {
            this.CUWorkEquipmentAsset = null;
        }
        
        private static ITypedElement RetrieveAssetModelsReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("AssetModels")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetModels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetModelsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetModels", e, _assetModelsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetModels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetModelsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetModels", e, _assetModelsReference);
        }
        
        private static ITypedElement RetrieveCUAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeAsset.ClassInstance)).Resolve("CUAsset")));
        }
        
        /// <summary>
        /// Raises the CUAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CUAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CUAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCUAsset(object sender, System.EventArgs eventArgs)
        {
            this.CUAsset = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STOCKITEM"))
            {
                return this.StockItem;
            }
            if ((attribute == "ESTIMATEDUNITCOST"))
            {
                return this.EstimatedUnitCost;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPBOMITEMDATAS"))
            {
                return this._erpBomItemDatas;
            }
            if ((feature == "ERPREQLINEITEMS"))
            {
                return this._erpReqLineItems;
            }
            if ((feature == "ERPINVENTORYISSUES"))
            {
                return this._erpInventoryIssues;
            }
            if ((feature == "ASSETMODELS"))
            {
                return this._assetModels;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPEASSETCATALOGUE"))
            {
                this.TypeAssetCatalogue = ((ITypeAssetCatalogue)(value));
                return;
            }
            if ((feature == "ASSETINFO"))
            {
                this.AssetInfo = ((IAssetInfo)(value));
                return;
            }
            if ((feature == "CUWORKEQUIPMENTASSET"))
            {
                this.CUWorkEquipmentAsset = ((ICUWorkEquipmentItem)(value));
                return;
            }
            if ((feature == "CUASSET"))
            {
                this.CUAsset = ((ICUAsset)(value));
                return;
            }
            if ((feature == "STOCKITEM"))
            {
                this.StockItem = ((bool)(value));
                return;
            }
            if ((feature == "ESTIMATEDUNITCOST"))
            {
                this.EstimatedUnitCost = ((float)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TypeAssetCatalogue"))
            {
                return new TypeAssetCatalogueProxy(this);
            }
            if ((attribute == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((attribute == "CUWorkEquipmentAsset"))
            {
                return new CUWorkEquipmentAssetProxy(this);
            }
            if ((attribute == "CUAsset"))
            {
                return new CUAssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TypeAssetCatalogue"))
            {
                return new TypeAssetCatalogueProxy(this);
            }
            if ((reference == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((reference == "CUWorkEquipmentAsset"))
            {
                return new CUWorkEquipmentAssetProxy(this);
            }
            if ((reference == "CUAsset"))
            {
                return new CUAssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfTypeAsset/Type" +
                        "Asset")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TypeAsset class
        /// </summary>
        public class TypeAssetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TypeAsset _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TypeAssetReferencedElementsCollection(TypeAsset parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TypeAssetCatalogue != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpBomItemDatas.Count);
                    if ((this._parent.AssetInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpReqLineItems.Count);
                    count = (count + this._parent.ErpInventoryIssues.Count);
                    if ((this._parent.CUWorkEquipmentAsset != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AssetModels.Count);
                    if ((this._parent.CUAsset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TypeAssetCatalogueChanged += this.PropagateValueChanges;
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetInfoChanged += this.PropagateValueChanges;
                this._parent.ErpReqLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpInventoryIssues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUWorkEquipmentAssetChanged += this.PropagateValueChanges;
                this._parent.AssetModels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUAssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TypeAssetCatalogueChanged -= this.PropagateValueChanges;
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetInfoChanged -= this.PropagateValueChanges;
                this._parent.ErpReqLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpInventoryIssues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUWorkEquipmentAssetChanged -= this.PropagateValueChanges;
                this._parent.AssetModels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUAssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TypeAssetCatalogue == null))
                {
                    ITypeAssetCatalogue typeAssetCatalogueCasted = item.As<ITypeAssetCatalogue>();
                    if ((typeAssetCatalogueCasted != null))
                    {
                        this._parent.TypeAssetCatalogue = typeAssetCatalogueCasted;
                        return;
                    }
                }
                IErpBomItemData erpBomItemDatasCasted = item.As<IErpBomItemData>();
                if ((erpBomItemDatasCasted != null))
                {
                    this._parent.ErpBomItemDatas.Add(erpBomItemDatasCasted);
                }
                if ((this._parent.AssetInfo == null))
                {
                    IAssetInfo assetInfoCasted = item.As<IAssetInfo>();
                    if ((assetInfoCasted != null))
                    {
                        this._parent.AssetInfo = assetInfoCasted;
                        return;
                    }
                }
                IErpReqLineItem erpReqLineItemsCasted = item.As<IErpReqLineItem>();
                if ((erpReqLineItemsCasted != null))
                {
                    this._parent.ErpReqLineItems.Add(erpReqLineItemsCasted);
                }
                IErpIssueInventory erpInventoryIssuesCasted = item.As<IErpIssueInventory>();
                if ((erpInventoryIssuesCasted != null))
                {
                    this._parent.ErpInventoryIssues.Add(erpInventoryIssuesCasted);
                }
                if ((this._parent.CUWorkEquipmentAsset == null))
                {
                    ICUWorkEquipmentItem cUWorkEquipmentAssetCasted = item.As<ICUWorkEquipmentItem>();
                    if ((cUWorkEquipmentAssetCasted != null))
                    {
                        this._parent.CUWorkEquipmentAsset = cUWorkEquipmentAssetCasted;
                        return;
                    }
                }
                IAssetModel assetModelsCasted = item.As<IAssetModel>();
                if ((assetModelsCasted != null))
                {
                    this._parent.AssetModels.Add(assetModelsCasted);
                }
                if ((this._parent.CUAsset == null))
                {
                    ICUAsset cUAssetCasted = item.As<ICUAsset>();
                    if ((cUAssetCasted != null))
                    {
                        this._parent.CUAsset = cUAssetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TypeAssetCatalogue = null;
                this._parent.ErpBomItemDatas.Clear();
                this._parent.AssetInfo = null;
                this._parent.ErpReqLineItems.Clear();
                this._parent.ErpInventoryIssues.Clear();
                this._parent.CUWorkEquipmentAsset = null;
                this._parent.AssetModels.Clear();
                this._parent.CUAsset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TypeAssetCatalogue))
                {
                    return true;
                }
                if (this._parent.ErpBomItemDatas.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.AssetInfo))
                {
                    return true;
                }
                if (this._parent.ErpReqLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpInventoryIssues.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CUWorkEquipmentAsset))
                {
                    return true;
                }
                if (this._parent.AssetModels.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CUAsset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TypeAssetCatalogue != null))
                {
                    array[arrayIndex] = this._parent.TypeAssetCatalogue;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpBomItemDatasEnumerator = this._parent.ErpBomItemDatas.GetEnumerator();
                try
                {
                    for (
                    ; erpBomItemDatasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpBomItemDatasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpBomItemDatasEnumerator.Dispose();
                }
                if ((this._parent.AssetInfo != null))
                {
                    array[arrayIndex] = this._parent.AssetInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpReqLineItemsEnumerator = this._parent.ErpReqLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpReqLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpReqLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpReqLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpInventoryIssuesEnumerator = this._parent.ErpInventoryIssues.GetEnumerator();
                try
                {
                    for (
                    ; erpInventoryIssuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInventoryIssuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInventoryIssuesEnumerator.Dispose();
                }
                if ((this._parent.CUWorkEquipmentAsset != null))
                {
                    array[arrayIndex] = this._parent.CUWorkEquipmentAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> assetModelsEnumerator = this._parent.AssetModels.GetEnumerator();
                try
                {
                    for (
                    ; assetModelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetModelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetModelsEnumerator.Dispose();
                }
                if ((this._parent.CUAsset != null))
                {
                    array[arrayIndex] = this._parent.CUAsset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TypeAssetCatalogue == item))
                {
                    this._parent.TypeAssetCatalogue = null;
                    return true;
                }
                IErpBomItemData erpBomItemDataItem = item.As<IErpBomItemData>();
                if (((erpBomItemDataItem != null) 
                            && this._parent.ErpBomItemDatas.Remove(erpBomItemDataItem)))
                {
                    return true;
                }
                if ((this._parent.AssetInfo == item))
                {
                    this._parent.AssetInfo = null;
                    return true;
                }
                IErpReqLineItem erpReqLineItemItem = item.As<IErpReqLineItem>();
                if (((erpReqLineItemItem != null) 
                            && this._parent.ErpReqLineItems.Remove(erpReqLineItemItem)))
                {
                    return true;
                }
                IErpIssueInventory erpIssueInventoryItem = item.As<IErpIssueInventory>();
                if (((erpIssueInventoryItem != null) 
                            && this._parent.ErpInventoryIssues.Remove(erpIssueInventoryItem)))
                {
                    return true;
                }
                if ((this._parent.CUWorkEquipmentAsset == item))
                {
                    this._parent.CUWorkEquipmentAsset = null;
                    return true;
                }
                IAssetModel assetModelItem = item.As<IAssetModel>();
                if (((assetModelItem != null) 
                            && this._parent.AssetModels.Remove(assetModelItem)))
                {
                    return true;
                }
                if ((this._parent.CUAsset == item))
                {
                    this._parent.CUAsset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TypeAssetCatalogue).Concat(this._parent.ErpBomItemDatas).Concat(this._parent.AssetInfo).Concat(this._parent.ErpReqLineItems).Concat(this._parent.ErpInventoryIssues).Concat(this._parent.CUWorkEquipmentAsset).Concat(this._parent.AssetModels).Concat(this._parent.CUAsset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stockItem property
        /// </summary>
        private sealed class StockItemProxy : ModelPropertyChange<ITypeAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StockItemProxy(ITypeAsset modelElement) : 
                    base(modelElement, "stockItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.StockItem;
                }
                set
                {
                    this.ModelElement.StockItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatedUnitCost property
        /// </summary>
        private sealed class EstimatedUnitCostProxy : ModelPropertyChange<ITypeAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatedUnitCostProxy(ITypeAsset modelElement) : 
                    base(modelElement, "estimatedUnitCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EstimatedUnitCost;
                }
                set
                {
                    this.ModelElement.EstimatedUnitCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<ITypeAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(ITypeAsset modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeAssetCatalogue property
        /// </summary>
        private sealed class TypeAssetCatalogueProxy : ModelPropertyChange<ITypeAsset, ITypeAssetCatalogue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeAssetCatalogueProxy(ITypeAsset modelElement) : 
                    base(modelElement, "TypeAssetCatalogue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeAssetCatalogue Value
            {
                get
                {
                    return this.ModelElement.TypeAssetCatalogue;
                }
                set
                {
                    this.ModelElement.TypeAssetCatalogue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetInfo property
        /// </summary>
        private sealed class AssetInfoProxy : ModelPropertyChange<ITypeAsset, IAssetInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetInfoProxy(ITypeAsset modelElement) : 
                    base(modelElement, "AssetInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetInfo Value
            {
                get
                {
                    return this.ModelElement.AssetInfo;
                }
                set
                {
                    this.ModelElement.AssetInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CUWorkEquipmentAsset property
        /// </summary>
        private sealed class CUWorkEquipmentAssetProxy : ModelPropertyChange<ITypeAsset, ICUWorkEquipmentItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CUWorkEquipmentAssetProxy(ITypeAsset modelElement) : 
                    base(modelElement, "CUWorkEquipmentAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICUWorkEquipmentItem Value
            {
                get
                {
                    return this.ModelElement.CUWorkEquipmentAsset;
                }
                set
                {
                    this.ModelElement.CUWorkEquipmentAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CUAsset property
        /// </summary>
        private sealed class CUAssetProxy : ModelPropertyChange<ITypeAsset, ICUAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CUAssetProxy(ITypeAsset modelElement) : 
                    base(modelElement, "CUAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICUAsset Value
            {
                get
                {
                    return this.ModelElement.CUAsset;
                }
                set
                {
                    this.ModelElement.CUAsset = value;
                }
            }
        }
    }
}

