//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the TieLine class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "TieLine")]
    [DebuggerDisplayAttribute("TieLine {UUID}")]
    public class TieLine : Element, ITieLine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DynamicEnergyTransaction property
        /// </summary>
        private IDynamic _dynamicEnergyTransaction;
        
        /// <summary>
        /// The backing field for the CustomerConsumer property
        /// </summary>
        private ICustomerConsumer _customerConsumer;
        
        /// <summary>
        /// The backing field for the SideA_SubControlArea property
        /// </summary>
        private ISubControlArea _sideA_SubControlArea;
        
        /// <summary>
        /// The backing field for the SideB_HostControlArea property
        /// </summary>
        private IHostControlArea _sideB_HostControlArea;
        
        /// <summary>
        /// The backing field for the SideB_SubControlArea property
        /// </summary>
        private ISubControlArea _sideB_SubControlArea;
        
        /// <summary>
        /// The backing field for the SideA_HostControlArea property
        /// </summary>
        private IHostControlArea _sideA_HostControlArea;
        
        /// <summary>
        /// The backing field for the ControlAreaOperators property
        /// </summary>
        private TieLineControlAreaOperatorsCollection _controlAreaOperators;
        
        private static IClass _classInstance;
        
        public TieLine()
        {
            this._controlAreaOperators = new TieLineControlAreaOperatorsCollection(this);
            this._controlAreaOperators.CollectionChanging += this.ControlAreaOperatorsCollectionChanging;
            this._controlAreaOperators.CollectionChanged += this.ControlAreaOperatorsCollectionChanged;
        }
        
        /// <summary>
        /// The DynamicEnergyTransaction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TieLines")]
        public virtual IDynamic DynamicEnergyTransaction
        {
            get
            {
                return this._dynamicEnergyTransaction;
            }
            set
            {
                if ((this._dynamicEnergyTransaction != value))
                {
                    IDynamic old = this._dynamicEnergyTransaction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDynamicEnergyTransactionChanging(e);
                    this.OnPropertyChanging("DynamicEnergyTransaction", e);
                    this._dynamicEnergyTransaction = value;
                    if ((old != null))
                    {
                        old.TieLines.Remove(this);
                        old.Deleted -= this.OnResetDynamicEnergyTransaction;
                    }
                    if ((value != null))
                    {
                        value.TieLines.Add(this);
                        value.Deleted += this.OnResetDynamicEnergyTransaction;
                    }
                    this.OnDynamicEnergyTransactionChanged(e);
                    this.OnPropertyChanged("DynamicEnergyTransaction", e);
                }
            }
        }
        
        /// <summary>
        /// The CustomerConsumer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TieLines")]
        public virtual ICustomerConsumer CustomerConsumer
        {
            get
            {
                return this._customerConsumer;
            }
            set
            {
                if ((this._customerConsumer != value))
                {
                    ICustomerConsumer old = this._customerConsumer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerConsumerChanging(e);
                    this.OnPropertyChanging("CustomerConsumer", e);
                    this._customerConsumer = value;
                    if ((old != null))
                    {
                        old.TieLines.Remove(this);
                        old.Deleted -= this.OnResetCustomerConsumer;
                    }
                    if ((value != null))
                    {
                        value.TieLines.Add(this);
                        value.Deleted += this.OnResetCustomerConsumer;
                    }
                    this.OnCustomerConsumerChanged(e);
                    this.OnPropertyChanged("CustomerConsumer", e);
                }
            }
        }
        
        /// <summary>
        /// The SideA_SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideA_TieLines")]
        public virtual ISubControlArea SideA_SubControlArea
        {
            get
            {
                return this._sideA_SubControlArea;
            }
            set
            {
                if ((this._sideA_SubControlArea != value))
                {
                    ISubControlArea old = this._sideA_SubControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSideA_SubControlAreaChanging(e);
                    this.OnPropertyChanging("SideA_SubControlArea", e);
                    this._sideA_SubControlArea = value;
                    if ((old != null))
                    {
                        old.SideA_TieLines.Remove(this);
                        old.Deleted -= this.OnResetSideA_SubControlArea;
                    }
                    if ((value != null))
                    {
                        value.SideA_TieLines.Add(this);
                        value.Deleted += this.OnResetSideA_SubControlArea;
                    }
                    this.OnSideA_SubControlAreaChanged(e);
                    this.OnPropertyChanged("SideA_SubControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// The SideB_HostControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideB_TieLines")]
        public virtual IHostControlArea SideB_HostControlArea
        {
            get
            {
                return this._sideB_HostControlArea;
            }
            set
            {
                if ((this._sideB_HostControlArea != value))
                {
                    IHostControlArea old = this._sideB_HostControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSideB_HostControlAreaChanging(e);
                    this.OnPropertyChanging("SideB_HostControlArea", e);
                    this._sideB_HostControlArea = value;
                    if ((old != null))
                    {
                        old.SideB_TieLines.Remove(this);
                        old.Deleted -= this.OnResetSideB_HostControlArea;
                    }
                    if ((value != null))
                    {
                        value.SideB_TieLines.Add(this);
                        value.Deleted += this.OnResetSideB_HostControlArea;
                    }
                    this.OnSideB_HostControlAreaChanged(e);
                    this.OnPropertyChanged("SideB_HostControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// The SideB_SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideB_TieLines")]
        public virtual ISubControlArea SideB_SubControlArea
        {
            get
            {
                return this._sideB_SubControlArea;
            }
            set
            {
                if ((this._sideB_SubControlArea != value))
                {
                    ISubControlArea old = this._sideB_SubControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSideB_SubControlAreaChanging(e);
                    this.OnPropertyChanging("SideB_SubControlArea", e);
                    this._sideB_SubControlArea = value;
                    if ((old != null))
                    {
                        old.SideB_TieLines.Remove(this);
                        old.Deleted -= this.OnResetSideB_SubControlArea;
                    }
                    if ((value != null))
                    {
                        value.SideB_TieLines.Add(this);
                        value.Deleted += this.OnResetSideB_SubControlArea;
                    }
                    this.OnSideB_SubControlAreaChanged(e);
                    this.OnPropertyChanged("SideB_SubControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// The SideA_HostControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideA_TieLines")]
        public virtual IHostControlArea SideA_HostControlArea
        {
            get
            {
                return this._sideA_HostControlArea;
            }
            set
            {
                if ((this._sideA_HostControlArea != value))
                {
                    IHostControlArea old = this._sideA_HostControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSideA_HostControlAreaChanging(e);
                    this.OnPropertyChanging("SideA_HostControlArea", e);
                    this._sideA_HostControlArea = value;
                    if ((old != null))
                    {
                        old.SideA_TieLines.Remove(this);
                        old.Deleted -= this.OnResetSideA_HostControlArea;
                    }
                    if ((value != null))
                    {
                        value.SideA_TieLines.Add(this);
                        value.Deleted += this.OnResetSideA_HostControlArea;
                    }
                    this.OnSideA_HostControlAreaChanged(e);
                    this.OnPropertyChanged("SideA_HostControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// The ControlAreaOperators property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TieLines")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IControlAreaOperator> ControlAreaOperators
        {
            get
            {
                return this._controlAreaOperators;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TieLineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "TieLine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DynamicEnergyTransaction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynamicEnergyTransactionChanging;
        
        /// <summary>
        /// Gets fired when the DynamicEnergyTransaction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynamicEnergyTransactionChanged;
        
        /// <summary>
        /// Gets fired before the CustomerConsumer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerConsumerChanging;
        
        /// <summary>
        /// Gets fired when the CustomerConsumer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerConsumerChanged;
        
        /// <summary>
        /// Gets fired before the SideA_SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideA_SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SideA_SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideA_SubControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the SideB_HostControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideB_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SideB_HostControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideB_HostControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the SideB_SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideB_SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SideB_SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideB_SubControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the SideA_HostControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideA_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SideA_HostControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SideA_HostControlAreaChanged;
        
        /// <summary>
        /// Raises the DynamicEnergyTransactionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynamicEnergyTransactionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynamicEnergyTransactionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DynamicEnergyTransactionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynamicEnergyTransactionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynamicEnergyTransactionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DynamicEnergyTransaction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDynamicEnergyTransaction(object sender, System.EventArgs eventArgs)
        {
            this.DynamicEnergyTransaction = null;
        }
        
        /// <summary>
        /// Raises the CustomerConsumerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerConsumerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerConsumerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerConsumerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerConsumerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerConsumerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerConsumer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerConsumer(object sender, System.EventArgs eventArgs)
        {
            this.CustomerConsumer = null;
        }
        
        /// <summary>
        /// Raises the SideA_SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideA_SubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideA_SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SideA_SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideA_SubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideA_SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SideA_SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSideA_SubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SideA_SubControlArea = null;
        }
        
        /// <summary>
        /// Raises the SideB_HostControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideB_HostControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideB_HostControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SideB_HostControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideB_HostControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideB_HostControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SideB_HostControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSideB_HostControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SideB_HostControlArea = null;
        }
        
        /// <summary>
        /// Raises the SideB_SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideB_SubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideB_SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SideB_SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideB_SubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideB_SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SideB_SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSideB_SubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SideB_SubControlArea = null;
        }
        
        /// <summary>
        /// Raises the SideA_HostControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideA_HostControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideA_HostControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SideA_HostControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSideA_HostControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SideA_HostControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SideA_HostControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSideA_HostControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SideA_HostControlArea = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ControlAreaOperators property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlAreaOperatorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ControlAreaOperators", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ControlAreaOperators property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlAreaOperatorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ControlAreaOperators", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTROLAREAOPERATORS"))
            {
                return this._controlAreaOperators;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DYNAMICENERGYTRANSACTION"))
            {
                this.DynamicEnergyTransaction = ((IDynamic)(value));
                return;
            }
            if ((feature == "CUSTOMERCONSUMER"))
            {
                this.CustomerConsumer = ((ICustomerConsumer)(value));
                return;
            }
            if ((feature == "SIDEA_SUBCONTROLAREA"))
            {
                this.SideA_SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "SIDEB_HOSTCONTROLAREA"))
            {
                this.SideB_HostControlArea = ((IHostControlArea)(value));
                return;
            }
            if ((feature == "SIDEB_SUBCONTROLAREA"))
            {
                this.SideB_SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "SIDEA_HOSTCONTROLAREA"))
            {
                this.SideA_HostControlArea = ((IHostControlArea)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DynamicEnergyTransaction"))
            {
                return new DynamicEnergyTransactionProxy(this);
            }
            if ((attribute == "CustomerConsumer"))
            {
                return new CustomerConsumerProxy(this);
            }
            if ((attribute == "SideA_SubControlArea"))
            {
                return new SideA_SubControlAreaProxy(this);
            }
            if ((attribute == "SideB_HostControlArea"))
            {
                return new SideB_HostControlAreaProxy(this);
            }
            if ((attribute == "SideB_SubControlArea"))
            {
                return new SideB_SubControlAreaProxy(this);
            }
            if ((attribute == "SideA_HostControlArea"))
            {
                return new SideA_HostControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DynamicEnergyTransaction"))
            {
                return new DynamicEnergyTransactionProxy(this);
            }
            if ((reference == "CustomerConsumer"))
            {
                return new CustomerConsumerProxy(this);
            }
            if ((reference == "SideA_SubControlArea"))
            {
                return new SideA_SubControlAreaProxy(this);
            }
            if ((reference == "SideB_HostControlArea"))
            {
                return new SideB_HostControlAreaProxy(this);
            }
            if ((reference == "SideB_SubControlArea"))
            {
                return new SideB_SubControlAreaProxy(this);
            }
            if ((reference == "SideA_HostControlArea"))
            {
                return new SideA_HostControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "TieLine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TieLine class
        /// </summary>
        public class TieLineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TieLine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TieLineReferencedElementsCollection(TieLine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DynamicEnergyTransaction != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerConsumer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SideA_SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SideB_HostControlArea != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SideB_SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SideA_HostControlArea != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ControlAreaOperators.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DynamicEnergyTransactionChanged += this.PropagateValueChanges;
                this._parent.CustomerConsumerChanged += this.PropagateValueChanges;
                this._parent.SideA_SubControlAreaChanged += this.PropagateValueChanges;
                this._parent.SideB_HostControlAreaChanged += this.PropagateValueChanges;
                this._parent.SideB_SubControlAreaChanged += this.PropagateValueChanges;
                this._parent.SideA_HostControlAreaChanged += this.PropagateValueChanges;
                this._parent.ControlAreaOperators.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DynamicEnergyTransactionChanged -= this.PropagateValueChanges;
                this._parent.CustomerConsumerChanged -= this.PropagateValueChanges;
                this._parent.SideA_SubControlAreaChanged -= this.PropagateValueChanges;
                this._parent.SideB_HostControlAreaChanged -= this.PropagateValueChanges;
                this._parent.SideB_SubControlAreaChanged -= this.PropagateValueChanges;
                this._parent.SideA_HostControlAreaChanged -= this.PropagateValueChanges;
                this._parent.ControlAreaOperators.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DynamicEnergyTransaction == null))
                {
                    IDynamic dynamicEnergyTransactionCasted = item.As<IDynamic>();
                    if ((dynamicEnergyTransactionCasted != null))
                    {
                        this._parent.DynamicEnergyTransaction = dynamicEnergyTransactionCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerConsumer == null))
                {
                    ICustomerConsumer customerConsumerCasted = item.As<ICustomerConsumer>();
                    if ((customerConsumerCasted != null))
                    {
                        this._parent.CustomerConsumer = customerConsumerCasted;
                        return;
                    }
                }
                if ((this._parent.SideA_SubControlArea == null))
                {
                    ISubControlArea sideA_SubControlAreaCasted = item.As<ISubControlArea>();
                    if ((sideA_SubControlAreaCasted != null))
                    {
                        this._parent.SideA_SubControlArea = sideA_SubControlAreaCasted;
                        return;
                    }
                }
                if ((this._parent.SideB_HostControlArea == null))
                {
                    IHostControlArea sideB_HostControlAreaCasted = item.As<IHostControlArea>();
                    if ((sideB_HostControlAreaCasted != null))
                    {
                        this._parent.SideB_HostControlArea = sideB_HostControlAreaCasted;
                        return;
                    }
                }
                if ((this._parent.SideB_SubControlArea == null))
                {
                    ISubControlArea sideB_SubControlAreaCasted = item.As<ISubControlArea>();
                    if ((sideB_SubControlAreaCasted != null))
                    {
                        this._parent.SideB_SubControlArea = sideB_SubControlAreaCasted;
                        return;
                    }
                }
                if ((this._parent.SideA_HostControlArea == null))
                {
                    IHostControlArea sideA_HostControlAreaCasted = item.As<IHostControlArea>();
                    if ((sideA_HostControlAreaCasted != null))
                    {
                        this._parent.SideA_HostControlArea = sideA_HostControlAreaCasted;
                        return;
                    }
                }
                IControlAreaOperator controlAreaOperatorsCasted = item.As<IControlAreaOperator>();
                if ((controlAreaOperatorsCasted != null))
                {
                    this._parent.ControlAreaOperators.Add(controlAreaOperatorsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DynamicEnergyTransaction = null;
                this._parent.CustomerConsumer = null;
                this._parent.SideA_SubControlArea = null;
                this._parent.SideB_HostControlArea = null;
                this._parent.SideB_SubControlArea = null;
                this._parent.SideA_HostControlArea = null;
                this._parent.ControlAreaOperators.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DynamicEnergyTransaction))
                {
                    return true;
                }
                if ((item == this._parent.CustomerConsumer))
                {
                    return true;
                }
                if ((item == this._parent.SideA_SubControlArea))
                {
                    return true;
                }
                if ((item == this._parent.SideB_HostControlArea))
                {
                    return true;
                }
                if ((item == this._parent.SideB_SubControlArea))
                {
                    return true;
                }
                if ((item == this._parent.SideA_HostControlArea))
                {
                    return true;
                }
                if (this._parent.ControlAreaOperators.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DynamicEnergyTransaction != null))
                {
                    array[arrayIndex] = this._parent.DynamicEnergyTransaction;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerConsumer != null))
                {
                    array[arrayIndex] = this._parent.CustomerConsumer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SideA_SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.SideA_SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SideB_HostControlArea != null))
                {
                    array[arrayIndex] = this._parent.SideB_HostControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SideB_SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.SideB_SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SideA_HostControlArea != null))
                {
                    array[arrayIndex] = this._parent.SideA_HostControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> controlAreaOperatorsEnumerator = this._parent.ControlAreaOperators.GetEnumerator();
                try
                {
                    for (
                    ; controlAreaOperatorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = controlAreaOperatorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    controlAreaOperatorsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DynamicEnergyTransaction == item))
                {
                    this._parent.DynamicEnergyTransaction = null;
                    return true;
                }
                if ((this._parent.CustomerConsumer == item))
                {
                    this._parent.CustomerConsumer = null;
                    return true;
                }
                if ((this._parent.SideA_SubControlArea == item))
                {
                    this._parent.SideA_SubControlArea = null;
                    return true;
                }
                if ((this._parent.SideB_HostControlArea == item))
                {
                    this._parent.SideB_HostControlArea = null;
                    return true;
                }
                if ((this._parent.SideB_SubControlArea == item))
                {
                    this._parent.SideB_SubControlArea = null;
                    return true;
                }
                if ((this._parent.SideA_HostControlArea == item))
                {
                    this._parent.SideA_HostControlArea = null;
                    return true;
                }
                IControlAreaOperator controlAreaOperatorItem = item.As<IControlAreaOperator>();
                if (((controlAreaOperatorItem != null) 
                            && this._parent.ControlAreaOperators.Remove(controlAreaOperatorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DynamicEnergyTransaction).Concat(this._parent.CustomerConsumer).Concat(this._parent.SideA_SubControlArea).Concat(this._parent.SideB_HostControlArea).Concat(this._parent.SideB_SubControlArea).Concat(this._parent.SideA_HostControlArea).Concat(this._parent.ControlAreaOperators).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DynamicEnergyTransaction property
        /// </summary>
        private sealed class DynamicEnergyTransactionProxy : ModelPropertyChange<ITieLine, IDynamic>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DynamicEnergyTransactionProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDynamic Value
            {
                get
                {
                    return this.ModelElement.DynamicEnergyTransaction;
                }
                set
                {
                    this.ModelElement.DynamicEnergyTransaction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DynamicEnergyTransactionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DynamicEnergyTransactionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerConsumer property
        /// </summary>
        private sealed class CustomerConsumerProxy : ModelPropertyChange<ITieLine, ICustomerConsumer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerConsumerProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerConsumer Value
            {
                get
                {
                    return this.ModelElement.CustomerConsumer;
                }
                set
                {
                    this.ModelElement.CustomerConsumer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerConsumerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CustomerConsumerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SideA_SubControlArea property
        /// </summary>
        private sealed class SideA_SubControlAreaProxy : ModelPropertyChange<ITieLine, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SideA_SubControlAreaProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.SideA_SubControlArea;
                }
                set
                {
                    this.ModelElement.SideA_SubControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideA_SubControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideA_SubControlAreaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SideB_HostControlArea property
        /// </summary>
        private sealed class SideB_HostControlAreaProxy : ModelPropertyChange<ITieLine, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SideB_HostControlAreaProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.SideB_HostControlArea;
                }
                set
                {
                    this.ModelElement.SideB_HostControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideB_HostControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideB_HostControlAreaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SideB_SubControlArea property
        /// </summary>
        private sealed class SideB_SubControlAreaProxy : ModelPropertyChange<ITieLine, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SideB_SubControlAreaProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.SideB_SubControlArea;
                }
                set
                {
                    this.ModelElement.SideB_SubControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideB_SubControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideB_SubControlAreaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SideA_HostControlArea property
        /// </summary>
        private sealed class SideA_HostControlAreaProxy : ModelPropertyChange<ITieLine, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SideA_HostControlAreaProxy(ITieLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.SideA_HostControlArea;
                }
                set
                {
                    this.ModelElement.SideA_HostControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideA_HostControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SideA_HostControlAreaChanged -= handler;
            }
        }
    }
}

