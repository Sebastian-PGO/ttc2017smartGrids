//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the SubControlArea class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "SubControlArea")]
    [DebuggerDisplayAttribute("SubControlArea {UUID}")]
    public class SubControlArea : TTC2017.SmartGrids.CIM.IEC61970.ControlArea.ControlArea, ISubControlArea, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SideA_TieLines property
        /// </summary>
        private SubControlAreaSideA_TieLinesCollection _sideA_TieLines;
        
        /// <summary>
        /// The backing field for the GeneratingUnits property
        /// </summary>
        private SubControlAreaGeneratingUnitsCollection _generatingUnits;
        
        /// <summary>
        /// The backing field for the Export_EnergyTransactions property
        /// </summary>
        private SubControlAreaExport_EnergyTransactionsCollection _export_EnergyTransactions;
        
        /// <summary>
        /// The backing field for the Import_EnergyTransactions property
        /// </summary>
        private SubControlAreaImport_EnergyTransactionsCollection _import_EnergyTransactions;
        
        /// <summary>
        /// The backing field for the HostControlArea property
        /// </summary>
        private IHostControlArea _hostControlArea;
        
        /// <summary>
        /// The backing field for the PartOf property
        /// </summary>
        private SubControlAreaPartOfCollection _partOf;
        
        /// <summary>
        /// The backing field for the Flowgate property
        /// </summary>
        private SubControlAreaFlowgateCollection _flowgate;
        
        /// <summary>
        /// The backing field for the SideB_TieLines property
        /// </summary>
        private SubControlAreaSideB_TieLinesCollection _sideB_TieLines;
        
        private static IClass _classInstance;
        
        public SubControlArea()
        {
            this._sideA_TieLines = new SubControlAreaSideA_TieLinesCollection(this);
            this._sideA_TieLines.CollectionChanging += this.SideA_TieLinesCollectionChanging;
            this._sideA_TieLines.CollectionChanged += this.SideA_TieLinesCollectionChanged;
            this._generatingUnits = new SubControlAreaGeneratingUnitsCollection(this);
            this._generatingUnits.CollectionChanging += this.GeneratingUnitsCollectionChanging;
            this._generatingUnits.CollectionChanged += this.GeneratingUnitsCollectionChanged;
            this._export_EnergyTransactions = new SubControlAreaExport_EnergyTransactionsCollection(this);
            this._export_EnergyTransactions.CollectionChanging += this.Export_EnergyTransactionsCollectionChanging;
            this._export_EnergyTransactions.CollectionChanged += this.Export_EnergyTransactionsCollectionChanged;
            this._import_EnergyTransactions = new SubControlAreaImport_EnergyTransactionsCollection(this);
            this._import_EnergyTransactions.CollectionChanging += this.Import_EnergyTransactionsCollectionChanging;
            this._import_EnergyTransactions.CollectionChanged += this.Import_EnergyTransactionsCollectionChanged;
            this._partOf = new SubControlAreaPartOfCollection(this);
            this._partOf.CollectionChanging += this.PartOfCollectionChanging;
            this._partOf.CollectionChanged += this.PartOfCollectionChanged;
            this._flowgate = new SubControlAreaFlowgateCollection(this);
            this._flowgate.CollectionChanging += this.FlowgateCollectionChanging;
            this._flowgate.CollectionChanged += this.FlowgateCollectionChanged;
            this._sideB_TieLines = new SubControlAreaSideB_TieLinesCollection(this);
            this._sideB_TieLines.CollectionChanging += this.SideB_TieLinesCollectionChanging;
            this._sideB_TieLines.CollectionChanged += this.SideB_TieLinesCollectionChanged;
        }
        
        /// <summary>
        /// The SideA_TieLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideA_SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieLine> SideA_TieLines
        {
            get
            {
                return this._sideA_TieLines;
            }
        }
        
        /// <summary>
        /// The GeneratingUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGeneratingUnit> GeneratingUnits
        {
            get
            {
                return this._generatingUnits;
            }
        }
        
        /// <summary>
        /// The Export_EnergyTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Export_SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyTransaction> Export_EnergyTransactions
        {
            get
            {
                return this._export_EnergyTransactions;
            }
        }
        
        /// <summary>
        /// The Import_EnergyTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Import_SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyTransaction> Import_EnergyTransactions
        {
            get
            {
                return this._import_EnergyTransactions;
            }
        }
        
        /// <summary>
        /// The HostControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SubControlAreas")]
        public virtual IHostControlArea HostControlArea
        {
            get
            {
                return this._hostControlArea;
            }
            set
            {
                if ((this._hostControlArea != value))
                {
                    IHostControlArea old = this._hostControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHostControlAreaChanging(e);
                    this.OnPropertyChanging("HostControlArea", e);
                    this._hostControlArea = value;
                    if ((old != null))
                    {
                        old.SubControlAreas.Remove(this);
                        old.Deleted -= this.OnResetHostControlArea;
                    }
                    if ((value != null))
                    {
                        value.SubControlAreas.Add(this);
                        value.Deleted += this.OnResetHostControlArea;
                    }
                    this.OnHostControlAreaChanged(e);
                    this.OnPropertyChanged("HostControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// The PartOf property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MemberOf")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServicePoint> PartOf
        {
            get
            {
                return this._partOf;
            }
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFlowgate> Flowgate
        {
            get
            {
                return this._flowgate;
            }
        }
        
        /// <summary>
        /// The SideB_TieLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideB_SubControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieLine> SideB_TieLines
        {
            get
            {
                return this._sideB_TieLines;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubControlAreaReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "SubControlArea")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HostControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the HostControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HostControlAreaChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SideA_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideA_TieLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SideA_TieLines", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SideA_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideA_TieLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SideA_TieLines", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratingUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GeneratingUnits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratingUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneratingUnits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Export_EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Export_EnergyTransactionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Export_EnergyTransactions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Export_EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Export_EnergyTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Export_EnergyTransactions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Import_EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Import_EnergyTransactionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Import_EnergyTransactions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Import_EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Import_EnergyTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Import_EnergyTransactions", e);
        }
        
        /// <summary>
        /// Raises the HostControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHostControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HostControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HostControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHostControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HostControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HostControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHostControlArea(object sender, System.EventArgs eventArgs)
        {
            this.HostControlArea = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PartOf property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PartOfCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PartOf", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PartOf property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PartOfCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PartOf", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Flowgate", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Flowgate", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SideB_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideB_TieLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SideB_TieLines", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SideB_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideB_TieLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SideB_TieLines", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SIDEA_TIELINES"))
            {
                return this._sideA_TieLines;
            }
            if ((feature == "GENERATINGUNITS"))
            {
                return this._generatingUnits;
            }
            if ((feature == "EXPORT_ENERGYTRANSACTIONS"))
            {
                return this._export_EnergyTransactions;
            }
            if ((feature == "IMPORT_ENERGYTRANSACTIONS"))
            {
                return this._import_EnergyTransactions;
            }
            if ((feature == "PARTOF"))
            {
                return this._partOf;
            }
            if ((feature == "FLOWGATE"))
            {
                return this._flowgate;
            }
            if ((feature == "SIDEB_TIELINES"))
            {
                return this._sideB_TieLines;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HOSTCONTROLAREA"))
            {
                this.HostControlArea = ((IHostControlArea)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "HostControlArea"))
            {
                return new HostControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "HostControlArea"))
            {
                return new HostControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "SubControlArea")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SubControlArea class
        /// </summary>
        public class SubControlAreaReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SubControlArea _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubControlAreaReferencedElementsCollection(SubControlArea parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SideA_TieLines.Count);
                    count = (count + this._parent.GeneratingUnits.Count);
                    count = (count + this._parent.Export_EnergyTransactions.Count);
                    count = (count + this._parent.Import_EnergyTransactions.Count);
                    if ((this._parent.HostControlArea != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PartOf.Count);
                    count = (count + this._parent.Flowgate.Count);
                    count = (count + this._parent.SideB_TieLines.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SideA_TieLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GeneratingUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Export_EnergyTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Import_EnergyTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HostControlAreaChanged += this.PropagateValueChanges;
                this._parent.PartOf.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Flowgate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SideB_TieLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SideA_TieLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GeneratingUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Export_EnergyTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Import_EnergyTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HostControlAreaChanged -= this.PropagateValueChanges;
                this._parent.PartOf.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Flowgate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SideB_TieLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITieLine sideA_TieLinesCasted = item.As<ITieLine>();
                if ((sideA_TieLinesCasted != null))
                {
                    this._parent.SideA_TieLines.Add(sideA_TieLinesCasted);
                }
                IGeneratingUnit generatingUnitsCasted = item.As<IGeneratingUnit>();
                if ((generatingUnitsCasted != null))
                {
                    this._parent.GeneratingUnits.Add(generatingUnitsCasted);
                }
                IEnergyTransaction export_EnergyTransactionsCasted = item.As<IEnergyTransaction>();
                if ((export_EnergyTransactionsCasted != null))
                {
                    this._parent.Export_EnergyTransactions.Add(export_EnergyTransactionsCasted);
                }
                IEnergyTransaction import_EnergyTransactionsCasted = item.As<IEnergyTransaction>();
                if ((import_EnergyTransactionsCasted != null))
                {
                    this._parent.Import_EnergyTransactions.Add(import_EnergyTransactionsCasted);
                }
                if ((this._parent.HostControlArea == null))
                {
                    IHostControlArea hostControlAreaCasted = item.As<IHostControlArea>();
                    if ((hostControlAreaCasted != null))
                    {
                        this._parent.HostControlArea = hostControlAreaCasted;
                        return;
                    }
                }
                IServicePoint partOfCasted = item.As<IServicePoint>();
                if ((partOfCasted != null))
                {
                    this._parent.PartOf.Add(partOfCasted);
                }
                IFlowgate flowgateCasted = item.As<IFlowgate>();
                if ((flowgateCasted != null))
                {
                    this._parent.Flowgate.Add(flowgateCasted);
                }
                ITieLine sideB_TieLinesCasted = item.As<ITieLine>();
                if ((sideB_TieLinesCasted != null))
                {
                    this._parent.SideB_TieLines.Add(sideB_TieLinesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SideA_TieLines.Clear();
                this._parent.GeneratingUnits.Clear();
                this._parent.Export_EnergyTransactions.Clear();
                this._parent.Import_EnergyTransactions.Clear();
                this._parent.HostControlArea = null;
                this._parent.PartOf.Clear();
                this._parent.Flowgate.Clear();
                this._parent.SideB_TieLines.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SideA_TieLines.Contains(item))
                {
                    return true;
                }
                if (this._parent.GeneratingUnits.Contains(item))
                {
                    return true;
                }
                if (this._parent.Export_EnergyTransactions.Contains(item))
                {
                    return true;
                }
                if (this._parent.Import_EnergyTransactions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HostControlArea))
                {
                    return true;
                }
                if (this._parent.PartOf.Contains(item))
                {
                    return true;
                }
                if (this._parent.Flowgate.Contains(item))
                {
                    return true;
                }
                if (this._parent.SideB_TieLines.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> sideA_TieLinesEnumerator = this._parent.SideA_TieLines.GetEnumerator();
                try
                {
                    for (
                    ; sideA_TieLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sideA_TieLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sideA_TieLinesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> generatingUnitsEnumerator = this._parent.GeneratingUnits.GetEnumerator();
                try
                {
                    for (
                    ; generatingUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generatingUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generatingUnitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> export_EnergyTransactionsEnumerator = this._parent.Export_EnergyTransactions.GetEnumerator();
                try
                {
                    for (
                    ; export_EnergyTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = export_EnergyTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    export_EnergyTransactionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> import_EnergyTransactionsEnumerator = this._parent.Import_EnergyTransactions.GetEnumerator();
                try
                {
                    for (
                    ; import_EnergyTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = import_EnergyTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    import_EnergyTransactionsEnumerator.Dispose();
                }
                if ((this._parent.HostControlArea != null))
                {
                    array[arrayIndex] = this._parent.HostControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> partOfEnumerator = this._parent.PartOf.GetEnumerator();
                try
                {
                    for (
                    ; partOfEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = partOfEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    partOfEnumerator.Dispose();
                }
                IEnumerator<IModelElement> flowgateEnumerator = this._parent.Flowgate.GetEnumerator();
                try
                {
                    for (
                    ; flowgateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = flowgateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    flowgateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sideB_TieLinesEnumerator = this._parent.SideB_TieLines.GetEnumerator();
                try
                {
                    for (
                    ; sideB_TieLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sideB_TieLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sideB_TieLinesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITieLine tieLineItem = item.As<ITieLine>();
                if (((tieLineItem != null) 
                            && this._parent.SideA_TieLines.Remove(tieLineItem)))
                {
                    return true;
                }
                IGeneratingUnit generatingUnitItem = item.As<IGeneratingUnit>();
                if (((generatingUnitItem != null) 
                            && this._parent.GeneratingUnits.Remove(generatingUnitItem)))
                {
                    return true;
                }
                IEnergyTransaction energyTransactionItem = item.As<IEnergyTransaction>();
                if (((energyTransactionItem != null) 
                            && this._parent.Export_EnergyTransactions.Remove(energyTransactionItem)))
                {
                    return true;
                }
                if (((energyTransactionItem != null) 
                            && this._parent.Import_EnergyTransactions.Remove(energyTransactionItem)))
                {
                    return true;
                }
                if ((this._parent.HostControlArea == item))
                {
                    this._parent.HostControlArea = null;
                    return true;
                }
                IServicePoint servicePointItem = item.As<IServicePoint>();
                if (((servicePointItem != null) 
                            && this._parent.PartOf.Remove(servicePointItem)))
                {
                    return true;
                }
                IFlowgate flowgateItem = item.As<IFlowgate>();
                if (((flowgateItem != null) 
                            && this._parent.Flowgate.Remove(flowgateItem)))
                {
                    return true;
                }
                if (((tieLineItem != null) 
                            && this._parent.SideB_TieLines.Remove(tieLineItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SideA_TieLines).Concat(this._parent.GeneratingUnits).Concat(this._parent.Export_EnergyTransactions).Concat(this._parent.Import_EnergyTransactions).Concat(this._parent.HostControlArea).Concat(this._parent.PartOf).Concat(this._parent.Flowgate).Concat(this._parent.SideB_TieLines).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HostControlArea property
        /// </summary>
        private sealed class HostControlAreaProxy : ModelPropertyChange<ISubControlArea, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HostControlAreaProxy(ISubControlArea modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.HostControlArea;
                }
                set
                {
                    this.ModelElement.HostControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HostControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HostControlAreaChanged -= handler;
            }
        }
    }
}

