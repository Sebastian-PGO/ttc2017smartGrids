//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl
{
    
    
    /// <summary>
    /// The default implementation of the LoadLimitFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfLoadControl")]
    [XmlNamespacePrefixAttribute("cimInfLoadControl")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
        "adLimitFunction")]
    [DebuggerDisplayAttribute("LoadLimitFunction {UUID}")]
    public class LoadLimitFunction : LoadMgmtFunction, ILoadLimitFunction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsAutoReconOp property
        /// </summary>
        private bool _isAutoReconOp;
        
        /// <summary>
        /// The backing field for the MaximumLoad property
        /// </summary>
        private float _maximumLoad;
        
        /// <summary>
        /// The backing field for the ReconnectTimeDelay property
        /// </summary>
        private float _reconnectTimeDelay;
        
        /// <summary>
        /// The backing field for the DisconnectTimeDelay property
        /// </summary>
        private float _disconnectTimeDelay;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The isAutoReconOp property
        /// </summary>
        [XmlElementNameAttribute("isAutoReconOp")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsAutoReconOp
        {
            get
            {
                return this._isAutoReconOp;
            }
            set
            {
                if ((this._isAutoReconOp != value))
                {
                    bool old = this._isAutoReconOp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAutoReconOpChanging(e);
                    this.OnPropertyChanging("IsAutoReconOp", e);
                    this._isAutoReconOp = value;
                    this.OnIsAutoReconOpChanged(e);
                    this.OnPropertyChanged("IsAutoReconOp", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumLoad property
        /// </summary>
        [XmlElementNameAttribute("maximumLoad")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumLoad
        {
            get
            {
                return this._maximumLoad;
            }
            set
            {
                if ((this._maximumLoad != value))
                {
                    float old = this._maximumLoad;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumLoadChanging(e);
                    this.OnPropertyChanging("MaximumLoad", e);
                    this._maximumLoad = value;
                    this.OnMaximumLoadChanged(e);
                    this.OnPropertyChanged("MaximumLoad", e);
                }
            }
        }
        
        /// <summary>
        /// The reconnectTimeDelay property
        /// </summary>
        [XmlElementNameAttribute("reconnectTimeDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float ReconnectTimeDelay
        {
            get
            {
                return this._reconnectTimeDelay;
            }
            set
            {
                if ((this._reconnectTimeDelay != value))
                {
                    float old = this._reconnectTimeDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReconnectTimeDelayChanging(e);
                    this.OnPropertyChanging("ReconnectTimeDelay", e);
                    this._reconnectTimeDelay = value;
                    this.OnReconnectTimeDelayChanged(e);
                    this.OnPropertyChanged("ReconnectTimeDelay", e);
                }
            }
        }
        
        /// <summary>
        /// The disconnectTimeDelay property
        /// </summary>
        [XmlElementNameAttribute("disconnectTimeDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float DisconnectTimeDelay
        {
            get
            {
                return this._disconnectTimeDelay;
            }
            set
            {
                if ((this._disconnectTimeDelay != value))
                {
                    float old = this._disconnectTimeDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectTimeDelayChanging(e);
                    this.OnPropertyChanging("DisconnectTimeDelay", e);
                    this._disconnectTimeDelay = value;
                    this.OnDisconnectTimeDelayChanged(e);
                    this.OnPropertyChanged("DisconnectTimeDelay", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
                            "adLimitFunction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsAutoReconOp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAutoReconOpChanging;
        
        /// <summary>
        /// Gets fired when the IsAutoReconOp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAutoReconOpChanged;
        
        /// <summary>
        /// Gets fired before the MaximumLoad property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumLoadChanging;
        
        /// <summary>
        /// Gets fired when the MaximumLoad property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumLoadChanged;
        
        /// <summary>
        /// Gets fired before the ReconnectTimeDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReconnectTimeDelayChanging;
        
        /// <summary>
        /// Gets fired when the ReconnectTimeDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReconnectTimeDelayChanged;
        
        /// <summary>
        /// Gets fired before the DisconnectTimeDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectTimeDelayChanging;
        
        /// <summary>
        /// Gets fired when the DisconnectTimeDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectTimeDelayChanged;
        
        /// <summary>
        /// Raises the IsAutoReconOpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAutoReconOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAutoReconOpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAutoReconOpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAutoReconOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAutoReconOpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumLoadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumLoadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumLoadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumLoadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumLoadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumLoadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReconnectTimeDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReconnectTimeDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReconnectTimeDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReconnectTimeDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReconnectTimeDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReconnectTimeDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectTimeDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectTimeDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectTimeDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectTimeDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectTimeDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectTimeDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISAUTORECONOP"))
            {
                return this.IsAutoReconOp;
            }
            if ((attribute == "MAXIMUMLOAD"))
            {
                return this.MaximumLoad;
            }
            if ((attribute == "RECONNECTTIMEDELAY"))
            {
                return this.ReconnectTimeDelay;
            }
            if ((attribute == "DISCONNECTTIMEDELAY"))
            {
                return this.DisconnectTimeDelay;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISAUTORECONOP"))
            {
                this.IsAutoReconOp = ((bool)(value));
                return;
            }
            if ((feature == "MAXIMUMLOAD"))
            {
                this.MaximumLoad = ((float)(value));
                return;
            }
            if ((feature == "RECONNECTTIMEDELAY"))
            {
                this.ReconnectTimeDelay = ((float)(value));
                return;
            }
            if ((feature == "DISCONNECTTIMEDELAY"))
            {
                this.DisconnectTimeDelay = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
                        "adLimitFunction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isAutoReconOp property
        /// </summary>
        private sealed class IsAutoReconOpProxy : ModelPropertyChange<ILoadLimitFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAutoReconOpProxy(ILoadLimitFunction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAutoReconOp;
                }
                set
                {
                    this.ModelElement.IsAutoReconOp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAutoReconOpChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAutoReconOpChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumLoad property
        /// </summary>
        private sealed class MaximumLoadProxy : ModelPropertyChange<ILoadLimitFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumLoadProxy(ILoadLimitFunction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumLoad;
                }
                set
                {
                    this.ModelElement.MaximumLoad = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumLoadChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumLoadChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reconnectTimeDelay property
        /// </summary>
        private sealed class ReconnectTimeDelayProxy : ModelPropertyChange<ILoadLimitFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReconnectTimeDelayProxy(ILoadLimitFunction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReconnectTimeDelay;
                }
                set
                {
                    this.ModelElement.ReconnectTimeDelay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReconnectTimeDelayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReconnectTimeDelayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the disconnectTimeDelay property
        /// </summary>
        private sealed class DisconnectTimeDelayProxy : ModelPropertyChange<ILoadLimitFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectTimeDelayProxy(ILoadLimitFunction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DisconnectTimeDelay;
                }
                set
                {
                    this.ModelElement.DisconnectTimeDelay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisconnectTimeDelayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisconnectTimeDelayChanged -= handler;
            }
        }
    }
}

