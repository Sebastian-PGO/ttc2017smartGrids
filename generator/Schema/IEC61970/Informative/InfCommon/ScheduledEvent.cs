//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The default implementation of the ScheduledEvent class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon")]
    [XmlNamespacePrefixAttribute("cimInfCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
        "edEvent")]
    [DebuggerDisplayAttribute("ScheduledEvent {UUID}")]
    public partial class ScheduledEvent : IdentifiedObject, IScheduledEvent, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Duration property
        /// </summary>
        private float _duration;
        
        private static Lazy<ITypedElement> _durationAttribute = new Lazy<ITypedElement>(RetrieveDurationAttribute);
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        private static Lazy<ITypedElement> _documentReference = new Lazy<ITypedElement>(RetrieveDocumentReference);
        
        /// <summary>
        /// The backing field for the Document property
        /// </summary>
        private IDocument _document;
        
        private static Lazy<ITypedElement> _timePointReference = new Lazy<ITypedElement>(RetrieveTimePointReference);
        
        /// <summary>
        /// The backing field for the TimePoint property
        /// </summary>
        private ITimePoint _timePoint;
        
        private static Lazy<ITypedElement> _scheduleParameterInfoReference = new Lazy<ITypedElement>(RetrieveScheduleParameterInfoReference);
        
        /// <summary>
        /// The backing field for the ScheduleParameterInfo property
        /// </summary>
        private IScheduleParameterInfo _scheduleParameterInfo;
        
        private static Lazy<ITypedElement> _activityRecordReference = new Lazy<ITypedElement>(RetrieveActivityRecordReference);
        
        /// <summary>
        /// The backing field for the ActivityRecord property
        /// </summary>
        private IActivityRecord _activityRecord;
        
        private static Lazy<ITypedElement> _assetsReference = new Lazy<ITypedElement>(RetrieveAssetsReference);
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private ScheduledEventAssetsCollection _assets;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static IClass _classInstance;
        
        public ScheduledEvent()
        {
            this._assets = new ScheduledEventAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
        }
        
        /// <summary>
        /// The duration property
        /// </summary>
        [XmlElementNameAttribute("duration")]
        [XmlAttributeAttribute(true)]
        public virtual float Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    float old = this._duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationChanging(e);
                    this.OnPropertyChanging("Duration", e, _durationAttribute);
                    this._duration = value;
                    this.OnDurationChanged(e);
                    this.OnPropertyChanged("Duration", e, _durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Document property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduledEvents")]
        public virtual IDocument Document
        {
            get
            {
                return this._document;
            }
            set
            {
                if ((this._document != value))
                {
                    IDocument old = this._document;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDocumentChanging(e);
                    this.OnPropertyChanging("Document", e, _documentReference);
                    this._document = value;
                    if ((old != null))
                    {
                        old.ScheduledEvents.Remove(this);
                        old.Deleted -= this.OnResetDocument;
                    }
                    if ((value != null))
                    {
                        value.ScheduledEvents.Add(this);
                        value.Deleted += this.OnResetDocument;
                    }
                    this.OnDocumentChanged(e);
                    this.OnPropertyChanged("Document", e, _documentReference);
                }
            }
        }
        
        /// <summary>
        /// The TimePoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduledEvents")]
        public virtual ITimePoint TimePoint
        {
            get
            {
                return this._timePoint;
            }
            set
            {
                if ((this._timePoint != value))
                {
                    ITimePoint old = this._timePoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimePointChanging(e);
                    this.OnPropertyChanging("TimePoint", e, _timePointReference);
                    this._timePoint = value;
                    if ((old != null))
                    {
                        old.ScheduledEvents.Remove(this);
                        old.Deleted -= this.OnResetTimePoint;
                    }
                    if ((value != null))
                    {
                        value.ScheduledEvents.Add(this);
                        value.Deleted += this.OnResetTimePoint;
                    }
                    this.OnTimePointChanged(e);
                    this.OnPropertyChanged("TimePoint", e, _timePointReference);
                }
            }
        }
        
        /// <summary>
        /// The ScheduleParameterInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduledEvents")]
        public virtual IScheduleParameterInfo ScheduleParameterInfo
        {
            get
            {
                return this._scheduleParameterInfo;
            }
            set
            {
                if ((this._scheduleParameterInfo != value))
                {
                    IScheduleParameterInfo old = this._scheduleParameterInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScheduleParameterInfoChanging(e);
                    this.OnPropertyChanging("ScheduleParameterInfo", e, _scheduleParameterInfoReference);
                    this._scheduleParameterInfo = value;
                    if ((old != null))
                    {
                        old.ScheduledEvents.Remove(this);
                        old.Deleted -= this.OnResetScheduleParameterInfo;
                    }
                    if ((value != null))
                    {
                        value.ScheduledEvents.Add(this);
                        value.Deleted += this.OnResetScheduleParameterInfo;
                    }
                    this.OnScheduleParameterInfoChanged(e);
                    this.OnPropertyChanged("ScheduleParameterInfo", e, _scheduleParameterInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The ActivityRecord property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduledEvent")]
        public virtual IActivityRecord ActivityRecord
        {
            get
            {
                return this._activityRecord;
            }
            set
            {
                if ((this._activityRecord != value))
                {
                    IActivityRecord old = this._activityRecord;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActivityRecordChanging(e);
                    this.OnPropertyChanging("ActivityRecord", e, _activityRecordReference);
                    this._activityRecord = value;
                    if ((old != null))
                    {
                        old.ScheduledEvent = null;
                        old.Deleted -= this.OnResetActivityRecord;
                    }
                    if ((value != null))
                    {
                        value.ScheduledEvent = this;
                        value.Deleted += this.OnResetActivityRecord;
                    }
                    this.OnActivityRecordChanged(e);
                    this.OnPropertyChanged("ActivityRecord", e, _activityRecordReference);
                }
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduledEvents")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ScheduledEventReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
                            "edEvent")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanging;
        
        /// <summary>
        /// Gets fired when the Duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the Document property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanging;
        
        /// <summary>
        /// Gets fired when the Document property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanged;
        
        /// <summary>
        /// Gets fired before the TimePoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimePointChanging;
        
        /// <summary>
        /// Gets fired when the TimePoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimePointChanged;
        
        /// <summary>
        /// Gets fired before the ScheduleParameterInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduleParameterInfoChanging;
        
        /// <summary>
        /// Gets fired when the ScheduleParameterInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduleParameterInfoChanged;
        
        /// <summary>
        /// Gets fired before the ActivityRecord property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityRecordChanging;
        
        /// <summary>
        /// Gets fired when the ActivityRecord property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActivityRecordChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveDurationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("duration")));
        }
        
        /// <summary>
        /// Raises the DurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDocumentReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("Document")));
        }
        
        /// <summary>
        /// Raises the DocumentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DocumentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Document property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDocument(object sender, System.EventArgs eventArgs)
        {
            this.Document = null;
        }
        
        private static ITypedElement RetrieveTimePointReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("TimePoint")));
        }
        
        /// <summary>
        /// Raises the TimePointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimePointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimePointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimePointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimePointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimePointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimePoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimePoint(object sender, System.EventArgs eventArgs)
        {
            this.TimePoint = null;
        }
        
        private static ITypedElement RetrieveScheduleParameterInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("ScheduleParameterInfo")));
        }
        
        /// <summary>
        /// Raises the ScheduleParameterInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduleParameterInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduleParameterInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScheduleParameterInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduleParameterInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduleParameterInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ScheduleParameterInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScheduleParameterInfo(object sender, System.EventArgs eventArgs)
        {
            this.ScheduleParameterInfo = null;
        }
        
        private static ITypedElement RetrieveActivityRecordReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("ActivityRecord")));
        }
        
        /// <summary>
        /// Raises the ActivityRecordChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityRecordChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityRecordChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActivityRecordChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActivityRecordChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActivityRecordChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ActivityRecord property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActivityRecord(object sender, System.EventArgs eventArgs)
        {
            this.ActivityRecord = null;
        }
        
        private static ITypedElement RetrieveAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("Assets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e, _assetsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ScheduledEvent.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DURATION"))
            {
                return this.Duration;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DOCUMENT"))
            {
                this.Document = ((IDocument)(value));
                return;
            }
            if ((feature == "TIMEPOINT"))
            {
                this.TimePoint = ((ITimePoint)(value));
                return;
            }
            if ((feature == "SCHEDULEPARAMETERINFO"))
            {
                this.ScheduleParameterInfo = ((IScheduleParameterInfo)(value));
                return;
            }
            if ((feature == "ACTIVITYRECORD"))
            {
                this.ActivityRecord = ((IActivityRecord)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "DURATION"))
            {
                this.Duration = ((float)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((attribute == "TimePoint"))
            {
                return new TimePointProxy(this);
            }
            if ((attribute == "ScheduleParameterInfo"))
            {
                return new ScheduleParameterInfoProxy(this);
            }
            if ((attribute == "ActivityRecord"))
            {
                return new ActivityRecordProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((reference == "TimePoint"))
            {
                return new TimePointProxy(this);
            }
            if ((reference == "ScheduleParameterInfo"))
            {
                return new ScheduleParameterInfoProxy(this);
            }
            if ((reference == "ActivityRecord"))
            {
                return new ActivityRecordProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
                        "edEvent")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ScheduledEvent class
        /// </summary>
        public class ScheduledEventReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ScheduledEvent _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ScheduledEventReferencedElementsCollection(ScheduledEvent parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Document != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimePoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ScheduleParameterInfo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ActivityRecord != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Assets.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DocumentChanged += this.PropagateValueChanges;
                this._parent.TimePointChanged += this.PropagateValueChanges;
                this._parent.ScheduleParameterInfoChanged += this.PropagateValueChanges;
                this._parent.ActivityRecordChanged += this.PropagateValueChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DocumentChanged -= this.PropagateValueChanges;
                this._parent.TimePointChanged -= this.PropagateValueChanges;
                this._parent.ScheduleParameterInfoChanged -= this.PropagateValueChanges;
                this._parent.ActivityRecordChanged -= this.PropagateValueChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Document == null))
                {
                    IDocument documentCasted = item.As<IDocument>();
                    if ((documentCasted != null))
                    {
                        this._parent.Document = documentCasted;
                        return;
                    }
                }
                if ((this._parent.TimePoint == null))
                {
                    ITimePoint timePointCasted = item.As<ITimePoint>();
                    if ((timePointCasted != null))
                    {
                        this._parent.TimePoint = timePointCasted;
                        return;
                    }
                }
                if ((this._parent.ScheduleParameterInfo == null))
                {
                    IScheduleParameterInfo scheduleParameterInfoCasted = item.As<IScheduleParameterInfo>();
                    if ((scheduleParameterInfoCasted != null))
                    {
                        this._parent.ScheduleParameterInfo = scheduleParameterInfoCasted;
                        return;
                    }
                }
                if ((this._parent.ActivityRecord == null))
                {
                    IActivityRecord activityRecordCasted = item.As<IActivityRecord>();
                    if ((activityRecordCasted != null))
                    {
                        this._parent.ActivityRecord = activityRecordCasted;
                        return;
                    }
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Document = null;
                this._parent.TimePoint = null;
                this._parent.ScheduleParameterInfo = null;
                this._parent.ActivityRecord = null;
                this._parent.Assets.Clear();
                this._parent.Status = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Document))
                {
                    return true;
                }
                if ((item == this._parent.TimePoint))
                {
                    return true;
                }
                if ((item == this._parent.ScheduleParameterInfo))
                {
                    return true;
                }
                if ((item == this._parent.ActivityRecord))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Document != null))
                {
                    array[arrayIndex] = this._parent.Document;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimePoint != null))
                {
                    array[arrayIndex] = this._parent.TimePoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ScheduleParameterInfo != null))
                {
                    array[arrayIndex] = this._parent.ScheduleParameterInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ActivityRecord != null))
                {
                    array[arrayIndex] = this._parent.ActivityRecord;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Document == item))
                {
                    this._parent.Document = null;
                    return true;
                }
                if ((this._parent.TimePoint == item))
                {
                    this._parent.TimePoint = null;
                    return true;
                }
                if ((this._parent.ScheduleParameterInfo == item))
                {
                    this._parent.ScheduleParameterInfo = null;
                    return true;
                }
                if ((this._parent.ActivityRecord == item))
                {
                    this._parent.ActivityRecord = null;
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Document).Concat(this._parent.TimePoint).Concat(this._parent.ScheduleParameterInfo).Concat(this._parent.ActivityRecord).Concat(this._parent.Assets).Concat(this._parent.Status).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the duration property
        /// </summary>
        private sealed class DurationProxy : ModelPropertyChange<IScheduledEvent, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Duration;
                }
                set
                {
                    this.ModelElement.Duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IScheduledEvent, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Document property
        /// </summary>
        private sealed class DocumentProxy : ModelPropertyChange<IScheduledEvent, IDocument>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DocumentProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "Document")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDocument Value
            {
                get
                {
                    return this.ModelElement.Document;
                }
                set
                {
                    this.ModelElement.Document = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimePoint property
        /// </summary>
        private sealed class TimePointProxy : ModelPropertyChange<IScheduledEvent, ITimePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimePointProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "TimePoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimePoint Value
            {
                get
                {
                    return this.ModelElement.TimePoint;
                }
                set
                {
                    this.ModelElement.TimePoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ScheduleParameterInfo property
        /// </summary>
        private sealed class ScheduleParameterInfoProxy : ModelPropertyChange<IScheduledEvent, IScheduleParameterInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScheduleParameterInfoProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "ScheduleParameterInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScheduleParameterInfo Value
            {
                get
                {
                    return this.ModelElement.ScheduleParameterInfo;
                }
                set
                {
                    this.ModelElement.ScheduleParameterInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ActivityRecord property
        /// </summary>
        private sealed class ActivityRecordProxy : ModelPropertyChange<IScheduledEvent, IActivityRecord>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActivityRecordProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "ActivityRecord")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IActivityRecord Value
            {
                get
                {
                    return this.ModelElement.ActivityRecord;
                }
                set
                {
                    this.ModelElement.ActivityRecord = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IScheduledEvent, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IScheduledEvent modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

