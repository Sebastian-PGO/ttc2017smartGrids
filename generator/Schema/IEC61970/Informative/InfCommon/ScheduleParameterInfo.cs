//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The default implementation of the ScheduleParameterInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon")]
    [XmlNamespacePrefixAttribute("cimInfCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
        "eParameterInfo")]
    [DebuggerDisplayAttribute("ScheduleParameterInfo {UUID}")]
    public class ScheduleParameterInfo : IdentifiedObject, IScheduleParameterInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ScheduledEvents property
        /// </summary>
        private ScheduleParameterInfoScheduledEventsCollection _scheduledEvents;
        
        /// <summary>
        /// The backing field for the RequestedWindow property
        /// </summary>
        private IDateTimeInterval _requestedWindow;
        
        /// <summary>
        /// The backing field for the ForInspectionDataSet property
        /// </summary>
        private IInspectionDataSet _forInspectionDataSet;
        
        /// <summary>
        /// The backing field for the EstimatedWindow property
        /// </summary>
        private IDateTimeInterval _estimatedWindow;
        
        /// <summary>
        /// The backing field for the Documents property
        /// </summary>
        private ScheduleParameterInfoDocumentsCollection _documents;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static IClass _classInstance;
        
        public ScheduleParameterInfo()
        {
            this._scheduledEvents = new ScheduleParameterInfoScheduledEventsCollection(this);
            this._scheduledEvents.CollectionChanging += this.ScheduledEventsCollectionChanging;
            this._scheduledEvents.CollectionChanged += this.ScheduledEventsCollectionChanged;
            this._documents = new ScheduleParameterInfoDocumentsCollection(this);
            this._documents.CollectionChanging += this.DocumentsCollectionChanging;
            this._documents.CollectionChanged += this.DocumentsCollectionChanged;
        }
        
        /// <summary>
        /// The ScheduledEvents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduleParameterInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduledEvent> ScheduledEvents
        {
            get
            {
                return this._scheduledEvents;
            }
        }
        
        /// <summary>
        /// The requestedWindow property
        /// </summary>
        [XmlElementNameAttribute("requestedWindow")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval RequestedWindow
        {
            get
            {
                return this._requestedWindow;
            }
            set
            {
                if ((this._requestedWindow != value))
                {
                    IDateTimeInterval old = this._requestedWindow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequestedWindowChanging(e);
                    this.OnPropertyChanging("RequestedWindow", e);
                    this._requestedWindow = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRequestedWindow;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRequestedWindow;
                    }
                    this.OnRequestedWindowChanged(e);
                    this.OnPropertyChanged("RequestedWindow", e);
                }
            }
        }
        
        /// <summary>
        /// The ForInspectionDataSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AccordingToSchedules")]
        public virtual IInspectionDataSet ForInspectionDataSet
        {
            get
            {
                return this._forInspectionDataSet;
            }
            set
            {
                if ((this._forInspectionDataSet != value))
                {
                    IInspectionDataSet old = this._forInspectionDataSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnForInspectionDataSetChanging(e);
                    this.OnPropertyChanging("ForInspectionDataSet", e);
                    this._forInspectionDataSet = value;
                    if ((old != null))
                    {
                        old.AccordingToSchedules.Remove(this);
                        old.Deleted -= this.OnResetForInspectionDataSet;
                    }
                    if ((value != null))
                    {
                        value.AccordingToSchedules.Add(this);
                        value.Deleted += this.OnResetForInspectionDataSet;
                    }
                    this.OnForInspectionDataSetChanged(e);
                    this.OnPropertyChanged("ForInspectionDataSet", e);
                }
            }
        }
        
        /// <summary>
        /// The estimatedWindow property
        /// </summary>
        [XmlElementNameAttribute("estimatedWindow")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval EstimatedWindow
        {
            get
            {
                return this._estimatedWindow;
            }
            set
            {
                if ((this._estimatedWindow != value))
                {
                    IDateTimeInterval old = this._estimatedWindow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatedWindowChanging(e);
                    this.OnPropertyChanging("EstimatedWindow", e);
                    this._estimatedWindow = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEstimatedWindow;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEstimatedWindow;
                    }
                    this.OnEstimatedWindowChanged(e);
                    this.OnPropertyChanged("EstimatedWindow", e);
                }
            }
        }
        
        /// <summary>
        /// The Documents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduleParameterInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocument> Documents
        {
            get
            {
                return this._documents;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ScheduleParameterInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
                            "eParameterInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RequestedWindow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestedWindowChanging;
        
        /// <summary>
        /// Gets fired when the RequestedWindow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestedWindowChanged;
        
        /// <summary>
        /// Gets fired before the ForInspectionDataSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForInspectionDataSetChanging;
        
        /// <summary>
        /// Gets fired when the ForInspectionDataSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForInspectionDataSetChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedWindow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedWindowChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedWindow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedWindowChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ScheduledEvents", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduledEvents", e);
        }
        
        /// <summary>
        /// Raises the RequestedWindowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestedWindowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestedWindowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequestedWindowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestedWindowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestedWindowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RequestedWindow property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequestedWindow(object sender, System.EventArgs eventArgs)
        {
            this.RequestedWindow = null;
        }
        
        /// <summary>
        /// Raises the ForInspectionDataSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForInspectionDataSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForInspectionDataSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForInspectionDataSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForInspectionDataSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForInspectionDataSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ForInspectionDataSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetForInspectionDataSet(object sender, System.EventArgs eventArgs)
        {
            this.ForInspectionDataSet = null;
        }
        
        /// <summary>
        /// Raises the EstimatedWindowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedWindowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedWindowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedWindowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedWindowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedWindowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EstimatedWindow property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEstimatedWindow(object sender, System.EventArgs eventArgs)
        {
            this.EstimatedWindow = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Documents", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Documents", e);
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SCHEDULEDEVENTS"))
            {
                return this._scheduledEvents;
            }
            if ((feature == "DOCUMENTS"))
            {
                return this._documents;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REQUESTEDWINDOW"))
            {
                this.RequestedWindow = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "FORINSPECTIONDATASET"))
            {
                this.ForInspectionDataSet = ((IInspectionDataSet)(value));
                return;
            }
            if ((feature == "ESTIMATEDWINDOW"))
            {
                this.EstimatedWindow = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RequestedWindow"))
            {
                return new RequestedWindowProxy(this);
            }
            if ((attribute == "ForInspectionDataSet"))
            {
                return new ForInspectionDataSetProxy(this);
            }
            if ((attribute == "EstimatedWindow"))
            {
                return new EstimatedWindowProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RequestedWindow"))
            {
                return new RequestedWindowProxy(this);
            }
            if ((reference == "ForInspectionDataSet"))
            {
                return new ForInspectionDataSetProxy(this);
            }
            if ((reference == "EstimatedWindow"))
            {
                return new EstimatedWindowProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Schedul" +
                        "eParameterInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ScheduleParameterInfo class
        /// </summary>
        public class ScheduleParameterInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ScheduleParameterInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ScheduleParameterInfoReferencedElementsCollection(ScheduleParameterInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ScheduledEvents.Count);
                    if ((this._parent.RequestedWindow != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ForInspectionDataSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EstimatedWindow != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Documents.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequestedWindowChanged += this.PropagateValueChanges;
                this._parent.ForInspectionDataSetChanged += this.PropagateValueChanges;
                this._parent.EstimatedWindowChanged += this.PropagateValueChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequestedWindowChanged -= this.PropagateValueChanges;
                this._parent.ForInspectionDataSetChanged -= this.PropagateValueChanges;
                this._parent.EstimatedWindowChanged -= this.PropagateValueChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IScheduledEvent scheduledEventsCasted = item.As<IScheduledEvent>();
                if ((scheduledEventsCasted != null))
                {
                    this._parent.ScheduledEvents.Add(scheduledEventsCasted);
                }
                if ((this._parent.RequestedWindow == null))
                {
                    IDateTimeInterval requestedWindowCasted = item.As<IDateTimeInterval>();
                    if ((requestedWindowCasted != null))
                    {
                        this._parent.RequestedWindow = requestedWindowCasted;
                        return;
                    }
                }
                if ((this._parent.ForInspectionDataSet == null))
                {
                    IInspectionDataSet forInspectionDataSetCasted = item.As<IInspectionDataSet>();
                    if ((forInspectionDataSetCasted != null))
                    {
                        this._parent.ForInspectionDataSet = forInspectionDataSetCasted;
                        return;
                    }
                }
                if ((this._parent.EstimatedWindow == null))
                {
                    IDateTimeInterval estimatedWindowCasted = item.As<IDateTimeInterval>();
                    if ((estimatedWindowCasted != null))
                    {
                        this._parent.EstimatedWindow = estimatedWindowCasted;
                        return;
                    }
                }
                IDocument documentsCasted = item.As<IDocument>();
                if ((documentsCasted != null))
                {
                    this._parent.Documents.Add(documentsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ScheduledEvents.Clear();
                this._parent.RequestedWindow = null;
                this._parent.ForInspectionDataSet = null;
                this._parent.EstimatedWindow = null;
                this._parent.Documents.Clear();
                this._parent.Status = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ScheduledEvents.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RequestedWindow))
                {
                    return true;
                }
                if ((item == this._parent.ForInspectionDataSet))
                {
                    return true;
                }
                if ((item == this._parent.EstimatedWindow))
                {
                    return true;
                }
                if (this._parent.Documents.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> scheduledEventsEnumerator = this._parent.ScheduledEvents.GetEnumerator();
                try
                {
                    for (
                    ; scheduledEventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduledEventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduledEventsEnumerator.Dispose();
                }
                if ((this._parent.RequestedWindow != null))
                {
                    array[arrayIndex] = this._parent.RequestedWindow;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ForInspectionDataSet != null))
                {
                    array[arrayIndex] = this._parent.ForInspectionDataSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EstimatedWindow != null))
                {
                    array[arrayIndex] = this._parent.EstimatedWindow;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> documentsEnumerator = this._parent.Documents.GetEnumerator();
                try
                {
                    for (
                    ; documentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IScheduledEvent scheduledEventItem = item.As<IScheduledEvent>();
                if (((scheduledEventItem != null) 
                            && this._parent.ScheduledEvents.Remove(scheduledEventItem)))
                {
                    return true;
                }
                if ((this._parent.RequestedWindow == item))
                {
                    this._parent.RequestedWindow = null;
                    return true;
                }
                if ((this._parent.ForInspectionDataSet == item))
                {
                    this._parent.ForInspectionDataSet = null;
                    return true;
                }
                if ((this._parent.EstimatedWindow == item))
                {
                    this._parent.EstimatedWindow = null;
                    return true;
                }
                IDocument documentItem = item.As<IDocument>();
                if (((documentItem != null) 
                            && this._parent.Documents.Remove(documentItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ScheduledEvents).Concat(this._parent.RequestedWindow).Concat(this._parent.ForInspectionDataSet).Concat(this._parent.EstimatedWindow).Concat(this._parent.Documents).Concat(this._parent.Status).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requestedWindow property
        /// </summary>
        private sealed class RequestedWindowProxy : ModelPropertyChange<IScheduleParameterInfo, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequestedWindowProxy(IScheduleParameterInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.RequestedWindow;
                }
                set
                {
                    this.ModelElement.RequestedWindow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequestedWindowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequestedWindowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ForInspectionDataSet property
        /// </summary>
        private sealed class ForInspectionDataSetProxy : ModelPropertyChange<IScheduleParameterInfo, IInspectionDataSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ForInspectionDataSetProxy(IScheduleParameterInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInspectionDataSet Value
            {
                get
                {
                    return this.ModelElement.ForInspectionDataSet;
                }
                set
                {
                    this.ModelElement.ForInspectionDataSet = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForInspectionDataSetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForInspectionDataSetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatedWindow property
        /// </summary>
        private sealed class EstimatedWindowProxy : ModelPropertyChange<IScheduleParameterInfo, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatedWindowProxy(IScheduleParameterInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.EstimatedWindow;
                }
                set
                {
                    this.ModelElement.EstimatedWindow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedWindowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedWindowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IScheduleParameterInfo, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IScheduleParameterInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
    }
}

