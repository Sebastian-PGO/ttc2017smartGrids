//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The default implementation of the Ratio class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon")]
    [XmlNamespacePrefixAttribute("cimInfCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Ratio")]
    [DebuggerDisplayAttribute("Ratio {UUID}")]
    public partial class Ratio : Element, IRatio, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Numerator property
        /// </summary>
        private float _numerator;
        
        private static Lazy<ITypedElement> _numeratorAttribute = new Lazy<ITypedElement>(RetrieveNumeratorAttribute);
        
        /// <summary>
        /// The backing field for the Denominator property
        /// </summary>
        private float _denominator;
        
        private static Lazy<ITypedElement> _denominatorAttribute = new Lazy<ITypedElement>(RetrieveDenominatorAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The numerator property
        /// </summary>
        [XmlElementNameAttribute("numerator")]
        [XmlAttributeAttribute(true)]
        public virtual float Numerator
        {
            get
            {
                return this._numerator;
            }
            set
            {
                if ((this._numerator != value))
                {
                    float old = this._numerator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumeratorChanging(e);
                    this.OnPropertyChanging("Numerator", e, _numeratorAttribute);
                    this._numerator = value;
                    this.OnNumeratorChanged(e);
                    this.OnPropertyChanged("Numerator", e, _numeratorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The denominator property
        /// </summary>
        [XmlElementNameAttribute("denominator")]
        [XmlAttributeAttribute(true)]
        public virtual float Denominator
        {
            get
            {
                return this._denominator;
            }
            set
            {
                if ((this._denominator != value))
                {
                    float old = this._denominator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDenominatorChanging(e);
                    this.OnPropertyChanging("Denominator", e, _denominatorAttribute);
                    this._denominator = value;
                    this.OnDenominatorChanged(e);
                    this.OnPropertyChanged("Denominator", e, _denominatorAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Ratio")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Numerator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumeratorChanging;
        
        /// <summary>
        /// Gets fired when the Numerator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumeratorChanged;
        
        /// <summary>
        /// Gets fired before the Denominator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DenominatorChanging;
        
        /// <summary>
        /// Gets fired when the Denominator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DenominatorChanged;
        
        private static ITypedElement RetrieveNumeratorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Ratio.ClassInstance)).Resolve("numerator")));
        }
        
        /// <summary>
        /// Raises the NumeratorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumeratorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumeratorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumeratorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumeratorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumeratorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDenominatorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Ratio.ClassInstance)).Resolve("denominator")));
        }
        
        /// <summary>
        /// Raises the DenominatorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDenominatorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DenominatorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DenominatorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDenominatorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DenominatorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NUMERATOR"))
            {
                return this.Numerator;
            }
            if ((attribute == "DENOMINATOR"))
            {
                return this.Denominator;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NUMERATOR"))
            {
                this.Numerator = ((float)(value));
                return;
            }
            if ((feature == "DENOMINATOR"))
            {
                this.Denominator = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Ratio")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numerator property
        /// </summary>
        private sealed class NumeratorProxy : ModelPropertyChange<IRatio, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumeratorProxy(IRatio modelElement) : 
                    base(modelElement, "numerator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Numerator;
                }
                set
                {
                    this.ModelElement.Numerator = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the denominator property
        /// </summary>
        private sealed class DenominatorProxy : ModelPropertyChange<IRatio, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DenominatorProxy(IRatio modelElement) : 
                    base(modelElement, "denominator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Denominator;
                }
                set
                {
                    this.ModelElement.Denominator = value;
                }
            }
        }
    }
}

