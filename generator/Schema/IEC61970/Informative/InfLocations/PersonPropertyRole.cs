//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations
{
    
    
    /// <summary>
    /// The default implementation of the PersonPropertyRole class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfLocations")]
    [XmlNamespacePrefixAttribute("cimInfLocations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Pers" +
        "onPropertyRole")]
    [DebuggerDisplayAttribute("PersonPropertyRole {UUID}")]
    public class PersonPropertyRole : Role, IPersonPropertyRole, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LandProperty property
        /// </summary>
        private ILandProperty _landProperty;
        
        /// <summary>
        /// The backing field for the ErpPerson property
        /// </summary>
        private IErpPerson _erpPerson;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The LandProperty property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersonRoles")]
        public virtual ILandProperty LandProperty
        {
            get
            {
                return this._landProperty;
            }
            set
            {
                if ((this._landProperty != value))
                {
                    ILandProperty old = this._landProperty;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLandPropertyChanging(e);
                    this.OnPropertyChanging("LandProperty", e);
                    this._landProperty = value;
                    if ((old != null))
                    {
                        old.ErpPersonRoles.Remove(this);
                        old.Deleted -= this.OnResetLandProperty;
                    }
                    if ((value != null))
                    {
                        value.ErpPersonRoles.Add(this);
                        value.Deleted += this.OnResetLandProperty;
                    }
                    this.OnLandPropertyChanged(e);
                    this.OnPropertyChanged("LandProperty", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpPerson property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandPropertyRoles")]
        public virtual IErpPerson ErpPerson
        {
            get
            {
                return this._erpPerson;
            }
            set
            {
                if ((this._erpPerson != value))
                {
                    IErpPerson old = this._erpPerson;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonChanging(e);
                    this.OnPropertyChanging("ErpPerson", e);
                    this._erpPerson = value;
                    if ((old != null))
                    {
                        old.LandPropertyRoles.Remove(this);
                        old.Deleted -= this.OnResetErpPerson;
                    }
                    if ((value != null))
                    {
                        value.LandPropertyRoles.Add(this);
                        value.Deleted += this.OnResetErpPerson;
                    }
                    this.OnErpPersonChanged(e);
                    this.OnPropertyChanged("ErpPerson", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PersonPropertyRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Pers" +
                            "onPropertyRole")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LandProperty property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LandPropertyChanging;
        
        /// <summary>
        /// Gets fired when the LandProperty property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LandPropertyChanged;
        
        /// <summary>
        /// Gets fired before the ErpPerson property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanging;
        
        /// <summary>
        /// Gets fired when the ErpPerson property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanged;
        
        /// <summary>
        /// Raises the LandPropertyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLandPropertyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LandPropertyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LandPropertyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLandPropertyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LandPropertyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LandProperty property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLandProperty(object sender, System.EventArgs eventArgs)
        {
            this.LandProperty = null;
        }
        
        /// <summary>
        /// Raises the ErpPersonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPerson property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPerson(object sender, System.EventArgs eventArgs)
        {
            this.ErpPerson = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LANDPROPERTY"))
            {
                this.LandProperty = ((ILandProperty)(value));
                return;
            }
            if ((feature == "ERPPERSON"))
            {
                this.ErpPerson = ((IErpPerson)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LandProperty"))
            {
                return new LandPropertyProxy(this);
            }
            if ((attribute == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LandProperty"))
            {
                return new LandPropertyProxy(this);
            }
            if ((reference == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Pers" +
                        "onPropertyRole")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PersonPropertyRole class
        /// </summary>
        public class PersonPropertyRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PersonPropertyRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PersonPropertyRoleReferencedElementsCollection(PersonPropertyRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.LandProperty != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPerson != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LandPropertyChanged += this.PropagateValueChanges;
                this._parent.ErpPersonChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LandPropertyChanged -= this.PropagateValueChanges;
                this._parent.ErpPersonChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.LandProperty == null))
                {
                    ILandProperty landPropertyCasted = item.As<ILandProperty>();
                    if ((landPropertyCasted != null))
                    {
                        this._parent.LandProperty = landPropertyCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPerson == null))
                {
                    IErpPerson erpPersonCasted = item.As<IErpPerson>();
                    if ((erpPersonCasted != null))
                    {
                        this._parent.ErpPerson = erpPersonCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LandProperty = null;
                this._parent.ErpPerson = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.LandProperty))
                {
                    return true;
                }
                if ((item == this._parent.ErpPerson))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.LandProperty != null))
                {
                    array[arrayIndex] = this._parent.LandProperty;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPerson != null))
                {
                    array[arrayIndex] = this._parent.ErpPerson;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.LandProperty == item))
                {
                    this._parent.LandProperty = null;
                    return true;
                }
                if ((this._parent.ErpPerson == item))
                {
                    this._parent.ErpPerson = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LandProperty).Concat(this._parent.ErpPerson).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LandProperty property
        /// </summary>
        private sealed class LandPropertyProxy : ModelPropertyChange<IPersonPropertyRole, ILandProperty>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LandPropertyProxy(IPersonPropertyRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILandProperty Value
            {
                get
                {
                    return this.ModelElement.LandProperty;
                }
                set
                {
                    this.ModelElement.LandProperty = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LandPropertyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LandPropertyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPerson property
        /// </summary>
        private sealed class ErpPersonProxy : ModelPropertyChange<IPersonPropertyRole, IErpPerson>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonProxy(IPersonPropertyRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPerson Value
            {
                get
                {
                    return this.ModelElement.ErpPerson;
                }
                set
                {
                    this.ModelElement.ErpPerson = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonChanged -= handler;
            }
        }
    }
}

