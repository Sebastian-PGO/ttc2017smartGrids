//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations
{
    
    
    /// <summary>
    /// The default implementation of the LandProperty class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfLocations")]
    [XmlNamespacePrefixAttribute("cimInfLocations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Land" +
        "Property")]
    [DebuggerDisplayAttribute("LandProperty {UUID}")]
    public partial class LandProperty : IdentifiedObject, ILandProperty, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DemographicKind property
        /// </summary>
        private Nullable<DemographicKind> _demographicKind;
        
        private static Lazy<ITypedElement> _demographicKindAttribute = new Lazy<ITypedElement>(RetrieveDemographicKindAttribute);
        
        /// <summary>
        /// The backing field for the ExternalRecordReference property
        /// </summary>
        private string _externalRecordReference;
        
        private static Lazy<ITypedElement> _externalRecordReferenceAttribute = new Lazy<ITypedElement>(RetrieveExternalRecordReferenceAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<LandPropertyKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _erpSiteLevelDatasReference = new Lazy<ITypedElement>(RetrieveErpSiteLevelDatasReference);
        
        /// <summary>
        /// The backing field for the ErpSiteLevelDatas property
        /// </summary>
        private LandPropertyErpSiteLevelDatasCollection _erpSiteLevelDatas;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpOrganisationRolesReference = new Lazy<ITypedElement>(RetrieveErpOrganisationRolesReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisationRoles property
        /// </summary>
        private LandPropertyErpOrganisationRolesCollection _erpOrganisationRoles;
        
        private static Lazy<ITypedElement> _locationsReference = new Lazy<ITypedElement>(RetrieveLocationsReference);
        
        /// <summary>
        /// The backing field for the Locations property
        /// </summary>
        private LandPropertyLocationsCollection _locations;
        
        private static Lazy<ITypedElement> _locationGrantsReference = new Lazy<ITypedElement>(RetrieveLocationGrantsReference);
        
        /// <summary>
        /// The backing field for the LocationGrants property
        /// </summary>
        private LandPropertyLocationGrantsCollection _locationGrants;
        
        private static Lazy<ITypedElement> _erpPersonRolesReference = new Lazy<ITypedElement>(RetrieveErpPersonRolesReference);
        
        /// <summary>
        /// The backing field for the ErpPersonRoles property
        /// </summary>
        private LandPropertyErpPersonRolesCollection _erpPersonRoles;
        
        private static Lazy<ITypedElement> _rightOfWaysReference = new Lazy<ITypedElement>(RetrieveRightOfWaysReference);
        
        /// <summary>
        /// The backing field for the RightOfWays property
        /// </summary>
        private LandPropertyRightOfWaysCollection _rightOfWays;
        
        private static Lazy<ITypedElement> _assetContainersReference = new Lazy<ITypedElement>(RetrieveAssetContainersReference);
        
        /// <summary>
        /// The backing field for the AssetContainers property
        /// </summary>
        private LandPropertyAssetContainersCollection _assetContainers;
        
        private static IClass _classInstance;
        
        public LandProperty()
        {
            this._erpSiteLevelDatas = new LandPropertyErpSiteLevelDatasCollection(this);
            this._erpSiteLevelDatas.CollectionChanging += this.ErpSiteLevelDatasCollectionChanging;
            this._erpSiteLevelDatas.CollectionChanged += this.ErpSiteLevelDatasCollectionChanged;
            this._erpOrganisationRoles = new LandPropertyErpOrganisationRolesCollection(this);
            this._erpOrganisationRoles.CollectionChanging += this.ErpOrganisationRolesCollectionChanging;
            this._erpOrganisationRoles.CollectionChanged += this.ErpOrganisationRolesCollectionChanged;
            this._locations = new LandPropertyLocationsCollection(this);
            this._locations.CollectionChanging += this.LocationsCollectionChanging;
            this._locations.CollectionChanged += this.LocationsCollectionChanged;
            this._locationGrants = new LandPropertyLocationGrantsCollection(this);
            this._locationGrants.CollectionChanging += this.LocationGrantsCollectionChanging;
            this._locationGrants.CollectionChanged += this.LocationGrantsCollectionChanged;
            this._erpPersonRoles = new LandPropertyErpPersonRolesCollection(this);
            this._erpPersonRoles.CollectionChanging += this.ErpPersonRolesCollectionChanging;
            this._erpPersonRoles.CollectionChanged += this.ErpPersonRolesCollectionChanged;
            this._rightOfWays = new LandPropertyRightOfWaysCollection(this);
            this._rightOfWays.CollectionChanging += this.RightOfWaysCollectionChanging;
            this._rightOfWays.CollectionChanged += this.RightOfWaysCollectionChanged;
            this._assetContainers = new LandPropertyAssetContainersCollection(this);
            this._assetContainers.CollectionChanging += this.AssetContainersCollectionChanging;
            this._assetContainers.CollectionChanged += this.AssetContainersCollectionChanged;
        }
        
        /// <summary>
        /// The demographicKind property
        /// </summary>
        [XmlElementNameAttribute("demographicKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DemographicKind> DemographicKind
        {
            get
            {
                return this._demographicKind;
            }
            set
            {
                if ((this._demographicKind != value))
                {
                    Nullable<DemographicKind> old = this._demographicKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemographicKindChanging(e);
                    this.OnPropertyChanging("DemographicKind", e, _demographicKindAttribute);
                    this._demographicKind = value;
                    this.OnDemographicKindChanged(e);
                    this.OnPropertyChanged("DemographicKind", e, _demographicKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The externalRecordReference property
        /// </summary>
        [XmlElementNameAttribute("externalRecordReference")]
        [XmlAttributeAttribute(true)]
        public virtual string ExternalRecordReference
        {
            get
            {
                return this._externalRecordReference;
            }
            set
            {
                if ((this._externalRecordReference != value))
                {
                    string old = this._externalRecordReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExternalRecordReferenceChanging(e);
                    this.OnPropertyChanging("ExternalRecordReference", e, _externalRecordReferenceAttribute);
                    this._externalRecordReference = value;
                    this.OnExternalRecordReferenceChanged(e);
                    this.OnPropertyChanged("ExternalRecordReference", e, _externalRecordReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<LandPropertyKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<LandPropertyKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpSiteLevelDatas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperty")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpSiteLevelData> ErpSiteLevelDatas
        {
            get
            {
                return this._erpSiteLevelDatas;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperty")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgPropertyRole> ErpOrganisationRoles
        {
            get
            {
                return this._erpOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The Locations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperties")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocation> Locations
        {
            get
            {
                return this._locations;
            }
        }
        
        /// <summary>
        /// The LocationGrants property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperty")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocationGrant> LocationGrants
        {
            get
            {
                return this._locationGrants;
            }
        }
        
        /// <summary>
        /// The ErpPersonRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperty")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPersonPropertyRole> ErpPersonRoles
        {
            get
            {
                return this._erpPersonRoles;
            }
        }
        
        /// <summary>
        /// The RightOfWays property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperties")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRightOfWay> RightOfWays
        {
            get
            {
                return this._rightOfWays;
            }
        }
        
        /// <summary>
        /// The AssetContainers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LandProperties")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetContainer> AssetContainers
        {
            get
            {
                return this._assetContainers;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LandPropertyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Land" +
                            "Property")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DemographicKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemographicKindChanging;
        
        /// <summary>
        /// Gets fired when the DemographicKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemographicKindChanged;
        
        /// <summary>
        /// Gets fired before the ExternalRecordReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRecordReferenceChanging;
        
        /// <summary>
        /// Gets fired when the ExternalRecordReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRecordReferenceChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveDemographicKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("demographicKind")));
        }
        
        /// <summary>
        /// Raises the DemographicKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemographicKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemographicKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemographicKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemographicKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemographicKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExternalRecordReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("externalRecordReference")));
        }
        
        /// <summary>
        /// Raises the ExternalRecordReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRecordReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRecordReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExternalRecordReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRecordReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRecordReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpSiteLevelDatasReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("ErpSiteLevelDatas")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpSiteLevelDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpSiteLevelDatasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpSiteLevelDatas", e, _erpSiteLevelDatasReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpSiteLevelDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpSiteLevelDatasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpSiteLevelDatas", e, _erpSiteLevelDatasReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpOrganisationRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("ErpOrganisationRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        private static ITypedElement RetrieveLocationsReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("Locations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Locations", e, _locationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Locations", e, _locationsReference);
        }
        
        private static ITypedElement RetrieveLocationGrantsReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("LocationGrants")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LocationGrants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationGrantsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LocationGrants", e, _locationGrantsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LocationGrants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationGrantsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LocationGrants", e, _locationGrantsReference);
        }
        
        private static ITypedElement RetrieveErpPersonRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("ErpPersonRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersonRoles", e, _erpPersonRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersonRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersonRoles", e, _erpPersonRolesReference);
        }
        
        private static ITypedElement RetrieveRightOfWaysReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("RightOfWays")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RightOfWays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RightOfWaysCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RightOfWays", e, _rightOfWaysReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RightOfWays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RightOfWaysCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RightOfWays", e, _rightOfWaysReference);
        }
        
        private static ITypedElement RetrieveAssetContainersReference()
        {
            return ((ITypedElement)(((ModelElement)(LandProperty.ClassInstance)).Resolve("AssetContainers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetContainers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetContainersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetContainers", e, _assetContainersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetContainers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetContainersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetContainers", e, _assetContainersReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEMOGRAPHICKIND"))
            {
                return this.DemographicKind;
            }
            if ((attribute == "EXTERNALRECORDREFERENCE"))
            {
                return this.ExternalRecordReference;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPSITELEVELDATAS"))
            {
                return this._erpSiteLevelDatas;
            }
            if ((feature == "ERPORGANISATIONROLES"))
            {
                return this._erpOrganisationRoles;
            }
            if ((feature == "LOCATIONS"))
            {
                return this._locations;
            }
            if ((feature == "LOCATIONGRANTS"))
            {
                return this._locationGrants;
            }
            if ((feature == "ERPPERSONROLES"))
            {
                return this._erpPersonRoles;
            }
            if ((feature == "RIGHTOFWAYS"))
            {
                return this._rightOfWays;
            }
            if ((feature == "ASSETCONTAINERS"))
            {
                return this._assetContainers;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "DEMOGRAPHICKIND"))
            {
                this.DemographicKind = ((DemographicKind)(value));
                return;
            }
            if ((feature == "EXTERNALRECORDREFERENCE"))
            {
                this.ExternalRecordReference = ((string)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((LandPropertyKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Land" +
                        "Property")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LandProperty class
        /// </summary>
        public class LandPropertyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LandProperty _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LandPropertyReferencedElementsCollection(LandProperty parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ErpSiteLevelDatas.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpOrganisationRoles.Count);
                    count = (count + this._parent.Locations.Count);
                    count = (count + this._parent.LocationGrants.Count);
                    count = (count + this._parent.ErpPersonRoles.Count);
                    count = (count + this._parent.RightOfWays.Count);
                    count = (count + this._parent.AssetContainers.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpSiteLevelDatas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LocationGrants.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RightOfWays.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetContainers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpSiteLevelDatas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LocationGrants.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersonRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RightOfWays.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetContainers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IErpSiteLevelData erpSiteLevelDatasCasted = item.As<IErpSiteLevelData>();
                if ((erpSiteLevelDatasCasted != null))
                {
                    this._parent.ErpSiteLevelDatas.Add(erpSiteLevelDatasCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IOrgPropertyRole erpOrganisationRolesCasted = item.As<IOrgPropertyRole>();
                if ((erpOrganisationRolesCasted != null))
                {
                    this._parent.ErpOrganisationRoles.Add(erpOrganisationRolesCasted);
                }
                ILocation locationsCasted = item.As<ILocation>();
                if ((locationsCasted != null))
                {
                    this._parent.Locations.Add(locationsCasted);
                }
                ILocationGrant locationGrantsCasted = item.As<ILocationGrant>();
                if ((locationGrantsCasted != null))
                {
                    this._parent.LocationGrants.Add(locationGrantsCasted);
                }
                IPersonPropertyRole erpPersonRolesCasted = item.As<IPersonPropertyRole>();
                if ((erpPersonRolesCasted != null))
                {
                    this._parent.ErpPersonRoles.Add(erpPersonRolesCasted);
                }
                IRightOfWay rightOfWaysCasted = item.As<IRightOfWay>();
                if ((rightOfWaysCasted != null))
                {
                    this._parent.RightOfWays.Add(rightOfWaysCasted);
                }
                IAssetContainer assetContainersCasted = item.As<IAssetContainer>();
                if ((assetContainersCasted != null))
                {
                    this._parent.AssetContainers.Add(assetContainersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpSiteLevelDatas.Clear();
                this._parent.Status = null;
                this._parent.ErpOrganisationRoles.Clear();
                this._parent.Locations.Clear();
                this._parent.LocationGrants.Clear();
                this._parent.ErpPersonRoles.Clear();
                this._parent.RightOfWays.Clear();
                this._parent.AssetContainers.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ErpSiteLevelDatas.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ErpOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.Locations.Contains(item))
                {
                    return true;
                }
                if (this._parent.LocationGrants.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersonRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.RightOfWays.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssetContainers.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> erpSiteLevelDatasEnumerator = this._parent.ErpSiteLevelDatas.GetEnumerator();
                try
                {
                    for (
                    ; erpSiteLevelDatasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpSiteLevelDatasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpSiteLevelDatasEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpOrganisationRolesEnumerator = this._parent.ErpOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> locationsEnumerator = this._parent.Locations.GetEnumerator();
                try
                {
                    for (
                    ; locationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> locationGrantsEnumerator = this._parent.LocationGrants.GetEnumerator();
                try
                {
                    for (
                    ; locationGrantsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationGrantsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationGrantsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonRolesEnumerator = this._parent.ErpPersonRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> rightOfWaysEnumerator = this._parent.RightOfWays.GetEnumerator();
                try
                {
                    for (
                    ; rightOfWaysEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rightOfWaysEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rightOfWaysEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetContainersEnumerator = this._parent.AssetContainers.GetEnumerator();
                try
                {
                    for (
                    ; assetContainersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetContainersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetContainersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IErpSiteLevelData erpSiteLevelDataItem = item.As<IErpSiteLevelData>();
                if (((erpSiteLevelDataItem != null) 
                            && this._parent.ErpSiteLevelDatas.Remove(erpSiteLevelDataItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IOrgPropertyRole orgPropertyRoleItem = item.As<IOrgPropertyRole>();
                if (((orgPropertyRoleItem != null) 
                            && this._parent.ErpOrganisationRoles.Remove(orgPropertyRoleItem)))
                {
                    return true;
                }
                ILocation locationItem = item.As<ILocation>();
                if (((locationItem != null) 
                            && this._parent.Locations.Remove(locationItem)))
                {
                    return true;
                }
                ILocationGrant locationGrantItem = item.As<ILocationGrant>();
                if (((locationGrantItem != null) 
                            && this._parent.LocationGrants.Remove(locationGrantItem)))
                {
                    return true;
                }
                IPersonPropertyRole personPropertyRoleItem = item.As<IPersonPropertyRole>();
                if (((personPropertyRoleItem != null) 
                            && this._parent.ErpPersonRoles.Remove(personPropertyRoleItem)))
                {
                    return true;
                }
                IRightOfWay rightOfWayItem = item.As<IRightOfWay>();
                if (((rightOfWayItem != null) 
                            && this._parent.RightOfWays.Remove(rightOfWayItem)))
                {
                    return true;
                }
                IAssetContainer assetContainerItem = item.As<IAssetContainer>();
                if (((assetContainerItem != null) 
                            && this._parent.AssetContainers.Remove(assetContainerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpSiteLevelDatas).Concat(this._parent.Status).Concat(this._parent.ErpOrganisationRoles).Concat(this._parent.Locations).Concat(this._parent.LocationGrants).Concat(this._parent.ErpPersonRoles).Concat(this._parent.RightOfWays).Concat(this._parent.AssetContainers).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the demographicKind property
        /// </summary>
        private sealed class DemographicKindProxy : ModelPropertyChange<ILandProperty, Nullable<DemographicKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemographicKindProxy(ILandProperty modelElement) : 
                    base(modelElement, "demographicKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DemographicKind> Value
            {
                get
                {
                    return this.ModelElement.DemographicKind;
                }
                set
                {
                    this.ModelElement.DemographicKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the externalRecordReference property
        /// </summary>
        private sealed class ExternalRecordReferenceProxy : ModelPropertyChange<ILandProperty, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExternalRecordReferenceProxy(ILandProperty modelElement) : 
                    base(modelElement, "externalRecordReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ExternalRecordReference;
                }
                set
                {
                    this.ModelElement.ExternalRecordReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ILandProperty, Nullable<LandPropertyKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ILandProperty modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<LandPropertyKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ILandProperty, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ILandProperty modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

