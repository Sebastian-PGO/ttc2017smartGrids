//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the DimensionsInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Dimensi" +
        "onsInfo")]
    [DebuggerDisplayAttribute("DimensionsInfo {UUID}")]
    public class DimensionsInfo : IdentifiedObject, IDimensionsInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Orientation property
        /// </summary>
        private string _orientation;
        
        /// <summary>
        /// The backing field for the SizeWidth property
        /// </summary>
        private float _sizeWidth;
        
        /// <summary>
        /// The backing field for the SizeDepth property
        /// </summary>
        private float _sizeDepth;
        
        /// <summary>
        /// The backing field for the SizeDiameter property
        /// </summary>
        private float _sizeDiameter;
        
        /// <summary>
        /// The backing field for the SizeLength property
        /// </summary>
        private float _sizeLength;
        
        /// <summary>
        /// The backing field for the Locations property
        /// </summary>
        private DimensionsInfoLocationsCollection _locations;
        
        /// <summary>
        /// The backing field for the Specifications property
        /// </summary>
        private DimensionsInfoSpecificationsCollection _specifications;
        
        /// <summary>
        /// The backing field for the AssetInfos property
        /// </summary>
        private DimensionsInfoAssetInfosCollection _assetInfos;
        
        private static IClass _classInstance;
        
        public DimensionsInfo()
        {
            this._locations = new DimensionsInfoLocationsCollection(this);
            this._locations.CollectionChanging += this.LocationsCollectionChanging;
            this._locations.CollectionChanged += this.LocationsCollectionChanged;
            this._specifications = new DimensionsInfoSpecificationsCollection(this);
            this._specifications.CollectionChanging += this.SpecificationsCollectionChanging;
            this._specifications.CollectionChanged += this.SpecificationsCollectionChanged;
            this._assetInfos = new DimensionsInfoAssetInfosCollection(this);
            this._assetInfos.CollectionChanging += this.AssetInfosCollectionChanging;
            this._assetInfos.CollectionChanged += this.AssetInfosCollectionChanged;
        }
        
        /// <summary>
        /// The orientation property
        /// </summary>
        [XmlElementNameAttribute("orientation")]
        [XmlAttributeAttribute(true)]
        public virtual string Orientation
        {
            get
            {
                return this._orientation;
            }
            set
            {
                if ((this._orientation != value))
                {
                    string old = this._orientation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrientationChanging(e);
                    this.OnPropertyChanging("Orientation", e);
                    this._orientation = value;
                    this.OnOrientationChanged(e);
                    this.OnPropertyChanged("Orientation", e);
                }
            }
        }
        
        /// <summary>
        /// The sizeWidth property
        /// </summary>
        [XmlElementNameAttribute("sizeWidth")]
        [XmlAttributeAttribute(true)]
        public virtual float SizeWidth
        {
            get
            {
                return this._sizeWidth;
            }
            set
            {
                if ((this._sizeWidth != value))
                {
                    float old = this._sizeWidth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeWidthChanging(e);
                    this.OnPropertyChanging("SizeWidth", e);
                    this._sizeWidth = value;
                    this.OnSizeWidthChanged(e);
                    this.OnPropertyChanged("SizeWidth", e);
                }
            }
        }
        
        /// <summary>
        /// The sizeDepth property
        /// </summary>
        [XmlElementNameAttribute("sizeDepth")]
        [XmlAttributeAttribute(true)]
        public virtual float SizeDepth
        {
            get
            {
                return this._sizeDepth;
            }
            set
            {
                if ((this._sizeDepth != value))
                {
                    float old = this._sizeDepth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeDepthChanging(e);
                    this.OnPropertyChanging("SizeDepth", e);
                    this._sizeDepth = value;
                    this.OnSizeDepthChanged(e);
                    this.OnPropertyChanged("SizeDepth", e);
                }
            }
        }
        
        /// <summary>
        /// The sizeDiameter property
        /// </summary>
        [XmlElementNameAttribute("sizeDiameter")]
        [XmlAttributeAttribute(true)]
        public virtual float SizeDiameter
        {
            get
            {
                return this._sizeDiameter;
            }
            set
            {
                if ((this._sizeDiameter != value))
                {
                    float old = this._sizeDiameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeDiameterChanging(e);
                    this.OnPropertyChanging("SizeDiameter", e);
                    this._sizeDiameter = value;
                    this.OnSizeDiameterChanged(e);
                    this.OnPropertyChanged("SizeDiameter", e);
                }
            }
        }
        
        /// <summary>
        /// The sizeLength property
        /// </summary>
        [XmlElementNameAttribute("sizeLength")]
        [XmlAttributeAttribute(true)]
        public virtual float SizeLength
        {
            get
            {
                return this._sizeLength;
            }
            set
            {
                if ((this._sizeLength != value))
                {
                    float old = this._sizeLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeLengthChanging(e);
                    this.OnPropertyChanging("SizeLength", e);
                    this._sizeLength = value;
                    this.OnSizeLengthChanged(e);
                    this.OnPropertyChanged("SizeLength", e);
                }
            }
        }
        
        /// <summary>
        /// The Locations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DimensionsInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocation> Locations
        {
            get
            {
                return this._locations;
            }
        }
        
        /// <summary>
        /// The Specifications property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DimensionsInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISpecification> Specifications
        {
            get
            {
                return this._specifications;
            }
        }
        
        /// <summary>
        /// The AssetInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DimensionsInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetInfo> AssetInfos
        {
            get
            {
                return this._assetInfos;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DimensionsInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Dimensi" +
                            "onsInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Orientation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrientationChanging;
        
        /// <summary>
        /// Gets fired when the Orientation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrientationChanged;
        
        /// <summary>
        /// Gets fired before the SizeWidth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeWidthChanging;
        
        /// <summary>
        /// Gets fired when the SizeWidth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeWidthChanged;
        
        /// <summary>
        /// Gets fired before the SizeDepth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDepthChanging;
        
        /// <summary>
        /// Gets fired when the SizeDepth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDepthChanged;
        
        /// <summary>
        /// Gets fired before the SizeDiameter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDiameterChanging;
        
        /// <summary>
        /// Gets fired when the SizeDiameter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDiameterChanged;
        
        /// <summary>
        /// Gets fired before the SizeLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeLengthChanging;
        
        /// <summary>
        /// Gets fired when the SizeLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeLengthChanged;
        
        /// <summary>
        /// Raises the OrientationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrientationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrientationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrientationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrientationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrientationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeWidthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeWidthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeWidthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeWidthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeWidthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeWidthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeDepthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDepthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDepthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeDepthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDepthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDepthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeDiameterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDiameterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDiameterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeDiameterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDiameterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDiameterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Locations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Specifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpecificationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Specifications", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Specifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpecificationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Specifications", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetInfosCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AssetInfos", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetInfos", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ORIENTATION"))
            {
                return this.Orientation;
            }
            if ((attribute == "SIZEWIDTH"))
            {
                return this.SizeWidth;
            }
            if ((attribute == "SIZEDEPTH"))
            {
                return this.SizeDepth;
            }
            if ((attribute == "SIZEDIAMETER"))
            {
                return this.SizeDiameter;
            }
            if ((attribute == "SIZELENGTH"))
            {
                return this.SizeLength;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LOCATIONS"))
            {
                return this._locations;
            }
            if ((feature == "SPECIFICATIONS"))
            {
                return this._specifications;
            }
            if ((feature == "ASSETINFOS"))
            {
                return this._assetInfos;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ORIENTATION"))
            {
                this.Orientation = ((string)(value));
                return;
            }
            if ((feature == "SIZEWIDTH"))
            {
                this.SizeWidth = ((float)(value));
                return;
            }
            if ((feature == "SIZEDEPTH"))
            {
                this.SizeDepth = ((float)(value));
                return;
            }
            if ((feature == "SIZEDIAMETER"))
            {
                this.SizeDiameter = ((float)(value));
                return;
            }
            if ((feature == "SIZELENGTH"))
            {
                this.SizeLength = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Dimensi" +
                        "onsInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DimensionsInfo class
        /// </summary>
        public class DimensionsInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DimensionsInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DimensionsInfoReferencedElementsCollection(DimensionsInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Locations.Count);
                    count = (count + this._parent.Specifications.Count);
                    count = (count + this._parent.AssetInfos.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Locations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Specifications.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Locations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Specifications.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILocation locationsCasted = item.As<ILocation>();
                if ((locationsCasted != null))
                {
                    this._parent.Locations.Add(locationsCasted);
                }
                ISpecification specificationsCasted = item.As<ISpecification>();
                if ((specificationsCasted != null))
                {
                    this._parent.Specifications.Add(specificationsCasted);
                }
                IAssetInfo assetInfosCasted = item.As<IAssetInfo>();
                if ((assetInfosCasted != null))
                {
                    this._parent.AssetInfos.Add(assetInfosCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Locations.Clear();
                this._parent.Specifications.Clear();
                this._parent.AssetInfos.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Locations.Contains(item))
                {
                    return true;
                }
                if (this._parent.Specifications.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssetInfos.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> locationsEnumerator = this._parent.Locations.GetEnumerator();
                try
                {
                    for (
                    ; locationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> specificationsEnumerator = this._parent.Specifications.GetEnumerator();
                try
                {
                    for (
                    ; specificationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = specificationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    specificationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetInfosEnumerator = this._parent.AssetInfos.GetEnumerator();
                try
                {
                    for (
                    ; assetInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetInfosEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILocation locationItem = item.As<ILocation>();
                if (((locationItem != null) 
                            && this._parent.Locations.Remove(locationItem)))
                {
                    return true;
                }
                ISpecification specificationItem = item.As<ISpecification>();
                if (((specificationItem != null) 
                            && this._parent.Specifications.Remove(specificationItem)))
                {
                    return true;
                }
                IAssetInfo assetInfoItem = item.As<IAssetInfo>();
                if (((assetInfoItem != null) 
                            && this._parent.AssetInfos.Remove(assetInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Locations).Concat(this._parent.Specifications).Concat(this._parent.AssetInfos).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the orientation property
        /// </summary>
        private sealed class OrientationProxy : ModelPropertyChange<IDimensionsInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrientationProxy(IDimensionsInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Orientation;
                }
                set
                {
                    this.ModelElement.Orientation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OrientationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OrientationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sizeWidth property
        /// </summary>
        private sealed class SizeWidthProxy : ModelPropertyChange<IDimensionsInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeWidthProxy(IDimensionsInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SizeWidth;
                }
                set
                {
                    this.ModelElement.SizeWidth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeWidthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeWidthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sizeDepth property
        /// </summary>
        private sealed class SizeDepthProxy : ModelPropertyChange<IDimensionsInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeDepthProxy(IDimensionsInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SizeDepth;
                }
                set
                {
                    this.ModelElement.SizeDepth = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeDepthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeDepthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sizeDiameter property
        /// </summary>
        private sealed class SizeDiameterProxy : ModelPropertyChange<IDimensionsInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeDiameterProxy(IDimensionsInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SizeDiameter;
                }
                set
                {
                    this.ModelElement.SizeDiameter = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeDiameterChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeDiameterChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sizeLength property
        /// </summary>
        private sealed class SizeLengthProxy : ModelPropertyChange<IDimensionsInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeLengthProxy(IDimensionsInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SizeLength;
                }
                set
                {
                    this.ModelElement.SizeLength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeLengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeLengthChanged -= handler;
            }
        }
    }
}

