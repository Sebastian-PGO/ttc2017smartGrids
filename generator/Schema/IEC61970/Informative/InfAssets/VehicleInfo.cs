//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the VehicleInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Vehicle" +
        "Info")]
    [DebuggerDisplayAttribute("VehicleInfo {UUID}")]
    public partial class VehicleInfo : AssetInfo, IVehicleInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the UsageKind property
        /// </summary>
        private Nullable<VehicleUsageKind> _usageKind;
        
        private static Lazy<ITypedElement> _usageKindAttribute = new Lazy<ITypedElement>(RetrieveUsageKindAttribute);
        
        /// <summary>
        /// The backing field for the OdometerReadDateTime property
        /// </summary>
        private DateTime _odometerReadDateTime;
        
        private static Lazy<ITypedElement> _odometerReadDateTimeAttribute = new Lazy<ITypedElement>(RetrieveOdometerReadDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the OdometerReading property
        /// </summary>
        private float _odometerReading;
        
        private static Lazy<ITypedElement> _odometerReadingAttribute = new Lazy<ITypedElement>(RetrieveOdometerReadingAttribute);
        
        private static Lazy<ITypedElement> _crewReference = new Lazy<ITypedElement>(RetrieveCrewReference);
        
        /// <summary>
        /// The backing field for the Crew property
        /// </summary>
        private ICrew _crew;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The usageKind property
        /// </summary>
        [XmlElementNameAttribute("usageKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<VehicleUsageKind> UsageKind
        {
            get
            {
                return this._usageKind;
            }
            set
            {
                if ((this._usageKind != value))
                {
                    Nullable<VehicleUsageKind> old = this._usageKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUsageKindChanging(e);
                    this.OnPropertyChanging("UsageKind", e, _usageKindAttribute);
                    this._usageKind = value;
                    this.OnUsageKindChanged(e);
                    this.OnPropertyChanged("UsageKind", e, _usageKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The odometerReadDateTime property
        /// </summary>
        [XmlElementNameAttribute("odometerReadDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime OdometerReadDateTime
        {
            get
            {
                return this._odometerReadDateTime;
            }
            set
            {
                if ((this._odometerReadDateTime != value))
                {
                    DateTime old = this._odometerReadDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOdometerReadDateTimeChanging(e);
                    this.OnPropertyChanging("OdometerReadDateTime", e, _odometerReadDateTimeAttribute);
                    this._odometerReadDateTime = value;
                    this.OnOdometerReadDateTimeChanged(e);
                    this.OnPropertyChanged("OdometerReadDateTime", e, _odometerReadDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The odometerReading property
        /// </summary>
        [XmlElementNameAttribute("odometerReading")]
        [XmlAttributeAttribute(true)]
        public virtual float OdometerReading
        {
            get
            {
                return this._odometerReading;
            }
            set
            {
                if ((this._odometerReading != value))
                {
                    float old = this._odometerReading;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOdometerReadingChanging(e);
                    this.OnPropertyChanging("OdometerReading", e, _odometerReadingAttribute);
                    this._odometerReading = value;
                    this.OnOdometerReadingChanged(e);
                    this.OnPropertyChanged("OdometerReading", e, _odometerReadingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Crew property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vehicles")]
        public virtual ICrew Crew
        {
            get
            {
                return this._crew;
            }
            set
            {
                if ((this._crew != value))
                {
                    ICrew old = this._crew;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCrewChanging(e);
                    this.OnPropertyChanging("Crew", e, _crewReference);
                    this._crew = value;
                    if ((old != null))
                    {
                        old.Vehicles.Remove(this);
                        old.Deleted -= this.OnResetCrew;
                    }
                    if ((value != null))
                    {
                        value.Vehicles.Add(this);
                        value.Deleted += this.OnResetCrew;
                    }
                    this.OnCrewChanged(e);
                    this.OnPropertyChanged("Crew", e, _crewReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VehicleInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Vehicle" +
                            "Info")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the UsageKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageKindChanging;
        
        /// <summary>
        /// Gets fired when the UsageKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageKindChanged;
        
        /// <summary>
        /// Gets fired before the OdometerReadDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OdometerReadDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the OdometerReadDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OdometerReadDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the OdometerReading property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OdometerReadingChanging;
        
        /// <summary>
        /// Gets fired when the OdometerReading property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OdometerReadingChanged;
        
        /// <summary>
        /// Gets fired before the Crew property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrewChanging;
        
        /// <summary>
        /// Gets fired when the Crew property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrewChanged;
        
        private static ITypedElement RetrieveUsageKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(VehicleInfo.ClassInstance)).Resolve("usageKind")));
        }
        
        /// <summary>
        /// Raises the UsageKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsageKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOdometerReadDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(VehicleInfo.ClassInstance)).Resolve("odometerReadDateTime")));
        }
        
        /// <summary>
        /// Raises the OdometerReadDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOdometerReadDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OdometerReadDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OdometerReadDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOdometerReadDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OdometerReadDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOdometerReadingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(VehicleInfo.ClassInstance)).Resolve("odometerReading")));
        }
        
        /// <summary>
        /// Raises the OdometerReadingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOdometerReadingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OdometerReadingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OdometerReadingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOdometerReadingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OdometerReadingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCrewReference()
        {
            return ((ITypedElement)(((ModelElement)(VehicleInfo.ClassInstance)).Resolve("Crew")));
        }
        
        /// <summary>
        /// Raises the CrewChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrewChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrewChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CrewChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrewChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrewChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Crew property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCrew(object sender, System.EventArgs eventArgs)
        {
            this.Crew = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "USAGEKIND"))
            {
                return this.UsageKind;
            }
            if ((attribute == "ODOMETERREADDATETIME"))
            {
                return this.OdometerReadDateTime;
            }
            if ((attribute == "ODOMETERREADING"))
            {
                return this.OdometerReading;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CREW"))
            {
                this.Crew = ((ICrew)(value));
                return;
            }
            if ((feature == "USAGEKIND"))
            {
                this.UsageKind = ((VehicleUsageKind)(value));
                return;
            }
            if ((feature == "ODOMETERREADDATETIME"))
            {
                this.OdometerReadDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "ODOMETERREADING"))
            {
                this.OdometerReading = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Crew"))
            {
                return new CrewProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Crew"))
            {
                return new CrewProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Vehicle" +
                        "Info")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VehicleInfo class
        /// </summary>
        public class VehicleInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VehicleInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VehicleInfoReferencedElementsCollection(VehicleInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Crew != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CrewChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CrewChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Crew == null))
                {
                    ICrew crewCasted = item.As<ICrew>();
                    if ((crewCasted != null))
                    {
                        this._parent.Crew = crewCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Crew = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Crew))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Crew != null))
                {
                    array[arrayIndex] = this._parent.Crew;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Crew == item))
                {
                    this._parent.Crew = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Crew).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usageKind property
        /// </summary>
        private sealed class UsageKindProxy : ModelPropertyChange<IVehicleInfo, Nullable<VehicleUsageKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageKindProxy(IVehicleInfo modelElement) : 
                    base(modelElement, "usageKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<VehicleUsageKind> Value
            {
                get
                {
                    return this.ModelElement.UsageKind;
                }
                set
                {
                    this.ModelElement.UsageKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the odometerReadDateTime property
        /// </summary>
        private sealed class OdometerReadDateTimeProxy : ModelPropertyChange<IVehicleInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OdometerReadDateTimeProxy(IVehicleInfo modelElement) : 
                    base(modelElement, "odometerReadDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.OdometerReadDateTime;
                }
                set
                {
                    this.ModelElement.OdometerReadDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the odometerReading property
        /// </summary>
        private sealed class OdometerReadingProxy : ModelPropertyChange<IVehicleInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OdometerReadingProxy(IVehicleInfo modelElement) : 
                    base(modelElement, "odometerReading")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OdometerReading;
                }
                set
                {
                    this.ModelElement.OdometerReading = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Crew property
        /// </summary>
        private sealed class CrewProxy : ModelPropertyChange<IVehicleInfo, ICrew>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CrewProxy(IVehicleInfo modelElement) : 
                    base(modelElement, "Crew")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICrew Value
            {
                get
                {
                    return this.ModelElement.Crew;
                }
                set
                {
                    this.ModelElement.Crew = value;
                }
            }
        }
    }
}

