//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the UndergroundStructureInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Undergr" +
        "oundStructureInfo")]
    [DebuggerDisplayAttribute("UndergroundStructureInfo {UUID}")]
    public class UndergroundStructureInfo : StructureInfo, IUndergroundStructureInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Material property
        /// </summary>
        private string _material;
        
        /// <summary>
        /// The backing field for the HasVentilation property
        /// </summary>
        private bool _hasVentilation;
        
        /// <summary>
        /// The backing field for the SealingWarrantyExpiresDate property
        /// </summary>
        private string _sealingWarrantyExpiresDate;
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<UndergroundStructureKind> _kind;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The material property
        /// </summary>
        [XmlElementNameAttribute("material")]
        [XmlAttributeAttribute(true)]
        public virtual string Material
        {
            get
            {
                return this._material;
            }
            set
            {
                if ((this._material != value))
                {
                    string old = this._material;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialChanging(e);
                    this.OnPropertyChanging("Material", e);
                    this._material = value;
                    this.OnMaterialChanged(e);
                    this.OnPropertyChanged("Material", e);
                }
            }
        }
        
        /// <summary>
        /// The hasVentilation property
        /// </summary>
        [XmlElementNameAttribute("hasVentilation")]
        [XmlAttributeAttribute(true)]
        public virtual bool HasVentilation
        {
            get
            {
                return this._hasVentilation;
            }
            set
            {
                if ((this._hasVentilation != value))
                {
                    bool old = this._hasVentilation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHasVentilationChanging(e);
                    this.OnPropertyChanging("HasVentilation", e);
                    this._hasVentilation = value;
                    this.OnHasVentilationChanged(e);
                    this.OnPropertyChanged("HasVentilation", e);
                }
            }
        }
        
        /// <summary>
        /// The sealingWarrantyExpiresDate property
        /// </summary>
        [XmlElementNameAttribute("sealingWarrantyExpiresDate")]
        [XmlAttributeAttribute(true)]
        public virtual string SealingWarrantyExpiresDate
        {
            get
            {
                return this._sealingWarrantyExpiresDate;
            }
            set
            {
                if ((this._sealingWarrantyExpiresDate != value))
                {
                    string old = this._sealingWarrantyExpiresDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSealingWarrantyExpiresDateChanging(e);
                    this.OnPropertyChanging("SealingWarrantyExpiresDate", e);
                    this._sealingWarrantyExpiresDate = value;
                    this.OnSealingWarrantyExpiresDateChanged(e);
                    this.OnPropertyChanged("SealingWarrantyExpiresDate", e);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<UndergroundStructureKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<UndergroundStructureKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Undergr" +
                            "oundStructureInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Material property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanging;
        
        /// <summary>
        /// Gets fired when the Material property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanged;
        
        /// <summary>
        /// Gets fired before the HasVentilation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HasVentilationChanging;
        
        /// <summary>
        /// Gets fired when the HasVentilation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HasVentilationChanged;
        
        /// <summary>
        /// Gets fired before the SealingWarrantyExpiresDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SealingWarrantyExpiresDateChanging;
        
        /// <summary>
        /// Gets fired when the SealingWarrantyExpiresDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SealingWarrantyExpiresDateChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Raises the MaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HasVentilationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHasVentilationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HasVentilationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HasVentilationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHasVentilationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HasVentilationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SealingWarrantyExpiresDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSealingWarrantyExpiresDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SealingWarrantyExpiresDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SealingWarrantyExpiresDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSealingWarrantyExpiresDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SealingWarrantyExpiresDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MATERIAL"))
            {
                return this.Material;
            }
            if ((attribute == "HASVENTILATION"))
            {
                return this.HasVentilation;
            }
            if ((attribute == "SEALINGWARRANTYEXPIRESDATE"))
            {
                return this.SealingWarrantyExpiresDate;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MATERIAL"))
            {
                this.Material = ((string)(value));
                return;
            }
            if ((feature == "HASVENTILATION"))
            {
                this.HasVentilation = ((bool)(value));
                return;
            }
            if ((feature == "SEALINGWARRANTYEXPIRESDATE"))
            {
                this.SealingWarrantyExpiresDate = ((string)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((UndergroundStructureKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Undergr" +
                        "oundStructureInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the material property
        /// </summary>
        private sealed class MaterialProxy : ModelPropertyChange<IUndergroundStructureInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialProxy(IUndergroundStructureInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Material;
                }
                set
                {
                    this.ModelElement.Material = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaterialChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hasVentilation property
        /// </summary>
        private sealed class HasVentilationProxy : ModelPropertyChange<IUndergroundStructureInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HasVentilationProxy(IUndergroundStructureInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.HasVentilation;
                }
                set
                {
                    this.ModelElement.HasVentilation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HasVentilationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HasVentilationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sealingWarrantyExpiresDate property
        /// </summary>
        private sealed class SealingWarrantyExpiresDateProxy : ModelPropertyChange<IUndergroundStructureInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SealingWarrantyExpiresDateProxy(IUndergroundStructureInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SealingWarrantyExpiresDate;
                }
                set
                {
                    this.ModelElement.SealingWarrantyExpiresDate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SealingWarrantyExpiresDateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SealingWarrantyExpiresDateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IUndergroundStructureInfo, Nullable<UndergroundStructureKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IUndergroundStructureInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<UndergroundStructureKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged -= handler;
            }
        }
    }
}

