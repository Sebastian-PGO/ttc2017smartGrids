//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the PotentialTransformerInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Potenti" +
        "alTransformerInfo")]
    [DebuggerDisplayAttribute("PotentialTransformerInfo {UUID}")]
    public partial class PotentialTransformerInfo : ElectricalInfo, IPotentialTransformerInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AccuracyClass property
        /// </summary>
        private string _accuracyClass;
        
        private static Lazy<ITypedElement> _accuracyClassAttribute = new Lazy<ITypedElement>(RetrieveAccuracyClassAttribute);
        
        /// <summary>
        /// The backing field for the PtClass property
        /// </summary>
        private string _ptClass;
        
        private static Lazy<ITypedElement> _ptClassAttribute = new Lazy<ITypedElement>(RetrievePtClassAttribute);
        
        private static Lazy<ITypedElement> _secondaryRatioReference = new Lazy<ITypedElement>(RetrieveSecondaryRatioReference);
        
        /// <summary>
        /// The backing field for the SecondaryRatio property
        /// </summary>
        private IRatio _secondaryRatio;
        
        private static Lazy<ITypedElement> _nominalRatioReference = new Lazy<ITypedElement>(RetrieveNominalRatioReference);
        
        /// <summary>
        /// The backing field for the NominalRatio property
        /// </summary>
        private IRatio _nominalRatio;
        
        private static Lazy<ITypedElement> _primaryRatioReference = new Lazy<ITypedElement>(RetrievePrimaryRatioReference);
        
        /// <summary>
        /// The backing field for the PrimaryRatio property
        /// </summary>
        private IRatio _primaryRatio;
        
        private static Lazy<ITypedElement> _tertiaryRatioReference = new Lazy<ITypedElement>(RetrieveTertiaryRatioReference);
        
        /// <summary>
        /// The backing field for the TertiaryRatio property
        /// </summary>
        private IRatio _tertiaryRatio;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The accuracyClass property
        /// </summary>
        [XmlElementNameAttribute("accuracyClass")]
        [XmlAttributeAttribute(true)]
        public virtual string AccuracyClass
        {
            get
            {
                return this._accuracyClass;
            }
            set
            {
                if ((this._accuracyClass != value))
                {
                    string old = this._accuracyClass;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccuracyClassChanging(e);
                    this.OnPropertyChanging("AccuracyClass", e, _accuracyClassAttribute);
                    this._accuracyClass = value;
                    this.OnAccuracyClassChanged(e);
                    this.OnPropertyChanged("AccuracyClass", e, _accuracyClassAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ptClass property
        /// </summary>
        [XmlElementNameAttribute("ptClass")]
        [XmlAttributeAttribute(true)]
        public virtual string PtClass
        {
            get
            {
                return this._ptClass;
            }
            set
            {
                if ((this._ptClass != value))
                {
                    string old = this._ptClass;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPtClassChanging(e);
                    this.OnPropertyChanging("PtClass", e, _ptClassAttribute);
                    this._ptClass = value;
                    this.OnPtClassChanged(e);
                    this.OnPropertyChanged("PtClass", e, _ptClassAttribute);
                }
            }
        }
        
        /// <summary>
        /// The secondaryRatio property
        /// </summary>
        [XmlElementNameAttribute("secondaryRatio")]
        [XmlAttributeAttribute(true)]
        public virtual IRatio SecondaryRatio
        {
            get
            {
                return this._secondaryRatio;
            }
            set
            {
                if ((this._secondaryRatio != value))
                {
                    IRatio old = this._secondaryRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecondaryRatioChanging(e);
                    this.OnPropertyChanging("SecondaryRatio", e, _secondaryRatioReference);
                    this._secondaryRatio = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSecondaryRatio;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSecondaryRatio;
                    }
                    this.OnSecondaryRatioChanged(e);
                    this.OnPropertyChanged("SecondaryRatio", e, _secondaryRatioReference);
                }
            }
        }
        
        /// <summary>
        /// The nominalRatio property
        /// </summary>
        [XmlElementNameAttribute("nominalRatio")]
        [XmlAttributeAttribute(true)]
        public virtual IRatio NominalRatio
        {
            get
            {
                return this._nominalRatio;
            }
            set
            {
                if ((this._nominalRatio != value))
                {
                    IRatio old = this._nominalRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalRatioChanging(e);
                    this.OnPropertyChanging("NominalRatio", e, _nominalRatioReference);
                    this._nominalRatio = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNominalRatio;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNominalRatio;
                    }
                    this.OnNominalRatioChanged(e);
                    this.OnPropertyChanged("NominalRatio", e, _nominalRatioReference);
                }
            }
        }
        
        /// <summary>
        /// The primaryRatio property
        /// </summary>
        [XmlElementNameAttribute("primaryRatio")]
        [XmlAttributeAttribute(true)]
        public virtual IRatio PrimaryRatio
        {
            get
            {
                return this._primaryRatio;
            }
            set
            {
                if ((this._primaryRatio != value))
                {
                    IRatio old = this._primaryRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrimaryRatioChanging(e);
                    this.OnPropertyChanging("PrimaryRatio", e, _primaryRatioReference);
                    this._primaryRatio = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPrimaryRatio;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPrimaryRatio;
                    }
                    this.OnPrimaryRatioChanged(e);
                    this.OnPropertyChanged("PrimaryRatio", e, _primaryRatioReference);
                }
            }
        }
        
        /// <summary>
        /// The tertiaryRatio property
        /// </summary>
        [XmlElementNameAttribute("tertiaryRatio")]
        [XmlAttributeAttribute(true)]
        public virtual IRatio TertiaryRatio
        {
            get
            {
                return this._tertiaryRatio;
            }
            set
            {
                if ((this._tertiaryRatio != value))
                {
                    IRatio old = this._tertiaryRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTertiaryRatioChanging(e);
                    this.OnPropertyChanging("TertiaryRatio", e, _tertiaryRatioReference);
                    this._tertiaryRatio = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTertiaryRatio;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTertiaryRatio;
                    }
                    this.OnTertiaryRatioChanged(e);
                    this.OnPropertyChanged("TertiaryRatio", e, _tertiaryRatioReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PotentialTransformerInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Potenti" +
                            "alTransformerInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AccuracyClass property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccuracyClassChanging;
        
        /// <summary>
        /// Gets fired when the AccuracyClass property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccuracyClassChanged;
        
        /// <summary>
        /// Gets fired before the PtClass property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtClassChanging;
        
        /// <summary>
        /// Gets fired when the PtClass property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtClassChanged;
        
        /// <summary>
        /// Gets fired before the SecondaryRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondaryRatioChanging;
        
        /// <summary>
        /// Gets fired when the SecondaryRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondaryRatioChanged;
        
        /// <summary>
        /// Gets fired before the NominalRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalRatioChanging;
        
        /// <summary>
        /// Gets fired when the NominalRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalRatioChanged;
        
        /// <summary>
        /// Gets fired before the PrimaryRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrimaryRatioChanging;
        
        /// <summary>
        /// Gets fired when the PrimaryRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrimaryRatioChanged;
        
        /// <summary>
        /// Gets fired before the TertiaryRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TertiaryRatioChanging;
        
        /// <summary>
        /// Gets fired when the TertiaryRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TertiaryRatioChanged;
        
        private static ITypedElement RetrieveAccuracyClassAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("accuracyClass")));
        }
        
        /// <summary>
        /// Raises the AccuracyClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccuracyClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccuracyClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccuracyClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccuracyClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccuracyClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePtClassAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("ptClass")));
        }
        
        /// <summary>
        /// Raises the PtClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PtClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSecondaryRatioReference()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("secondaryRatio")));
        }
        
        /// <summary>
        /// Raises the SecondaryRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondaryRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondaryRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecondaryRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondaryRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondaryRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SecondaryRatio property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecondaryRatio(object sender, System.EventArgs eventArgs)
        {
            this.SecondaryRatio = null;
        }
        
        private static ITypedElement RetrieveNominalRatioReference()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("nominalRatio")));
        }
        
        /// <summary>
        /// Raises the NominalRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NominalRatio property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNominalRatio(object sender, System.EventArgs eventArgs)
        {
            this.NominalRatio = null;
        }
        
        private static ITypedElement RetrievePrimaryRatioReference()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("primaryRatio")));
        }
        
        /// <summary>
        /// Raises the PrimaryRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrimaryRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrimaryRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrimaryRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrimaryRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrimaryRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PrimaryRatio property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPrimaryRatio(object sender, System.EventArgs eventArgs)
        {
            this.PrimaryRatio = null;
        }
        
        private static ITypedElement RetrieveTertiaryRatioReference()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformerInfo.ClassInstance)).Resolve("tertiaryRatio")));
        }
        
        /// <summary>
        /// Raises the TertiaryRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTertiaryRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TertiaryRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TertiaryRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTertiaryRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TertiaryRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TertiaryRatio property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTertiaryRatio(object sender, System.EventArgs eventArgs)
        {
            this.TertiaryRatio = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACCURACYCLASS"))
            {
                return this.AccuracyClass;
            }
            if ((attribute == "PTCLASS"))
            {
                return this.PtClass;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SECONDARYRATIO"))
            {
                this.SecondaryRatio = ((IRatio)(value));
                return;
            }
            if ((feature == "NOMINALRATIO"))
            {
                this.NominalRatio = ((IRatio)(value));
                return;
            }
            if ((feature == "PRIMARYRATIO"))
            {
                this.PrimaryRatio = ((IRatio)(value));
                return;
            }
            if ((feature == "TERTIARYRATIO"))
            {
                this.TertiaryRatio = ((IRatio)(value));
                return;
            }
            if ((feature == "ACCURACYCLASS"))
            {
                this.AccuracyClass = ((string)(value));
                return;
            }
            if ((feature == "PTCLASS"))
            {
                this.PtClass = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SecondaryRatio"))
            {
                return new SecondaryRatioProxy(this);
            }
            if ((attribute == "NominalRatio"))
            {
                return new NominalRatioProxy(this);
            }
            if ((attribute == "PrimaryRatio"))
            {
                return new PrimaryRatioProxy(this);
            }
            if ((attribute == "TertiaryRatio"))
            {
                return new TertiaryRatioProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SecondaryRatio"))
            {
                return new SecondaryRatioProxy(this);
            }
            if ((reference == "NominalRatio"))
            {
                return new NominalRatioProxy(this);
            }
            if ((reference == "PrimaryRatio"))
            {
                return new PrimaryRatioProxy(this);
            }
            if ((reference == "TertiaryRatio"))
            {
                return new TertiaryRatioProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Potenti" +
                        "alTransformerInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PotentialTransformerInfo class
        /// </summary>
        public class PotentialTransformerInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PotentialTransformerInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PotentialTransformerInfoReferencedElementsCollection(PotentialTransformerInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SecondaryRatio != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalRatio != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PrimaryRatio != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TertiaryRatio != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SecondaryRatioChanged += this.PropagateValueChanges;
                this._parent.NominalRatioChanged += this.PropagateValueChanges;
                this._parent.PrimaryRatioChanged += this.PropagateValueChanges;
                this._parent.TertiaryRatioChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SecondaryRatioChanged -= this.PropagateValueChanges;
                this._parent.NominalRatioChanged -= this.PropagateValueChanges;
                this._parent.PrimaryRatioChanged -= this.PropagateValueChanges;
                this._parent.TertiaryRatioChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SecondaryRatio == null))
                {
                    IRatio secondaryRatioCasted = item.As<IRatio>();
                    if ((secondaryRatioCasted != null))
                    {
                        this._parent.SecondaryRatio = secondaryRatioCasted;
                        return;
                    }
                }
                if ((this._parent.NominalRatio == null))
                {
                    IRatio nominalRatioCasted = item.As<IRatio>();
                    if ((nominalRatioCasted != null))
                    {
                        this._parent.NominalRatio = nominalRatioCasted;
                        return;
                    }
                }
                if ((this._parent.PrimaryRatio == null))
                {
                    IRatio primaryRatioCasted = item.As<IRatio>();
                    if ((primaryRatioCasted != null))
                    {
                        this._parent.PrimaryRatio = primaryRatioCasted;
                        return;
                    }
                }
                if ((this._parent.TertiaryRatio == null))
                {
                    IRatio tertiaryRatioCasted = item.As<IRatio>();
                    if ((tertiaryRatioCasted != null))
                    {
                        this._parent.TertiaryRatio = tertiaryRatioCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SecondaryRatio = null;
                this._parent.NominalRatio = null;
                this._parent.PrimaryRatio = null;
                this._parent.TertiaryRatio = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SecondaryRatio))
                {
                    return true;
                }
                if ((item == this._parent.NominalRatio))
                {
                    return true;
                }
                if ((item == this._parent.PrimaryRatio))
                {
                    return true;
                }
                if ((item == this._parent.TertiaryRatio))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SecondaryRatio != null))
                {
                    array[arrayIndex] = this._parent.SecondaryRatio;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalRatio != null))
                {
                    array[arrayIndex] = this._parent.NominalRatio;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PrimaryRatio != null))
                {
                    array[arrayIndex] = this._parent.PrimaryRatio;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TertiaryRatio != null))
                {
                    array[arrayIndex] = this._parent.TertiaryRatio;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SecondaryRatio == item))
                {
                    this._parent.SecondaryRatio = null;
                    return true;
                }
                if ((this._parent.NominalRatio == item))
                {
                    this._parent.NominalRatio = null;
                    return true;
                }
                if ((this._parent.PrimaryRatio == item))
                {
                    this._parent.PrimaryRatio = null;
                    return true;
                }
                if ((this._parent.TertiaryRatio == item))
                {
                    this._parent.TertiaryRatio = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SecondaryRatio).Concat(this._parent.NominalRatio).Concat(this._parent.PrimaryRatio).Concat(this._parent.TertiaryRatio).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accuracyClass property
        /// </summary>
        private sealed class AccuracyClassProxy : ModelPropertyChange<IPotentialTransformerInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccuracyClassProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "accuracyClass")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccuracyClass;
                }
                set
                {
                    this.ModelElement.AccuracyClass = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ptClass property
        /// </summary>
        private sealed class PtClassProxy : ModelPropertyChange<IPotentialTransformerInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PtClassProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "ptClass")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PtClass;
                }
                set
                {
                    this.ModelElement.PtClass = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the secondaryRatio property
        /// </summary>
        private sealed class SecondaryRatioProxy : ModelPropertyChange<IPotentialTransformerInfo, IRatio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecondaryRatioProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "secondaryRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatio Value
            {
                get
                {
                    return this.ModelElement.SecondaryRatio;
                }
                set
                {
                    this.ModelElement.SecondaryRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalRatio property
        /// </summary>
        private sealed class NominalRatioProxy : ModelPropertyChange<IPotentialTransformerInfo, IRatio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalRatioProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "nominalRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatio Value
            {
                get
                {
                    return this.ModelElement.NominalRatio;
                }
                set
                {
                    this.ModelElement.NominalRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the primaryRatio property
        /// </summary>
        private sealed class PrimaryRatioProxy : ModelPropertyChange<IPotentialTransformerInfo, IRatio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrimaryRatioProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "primaryRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatio Value
            {
                get
                {
                    return this.ModelElement.PrimaryRatio;
                }
                set
                {
                    this.ModelElement.PrimaryRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tertiaryRatio property
        /// </summary>
        private sealed class TertiaryRatioProxy : ModelPropertyChange<IPotentialTransformerInfo, IRatio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TertiaryRatioProxy(IPotentialTransformerInfo modelElement) : 
                    base(modelElement, "tertiaryRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatio Value
            {
                get
                {
                    return this.ModelElement.TertiaryRatio;
                }
                set
                {
                    this.ModelElement.TertiaryRatio = value;
                }
            }
        }
    }
}

