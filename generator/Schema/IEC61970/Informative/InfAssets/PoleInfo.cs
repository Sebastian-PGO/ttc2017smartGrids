//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the PoleInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PoleInf" +
        "o")]
    [DebuggerDisplayAttribute("PoleInfo {UUID}")]
    public class PoleInfo : StructureInfo, IPoleInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TreatedDateTime property
        /// </summary>
        private DateTime _treatedDateTime;
        
        /// <summary>
        /// The backing field for the BreastBlock property
        /// </summary>
        private bool _breastBlock;
        
        /// <summary>
        /// The backing field for the Classification property
        /// </summary>
        private string _classification;
        
        /// <summary>
        /// The backing field for the PreservativeKind property
        /// </summary>
        private Nullable<PolePreservativeKind> _preservativeKind;
        
        /// <summary>
        /// The backing field for the JpaReference property
        /// </summary>
        private string _jpaReference;
        
        /// <summary>
        /// The backing field for the BaseKind property
        /// </summary>
        private Nullable<PoleBaseKind> _baseKind;
        
        /// <summary>
        /// The backing field for the Diameter property
        /// </summary>
        private float _diameter;
        
        /// <summary>
        /// The backing field for the TreatmentKind property
        /// </summary>
        private Nullable<PoleTreatmentKind> _treatmentKind;
        
        /// <summary>
        /// The backing field for the Construction property
        /// </summary>
        private string _construction;
        
        /// <summary>
        /// The backing field for the Length property
        /// </summary>
        private float _length;
        
        /// <summary>
        /// The backing field for the SpeciesType property
        /// </summary>
        private string _speciesType;
        
        /// <summary>
        /// The backing field for the Streetlights property
        /// </summary>
        private PoleInfoStreetlightsCollection _streetlights;
        
        private static IClass _classInstance;
        
        public PoleInfo()
        {
            this._streetlights = new PoleInfoStreetlightsCollection(this);
            this._streetlights.CollectionChanging += this.StreetlightsCollectionChanging;
            this._streetlights.CollectionChanged += this.StreetlightsCollectionChanged;
        }
        
        /// <summary>
        /// The treatedDateTime property
        /// </summary>
        [XmlElementNameAttribute("treatedDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TreatedDateTime
        {
            get
            {
                return this._treatedDateTime;
            }
            set
            {
                if ((this._treatedDateTime != value))
                {
                    DateTime old = this._treatedDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTreatedDateTimeChanging(e);
                    this.OnPropertyChanging("TreatedDateTime", e);
                    this._treatedDateTime = value;
                    this.OnTreatedDateTimeChanged(e);
                    this.OnPropertyChanged("TreatedDateTime", e);
                }
            }
        }
        
        /// <summary>
        /// The breastBlock property
        /// </summary>
        [XmlElementNameAttribute("breastBlock")]
        [XmlAttributeAttribute(true)]
        public virtual bool BreastBlock
        {
            get
            {
                return this._breastBlock;
            }
            set
            {
                if ((this._breastBlock != value))
                {
                    bool old = this._breastBlock;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBreastBlockChanging(e);
                    this.OnPropertyChanging("BreastBlock", e);
                    this._breastBlock = value;
                    this.OnBreastBlockChanged(e);
                    this.OnPropertyChanged("BreastBlock", e);
                }
            }
        }
        
        /// <summary>
        /// The classification property
        /// </summary>
        [XmlElementNameAttribute("classification")]
        [XmlAttributeAttribute(true)]
        public virtual string Classification
        {
            get
            {
                return this._classification;
            }
            set
            {
                if ((this._classification != value))
                {
                    string old = this._classification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassificationChanging(e);
                    this.OnPropertyChanging("Classification", e);
                    this._classification = value;
                    this.OnClassificationChanged(e);
                    this.OnPropertyChanged("Classification", e);
                }
            }
        }
        
        /// <summary>
        /// The preservativeKind property
        /// </summary>
        [XmlElementNameAttribute("preservativeKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PolePreservativeKind> PreservativeKind
        {
            get
            {
                return this._preservativeKind;
            }
            set
            {
                if ((this._preservativeKind != value))
                {
                    Nullable<PolePreservativeKind> old = this._preservativeKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreservativeKindChanging(e);
                    this.OnPropertyChanging("PreservativeKind", e);
                    this._preservativeKind = value;
                    this.OnPreservativeKindChanged(e);
                    this.OnPropertyChanged("PreservativeKind", e);
                }
            }
        }
        
        /// <summary>
        /// The jpaReference property
        /// </summary>
        [XmlElementNameAttribute("jpaReference")]
        [XmlAttributeAttribute(true)]
        public virtual string JpaReference
        {
            get
            {
                return this._jpaReference;
            }
            set
            {
                if ((this._jpaReference != value))
                {
                    string old = this._jpaReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnJpaReferenceChanging(e);
                    this.OnPropertyChanging("JpaReference", e);
                    this._jpaReference = value;
                    this.OnJpaReferenceChanged(e);
                    this.OnPropertyChanged("JpaReference", e);
                }
            }
        }
        
        /// <summary>
        /// The baseKind property
        /// </summary>
        [XmlElementNameAttribute("baseKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PoleBaseKind> BaseKind
        {
            get
            {
                return this._baseKind;
            }
            set
            {
                if ((this._baseKind != value))
                {
                    Nullable<PoleBaseKind> old = this._baseKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseKindChanging(e);
                    this.OnPropertyChanging("BaseKind", e);
                    this._baseKind = value;
                    this.OnBaseKindChanged(e);
                    this.OnPropertyChanged("BaseKind", e);
                }
            }
        }
        
        /// <summary>
        /// The diameter property
        /// </summary>
        [XmlElementNameAttribute("diameter")]
        [XmlAttributeAttribute(true)]
        public virtual float Diameter
        {
            get
            {
                return this._diameter;
            }
            set
            {
                if ((this._diameter != value))
                {
                    float old = this._diameter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiameterChanging(e);
                    this.OnPropertyChanging("Diameter", e);
                    this._diameter = value;
                    this.OnDiameterChanged(e);
                    this.OnPropertyChanged("Diameter", e);
                }
            }
        }
        
        /// <summary>
        /// The treatmentKind property
        /// </summary>
        [XmlElementNameAttribute("treatmentKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PoleTreatmentKind> TreatmentKind
        {
            get
            {
                return this._treatmentKind;
            }
            set
            {
                if ((this._treatmentKind != value))
                {
                    Nullable<PoleTreatmentKind> old = this._treatmentKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTreatmentKindChanging(e);
                    this.OnPropertyChanging("TreatmentKind", e);
                    this._treatmentKind = value;
                    this.OnTreatmentKindChanged(e);
                    this.OnPropertyChanged("TreatmentKind", e);
                }
            }
        }
        
        /// <summary>
        /// The construction property
        /// </summary>
        [XmlElementNameAttribute("construction")]
        [XmlAttributeAttribute(true)]
        public virtual string Construction
        {
            get
            {
                return this._construction;
            }
            set
            {
                if ((this._construction != value))
                {
                    string old = this._construction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConstructionChanging(e);
                    this.OnPropertyChanging("Construction", e);
                    this._construction = value;
                    this.OnConstructionChanged(e);
                    this.OnPropertyChanged("Construction", e);
                }
            }
        }
        
        /// <summary>
        /// The length property
        /// </summary>
        [XmlElementNameAttribute("length")]
        [XmlAttributeAttribute(true)]
        public virtual float Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    float old = this._length;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLengthChanging(e);
                    this.OnPropertyChanging("Length", e);
                    this._length = value;
                    this.OnLengthChanged(e);
                    this.OnPropertyChanged("Length", e);
                }
            }
        }
        
        /// <summary>
        /// The speciesType property
        /// </summary>
        [XmlElementNameAttribute("speciesType")]
        [XmlAttributeAttribute(true)]
        public virtual string SpeciesType
        {
            get
            {
                return this._speciesType;
            }
            set
            {
                if ((this._speciesType != value))
                {
                    string old = this._speciesType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpeciesTypeChanging(e);
                    this.OnPropertyChanging("SpeciesType", e);
                    this._speciesType = value;
                    this.OnSpeciesTypeChanged(e);
                    this.OnPropertyChanged("SpeciesType", e);
                }
            }
        }
        
        /// <summary>
        /// The Streetlights property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pole")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IStreetlightInfo> Streetlights
        {
            get
            {
                return this._streetlights;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PoleInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PoleInf" +
                            "o")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TreatedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreatedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TreatedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreatedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the BreastBlock property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BreastBlockChanging;
        
        /// <summary>
        /// Gets fired when the BreastBlock property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BreastBlockChanged;
        
        /// <summary>
        /// Gets fired before the Classification property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassificationChanging;
        
        /// <summary>
        /// Gets fired when the Classification property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassificationChanged;
        
        /// <summary>
        /// Gets fired before the PreservativeKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreservativeKindChanging;
        
        /// <summary>
        /// Gets fired when the PreservativeKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreservativeKindChanged;
        
        /// <summary>
        /// Gets fired before the JpaReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JpaReferenceChanging;
        
        /// <summary>
        /// Gets fired when the JpaReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JpaReferenceChanged;
        
        /// <summary>
        /// Gets fired before the BaseKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseKindChanging;
        
        /// <summary>
        /// Gets fired when the BaseKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseKindChanged;
        
        /// <summary>
        /// Gets fired before the Diameter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterChanging;
        
        /// <summary>
        /// Gets fired when the Diameter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiameterChanged;
        
        /// <summary>
        /// Gets fired before the TreatmentKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreatmentKindChanging;
        
        /// <summary>
        /// Gets fired when the TreatmentKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TreatmentKindChanged;
        
        /// <summary>
        /// Gets fired before the Construction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionChanging;
        
        /// <summary>
        /// Gets fired when the Construction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionChanged;
        
        /// <summary>
        /// Gets fired before the Length property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LengthChanging;
        
        /// <summary>
        /// Gets fired when the Length property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LengthChanged;
        
        /// <summary>
        /// Gets fired before the SpeciesType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeciesTypeChanging;
        
        /// <summary>
        /// Gets fired when the SpeciesType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeciesTypeChanged;
        
        /// <summary>
        /// Raises the TreatedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreatedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreatedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TreatedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreatedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreatedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BreastBlockChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBreastBlockChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BreastBlockChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BreastBlockChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBreastBlockChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BreastBlockChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassificationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassificationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreservativeKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreservativeKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreservativeKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreservativeKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreservativeKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreservativeKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JpaReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJpaReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JpaReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JpaReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJpaReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JpaReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiameterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiameterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiameterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TreatmentKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreatmentKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreatmentKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TreatmentKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTreatmentKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TreatmentKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpeciesTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeciesTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeciesTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpeciesTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeciesTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeciesTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Streetlights property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StreetlightsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Streetlights", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Streetlights property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StreetlightsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Streetlights", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TREATEDDATETIME"))
            {
                return this.TreatedDateTime;
            }
            if ((attribute == "BREASTBLOCK"))
            {
                return this.BreastBlock;
            }
            if ((attribute == "CLASSIFICATION"))
            {
                return this.Classification;
            }
            if ((attribute == "PRESERVATIVEKIND"))
            {
                return this.PreservativeKind;
            }
            if ((attribute == "JPAREFERENCE"))
            {
                return this.JpaReference;
            }
            if ((attribute == "BASEKIND"))
            {
                return this.BaseKind;
            }
            if ((attribute == "DIAMETER"))
            {
                return this.Diameter;
            }
            if ((attribute == "TREATMENTKIND"))
            {
                return this.TreatmentKind;
            }
            if ((attribute == "CONSTRUCTION"))
            {
                return this.Construction;
            }
            if ((attribute == "LENGTH"))
            {
                return this.Length;
            }
            if ((attribute == "SPECIESTYPE"))
            {
                return this.SpeciesType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STREETLIGHTS"))
            {
                return this._streetlights;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TREATEDDATETIME"))
            {
                this.TreatedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "BREASTBLOCK"))
            {
                this.BreastBlock = ((bool)(value));
                return;
            }
            if ((feature == "CLASSIFICATION"))
            {
                this.Classification = ((string)(value));
                return;
            }
            if ((feature == "PRESERVATIVEKIND"))
            {
                this.PreservativeKind = ((PolePreservativeKind)(value));
                return;
            }
            if ((feature == "JPAREFERENCE"))
            {
                this.JpaReference = ((string)(value));
                return;
            }
            if ((feature == "BASEKIND"))
            {
                this.BaseKind = ((PoleBaseKind)(value));
                return;
            }
            if ((feature == "DIAMETER"))
            {
                this.Diameter = ((float)(value));
                return;
            }
            if ((feature == "TREATMENTKIND"))
            {
                this.TreatmentKind = ((PoleTreatmentKind)(value));
                return;
            }
            if ((feature == "CONSTRUCTION"))
            {
                this.Construction = ((string)(value));
                return;
            }
            if ((feature == "LENGTH"))
            {
                this.Length = ((float)(value));
                return;
            }
            if ((feature == "SPECIESTYPE"))
            {
                this.SpeciesType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PoleInf" +
                        "o")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PoleInfo class
        /// </summary>
        public class PoleInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PoleInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PoleInfoReferencedElementsCollection(PoleInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Streetlights.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Streetlights.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Streetlights.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IStreetlightInfo streetlightsCasted = item.As<IStreetlightInfo>();
                if ((streetlightsCasted != null))
                {
                    this._parent.Streetlights.Add(streetlightsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Streetlights.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Streetlights.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> streetlightsEnumerator = this._parent.Streetlights.GetEnumerator();
                try
                {
                    for (
                    ; streetlightsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = streetlightsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    streetlightsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IStreetlightInfo streetlightInfoItem = item.As<IStreetlightInfo>();
                if (((streetlightInfoItem != null) 
                            && this._parent.Streetlights.Remove(streetlightInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Streetlights).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the treatedDateTime property
        /// </summary>
        private sealed class TreatedDateTimeProxy : ModelPropertyChange<IPoleInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TreatedDateTimeProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TreatedDateTime;
                }
                set
                {
                    this.ModelElement.TreatedDateTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TreatedDateTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TreatedDateTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the breastBlock property
        /// </summary>
        private sealed class BreastBlockProxy : ModelPropertyChange<IPoleInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BreastBlockProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.BreastBlock;
                }
                set
                {
                    this.ModelElement.BreastBlock = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BreastBlockChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BreastBlockChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classification property
        /// </summary>
        private sealed class ClassificationProxy : ModelPropertyChange<IPoleInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassificationProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classification;
                }
                set
                {
                    this.ModelElement.Classification = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassificationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassificationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the preservativeKind property
        /// </summary>
        private sealed class PreservativeKindProxy : ModelPropertyChange<IPoleInfo, Nullable<PolePreservativeKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreservativeKindProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PolePreservativeKind> Value
            {
                get
                {
                    return this.ModelElement.PreservativeKind;
                }
                set
                {
                    this.ModelElement.PreservativeKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreservativeKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreservativeKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the jpaReference property
        /// </summary>
        private sealed class JpaReferenceProxy : ModelPropertyChange<IPoleInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public JpaReferenceProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.JpaReference;
                }
                set
                {
                    this.ModelElement.JpaReference = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JpaReferenceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JpaReferenceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the baseKind property
        /// </summary>
        private sealed class BaseKindProxy : ModelPropertyChange<IPoleInfo, Nullable<PoleBaseKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseKindProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PoleBaseKind> Value
            {
                get
                {
                    return this.ModelElement.BaseKind;
                }
                set
                {
                    this.ModelElement.BaseKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BaseKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the diameter property
        /// </summary>
        private sealed class DiameterProxy : ModelPropertyChange<IPoleInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiameterProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Diameter;
                }
                set
                {
                    this.ModelElement.Diameter = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DiameterChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the treatmentKind property
        /// </summary>
        private sealed class TreatmentKindProxy : ModelPropertyChange<IPoleInfo, Nullable<PoleTreatmentKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TreatmentKindProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PoleTreatmentKind> Value
            {
                get
                {
                    return this.ModelElement.TreatmentKind;
                }
                set
                {
                    this.ModelElement.TreatmentKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TreatmentKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TreatmentKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the construction property
        /// </summary>
        private sealed class ConstructionProxy : ModelPropertyChange<IPoleInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConstructionProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Construction;
                }
                set
                {
                    this.ModelElement.Construction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the length property
        /// </summary>
        private sealed class LengthProxy : ModelPropertyChange<IPoleInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LengthProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Length;
                }
                set
                {
                    this.ModelElement.Length = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the speciesType property
        /// </summary>
        private sealed class SpeciesTypeProxy : ModelPropertyChange<IPoleInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpeciesTypeProxy(IPoleInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SpeciesType;
                }
                set
                {
                    this.ModelElement.SpeciesType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpeciesTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpeciesTypeChanged -= handler;
            }
        }
    }
}

