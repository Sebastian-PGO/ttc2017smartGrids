//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the ShuntImpedanceInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/ShuntIm" +
        "pedanceInfo")]
    [DebuggerDisplayAttribute("ShuntImpedanceInfo {UUID}")]
    public partial class ShuntImpedanceInfo : ElectricalInfo, IShuntImpedanceInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LowVoltageOverride property
        /// </summary>
        private float _lowVoltageOverride;
        
        private static Lazy<ITypedElement> _lowVoltageOverrideAttribute = new Lazy<ITypedElement>(RetrieveLowVoltageOverrideAttribute);
        
        /// <summary>
        /// The backing field for the CellSize property
        /// </summary>
        private float _cellSize;
        
        private static Lazy<ITypedElement> _cellSizeAttribute = new Lazy<ITypedElement>(RetrieveCellSizeAttribute);
        
        /// <summary>
        /// The backing field for the HighVoltageOverride property
        /// </summary>
        private float _highVoltageOverride;
        
        private static Lazy<ITypedElement> _highVoltageOverrideAttribute = new Lazy<ITypedElement>(RetrieveHighVoltageOverrideAttribute);
        
        /// <summary>
        /// The backing field for the RegBranchKind property
        /// </summary>
        private Nullable<RegulationBranchKind> _regBranchKind;
        
        private static Lazy<ITypedElement> _regBranchKindAttribute = new Lazy<ITypedElement>(RetrieveRegBranchKindAttribute);
        
        /// <summary>
        /// The backing field for the NormalOpen property
        /// </summary>
        private bool _normalOpen;
        
        private static Lazy<ITypedElement> _normalOpenAttribute = new Lazy<ITypedElement>(RetrieveNormalOpenAttribute);
        
        /// <summary>
        /// The backing field for the RegBranchEnd property
        /// </summary>
        private int _regBranchEnd;
        
        private static Lazy<ITypedElement> _regBranchEndAttribute = new Lazy<ITypedElement>(RetrieveRegBranchEndAttribute);
        
        /// <summary>
        /// The backing field for the VRegLineLine property
        /// </summary>
        private bool _vRegLineLine;
        
        private static Lazy<ITypedElement> _vRegLineLineAttribute = new Lazy<ITypedElement>(RetrieveVRegLineLineAttribute);
        
        /// <summary>
        /// The backing field for the SwitchOperationCycle property
        /// </summary>
        private float _switchOperationCycle;
        
        private static Lazy<ITypedElement> _switchOperationCycleAttribute = new Lazy<ITypedElement>(RetrieveSwitchOperationCycleAttribute);
        
        /// <summary>
        /// The backing field for the LocalOffLevel property
        /// </summary>
        private string _localOffLevel;
        
        private static Lazy<ITypedElement> _localOffLevelAttribute = new Lazy<ITypedElement>(RetrieveLocalOffLevelAttribute);
        
        /// <summary>
        /// The backing field for the SensingPhaseCode property
        /// </summary>
        private Nullable<PhaseCode> _sensingPhaseCode;
        
        private static Lazy<ITypedElement> _sensingPhaseCodeAttribute = new Lazy<ITypedElement>(RetrieveSensingPhaseCodeAttribute);
        
        /// <summary>
        /// The backing field for the LocalControlKind property
        /// </summary>
        private Nullable<ShuntImpedanceLocalControlKind> _localControlKind;
        
        private static Lazy<ITypedElement> _localControlKindAttribute = new Lazy<ITypedElement>(RetrieveLocalControlKindAttribute);
        
        /// <summary>
        /// The backing field for the BranchDirect property
        /// </summary>
        private int _branchDirect;
        
        private static Lazy<ITypedElement> _branchDirectAttribute = new Lazy<ITypedElement>(RetrieveBranchDirectAttribute);
        
        /// <summary>
        /// The backing field for the MaxSwitchOperationCount property
        /// </summary>
        private int _maxSwitchOperationCount;
        
        private static Lazy<ITypedElement> _maxSwitchOperationCountAttribute = new Lazy<ITypedElement>(RetrieveMaxSwitchOperationCountAttribute);
        
        /// <summary>
        /// The backing field for the LocalOverride property
        /// </summary>
        private bool _localOverride;
        
        private static Lazy<ITypedElement> _localOverrideAttribute = new Lazy<ITypedElement>(RetrieveLocalOverrideAttribute);
        
        /// <summary>
        /// The backing field for the LocalOnLevel property
        /// </summary>
        private string _localOnLevel;
        
        private static Lazy<ITypedElement> _localOnLevelAttribute = new Lazy<ITypedElement>(RetrieveLocalOnLevelAttribute);
        
        /// <summary>
        /// The backing field for the RegBranch property
        /// </summary>
        private string _regBranch;
        
        private static Lazy<ITypedElement> _regBranchAttribute = new Lazy<ITypedElement>(RetrieveRegBranchAttribute);
        
        /// <summary>
        /// The backing field for the ControlKind property
        /// </summary>
        private Nullable<ShuntImpedanceControlKind> _controlKind;
        
        private static Lazy<ITypedElement> _controlKindAttribute = new Lazy<ITypedElement>(RetrieveControlKindAttribute);
        
        private static Lazy<ITypedElement> _shuntCompensatorInfosReference = new Lazy<ITypedElement>(RetrieveShuntCompensatorInfosReference);
        
        /// <summary>
        /// The backing field for the ShuntCompensatorInfos property
        /// </summary>
        private ShuntImpedanceInfoShuntCompensatorInfosCollection _shuntCompensatorInfos;
        
        private static IClass _classInstance;
        
        public ShuntImpedanceInfo()
        {
            this._shuntCompensatorInfos = new ShuntImpedanceInfoShuntCompensatorInfosCollection(this);
            this._shuntCompensatorInfos.CollectionChanging += this.ShuntCompensatorInfosCollectionChanging;
            this._shuntCompensatorInfos.CollectionChanged += this.ShuntCompensatorInfosCollectionChanged;
        }
        
        /// <summary>
        /// The lowVoltageOverride property
        /// </summary>
        [XmlElementNameAttribute("lowVoltageOverride")]
        [XmlAttributeAttribute(true)]
        public virtual float LowVoltageOverride
        {
            get
            {
                return this._lowVoltageOverride;
            }
            set
            {
                if ((this._lowVoltageOverride != value))
                {
                    float old = this._lowVoltageOverride;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowVoltageOverrideChanging(e);
                    this.OnPropertyChanging("LowVoltageOverride", e, _lowVoltageOverrideAttribute);
                    this._lowVoltageOverride = value;
                    this.OnLowVoltageOverrideChanged(e);
                    this.OnPropertyChanged("LowVoltageOverride", e, _lowVoltageOverrideAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cellSize property
        /// </summary>
        [XmlElementNameAttribute("cellSize")]
        [XmlAttributeAttribute(true)]
        public virtual float CellSize
        {
            get
            {
                return this._cellSize;
            }
            set
            {
                if ((this._cellSize != value))
                {
                    float old = this._cellSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCellSizeChanging(e);
                    this.OnPropertyChanging("CellSize", e, _cellSizeAttribute);
                    this._cellSize = value;
                    this.OnCellSizeChanged(e);
                    this.OnPropertyChanged("CellSize", e, _cellSizeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The highVoltageOverride property
        /// </summary>
        [XmlElementNameAttribute("highVoltageOverride")]
        [XmlAttributeAttribute(true)]
        public virtual float HighVoltageOverride
        {
            get
            {
                return this._highVoltageOverride;
            }
            set
            {
                if ((this._highVoltageOverride != value))
                {
                    float old = this._highVoltageOverride;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighVoltageOverrideChanging(e);
                    this.OnPropertyChanging("HighVoltageOverride", e, _highVoltageOverrideAttribute);
                    this._highVoltageOverride = value;
                    this.OnHighVoltageOverrideChanged(e);
                    this.OnPropertyChanged("HighVoltageOverride", e, _highVoltageOverrideAttribute);
                }
            }
        }
        
        /// <summary>
        /// The regBranchKind property
        /// </summary>
        [XmlElementNameAttribute("regBranchKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<RegulationBranchKind> RegBranchKind
        {
            get
            {
                return this._regBranchKind;
            }
            set
            {
                if ((this._regBranchKind != value))
                {
                    Nullable<RegulationBranchKind> old = this._regBranchKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegBranchKindChanging(e);
                    this.OnPropertyChanging("RegBranchKind", e, _regBranchKindAttribute);
                    this._regBranchKind = value;
                    this.OnRegBranchKindChanged(e);
                    this.OnPropertyChanged("RegBranchKind", e, _regBranchKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The normalOpen property
        /// </summary>
        [XmlElementNameAttribute("normalOpen")]
        [XmlAttributeAttribute(true)]
        public virtual bool NormalOpen
        {
            get
            {
                return this._normalOpen;
            }
            set
            {
                if ((this._normalOpen != value))
                {
                    bool old = this._normalOpen;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalOpenChanging(e);
                    this.OnPropertyChanging("NormalOpen", e, _normalOpenAttribute);
                    this._normalOpen = value;
                    this.OnNormalOpenChanged(e);
                    this.OnPropertyChanged("NormalOpen", e, _normalOpenAttribute);
                }
            }
        }
        
        /// <summary>
        /// The regBranchEnd property
        /// </summary>
        [XmlElementNameAttribute("regBranchEnd")]
        [XmlAttributeAttribute(true)]
        public virtual int RegBranchEnd
        {
            get
            {
                return this._regBranchEnd;
            }
            set
            {
                if ((this._regBranchEnd != value))
                {
                    int old = this._regBranchEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegBranchEndChanging(e);
                    this.OnPropertyChanging("RegBranchEnd", e, _regBranchEndAttribute);
                    this._regBranchEnd = value;
                    this.OnRegBranchEndChanged(e);
                    this.OnPropertyChanged("RegBranchEnd", e, _regBranchEndAttribute);
                }
            }
        }
        
        /// <summary>
        /// The vRegLineLine property
        /// </summary>
        [XmlElementNameAttribute("vRegLineLine")]
        [XmlAttributeAttribute(true)]
        public virtual bool VRegLineLine
        {
            get
            {
                return this._vRegLineLine;
            }
            set
            {
                if ((this._vRegLineLine != value))
                {
                    bool old = this._vRegLineLine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVRegLineLineChanging(e);
                    this.OnPropertyChanging("VRegLineLine", e, _vRegLineLineAttribute);
                    this._vRegLineLine = value;
                    this.OnVRegLineLineChanged(e);
                    this.OnPropertyChanged("VRegLineLine", e, _vRegLineLineAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchOperationCycle property
        /// </summary>
        [XmlElementNameAttribute("switchOperationCycle")]
        [XmlAttributeAttribute(true)]
        public virtual float SwitchOperationCycle
        {
            get
            {
                return this._switchOperationCycle;
            }
            set
            {
                if ((this._switchOperationCycle != value))
                {
                    float old = this._switchOperationCycle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOperationCycleChanging(e);
                    this.OnPropertyChanging("SwitchOperationCycle", e, _switchOperationCycleAttribute);
                    this._switchOperationCycle = value;
                    this.OnSwitchOperationCycleChanged(e);
                    this.OnPropertyChanged("SwitchOperationCycle", e, _switchOperationCycleAttribute);
                }
            }
        }
        
        /// <summary>
        /// The localOffLevel property
        /// </summary>
        [XmlElementNameAttribute("localOffLevel")]
        [XmlAttributeAttribute(true)]
        public virtual string LocalOffLevel
        {
            get
            {
                return this._localOffLevel;
            }
            set
            {
                if ((this._localOffLevel != value))
                {
                    string old = this._localOffLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalOffLevelChanging(e);
                    this.OnPropertyChanging("LocalOffLevel", e, _localOffLevelAttribute);
                    this._localOffLevel = value;
                    this.OnLocalOffLevelChanged(e);
                    this.OnPropertyChanged("LocalOffLevel", e, _localOffLevelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sensingPhaseCode property
        /// </summary>
        [XmlElementNameAttribute("sensingPhaseCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> SensingPhaseCode
        {
            get
            {
                return this._sensingPhaseCode;
            }
            set
            {
                if ((this._sensingPhaseCode != value))
                {
                    Nullable<PhaseCode> old = this._sensingPhaseCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSensingPhaseCodeChanging(e);
                    this.OnPropertyChanging("SensingPhaseCode", e, _sensingPhaseCodeAttribute);
                    this._sensingPhaseCode = value;
                    this.OnSensingPhaseCodeChanged(e);
                    this.OnPropertyChanged("SensingPhaseCode", e, _sensingPhaseCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The localControlKind property
        /// </summary>
        [XmlElementNameAttribute("localControlKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ShuntImpedanceLocalControlKind> LocalControlKind
        {
            get
            {
                return this._localControlKind;
            }
            set
            {
                if ((this._localControlKind != value))
                {
                    Nullable<ShuntImpedanceLocalControlKind> old = this._localControlKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalControlKindChanging(e);
                    this.OnPropertyChanging("LocalControlKind", e, _localControlKindAttribute);
                    this._localControlKind = value;
                    this.OnLocalControlKindChanged(e);
                    this.OnPropertyChanged("LocalControlKind", e, _localControlKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The branchDirect property
        /// </summary>
        [XmlElementNameAttribute("branchDirect")]
        [XmlAttributeAttribute(true)]
        public virtual int BranchDirect
        {
            get
            {
                return this._branchDirect;
            }
            set
            {
                if ((this._branchDirect != value))
                {
                    int old = this._branchDirect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBranchDirectChanging(e);
                    this.OnPropertyChanging("BranchDirect", e, _branchDirectAttribute);
                    this._branchDirect = value;
                    this.OnBranchDirectChanged(e);
                    this.OnPropertyChanged("BranchDirect", e, _branchDirectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxSwitchOperationCount property
        /// </summary>
        [XmlElementNameAttribute("maxSwitchOperationCount")]
        [XmlAttributeAttribute(true)]
        public virtual int MaxSwitchOperationCount
        {
            get
            {
                return this._maxSwitchOperationCount;
            }
            set
            {
                if ((this._maxSwitchOperationCount != value))
                {
                    int old = this._maxSwitchOperationCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxSwitchOperationCountChanging(e);
                    this.OnPropertyChanging("MaxSwitchOperationCount", e, _maxSwitchOperationCountAttribute);
                    this._maxSwitchOperationCount = value;
                    this.OnMaxSwitchOperationCountChanged(e);
                    this.OnPropertyChanged("MaxSwitchOperationCount", e, _maxSwitchOperationCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The localOverride property
        /// </summary>
        [XmlElementNameAttribute("localOverride")]
        [XmlAttributeAttribute(true)]
        public virtual bool LocalOverride
        {
            get
            {
                return this._localOverride;
            }
            set
            {
                if ((this._localOverride != value))
                {
                    bool old = this._localOverride;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalOverrideChanging(e);
                    this.OnPropertyChanging("LocalOverride", e, _localOverrideAttribute);
                    this._localOverride = value;
                    this.OnLocalOverrideChanged(e);
                    this.OnPropertyChanged("LocalOverride", e, _localOverrideAttribute);
                }
            }
        }
        
        /// <summary>
        /// The localOnLevel property
        /// </summary>
        [XmlElementNameAttribute("localOnLevel")]
        [XmlAttributeAttribute(true)]
        public virtual string LocalOnLevel
        {
            get
            {
                return this._localOnLevel;
            }
            set
            {
                if ((this._localOnLevel != value))
                {
                    string old = this._localOnLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalOnLevelChanging(e);
                    this.OnPropertyChanging("LocalOnLevel", e, _localOnLevelAttribute);
                    this._localOnLevel = value;
                    this.OnLocalOnLevelChanged(e);
                    this.OnPropertyChanged("LocalOnLevel", e, _localOnLevelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The regBranch property
        /// </summary>
        [XmlElementNameAttribute("regBranch")]
        [XmlAttributeAttribute(true)]
        public virtual string RegBranch
        {
            get
            {
                return this._regBranch;
            }
            set
            {
                if ((this._regBranch != value))
                {
                    string old = this._regBranch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegBranchChanging(e);
                    this.OnPropertyChanging("RegBranch", e, _regBranchAttribute);
                    this._regBranch = value;
                    this.OnRegBranchChanged(e);
                    this.OnPropertyChanged("RegBranch", e, _regBranchAttribute);
                }
            }
        }
        
        /// <summary>
        /// The controlKind property
        /// </summary>
        [XmlElementNameAttribute("controlKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ShuntImpedanceControlKind> ControlKind
        {
            get
            {
                return this._controlKind;
            }
            set
            {
                if ((this._controlKind != value))
                {
                    Nullable<ShuntImpedanceControlKind> old = this._controlKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlKindChanging(e);
                    this.OnPropertyChanging("ControlKind", e, _controlKindAttribute);
                    this._controlKind = value;
                    this.OnControlKindChanged(e);
                    this.OnPropertyChanged("ControlKind", e, _controlKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ShuntCompensatorInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ShuntImpedanceInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IShuntCompensatorInfo> ShuntCompensatorInfos
        {
            get
            {
                return this._shuntCompensatorInfos;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ShuntImpedanceInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/ShuntIm" +
                            "pedanceInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LowVoltageOverride property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowVoltageOverrideChanging;
        
        /// <summary>
        /// Gets fired when the LowVoltageOverride property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowVoltageOverrideChanged;
        
        /// <summary>
        /// Gets fired before the CellSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CellSizeChanging;
        
        /// <summary>
        /// Gets fired when the CellSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CellSizeChanged;
        
        /// <summary>
        /// Gets fired before the HighVoltageOverride property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighVoltageOverrideChanging;
        
        /// <summary>
        /// Gets fired when the HighVoltageOverride property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighVoltageOverrideChanged;
        
        /// <summary>
        /// Gets fired before the RegBranchKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchKindChanging;
        
        /// <summary>
        /// Gets fired when the RegBranchKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchKindChanged;
        
        /// <summary>
        /// Gets fired before the NormalOpen property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalOpenChanging;
        
        /// <summary>
        /// Gets fired when the NormalOpen property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalOpenChanged;
        
        /// <summary>
        /// Gets fired before the RegBranchEnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchEndChanging;
        
        /// <summary>
        /// Gets fired when the RegBranchEnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchEndChanged;
        
        /// <summary>
        /// Gets fired before the VRegLineLine property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRegLineLineChanging;
        
        /// <summary>
        /// Gets fired when the VRegLineLine property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VRegLineLineChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOperationCycle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOperationCycleChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOperationCycle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOperationCycleChanged;
        
        /// <summary>
        /// Gets fired before the LocalOffLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOffLevelChanging;
        
        /// <summary>
        /// Gets fired when the LocalOffLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOffLevelChanged;
        
        /// <summary>
        /// Gets fired before the SensingPhaseCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensingPhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the SensingPhaseCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensingPhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the LocalControlKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalControlKindChanging;
        
        /// <summary>
        /// Gets fired when the LocalControlKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalControlKindChanged;
        
        /// <summary>
        /// Gets fired before the BranchDirect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchDirectChanging;
        
        /// <summary>
        /// Gets fired when the BranchDirect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchDirectChanged;
        
        /// <summary>
        /// Gets fired before the MaxSwitchOperationCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxSwitchOperationCountChanging;
        
        /// <summary>
        /// Gets fired when the MaxSwitchOperationCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxSwitchOperationCountChanged;
        
        /// <summary>
        /// Gets fired before the LocalOverride property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOverrideChanging;
        
        /// <summary>
        /// Gets fired when the LocalOverride property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOverrideChanged;
        
        /// <summary>
        /// Gets fired before the LocalOnLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOnLevelChanging;
        
        /// <summary>
        /// Gets fired when the LocalOnLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalOnLevelChanged;
        
        /// <summary>
        /// Gets fired before the RegBranch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchChanging;
        
        /// <summary>
        /// Gets fired when the RegBranch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegBranchChanged;
        
        /// <summary>
        /// Gets fired before the ControlKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlKindChanging;
        
        /// <summary>
        /// Gets fired when the ControlKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlKindChanged;
        
        private static ITypedElement RetrieveLowVoltageOverrideAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("lowVoltageOverride")));
        }
        
        /// <summary>
        /// Raises the LowVoltageOverrideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowVoltageOverrideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowVoltageOverrideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowVoltageOverrideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowVoltageOverrideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowVoltageOverrideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCellSizeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("cellSize")));
        }
        
        /// <summary>
        /// Raises the CellSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCellSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CellSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CellSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCellSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CellSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHighVoltageOverrideAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("highVoltageOverride")));
        }
        
        /// <summary>
        /// Raises the HighVoltageOverrideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighVoltageOverrideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighVoltageOverrideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighVoltageOverrideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighVoltageOverrideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighVoltageOverrideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegBranchKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("regBranchKind")));
        }
        
        /// <summary>
        /// Raises the RegBranchKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegBranchKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNormalOpenAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("normalOpen")));
        }
        
        /// <summary>
        /// Raises the NormalOpenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalOpenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalOpenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalOpenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalOpenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalOpenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegBranchEndAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("regBranchEnd")));
        }
        
        /// <summary>
        /// Raises the RegBranchEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegBranchEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVRegLineLineAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("vRegLineLine")));
        }
        
        /// <summary>
        /// Raises the VRegLineLineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRegLineLineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRegLineLineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VRegLineLineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVRegLineLineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VRegLineLineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchOperationCycleAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("switchOperationCycle")));
        }
        
        /// <summary>
        /// Raises the SwitchOperationCycleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOperationCycleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOperationCycleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOperationCycleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOperationCycleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOperationCycleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalOffLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("localOffLevel")));
        }
        
        /// <summary>
        /// Raises the LocalOffLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOffLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOffLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalOffLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOffLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOffLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSensingPhaseCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("sensingPhaseCode")));
        }
        
        /// <summary>
        /// Raises the SensingPhaseCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensingPhaseCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensingPhaseCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SensingPhaseCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensingPhaseCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensingPhaseCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalControlKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("localControlKind")));
        }
        
        /// <summary>
        /// Raises the LocalControlKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalControlKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalControlKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalControlKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalControlKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalControlKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBranchDirectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("branchDirect")));
        }
        
        /// <summary>
        /// Raises the BranchDirectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchDirectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchDirectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BranchDirectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchDirectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchDirectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxSwitchOperationCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("maxSwitchOperationCount")));
        }
        
        /// <summary>
        /// Raises the MaxSwitchOperationCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxSwitchOperationCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxSwitchOperationCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxSwitchOperationCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxSwitchOperationCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxSwitchOperationCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalOverrideAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("localOverride")));
        }
        
        /// <summary>
        /// Raises the LocalOverrideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOverrideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOverrideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalOverrideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOverrideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOverrideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalOnLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("localOnLevel")));
        }
        
        /// <summary>
        /// Raises the LocalOnLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOnLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOnLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalOnLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalOnLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalOnLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegBranchAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("regBranch")));
        }
        
        /// <summary>
        /// Raises the RegBranchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegBranchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegBranchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegBranchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveControlKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("controlKind")));
        }
        
        /// <summary>
        /// Raises the ControlKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShuntCompensatorInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(ShuntImpedanceInfo.ClassInstance)).Resolve("ShuntCompensatorInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ShuntCompensatorInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShuntCompensatorInfosCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ShuntCompensatorInfos", e, _shuntCompensatorInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ShuntCompensatorInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShuntCompensatorInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ShuntCompensatorInfos", e, _shuntCompensatorInfosReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOWVOLTAGEOVERRIDE"))
            {
                return this.LowVoltageOverride;
            }
            if ((attribute == "CELLSIZE"))
            {
                return this.CellSize;
            }
            if ((attribute == "HIGHVOLTAGEOVERRIDE"))
            {
                return this.HighVoltageOverride;
            }
            if ((attribute == "REGBRANCHKIND"))
            {
                return this.RegBranchKind;
            }
            if ((attribute == "NORMALOPEN"))
            {
                return this.NormalOpen;
            }
            if ((attribute == "REGBRANCHEND"))
            {
                return this.RegBranchEnd;
            }
            if ((attribute == "VREGLINELINE"))
            {
                return this.VRegLineLine;
            }
            if ((attribute == "SWITCHOPERATIONCYCLE"))
            {
                return this.SwitchOperationCycle;
            }
            if ((attribute == "LOCALOFFLEVEL"))
            {
                return this.LocalOffLevel;
            }
            if ((attribute == "SENSINGPHASECODE"))
            {
                return this.SensingPhaseCode;
            }
            if ((attribute == "LOCALCONTROLKIND"))
            {
                return this.LocalControlKind;
            }
            if ((attribute == "BRANCHDIRECT"))
            {
                return this.BranchDirect;
            }
            if ((attribute == "MAXSWITCHOPERATIONCOUNT"))
            {
                return this.MaxSwitchOperationCount;
            }
            if ((attribute == "LOCALOVERRIDE"))
            {
                return this.LocalOverride;
            }
            if ((attribute == "LOCALONLEVEL"))
            {
                return this.LocalOnLevel;
            }
            if ((attribute == "REGBRANCH"))
            {
                return this.RegBranch;
            }
            if ((attribute == "CONTROLKIND"))
            {
                return this.ControlKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SHUNTCOMPENSATORINFOS"))
            {
                return this._shuntCompensatorInfos;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOWVOLTAGEOVERRIDE"))
            {
                this.LowVoltageOverride = ((float)(value));
                return;
            }
            if ((feature == "CELLSIZE"))
            {
                this.CellSize = ((float)(value));
                return;
            }
            if ((feature == "HIGHVOLTAGEOVERRIDE"))
            {
                this.HighVoltageOverride = ((float)(value));
                return;
            }
            if ((feature == "REGBRANCHKIND"))
            {
                this.RegBranchKind = ((RegulationBranchKind)(value));
                return;
            }
            if ((feature == "NORMALOPEN"))
            {
                this.NormalOpen = ((bool)(value));
                return;
            }
            if ((feature == "REGBRANCHEND"))
            {
                this.RegBranchEnd = ((int)(value));
                return;
            }
            if ((feature == "VREGLINELINE"))
            {
                this.VRegLineLine = ((bool)(value));
                return;
            }
            if ((feature == "SWITCHOPERATIONCYCLE"))
            {
                this.SwitchOperationCycle = ((float)(value));
                return;
            }
            if ((feature == "LOCALOFFLEVEL"))
            {
                this.LocalOffLevel = ((string)(value));
                return;
            }
            if ((feature == "SENSINGPHASECODE"))
            {
                this.SensingPhaseCode = ((PhaseCode)(value));
                return;
            }
            if ((feature == "LOCALCONTROLKIND"))
            {
                this.LocalControlKind = ((ShuntImpedanceLocalControlKind)(value));
                return;
            }
            if ((feature == "BRANCHDIRECT"))
            {
                this.BranchDirect = ((int)(value));
                return;
            }
            if ((feature == "MAXSWITCHOPERATIONCOUNT"))
            {
                this.MaxSwitchOperationCount = ((int)(value));
                return;
            }
            if ((feature == "LOCALOVERRIDE"))
            {
                this.LocalOverride = ((bool)(value));
                return;
            }
            if ((feature == "LOCALONLEVEL"))
            {
                this.LocalOnLevel = ((string)(value));
                return;
            }
            if ((feature == "REGBRANCH"))
            {
                this.RegBranch = ((string)(value));
                return;
            }
            if ((feature == "CONTROLKIND"))
            {
                this.ControlKind = ((ShuntImpedanceControlKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/ShuntIm" +
                        "pedanceInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ShuntImpedanceInfo class
        /// </summary>
        public class ShuntImpedanceInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ShuntImpedanceInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ShuntImpedanceInfoReferencedElementsCollection(ShuntImpedanceInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ShuntCompensatorInfos.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ShuntCompensatorInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ShuntCompensatorInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IShuntCompensatorInfo shuntCompensatorInfosCasted = item.As<IShuntCompensatorInfo>();
                if ((shuntCompensatorInfosCasted != null))
                {
                    this._parent.ShuntCompensatorInfos.Add(shuntCompensatorInfosCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ShuntCompensatorInfos.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ShuntCompensatorInfos.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> shuntCompensatorInfosEnumerator = this._parent.ShuntCompensatorInfos.GetEnumerator();
                try
                {
                    for (
                    ; shuntCompensatorInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = shuntCompensatorInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    shuntCompensatorInfosEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IShuntCompensatorInfo shuntCompensatorInfoItem = item.As<IShuntCompensatorInfo>();
                if (((shuntCompensatorInfoItem != null) 
                            && this._parent.ShuntCompensatorInfos.Remove(shuntCompensatorInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ShuntCompensatorInfos).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowVoltageOverride property
        /// </summary>
        private sealed class LowVoltageOverrideProxy : ModelPropertyChange<IShuntImpedanceInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowVoltageOverrideProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "lowVoltageOverride")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowVoltageOverride;
                }
                set
                {
                    this.ModelElement.LowVoltageOverride = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cellSize property
        /// </summary>
        private sealed class CellSizeProxy : ModelPropertyChange<IShuntImpedanceInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CellSizeProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "cellSize")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CellSize;
                }
                set
                {
                    this.ModelElement.CellSize = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highVoltageOverride property
        /// </summary>
        private sealed class HighVoltageOverrideProxy : ModelPropertyChange<IShuntImpedanceInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighVoltageOverrideProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "highVoltageOverride")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighVoltageOverride;
                }
                set
                {
                    this.ModelElement.HighVoltageOverride = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the regBranchKind property
        /// </summary>
        private sealed class RegBranchKindProxy : ModelPropertyChange<IShuntImpedanceInfo, Nullable<RegulationBranchKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegBranchKindProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "regBranchKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<RegulationBranchKind> Value
            {
                get
                {
                    return this.ModelElement.RegBranchKind;
                }
                set
                {
                    this.ModelElement.RegBranchKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalOpen property
        /// </summary>
        private sealed class NormalOpenProxy : ModelPropertyChange<IShuntImpedanceInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalOpenProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "normalOpen")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NormalOpen;
                }
                set
                {
                    this.ModelElement.NormalOpen = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the regBranchEnd property
        /// </summary>
        private sealed class RegBranchEndProxy : ModelPropertyChange<IShuntImpedanceInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegBranchEndProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "regBranchEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.RegBranchEnd;
                }
                set
                {
                    this.ModelElement.RegBranchEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the vRegLineLine property
        /// </summary>
        private sealed class VRegLineLineProxy : ModelPropertyChange<IShuntImpedanceInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VRegLineLineProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "vRegLineLine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.VRegLineLine;
                }
                set
                {
                    this.ModelElement.VRegLineLine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchOperationCycle property
        /// </summary>
        private sealed class SwitchOperationCycleProxy : ModelPropertyChange<IShuntImpedanceInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOperationCycleProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "switchOperationCycle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SwitchOperationCycle;
                }
                set
                {
                    this.ModelElement.SwitchOperationCycle = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localOffLevel property
        /// </summary>
        private sealed class LocalOffLevelProxy : ModelPropertyChange<IShuntImpedanceInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalOffLevelProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "localOffLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalOffLevel;
                }
                set
                {
                    this.ModelElement.LocalOffLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sensingPhaseCode property
        /// </summary>
        private sealed class SensingPhaseCodeProxy : ModelPropertyChange<IShuntImpedanceInfo, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensingPhaseCodeProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "sensingPhaseCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.SensingPhaseCode;
                }
                set
                {
                    this.ModelElement.SensingPhaseCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localControlKind property
        /// </summary>
        private sealed class LocalControlKindProxy : ModelPropertyChange<IShuntImpedanceInfo, Nullable<ShuntImpedanceLocalControlKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalControlKindProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "localControlKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ShuntImpedanceLocalControlKind> Value
            {
                get
                {
                    return this.ModelElement.LocalControlKind;
                }
                set
                {
                    this.ModelElement.LocalControlKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the branchDirect property
        /// </summary>
        private sealed class BranchDirectProxy : ModelPropertyChange<IShuntImpedanceInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BranchDirectProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "branchDirect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.BranchDirect;
                }
                set
                {
                    this.ModelElement.BranchDirect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxSwitchOperationCount property
        /// </summary>
        private sealed class MaxSwitchOperationCountProxy : ModelPropertyChange<IShuntImpedanceInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxSwitchOperationCountProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "maxSwitchOperationCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MaxSwitchOperationCount;
                }
                set
                {
                    this.ModelElement.MaxSwitchOperationCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localOverride property
        /// </summary>
        private sealed class LocalOverrideProxy : ModelPropertyChange<IShuntImpedanceInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalOverrideProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "localOverride")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LocalOverride;
                }
                set
                {
                    this.ModelElement.LocalOverride = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localOnLevel property
        /// </summary>
        private sealed class LocalOnLevelProxy : ModelPropertyChange<IShuntImpedanceInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalOnLevelProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "localOnLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalOnLevel;
                }
                set
                {
                    this.ModelElement.LocalOnLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the regBranch property
        /// </summary>
        private sealed class RegBranchProxy : ModelPropertyChange<IShuntImpedanceInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegBranchProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "regBranch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RegBranch;
                }
                set
                {
                    this.ModelElement.RegBranch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the controlKind property
        /// </summary>
        private sealed class ControlKindProxy : ModelPropertyChange<IShuntImpedanceInfo, Nullable<ShuntImpedanceControlKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlKindProxy(IShuntImpedanceInfo modelElement) : 
                    base(modelElement, "controlKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ShuntImpedanceControlKind> Value
            {
                get
                {
                    return this.ModelElement.ControlKind;
                }
                set
                {
                    this.ModelElement.ControlKind = value;
                }
            }
        }
    }
}

