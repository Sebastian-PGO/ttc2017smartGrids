//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the AssetInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/AssetIn" +
        "fo")]
    [DebuggerDisplayAttribute("AssetInfo {UUID}")]
    public partial class AssetInfo : IdentifiedObject, IAssetInfo, IModelElement
    {
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static Lazy<ITypedElement> _typeAssetReference = new Lazy<ITypedElement>(RetrieveTypeAssetReference);
        
        /// <summary>
        /// The backing field for the TypeAsset property
        /// </summary>
        private ITypeAsset _typeAsset;
        
        private static Lazy<ITypedElement> _assetModelReference = new Lazy<ITypedElement>(RetrieveAssetModelReference);
        
        /// <summary>
        /// The backing field for the AssetModel property
        /// </summary>
        private IAssetModel _assetModel;
        
        private static Lazy<ITypedElement> _dimensionsInfoReference = new Lazy<ITypedElement>(RetrieveDimensionsInfoReference);
        
        /// <summary>
        /// The backing field for the DimensionsInfo property
        /// </summary>
        private IDimensionsInfo _dimensionsInfo;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetInfo")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.AssetInfo = null;
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.AssetInfo = this;
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// The TypeAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetInfo")]
        public virtual ITypeAsset TypeAsset
        {
            get
            {
                return this._typeAsset;
            }
            set
            {
                if ((this._typeAsset != value))
                {
                    ITypeAsset old = this._typeAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeAssetChanging(e);
                    this.OnPropertyChanging("TypeAsset", e, _typeAssetReference);
                    this._typeAsset = value;
                    if ((old != null))
                    {
                        old.AssetInfo = null;
                        old.Deleted -= this.OnResetTypeAsset;
                    }
                    if ((value != null))
                    {
                        value.AssetInfo = this;
                        value.Deleted += this.OnResetTypeAsset;
                    }
                    this.OnTypeAssetChanged(e);
                    this.OnPropertyChanged("TypeAsset", e, _typeAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The AssetModel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetInfo")]
        public virtual IAssetModel AssetModel
        {
            get
            {
                return this._assetModel;
            }
            set
            {
                if ((this._assetModel != value))
                {
                    IAssetModel old = this._assetModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetModelChanging(e);
                    this.OnPropertyChanging("AssetModel", e, _assetModelReference);
                    this._assetModel = value;
                    if ((old != null))
                    {
                        old.AssetInfo = null;
                        old.Deleted -= this.OnResetAssetModel;
                    }
                    if ((value != null))
                    {
                        value.AssetInfo = this;
                        value.Deleted += this.OnResetAssetModel;
                    }
                    this.OnAssetModelChanged(e);
                    this.OnPropertyChanged("AssetModel", e, _assetModelReference);
                }
            }
        }
        
        /// <summary>
        /// The DimensionsInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetInfos")]
        public virtual IDimensionsInfo DimensionsInfo
        {
            get
            {
                return this._dimensionsInfo;
            }
            set
            {
                if ((this._dimensionsInfo != value))
                {
                    IDimensionsInfo old = this._dimensionsInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDimensionsInfoChanging(e);
                    this.OnPropertyChanging("DimensionsInfo", e, _dimensionsInfoReference);
                    this._dimensionsInfo = value;
                    if ((old != null))
                    {
                        old.AssetInfos.Remove(this);
                        old.Deleted -= this.OnResetDimensionsInfo;
                    }
                    if ((value != null))
                    {
                        value.AssetInfos.Add(this);
                        value.Deleted += this.OnResetDimensionsInfo;
                    }
                    this.OnDimensionsInfoChanged(e);
                    this.OnPropertyChanged("DimensionsInfo", e, _dimensionsInfoReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssetInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/AssetIn" +
                            "fo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        /// <summary>
        /// Gets fired before the TypeAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanging;
        
        /// <summary>
        /// Gets fired when the TypeAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanged;
        
        /// <summary>
        /// Gets fired before the AssetModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelChanging;
        
        /// <summary>
        /// Gets fired when the AssetModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelChanged;
        
        /// <summary>
        /// Gets fired before the DimensionsInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DimensionsInfoChanging;
        
        /// <summary>
        /// Gets fired when the DimensionsInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DimensionsInfoChanged;
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(AssetInfo.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        private static ITypedElement RetrieveTypeAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(AssetInfo.ClassInstance)).Resolve("TypeAsset")));
        }
        
        /// <summary>
        /// Raises the TypeAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeAsset(object sender, System.EventArgs eventArgs)
        {
            this.TypeAsset = null;
        }
        
        private static ITypedElement RetrieveAssetModelReference()
        {
            return ((ITypedElement)(((ModelElement)(AssetInfo.ClassInstance)).Resolve("AssetModel")));
        }
        
        /// <summary>
        /// Raises the AssetModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetModel(object sender, System.EventArgs eventArgs)
        {
            this.AssetModel = null;
        }
        
        private static ITypedElement RetrieveDimensionsInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(AssetInfo.ClassInstance)).Resolve("DimensionsInfo")));
        }
        
        /// <summary>
        /// Raises the DimensionsInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDimensionsInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DimensionsInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DimensionsInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDimensionsInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DimensionsInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DimensionsInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDimensionsInfo(object sender, System.EventArgs eventArgs)
        {
            this.DimensionsInfo = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "TYPEASSET"))
            {
                this.TypeAsset = ((ITypeAsset)(value));
                return;
            }
            if ((feature == "ASSETMODEL"))
            {
                this.AssetModel = ((IAssetModel)(value));
                return;
            }
            if ((feature == "DIMENSIONSINFO"))
            {
                this.DimensionsInfo = ((IDimensionsInfo)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((attribute == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            if ((attribute == "AssetModel"))
            {
                return new AssetModelProxy(this);
            }
            if ((attribute == "DimensionsInfo"))
            {
                return new DimensionsInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((reference == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            if ((reference == "AssetModel"))
            {
                return new AssetModelProxy(this);
            }
            if ((reference == "DimensionsInfo"))
            {
                return new DimensionsInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/AssetIn" +
                        "fo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssetInfo class
        /// </summary>
        public class AssetInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssetInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssetInfoReferencedElementsCollection(AssetInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TypeAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssetModel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DimensionsInfo != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetChanged += this.PropagateValueChanges;
                this._parent.TypeAssetChanged += this.PropagateValueChanges;
                this._parent.AssetModelChanged += this.PropagateValueChanges;
                this._parent.DimensionsInfoChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetChanged -= this.PropagateValueChanges;
                this._parent.TypeAssetChanged -= this.PropagateValueChanges;
                this._parent.AssetModelChanged -= this.PropagateValueChanges;
                this._parent.DimensionsInfoChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
                if ((this._parent.TypeAsset == null))
                {
                    ITypeAsset typeAssetCasted = item.As<ITypeAsset>();
                    if ((typeAssetCasted != null))
                    {
                        this._parent.TypeAsset = typeAssetCasted;
                        return;
                    }
                }
                if ((this._parent.AssetModel == null))
                {
                    IAssetModel assetModelCasted = item.As<IAssetModel>();
                    if ((assetModelCasted != null))
                    {
                        this._parent.AssetModel = assetModelCasted;
                        return;
                    }
                }
                if ((this._parent.DimensionsInfo == null))
                {
                    IDimensionsInfo dimensionsInfoCasted = item.As<IDimensionsInfo>();
                    if ((dimensionsInfoCasted != null))
                    {
                        this._parent.DimensionsInfo = dimensionsInfoCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Asset = null;
                this._parent.TypeAsset = null;
                this._parent.AssetModel = null;
                this._parent.DimensionsInfo = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                if ((item == this._parent.TypeAsset))
                {
                    return true;
                }
                if ((item == this._parent.AssetModel))
                {
                    return true;
                }
                if ((item == this._parent.DimensionsInfo))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TypeAsset != null))
                {
                    array[arrayIndex] = this._parent.TypeAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssetModel != null))
                {
                    array[arrayIndex] = this._parent.AssetModel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DimensionsInfo != null))
                {
                    array[arrayIndex] = this._parent.DimensionsInfo;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                if ((this._parent.TypeAsset == item))
                {
                    this._parent.TypeAsset = null;
                    return true;
                }
                if ((this._parent.AssetModel == item))
                {
                    this._parent.AssetModel = null;
                    return true;
                }
                if ((this._parent.DimensionsInfo == item))
                {
                    this._parent.DimensionsInfo = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Asset).Concat(this._parent.TypeAsset).Concat(this._parent.AssetModel).Concat(this._parent.DimensionsInfo).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IAssetInfo, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IAssetInfo modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeAsset property
        /// </summary>
        private sealed class TypeAssetProxy : ModelPropertyChange<IAssetInfo, ITypeAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeAssetProxy(IAssetInfo modelElement) : 
                    base(modelElement, "TypeAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeAsset Value
            {
                get
                {
                    return this.ModelElement.TypeAsset;
                }
                set
                {
                    this.ModelElement.TypeAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetModel property
        /// </summary>
        private sealed class AssetModelProxy : ModelPropertyChange<IAssetInfo, IAssetModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetModelProxy(IAssetInfo modelElement) : 
                    base(modelElement, "AssetModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetModel Value
            {
                get
                {
                    return this.ModelElement.AssetModel;
                }
                set
                {
                    this.ModelElement.AssetModel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DimensionsInfo property
        /// </summary>
        private sealed class DimensionsInfoProxy : ModelPropertyChange<IAssetInfo, IDimensionsInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DimensionsInfoProxy(IAssetInfo modelElement) : 
                    base(modelElement, "DimensionsInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDimensionsInfo Value
            {
                get
                {
                    return this.ModelElement.DimensionsInfo;
                }
                set
                {
                    this.ModelElement.DimensionsInfo = value;
                }
            }
        }
    }
}

