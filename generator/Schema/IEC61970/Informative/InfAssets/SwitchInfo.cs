//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the SwitchInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/SwitchI" +
        "nfo")]
    [DebuggerDisplayAttribute("SwitchInfo {UUID}")]
    public class SwitchInfo : ElectricalInfo, ISwitchInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Gang property
        /// </summary>
        private bool _gang;
        
        /// <summary>
        /// The backing field for the PoleCount property
        /// </summary>
        private int _poleCount;
        
        /// <summary>
        /// The backing field for the InterruptingRating property
        /// </summary>
        private float _interruptingRating;
        
        /// <summary>
        /// The backing field for the DielectricStrength property
        /// </summary>
        private float _dielectricStrength;
        
        /// <summary>
        /// The backing field for the LoadBreak property
        /// </summary>
        private bool _loadBreak;
        
        /// <summary>
        /// The backing field for the MinimumCurrent property
        /// </summary>
        private float _minimumCurrent;
        
        /// <summary>
        /// The backing field for the WithstandCurrent property
        /// </summary>
        private float _withstandCurrent;
        
        /// <summary>
        /// The backing field for the MakingCapacity property
        /// </summary>
        private float _makingCapacity;
        
        /// <summary>
        /// The backing field for the Remote property
        /// </summary>
        private bool _remote;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The gang property
        /// </summary>
        [XmlElementNameAttribute("gang")]
        [XmlAttributeAttribute(true)]
        public virtual bool Gang
        {
            get
            {
                return this._gang;
            }
            set
            {
                if ((this._gang != value))
                {
                    bool old = this._gang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGangChanging(e);
                    this.OnPropertyChanging("Gang", e);
                    this._gang = value;
                    this.OnGangChanged(e);
                    this.OnPropertyChanged("Gang", e);
                }
            }
        }
        
        /// <summary>
        /// The poleCount property
        /// </summary>
        [XmlElementNameAttribute("poleCount")]
        [XmlAttributeAttribute(true)]
        public virtual int PoleCount
        {
            get
            {
                return this._poleCount;
            }
            set
            {
                if ((this._poleCount != value))
                {
                    int old = this._poleCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPoleCountChanging(e);
                    this.OnPropertyChanging("PoleCount", e);
                    this._poleCount = value;
                    this.OnPoleCountChanged(e);
                    this.OnPropertyChanged("PoleCount", e);
                }
            }
        }
        
        /// <summary>
        /// The interruptingRating property
        /// </summary>
        [XmlElementNameAttribute("interruptingRating")]
        [XmlAttributeAttribute(true)]
        public virtual float InterruptingRating
        {
            get
            {
                return this._interruptingRating;
            }
            set
            {
                if ((this._interruptingRating != value))
                {
                    float old = this._interruptingRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInterruptingRatingChanging(e);
                    this.OnPropertyChanging("InterruptingRating", e);
                    this._interruptingRating = value;
                    this.OnInterruptingRatingChanged(e);
                    this.OnPropertyChanged("InterruptingRating", e);
                }
            }
        }
        
        /// <summary>
        /// The dielectricStrength property
        /// </summary>
        [XmlElementNameAttribute("dielectricStrength")]
        [XmlAttributeAttribute(true)]
        public virtual float DielectricStrength
        {
            get
            {
                return this._dielectricStrength;
            }
            set
            {
                if ((this._dielectricStrength != value))
                {
                    float old = this._dielectricStrength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDielectricStrengthChanging(e);
                    this.OnPropertyChanging("DielectricStrength", e);
                    this._dielectricStrength = value;
                    this.OnDielectricStrengthChanged(e);
                    this.OnPropertyChanged("DielectricStrength", e);
                }
            }
        }
        
        /// <summary>
        /// The loadBreak property
        /// </summary>
        [XmlElementNameAttribute("loadBreak")]
        [XmlAttributeAttribute(true)]
        public virtual bool LoadBreak
        {
            get
            {
                return this._loadBreak;
            }
            set
            {
                if ((this._loadBreak != value))
                {
                    bool old = this._loadBreak;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadBreakChanging(e);
                    this.OnPropertyChanging("LoadBreak", e);
                    this._loadBreak = value;
                    this.OnLoadBreakChanged(e);
                    this.OnPropertyChanged("LoadBreak", e);
                }
            }
        }
        
        /// <summary>
        /// The minimumCurrent property
        /// </summary>
        [XmlElementNameAttribute("minimumCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumCurrent
        {
            get
            {
                return this._minimumCurrent;
            }
            set
            {
                if ((this._minimumCurrent != value))
                {
                    float old = this._minimumCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumCurrentChanging(e);
                    this.OnPropertyChanging("MinimumCurrent", e);
                    this._minimumCurrent = value;
                    this.OnMinimumCurrentChanged(e);
                    this.OnPropertyChanged("MinimumCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The withstandCurrent property
        /// </summary>
        [XmlElementNameAttribute("withstandCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float WithstandCurrent
        {
            get
            {
                return this._withstandCurrent;
            }
            set
            {
                if ((this._withstandCurrent != value))
                {
                    float old = this._withstandCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWithstandCurrentChanging(e);
                    this.OnPropertyChanging("WithstandCurrent", e);
                    this._withstandCurrent = value;
                    this.OnWithstandCurrentChanged(e);
                    this.OnPropertyChanged("WithstandCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The makingCapacity property
        /// </summary>
        [XmlElementNameAttribute("makingCapacity")]
        [XmlAttributeAttribute(true)]
        public virtual float MakingCapacity
        {
            get
            {
                return this._makingCapacity;
            }
            set
            {
                if ((this._makingCapacity != value))
                {
                    float old = this._makingCapacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMakingCapacityChanging(e);
                    this.OnPropertyChanging("MakingCapacity", e);
                    this._makingCapacity = value;
                    this.OnMakingCapacityChanged(e);
                    this.OnPropertyChanged("MakingCapacity", e);
                }
            }
        }
        
        /// <summary>
        /// The remote property
        /// </summary>
        [XmlElementNameAttribute("remote")]
        [XmlAttributeAttribute(true)]
        public virtual bool Remote
        {
            get
            {
                return this._remote;
            }
            set
            {
                if ((this._remote != value))
                {
                    bool old = this._remote;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteChanging(e);
                    this.OnPropertyChanging("Remote", e);
                    this._remote = value;
                    this.OnRemoteChanged(e);
                    this.OnPropertyChanged("Remote", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/SwitchI" +
                            "nfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Gang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GangChanging;
        
        /// <summary>
        /// Gets fired when the Gang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GangChanged;
        
        /// <summary>
        /// Gets fired before the PoleCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoleCountChanging;
        
        /// <summary>
        /// Gets fired when the PoleCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PoleCountChanged;
        
        /// <summary>
        /// Gets fired before the InterruptingRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanging;
        
        /// <summary>
        /// Gets fired when the InterruptingRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanged;
        
        /// <summary>
        /// Gets fired before the DielectricStrength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DielectricStrengthChanging;
        
        /// <summary>
        /// Gets fired when the DielectricStrength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DielectricStrengthChanged;
        
        /// <summary>
        /// Gets fired before the LoadBreak property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadBreakChanging;
        
        /// <summary>
        /// Gets fired when the LoadBreak property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadBreakChanged;
        
        /// <summary>
        /// Gets fired before the MinimumCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumCurrentChanging;
        
        /// <summary>
        /// Gets fired when the MinimumCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumCurrentChanged;
        
        /// <summary>
        /// Gets fired before the WithstandCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WithstandCurrentChanging;
        
        /// <summary>
        /// Gets fired when the WithstandCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WithstandCurrentChanged;
        
        /// <summary>
        /// Gets fired before the MakingCapacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MakingCapacityChanging;
        
        /// <summary>
        /// Gets fired when the MakingCapacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MakingCapacityChanged;
        
        /// <summary>
        /// Gets fired before the Remote property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteChanging;
        
        /// <summary>
        /// Gets fired when the Remote property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteChanged;
        
        /// <summary>
        /// Raises the GangChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGangChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GangChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GangChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGangChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GangChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PoleCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoleCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoleCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PoleCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPoleCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PoleCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InterruptingRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterruptingRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterruptingRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InterruptingRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterruptingRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterruptingRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DielectricStrengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDielectricStrengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DielectricStrengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DielectricStrengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDielectricStrengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DielectricStrengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadBreakChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadBreakChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadBreakChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadBreakChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadBreakChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadBreakChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WithstandCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWithstandCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WithstandCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WithstandCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWithstandCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WithstandCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MakingCapacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMakingCapacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MakingCapacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MakingCapacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMakingCapacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MakingCapacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GANG"))
            {
                return this.Gang;
            }
            if ((attribute == "POLECOUNT"))
            {
                return this.PoleCount;
            }
            if ((attribute == "INTERRUPTINGRATING"))
            {
                return this.InterruptingRating;
            }
            if ((attribute == "DIELECTRICSTRENGTH"))
            {
                return this.DielectricStrength;
            }
            if ((attribute == "LOADBREAK"))
            {
                return this.LoadBreak;
            }
            if ((attribute == "MINIMUMCURRENT"))
            {
                return this.MinimumCurrent;
            }
            if ((attribute == "WITHSTANDCURRENT"))
            {
                return this.WithstandCurrent;
            }
            if ((attribute == "MAKINGCAPACITY"))
            {
                return this.MakingCapacity;
            }
            if ((attribute == "REMOTE"))
            {
                return this.Remote;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GANG"))
            {
                this.Gang = ((bool)(value));
                return;
            }
            if ((feature == "POLECOUNT"))
            {
                this.PoleCount = ((int)(value));
                return;
            }
            if ((feature == "INTERRUPTINGRATING"))
            {
                this.InterruptingRating = ((float)(value));
                return;
            }
            if ((feature == "DIELECTRICSTRENGTH"))
            {
                this.DielectricStrength = ((float)(value));
                return;
            }
            if ((feature == "LOADBREAK"))
            {
                this.LoadBreak = ((bool)(value));
                return;
            }
            if ((feature == "MINIMUMCURRENT"))
            {
                this.MinimumCurrent = ((float)(value));
                return;
            }
            if ((feature == "WITHSTANDCURRENT"))
            {
                this.WithstandCurrent = ((float)(value));
                return;
            }
            if ((feature == "MAKINGCAPACITY"))
            {
                this.MakingCapacity = ((float)(value));
                return;
            }
            if ((feature == "REMOTE"))
            {
                this.Remote = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/SwitchI" +
                        "nfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gang property
        /// </summary>
        private sealed class GangProxy : ModelPropertyChange<ISwitchInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GangProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Gang;
                }
                set
                {
                    this.ModelElement.Gang = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GangChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GangChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the poleCount property
        /// </summary>
        private sealed class PoleCountProxy : ModelPropertyChange<ISwitchInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PoleCountProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PoleCount;
                }
                set
                {
                    this.ModelElement.PoleCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PoleCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PoleCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interruptingRating property
        /// </summary>
        private sealed class InterruptingRatingProxy : ModelPropertyChange<ISwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterruptingRatingProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InterruptingRating;
                }
                set
                {
                    this.ModelElement.InterruptingRating = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InterruptingRatingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InterruptingRatingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dielectricStrength property
        /// </summary>
        private sealed class DielectricStrengthProxy : ModelPropertyChange<ISwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DielectricStrengthProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DielectricStrength;
                }
                set
                {
                    this.ModelElement.DielectricStrength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DielectricStrengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DielectricStrengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loadBreak property
        /// </summary>
        private sealed class LoadBreakProxy : ModelPropertyChange<ISwitchInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadBreakProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LoadBreak;
                }
                set
                {
                    this.ModelElement.LoadBreak = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoadBreakChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LoadBreakChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumCurrent property
        /// </summary>
        private sealed class MinimumCurrentProxy : ModelPropertyChange<ISwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumCurrentProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumCurrent;
                }
                set
                {
                    this.ModelElement.MinimumCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the withstandCurrent property
        /// </summary>
        private sealed class WithstandCurrentProxy : ModelPropertyChange<ISwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WithstandCurrentProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.WithstandCurrent;
                }
                set
                {
                    this.ModelElement.WithstandCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WithstandCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WithstandCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the makingCapacity property
        /// </summary>
        private sealed class MakingCapacityProxy : ModelPropertyChange<ISwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MakingCapacityProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MakingCapacity;
                }
                set
                {
                    this.ModelElement.MakingCapacity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MakingCapacityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MakingCapacityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remote property
        /// </summary>
        private sealed class RemoteProxy : ModelPropertyChange<ISwitchInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteProxy(ISwitchInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Remote;
                }
                set
                {
                    this.ModelElement.Remote = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemoteChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RemoteChanged -= handler;
            }
        }
    }
}

