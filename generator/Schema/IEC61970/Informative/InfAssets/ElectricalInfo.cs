//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the ElectricalInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Electri" +
        "calInfo")]
    [DebuggerDisplayAttribute("ElectricalInfo {UUID}")]
    public class ElectricalInfo : AssetInfo, IElectricalInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the WireCount property
        /// </summary>
        private int _wireCount;
        
        /// <summary>
        /// The backing field for the IsConnected property
        /// </summary>
        private bool _isConnected;
        
        /// <summary>
        /// The backing field for the Frequency property
        /// </summary>
        private float _frequency;
        
        /// <summary>
        /// The backing field for the B0 property
        /// </summary>
        private float _b0;
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        /// <summary>
        /// The backing field for the Bil property
        /// </summary>
        private float _bil;
        
        /// <summary>
        /// The backing field for the PhaseCount property
        /// </summary>
        private int _phaseCount;
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        /// <summary>
        /// The backing field for the G0 property
        /// </summary>
        private float _g0;
        
        /// <summary>
        /// The backing field for the PhaseCode property
        /// </summary>
        private Nullable<PhaseCode> _phaseCode;
        
        /// <summary>
        /// The backing field for the RatedCurrent property
        /// </summary>
        private float _ratedCurrent;
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        private float _x;
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        /// <summary>
        /// The backing field for the RatedApparentPower property
        /// </summary>
        private float _ratedApparentPower;
        
        /// <summary>
        /// The backing field for the G property
        /// </summary>
        private float _g;
        
        /// <summary>
        /// The backing field for the B property
        /// </summary>
        private float _b;
        
        /// <summary>
        /// The backing field for the RatedVoltage property
        /// </summary>
        private float _ratedVoltage;
        
        /// <summary>
        /// The backing field for the ElectricalAssetModels property
        /// </summary>
        private ElectricalInfoElectricalAssetModelsCollection _electricalAssetModels;
        
        /// <summary>
        /// The backing field for the ElectricalAssets property
        /// </summary>
        private ElectricalInfoElectricalAssetsCollection _electricalAssets;
        
        /// <summary>
        /// The backing field for the ElectricalTypeAssets property
        /// </summary>
        private ElectricalInfoElectricalTypeAssetsCollection _electricalTypeAssets;
        
        private static IClass _classInstance;
        
        public ElectricalInfo()
        {
            this._electricalAssetModels = new ElectricalInfoElectricalAssetModelsCollection(this);
            this._electricalAssetModels.CollectionChanging += this.ElectricalAssetModelsCollectionChanging;
            this._electricalAssetModels.CollectionChanged += this.ElectricalAssetModelsCollectionChanged;
            this._electricalAssets = new ElectricalInfoElectricalAssetsCollection(this);
            this._electricalAssets.CollectionChanging += this.ElectricalAssetsCollectionChanging;
            this._electricalAssets.CollectionChanged += this.ElectricalAssetsCollectionChanged;
            this._electricalTypeAssets = new ElectricalInfoElectricalTypeAssetsCollection(this);
            this._electricalTypeAssets.CollectionChanging += this.ElectricalTypeAssetsCollectionChanging;
            this._electricalTypeAssets.CollectionChanged += this.ElectricalTypeAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The wireCount property
        /// </summary>
        [XmlElementNameAttribute("wireCount")]
        [XmlAttributeAttribute(true)]
        public virtual int WireCount
        {
            get
            {
                return this._wireCount;
            }
            set
            {
                if ((this._wireCount != value))
                {
                    int old = this._wireCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWireCountChanging(e);
                    this.OnPropertyChanging("WireCount", e);
                    this._wireCount = value;
                    this.OnWireCountChanged(e);
                    this.OnPropertyChanged("WireCount", e);
                }
            }
        }
        
        /// <summary>
        /// The isConnected property
        /// </summary>
        [XmlElementNameAttribute("isConnected")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsConnected
        {
            get
            {
                return this._isConnected;
            }
            set
            {
                if ((this._isConnected != value))
                {
                    bool old = this._isConnected;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsConnectedChanging(e);
                    this.OnPropertyChanging("IsConnected", e);
                    this._isConnected = value;
                    this.OnIsConnectedChanged(e);
                    this.OnPropertyChanged("IsConnected", e);
                }
            }
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        [XmlElementNameAttribute("frequency")]
        [XmlAttributeAttribute(true)]
        public virtual float Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    float old = this._frequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyChanging(e);
                    this.OnPropertyChanging("Frequency", e);
                    this._frequency = value;
                    this.OnFrequencyChanged(e);
                    this.OnPropertyChanged("Frequency", e);
                }
            }
        }
        
        /// <summary>
        /// The b0 property
        /// </summary>
        [XmlElementNameAttribute("b0")]
        [XmlAttributeAttribute(true)]
        public virtual float B0
        {
            get
            {
                return this._b0;
            }
            set
            {
                if ((this._b0 != value))
                {
                    float old = this._b0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnB0Changing(e);
                    this.OnPropertyChanging("B0", e);
                    this._b0 = value;
                    this.OnB0Changed(e);
                    this.OnPropertyChanged("B0", e);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e);
                }
            }
        }
        
        /// <summary>
        /// The bil property
        /// </summary>
        [XmlElementNameAttribute("bil")]
        [XmlAttributeAttribute(true)]
        public virtual float Bil
        {
            get
            {
                return this._bil;
            }
            set
            {
                if ((this._bil != value))
                {
                    float old = this._bil;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilChanging(e);
                    this.OnPropertyChanging("Bil", e);
                    this._bil = value;
                    this.OnBilChanged(e);
                    this.OnPropertyChanged("Bil", e);
                }
            }
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        [XmlElementNameAttribute("phaseCount")]
        [XmlAttributeAttribute(true)]
        public virtual int PhaseCount
        {
            get
            {
                return this._phaseCount;
            }
            set
            {
                if ((this._phaseCount != value))
                {
                    int old = this._phaseCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCountChanging(e);
                    this.OnPropertyChanging("PhaseCount", e);
                    this._phaseCount = value;
                    this.OnPhaseCountChanged(e);
                    this.OnPropertyChanged("PhaseCount", e);
                }
            }
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e);
                }
            }
        }
        
        /// <summary>
        /// The g0 property
        /// </summary>
        [XmlElementNameAttribute("g0")]
        [XmlAttributeAttribute(true)]
        public virtual float G0
        {
            get
            {
                return this._g0;
            }
            set
            {
                if ((this._g0 != value))
                {
                    float old = this._g0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnG0Changing(e);
                    this.OnPropertyChanging("G0", e);
                    this._g0 = value;
                    this.OnG0Changed(e);
                    this.OnPropertyChanged("G0", e);
                }
            }
        }
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        [XmlElementNameAttribute("phaseCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> PhaseCode
        {
            get
            {
                return this._phaseCode;
            }
            set
            {
                if ((this._phaseCode != value))
                {
                    Nullable<PhaseCode> old = this._phaseCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCodeChanging(e);
                    this.OnPropertyChanging("PhaseCode", e);
                    this._phaseCode = value;
                    this.OnPhaseCodeChanged(e);
                    this.OnPropertyChanged("PhaseCode", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        [XmlElementNameAttribute("ratedCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedCurrent
        {
            get
            {
                return this._ratedCurrent;
            }
            set
            {
                if ((this._ratedCurrent != value))
                {
                    float old = this._ratedCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedCurrentChanging(e);
                    this.OnPropertyChanging("RatedCurrent", e);
                    this._ratedCurrent = value;
                    this.OnRatedCurrentChanged(e);
                    this.OnPropertyChanged("RatedCurrent", e);
                }
            }
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public virtual float X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    float old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedApparentPower property
        /// </summary>
        [XmlElementNameAttribute("ratedApparentPower")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedApparentPower
        {
            get
            {
                return this._ratedApparentPower;
            }
            set
            {
                if ((this._ratedApparentPower != value))
                {
                    float old = this._ratedApparentPower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedApparentPowerChanging(e);
                    this.OnPropertyChanging("RatedApparentPower", e);
                    this._ratedApparentPower = value;
                    this.OnRatedApparentPowerChanged(e);
                    this.OnPropertyChanged("RatedApparentPower", e);
                }
            }
        }
        
        /// <summary>
        /// The g property
        /// </summary>
        [XmlElementNameAttribute("g")]
        [XmlAttributeAttribute(true)]
        public virtual float G
        {
            get
            {
                return this._g;
            }
            set
            {
                if ((this._g != value))
                {
                    float old = this._g;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGChanging(e);
                    this.OnPropertyChanging("G", e);
                    this._g = value;
                    this.OnGChanged(e);
                    this.OnPropertyChanged("G", e);
                }
            }
        }
        
        /// <summary>
        /// The b property
        /// </summary>
        [XmlElementNameAttribute("b")]
        [XmlAttributeAttribute(true)]
        public virtual float B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    float old = this._b;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBChanging(e);
                    this.OnPropertyChanging("B", e);
                    this._b = value;
                    this.OnBChanged(e);
                    this.OnPropertyChanged("B", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        [XmlElementNameAttribute("ratedVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedVoltage
        {
            get
            {
                return this._ratedVoltage;
            }
            set
            {
                if ((this._ratedVoltage != value))
                {
                    float old = this._ratedVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedVoltageChanging(e);
                    this.OnPropertyChanging("RatedVoltage", e);
                    this._ratedVoltage = value;
                    this.OnRatedVoltageChanged(e);
                    this.OnPropertyChanged("RatedVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The ElectricalAssetModels property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ElectricalInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IElectricalAssetModel> ElectricalAssetModels
        {
            get
            {
                return this._electricalAssetModels;
            }
        }
        
        /// <summary>
        /// The ElectricalAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ElectricalInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IElectricalAsset> ElectricalAssets
        {
            get
            {
                return this._electricalAssets;
            }
        }
        
        /// <summary>
        /// The ElectricalTypeAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ElectricalInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IElectricalTypeAsset> ElectricalTypeAssets
        {
            get
            {
                return this._electricalTypeAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElectricalInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Electri" +
                            "calInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the WireCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WireCountChanging;
        
        /// <summary>
        /// Gets fired when the WireCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WireCountChanged;
        
        /// <summary>
        /// Gets fired before the IsConnected property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsConnectedChanging;
        
        /// <summary>
        /// Gets fired when the IsConnected property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsConnectedChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the B0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0Changing;
        
        /// <summary>
        /// Gets fired when the B0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0Changed;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the Bil property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilChanging;
        
        /// <summary>
        /// Gets fired when the Bil property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the G0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0Changing;
        
        /// <summary>
        /// Gets fired when the G0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0Changed;
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the RatedApparentPower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedApparentPower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanged;
        
        /// <summary>
        /// Gets fired before the G property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanging;
        
        /// <summary>
        /// Gets fired when the G property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanged;
        
        /// <summary>
        /// Gets fired before the B property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanging;
        
        /// <summary>
        /// Gets fired when the B property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
        
        /// <summary>
        /// Raises the WireCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWireCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WireCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WireCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWireCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WireCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsConnectedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsConnectedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsConnectedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsConnectedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsConnectedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsConnectedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BilChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BilChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedApparentPowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedApparentPowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedApparentPowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedApparentPowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedApparentPowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedApparentPowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElectricalAssetModels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetModelsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ElectricalAssetModels", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElectricalAssetModels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetModelsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElectricalAssetModels", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElectricalAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ElectricalAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElectricalAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElectricalAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElectricalTypeAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalTypeAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ElectricalTypeAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElectricalTypeAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElectricalTypeAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElectricalTypeAssets", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "WIRECOUNT"))
            {
                return this.WireCount;
            }
            if ((attribute == "ISCONNECTED"))
            {
                return this.IsConnected;
            }
            if ((attribute == "FREQUENCY"))
            {
                return this.Frequency;
            }
            if ((attribute == "B0"))
            {
                return this.B0;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "BIL"))
            {
                return this.Bil;
            }
            if ((attribute == "PHASECOUNT"))
            {
                return this.PhaseCount;
            }
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            if ((attribute == "G0"))
            {
                return this.G0;
            }
            if ((attribute == "PHASECODE"))
            {
                return this.PhaseCode;
            }
            if ((attribute == "RATEDCURRENT"))
            {
                return this.RatedCurrent;
            }
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "RATEDAPPARENTPOWER"))
            {
                return this.RatedApparentPower;
            }
            if ((attribute == "G"))
            {
                return this.G;
            }
            if ((attribute == "B"))
            {
                return this.B;
            }
            if ((attribute == "RATEDVOLTAGE"))
            {
                return this.RatedVoltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ELECTRICALASSETMODELS"))
            {
                return this._electricalAssetModels;
            }
            if ((feature == "ELECTRICALASSETS"))
            {
                return this._electricalAssets;
            }
            if ((feature == "ELECTRICALTYPEASSETS"))
            {
                return this._electricalTypeAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WIRECOUNT"))
            {
                this.WireCount = ((int)(value));
                return;
            }
            if ((feature == "ISCONNECTED"))
            {
                this.IsConnected = ((bool)(value));
                return;
            }
            if ((feature == "FREQUENCY"))
            {
                this.Frequency = ((float)(value));
                return;
            }
            if ((feature == "B0"))
            {
                this.B0 = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "BIL"))
            {
                this.Bil = ((float)(value));
                return;
            }
            if ((feature == "PHASECOUNT"))
            {
                this.PhaseCount = ((int)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            if ((feature == "G0"))
            {
                this.G0 = ((float)(value));
                return;
            }
            if ((feature == "PHASECODE"))
            {
                this.PhaseCode = ((PhaseCode)(value));
                return;
            }
            if ((feature == "RATEDCURRENT"))
            {
                this.RatedCurrent = ((float)(value));
                return;
            }
            if ((feature == "X"))
            {
                this.X = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "RATEDAPPARENTPOWER"))
            {
                this.RatedApparentPower = ((float)(value));
                return;
            }
            if ((feature == "G"))
            {
                this.G = ((float)(value));
                return;
            }
            if ((feature == "B"))
            {
                this.B = ((float)(value));
                return;
            }
            if ((feature == "RATEDVOLTAGE"))
            {
                this.RatedVoltage = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Electri" +
                        "calInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ElectricalInfo class
        /// </summary>
        public class ElectricalInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ElectricalInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElectricalInfoReferencedElementsCollection(ElectricalInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ElectricalAssetModels.Count);
                    count = (count + this._parent.ElectricalAssets.Count);
                    count = (count + this._parent.ElectricalTypeAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ElectricalAssetModels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElectricalAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElectricalTypeAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ElectricalAssetModels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElectricalAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElectricalTypeAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IElectricalAssetModel electricalAssetModelsCasted = item.As<IElectricalAssetModel>();
                if ((electricalAssetModelsCasted != null))
                {
                    this._parent.ElectricalAssetModels.Add(electricalAssetModelsCasted);
                }
                IElectricalAsset electricalAssetsCasted = item.As<IElectricalAsset>();
                if ((electricalAssetsCasted != null))
                {
                    this._parent.ElectricalAssets.Add(electricalAssetsCasted);
                }
                IElectricalTypeAsset electricalTypeAssetsCasted = item.As<IElectricalTypeAsset>();
                if ((electricalTypeAssetsCasted != null))
                {
                    this._parent.ElectricalTypeAssets.Add(electricalTypeAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ElectricalAssetModels.Clear();
                this._parent.ElectricalAssets.Clear();
                this._parent.ElectricalTypeAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ElectricalAssetModels.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElectricalAssets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElectricalTypeAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> electricalAssetModelsEnumerator = this._parent.ElectricalAssetModels.GetEnumerator();
                try
                {
                    for (
                    ; electricalAssetModelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = electricalAssetModelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    electricalAssetModelsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> electricalAssetsEnumerator = this._parent.ElectricalAssets.GetEnumerator();
                try
                {
                    for (
                    ; electricalAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = electricalAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    electricalAssetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> electricalTypeAssetsEnumerator = this._parent.ElectricalTypeAssets.GetEnumerator();
                try
                {
                    for (
                    ; electricalTypeAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = electricalTypeAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    electricalTypeAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IElectricalAssetModel electricalAssetModelItem = item.As<IElectricalAssetModel>();
                if (((electricalAssetModelItem != null) 
                            && this._parent.ElectricalAssetModels.Remove(electricalAssetModelItem)))
                {
                    return true;
                }
                IElectricalAsset electricalAssetItem = item.As<IElectricalAsset>();
                if (((electricalAssetItem != null) 
                            && this._parent.ElectricalAssets.Remove(electricalAssetItem)))
                {
                    return true;
                }
                IElectricalTypeAsset electricalTypeAssetItem = item.As<IElectricalTypeAsset>();
                if (((electricalTypeAssetItem != null) 
                            && this._parent.ElectricalTypeAssets.Remove(electricalTypeAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ElectricalAssetModels).Concat(this._parent.ElectricalAssets).Concat(this._parent.ElectricalTypeAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the wireCount property
        /// </summary>
        private sealed class WireCountProxy : ModelPropertyChange<IElectricalInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WireCountProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.WireCount;
                }
                set
                {
                    this.ModelElement.WireCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WireCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WireCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isConnected property
        /// </summary>
        private sealed class IsConnectedProxy : ModelPropertyChange<IElectricalInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsConnectedProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsConnected;
                }
                set
                {
                    this.ModelElement.IsConnected = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsConnectedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsConnectedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frequency property
        /// </summary>
        private sealed class FrequencyProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Frequency;
                }
                set
                {
                    this.ModelElement.Frequency = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FrequencyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FrequencyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b0 property
        /// </summary>
        private sealed class B0Proxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public B0Proxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B0;
                }
                set
                {
                    this.ModelElement.B0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.B0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.B0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.R0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bil property
        /// </summary>
        private sealed class BilProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BilProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Bil;
                }
                set
                {
                    this.ModelElement.Bil = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BilChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BilChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCount property
        /// </summary>
        private sealed class PhaseCountProxy : ModelPropertyChange<IElectricalInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCountProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PhaseCount;
                }
                set
                {
                    this.ModelElement.PhaseCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.X0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g0 property
        /// </summary>
        private sealed class G0Proxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public G0Proxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G0;
                }
                set
                {
                    this.ModelElement.G0 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.G0Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.G0Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCode property
        /// </summary>
        private sealed class PhaseCodeProxy : ModelPropertyChange<IElectricalInfo, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCodeProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.PhaseCode;
                }
                set
                {
                    this.ModelElement.PhaseCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PhaseCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedCurrent property
        /// </summary>
        private sealed class RatedCurrentProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedCurrentProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedCurrent;
                }
                set
                {
                    this.ModelElement.RatedCurrent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedCurrentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedCurrentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedApparentPower property
        /// </summary>
        private sealed class RatedApparentPowerProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedApparentPowerProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedApparentPower;
                }
                set
                {
                    this.ModelElement.RatedApparentPower = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedApparentPowerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedApparentPowerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g property
        /// </summary>
        private sealed class GProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G;
                }
                set
                {
                    this.ModelElement.G = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b property
        /// </summary>
        private sealed class BProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B;
                }
                set
                {
                    this.ModelElement.B = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedVoltage property
        /// </summary>
        private sealed class RatedVoltageProxy : ModelPropertyChange<IElectricalInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedVoltageProxy(IElectricalInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedVoltage;
                }
                set
                {
                    this.ModelElement.RatedVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedVoltageChanged -= handler;
            }
        }
    }
}

