//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the BushingInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
        "Info")]
    [DebuggerDisplayAttribute("BushingInfo {UUID}")]
    public class BushingInfo : AssetInfo, IBushingInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the C2PowerFactor property
        /// </summary>
        private float _c2PowerFactor;
        
        /// <summary>
        /// The backing field for the C2Capacitance property
        /// </summary>
        private float _c2Capacitance;
        
        /// <summary>
        /// The backing field for the C1Capacitance property
        /// </summary>
        private float _c1Capacitance;
        
        /// <summary>
        /// The backing field for the C1PowerFactor property
        /// </summary>
        private float _c1PowerFactor;
        
        /// <summary>
        /// The backing field for the InsulationKind property
        /// </summary>
        private Nullable<BushingInsulationKind> _insulationKind;
        
        /// <summary>
        /// The backing field for the BushingInsulationPFs property
        /// </summary>
        private BushingInfoBushingInsulationPFsCollection _bushingInsulationPFs;
        
        /// <summary>
        /// The backing field for the Terminal property
        /// </summary>
        private ITerminal _terminal;
        
        private static IClass _classInstance;
        
        public BushingInfo()
        {
            this._bushingInsulationPFs = new BushingInfoBushingInsulationPFsCollection(this);
            this._bushingInsulationPFs.CollectionChanging += this.BushingInsulationPFsCollectionChanging;
            this._bushingInsulationPFs.CollectionChanged += this.BushingInsulationPFsCollectionChanged;
        }
        
        /// <summary>
        /// The c2PowerFactor property
        /// </summary>
        [XmlElementNameAttribute("c2PowerFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float C2PowerFactor
        {
            get
            {
                return this._c2PowerFactor;
            }
            set
            {
                if ((this._c2PowerFactor != value))
                {
                    float old = this._c2PowerFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnC2PowerFactorChanging(e);
                    this.OnPropertyChanging("C2PowerFactor", e);
                    this._c2PowerFactor = value;
                    this.OnC2PowerFactorChanged(e);
                    this.OnPropertyChanged("C2PowerFactor", e);
                }
            }
        }
        
        /// <summary>
        /// The c2Capacitance property
        /// </summary>
        [XmlElementNameAttribute("c2Capacitance")]
        [XmlAttributeAttribute(true)]
        public virtual float C2Capacitance
        {
            get
            {
                return this._c2Capacitance;
            }
            set
            {
                if ((this._c2Capacitance != value))
                {
                    float old = this._c2Capacitance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnC2CapacitanceChanging(e);
                    this.OnPropertyChanging("C2Capacitance", e);
                    this._c2Capacitance = value;
                    this.OnC2CapacitanceChanged(e);
                    this.OnPropertyChanged("C2Capacitance", e);
                }
            }
        }
        
        /// <summary>
        /// The c1Capacitance property
        /// </summary>
        [XmlElementNameAttribute("c1Capacitance")]
        [XmlAttributeAttribute(true)]
        public virtual float C1Capacitance
        {
            get
            {
                return this._c1Capacitance;
            }
            set
            {
                if ((this._c1Capacitance != value))
                {
                    float old = this._c1Capacitance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnC1CapacitanceChanging(e);
                    this.OnPropertyChanging("C1Capacitance", e);
                    this._c1Capacitance = value;
                    this.OnC1CapacitanceChanged(e);
                    this.OnPropertyChanged("C1Capacitance", e);
                }
            }
        }
        
        /// <summary>
        /// The c1PowerFactor property
        /// </summary>
        [XmlElementNameAttribute("c1PowerFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float C1PowerFactor
        {
            get
            {
                return this._c1PowerFactor;
            }
            set
            {
                if ((this._c1PowerFactor != value))
                {
                    float old = this._c1PowerFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnC1PowerFactorChanging(e);
                    this.OnPropertyChanging("C1PowerFactor", e);
                    this._c1PowerFactor = value;
                    this.OnC1PowerFactorChanged(e);
                    this.OnPropertyChanged("C1PowerFactor", e);
                }
            }
        }
        
        /// <summary>
        /// The insulationKind property
        /// </summary>
        [XmlElementNameAttribute("insulationKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<BushingInsulationKind> InsulationKind
        {
            get
            {
                return this._insulationKind;
            }
            set
            {
                if ((this._insulationKind != value))
                {
                    Nullable<BushingInsulationKind> old = this._insulationKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationKindChanging(e);
                    this.OnPropertyChanging("InsulationKind", e);
                    this._insulationKind = value;
                    this.OnInsulationKindChanged(e);
                    this.OnPropertyChanged("InsulationKind", e);
                }
            }
        }
        
        /// <summary>
        /// The BushingInsulationPFs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BushingInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBushingInsulationPF> BushingInsulationPFs
        {
            get
            {
                return this._bushingInsulationPFs;
            }
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BushingInfo")]
        public virtual ITerminal Terminal
        {
            get
            {
                return this._terminal;
            }
            set
            {
                if ((this._terminal != value))
                {
                    ITerminal old = this._terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminalChanging(e);
                    this.OnPropertyChanging("Terminal", e);
                    this._terminal = value;
                    if ((old != null))
                    {
                        old.BushingInfo = null;
                        old.Deleted -= this.OnResetTerminal;
                    }
                    if ((value != null))
                    {
                        value.BushingInfo = this;
                        value.Deleted += this.OnResetTerminal;
                    }
                    this.OnTerminalChanged(e);
                    this.OnPropertyChanged("Terminal", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BushingInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
                            "Info")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the C2PowerFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C2PowerFactorChanging;
        
        /// <summary>
        /// Gets fired when the C2PowerFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C2PowerFactorChanged;
        
        /// <summary>
        /// Gets fired before the C2Capacitance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C2CapacitanceChanging;
        
        /// <summary>
        /// Gets fired when the C2Capacitance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C2CapacitanceChanged;
        
        /// <summary>
        /// Gets fired before the C1Capacitance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C1CapacitanceChanging;
        
        /// <summary>
        /// Gets fired when the C1Capacitance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C1CapacitanceChanged;
        
        /// <summary>
        /// Gets fired before the C1PowerFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C1PowerFactorChanging;
        
        /// <summary>
        /// Gets fired when the C1PowerFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> C1PowerFactorChanged;
        
        /// <summary>
        /// Gets fired before the InsulationKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationKindChanging;
        
        /// <summary>
        /// Gets fired when the InsulationKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationKindChanged;
        
        /// <summary>
        /// Gets fired before the Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanged;
        
        /// <summary>
        /// Raises the C2PowerFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC2PowerFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C2PowerFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C2PowerFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC2PowerFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C2PowerFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C2CapacitanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC2CapacitanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C2CapacitanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C2CapacitanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC2CapacitanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C2CapacitanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C1CapacitanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC1CapacitanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C1CapacitanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C1CapacitanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC1CapacitanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C1CapacitanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C1PowerFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC1PowerFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C1PowerFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the C1PowerFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnC1PowerFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.C1PowerFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BushingInsulationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BushingInsulationPFsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BushingInsulationPFs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BushingInsulationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BushingInsulationPFsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BushingInsulationPFs", e);
        }
        
        /// <summary>
        /// Raises the TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTerminal(object sender, System.EventArgs eventArgs)
        {
            this.Terminal = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "C2POWERFACTOR"))
            {
                return this.C2PowerFactor;
            }
            if ((attribute == "C2CAPACITANCE"))
            {
                return this.C2Capacitance;
            }
            if ((attribute == "C1CAPACITANCE"))
            {
                return this.C1Capacitance;
            }
            if ((attribute == "C1POWERFACTOR"))
            {
                return this.C1PowerFactor;
            }
            if ((attribute == "INSULATIONKIND"))
            {
                return this.InsulationKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BUSHINGINSULATIONPFS"))
            {
                return this._bushingInsulationPFs;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TERMINAL"))
            {
                this.Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "C2POWERFACTOR"))
            {
                this.C2PowerFactor = ((float)(value));
                return;
            }
            if ((feature == "C2CAPACITANCE"))
            {
                this.C2Capacitance = ((float)(value));
                return;
            }
            if ((feature == "C1CAPACITANCE"))
            {
                this.C1Capacitance = ((float)(value));
                return;
            }
            if ((feature == "C1POWERFACTOR"))
            {
                this.C1PowerFactor = ((float)(value));
                return;
            }
            if ((feature == "INSULATIONKIND"))
            {
                this.InsulationKind = ((BushingInsulationKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
                        "Info")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BushingInfo class
        /// </summary>
        public class BushingInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BushingInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BushingInfoReferencedElementsCollection(BushingInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BushingInsulationPFs.Count);
                    if ((this._parent.Terminal != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BushingInsulationPFs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TerminalChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BushingInsulationPFs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TerminalChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBushingInsulationPF bushingInsulationPFsCasted = item.As<IBushingInsulationPF>();
                if ((bushingInsulationPFsCasted != null))
                {
                    this._parent.BushingInsulationPFs.Add(bushingInsulationPFsCasted);
                }
                if ((this._parent.Terminal == null))
                {
                    ITerminal terminalCasted = item.As<ITerminal>();
                    if ((terminalCasted != null))
                    {
                        this._parent.Terminal = terminalCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BushingInsulationPFs.Clear();
                this._parent.Terminal = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.BushingInsulationPFs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Terminal))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> bushingInsulationPFsEnumerator = this._parent.BushingInsulationPFs.GetEnumerator();
                try
                {
                    for (
                    ; bushingInsulationPFsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bushingInsulationPFsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bushingInsulationPFsEnumerator.Dispose();
                }
                if ((this._parent.Terminal != null))
                {
                    array[arrayIndex] = this._parent.Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBushingInsulationPF bushingInsulationPFItem = item.As<IBushingInsulationPF>();
                if (((bushingInsulationPFItem != null) 
                            && this._parent.BushingInsulationPFs.Remove(bushingInsulationPFItem)))
                {
                    return true;
                }
                if ((this._parent.Terminal == item))
                {
                    this._parent.Terminal = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BushingInsulationPFs).Concat(this._parent.Terminal).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the c2PowerFactor property
        /// </summary>
        private sealed class C2PowerFactorProxy : ModelPropertyChange<IBushingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public C2PowerFactorProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.C2PowerFactor;
                }
                set
                {
                    this.ModelElement.C2PowerFactor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C2PowerFactorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C2PowerFactorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the c2Capacitance property
        /// </summary>
        private sealed class C2CapacitanceProxy : ModelPropertyChange<IBushingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public C2CapacitanceProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.C2Capacitance;
                }
                set
                {
                    this.ModelElement.C2Capacitance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C2CapacitanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C2CapacitanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the c1Capacitance property
        /// </summary>
        private sealed class C1CapacitanceProxy : ModelPropertyChange<IBushingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public C1CapacitanceProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.C1Capacitance;
                }
                set
                {
                    this.ModelElement.C1Capacitance = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C1CapacitanceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C1CapacitanceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the c1PowerFactor property
        /// </summary>
        private sealed class C1PowerFactorProxy : ModelPropertyChange<IBushingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public C1PowerFactorProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.C1PowerFactor;
                }
                set
                {
                    this.ModelElement.C1PowerFactor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C1PowerFactorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.C1PowerFactorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationKind property
        /// </summary>
        private sealed class InsulationKindProxy : ModelPropertyChange<IBushingInfo, Nullable<BushingInsulationKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationKindProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<BushingInsulationKind> Value
            {
                get
                {
                    return this.ModelElement.InsulationKind;
                }
                set
                {
                    this.ModelElement.InsulationKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InsulationKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InsulationKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal property
        /// </summary>
        private sealed class TerminalProxy : ModelPropertyChange<IBushingInfo, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TerminalProxy(IBushingInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.Terminal;
                }
                set
                {
                    this.ModelElement.Terminal = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TerminalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TerminalChanged -= handler;
            }
        }
    }
}

