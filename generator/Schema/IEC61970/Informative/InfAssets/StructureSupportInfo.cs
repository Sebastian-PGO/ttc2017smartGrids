//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the StructureSupportInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
        "reSupportInfo")]
    [DebuggerDisplayAttribute("StructureSupportInfo {UUID}")]
    public class StructureSupportInfo : AssetInfo, IStructureSupportInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AnchorKind property
        /// </summary>
        private Nullable<AnchorKind> _anchorKind;
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<StructureSupportKind> _kind;
        
        /// <summary>
        /// The backing field for the Size property
        /// </summary>
        private string _size;
        
        /// <summary>
        /// The backing field for the AnchorRodCount property
        /// </summary>
        private int _anchorRodCount;
        
        /// <summary>
        /// The backing field for the Length property
        /// </summary>
        private float _length;
        
        /// <summary>
        /// The backing field for the AnchorRodLength property
        /// </summary>
        private float _anchorRodLength;
        
        /// <summary>
        /// The backing field for the Direction property
        /// </summary>
        private float _direction;
        
        /// <summary>
        /// The backing field for the SecuredStructure property
        /// </summary>
        private IStructureInfo _securedStructure;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The anchorKind property
        /// </summary>
        [XmlElementNameAttribute("anchorKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<AnchorKind> AnchorKind
        {
            get
            {
                return this._anchorKind;
            }
            set
            {
                if ((this._anchorKind != value))
                {
                    Nullable<AnchorKind> old = this._anchorKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorKindChanging(e);
                    this.OnPropertyChanging("AnchorKind", e);
                    this._anchorKind = value;
                    this.OnAnchorKindChanged(e);
                    this.OnPropertyChanged("AnchorKind", e);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<StructureSupportKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<StructureSupportKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e);
                }
            }
        }
        
        /// <summary>
        /// The size property
        /// </summary>
        [XmlElementNameAttribute("size")]
        [XmlAttributeAttribute(true)]
        public virtual string Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    string old = this._size;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeChanging(e);
                    this.OnPropertyChanging("Size", e);
                    this._size = value;
                    this.OnSizeChanged(e);
                    this.OnPropertyChanged("Size", e);
                }
            }
        }
        
        /// <summary>
        /// The anchorRodCount property
        /// </summary>
        [XmlElementNameAttribute("anchorRodCount")]
        [XmlAttributeAttribute(true)]
        public virtual int AnchorRodCount
        {
            get
            {
                return this._anchorRodCount;
            }
            set
            {
                if ((this._anchorRodCount != value))
                {
                    int old = this._anchorRodCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorRodCountChanging(e);
                    this.OnPropertyChanging("AnchorRodCount", e);
                    this._anchorRodCount = value;
                    this.OnAnchorRodCountChanged(e);
                    this.OnPropertyChanged("AnchorRodCount", e);
                }
            }
        }
        
        /// <summary>
        /// The length property
        /// </summary>
        [XmlElementNameAttribute("length")]
        [XmlAttributeAttribute(true)]
        public virtual float Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    float old = this._length;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLengthChanging(e);
                    this.OnPropertyChanging("Length", e);
                    this._length = value;
                    this.OnLengthChanged(e);
                    this.OnPropertyChanged("Length", e);
                }
            }
        }
        
        /// <summary>
        /// The anchorRodLength property
        /// </summary>
        [XmlElementNameAttribute("anchorRodLength")]
        [XmlAttributeAttribute(true)]
        public virtual float AnchorRodLength
        {
            get
            {
                return this._anchorRodLength;
            }
            set
            {
                if ((this._anchorRodLength != value))
                {
                    float old = this._anchorRodLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorRodLengthChanging(e);
                    this.OnPropertyChanging("AnchorRodLength", e);
                    this._anchorRodLength = value;
                    this.OnAnchorRodLengthChanged(e);
                    this.OnPropertyChanged("AnchorRodLength", e);
                }
            }
        }
        
        /// <summary>
        /// The direction property
        /// </summary>
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        public virtual float Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    float old = this._direction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirectionChanging(e);
                    this.OnPropertyChanging("Direction", e);
                    this._direction = value;
                    this.OnDirectionChanged(e);
                    this.OnPropertyChanged("Direction", e);
                }
            }
        }
        
        /// <summary>
        /// The SecuredStructure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StructureSupportInfos")]
        public virtual IStructureInfo SecuredStructure
        {
            get
            {
                return this._securedStructure;
            }
            set
            {
                if ((this._securedStructure != value))
                {
                    IStructureInfo old = this._securedStructure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecuredStructureChanging(e);
                    this.OnPropertyChanging("SecuredStructure", e);
                    this._securedStructure = value;
                    if ((old != null))
                    {
                        old.StructureSupportInfos.Remove(this);
                        old.Deleted -= this.OnResetSecuredStructure;
                    }
                    if ((value != null))
                    {
                        value.StructureSupportInfos.Add(this);
                        value.Deleted += this.OnResetSecuredStructure;
                    }
                    this.OnSecuredStructureChanged(e);
                    this.OnPropertyChanged("SecuredStructure", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StructureSupportInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
                            "reSupportInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AnchorKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorKindChanging;
        
        /// <summary>
        /// Gets fired when the AnchorKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorKindChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the Size property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanging;
        
        /// <summary>
        /// Gets fired when the Size property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanged;
        
        /// <summary>
        /// Gets fired before the AnchorRodCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorRodCountChanging;
        
        /// <summary>
        /// Gets fired when the AnchorRodCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorRodCountChanged;
        
        /// <summary>
        /// Gets fired before the Length property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LengthChanging;
        
        /// <summary>
        /// Gets fired when the Length property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LengthChanged;
        
        /// <summary>
        /// Gets fired before the AnchorRodLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorRodLengthChanging;
        
        /// <summary>
        /// Gets fired when the AnchorRodLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorRodLengthChanged;
        
        /// <summary>
        /// Gets fired before the Direction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanging;
        
        /// <summary>
        /// Gets fired when the Direction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanged;
        
        /// <summary>
        /// Gets fired before the SecuredStructure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecuredStructureChanging;
        
        /// <summary>
        /// Gets fired when the SecuredStructure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecuredStructureChanged;
        
        /// <summary>
        /// Raises the AnchorKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorRodCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorRodCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorRodCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorRodCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorRodCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorRodCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorRodLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorRodLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorRodLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorRodLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorRodLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorRodLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecuredStructureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecuredStructureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecuredStructureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecuredStructureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecuredStructureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecuredStructureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SecuredStructure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecuredStructure(object sender, System.EventArgs eventArgs)
        {
            this.SecuredStructure = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ANCHORKIND"))
            {
                return this.AnchorKind;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "SIZE"))
            {
                return this.Size;
            }
            if ((attribute == "ANCHORRODCOUNT"))
            {
                return this.AnchorRodCount;
            }
            if ((attribute == "LENGTH"))
            {
                return this.Length;
            }
            if ((attribute == "ANCHORRODLENGTH"))
            {
                return this.AnchorRodLength;
            }
            if ((attribute == "DIRECTION"))
            {
                return this.Direction;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SECUREDSTRUCTURE"))
            {
                this.SecuredStructure = ((IStructureInfo)(value));
                return;
            }
            if ((feature == "ANCHORKIND"))
            {
                this.AnchorKind = ((AnchorKind)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((StructureSupportKind)(value));
                return;
            }
            if ((feature == "SIZE"))
            {
                this.Size = ((string)(value));
                return;
            }
            if ((feature == "ANCHORRODCOUNT"))
            {
                this.AnchorRodCount = ((int)(value));
                return;
            }
            if ((feature == "LENGTH"))
            {
                this.Length = ((float)(value));
                return;
            }
            if ((feature == "ANCHORRODLENGTH"))
            {
                this.AnchorRodLength = ((float)(value));
                return;
            }
            if ((feature == "DIRECTION"))
            {
                this.Direction = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SecuredStructure"))
            {
                return new SecuredStructureProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SecuredStructure"))
            {
                return new SecuredStructureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
                        "reSupportInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructureSupportInfo class
        /// </summary>
        public class StructureSupportInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructureSupportInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructureSupportInfoReferencedElementsCollection(StructureSupportInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SecuredStructure != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SecuredStructureChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SecuredStructureChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SecuredStructure == null))
                {
                    IStructureInfo securedStructureCasted = item.As<IStructureInfo>();
                    if ((securedStructureCasted != null))
                    {
                        this._parent.SecuredStructure = securedStructureCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SecuredStructure = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SecuredStructure))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SecuredStructure != null))
                {
                    array[arrayIndex] = this._parent.SecuredStructure;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SecuredStructure == item))
                {
                    this._parent.SecuredStructure = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SecuredStructure).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the anchorKind property
        /// </summary>
        private sealed class AnchorKindProxy : ModelPropertyChange<IStructureSupportInfo, Nullable<AnchorKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorKindProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<AnchorKind> Value
            {
                get
                {
                    return this.ModelElement.AnchorKind;
                }
                set
                {
                    this.ModelElement.AnchorKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IStructureSupportInfo, Nullable<StructureSupportKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<StructureSupportKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the size property
        /// </summary>
        private sealed class SizeProxy : ModelPropertyChange<IStructureSupportInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Size;
                }
                set
                {
                    this.ModelElement.Size = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the anchorRodCount property
        /// </summary>
        private sealed class AnchorRodCountProxy : ModelPropertyChange<IStructureSupportInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorRodCountProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.AnchorRodCount;
                }
                set
                {
                    this.ModelElement.AnchorRodCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorRodCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorRodCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the length property
        /// </summary>
        private sealed class LengthProxy : ModelPropertyChange<IStructureSupportInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LengthProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Length;
                }
                set
                {
                    this.ModelElement.Length = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the anchorRodLength property
        /// </summary>
        private sealed class AnchorRodLengthProxy : ModelPropertyChange<IStructureSupportInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorRodLengthProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AnchorRodLength;
                }
                set
                {
                    this.ModelElement.AnchorRodLength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorRodLengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorRodLengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the direction property
        /// </summary>
        private sealed class DirectionProxy : ModelPropertyChange<IStructureSupportInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirectionProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Direction;
                }
                set
                {
                    this.ModelElement.Direction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirectionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirectionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SecuredStructure property
        /// </summary>
        private sealed class SecuredStructureProxy : ModelPropertyChange<IStructureSupportInfo, IStructureInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecuredStructureProxy(IStructureSupportInfo modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStructureInfo Value
            {
                get
                {
                    return this.ModelElement.SecuredStructure;
                }
                set
                {
                    this.ModelElement.SecuredStructure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SecuredStructureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SecuredStructureChanged -= handler;
            }
        }
    }
}

