//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the TransformerObservation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Transfo" +
        "rmerObservation")]
    [DebuggerDisplayAttribute("TransformerObservation {UUID}")]
    public class TransformerObservation : IdentifiedObject, ITransformerObservation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OilIFT property
        /// </summary>
        private string _oilIFT;
        
        /// <summary>
        /// The backing field for the HotSpotTemp property
        /// </summary>
        private float _hotSpotTemp;
        
        /// <summary>
        /// The backing field for the OilDielectricStrength property
        /// </summary>
        private float _oilDielectricStrength;
        
        /// <summary>
        /// The backing field for the TopOilTemp property
        /// </summary>
        private float _topOilTemp;
        
        /// <summary>
        /// The backing field for the PumpVibration property
        /// </summary>
        private string _pumpVibration;
        
        /// <summary>
        /// The backing field for the BushingTemp property
        /// </summary>
        private float _bushingTemp;
        
        /// <summary>
        /// The backing field for the WaterContent property
        /// </summary>
        private string _waterContent;
        
        /// <summary>
        /// The backing field for the FreqResp property
        /// </summary>
        private string _freqResp;
        
        /// <summary>
        /// The backing field for the FurfuralDP property
        /// </summary>
        private string _furfuralDP;
        
        /// <summary>
        /// The backing field for the OilLevel property
        /// </summary>
        private string _oilLevel;
        
        /// <summary>
        /// The backing field for the OilColor property
        /// </summary>
        private string _oilColor;
        
        /// <summary>
        /// The backing field for the Dga property
        /// </summary>
        private string _dga;
        
        /// <summary>
        /// The backing field for the OilNeutralizationNumber property
        /// </summary>
        private string _oilNeutralizationNumber;
        
        /// <summary>
        /// The backing field for the TransformerAsset property
        /// </summary>
        private ITransformerAsset _transformerAsset;
        
        /// <summary>
        /// The backing field for the Transformer property
        /// </summary>
        private IDistributionTransformer _transformer;
        
        /// <summary>
        /// The backing field for the ProcedureDataSets property
        /// </summary>
        private TransformerObservationProcedureDataSetsCollection _procedureDataSets;
        
        /// <summary>
        /// The backing field for the BushingInsultationPFs property
        /// </summary>
        private TransformerObservationBushingInsultationPFsCollection _bushingInsultationPFs;
        
        /// <summary>
        /// The backing field for the WindingInsulationPFs property
        /// </summary>
        private TransformerObservationWindingInsulationPFsCollection _windingInsulationPFs;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static IClass _classInstance;
        
        public TransformerObservation()
        {
            this._procedureDataSets = new TransformerObservationProcedureDataSetsCollection(this);
            this._procedureDataSets.CollectionChanging += this.ProcedureDataSetsCollectionChanging;
            this._procedureDataSets.CollectionChanged += this.ProcedureDataSetsCollectionChanged;
            this._bushingInsultationPFs = new TransformerObservationBushingInsultationPFsCollection(this);
            this._bushingInsultationPFs.CollectionChanging += this.BushingInsultationPFsCollectionChanging;
            this._bushingInsultationPFs.CollectionChanged += this.BushingInsultationPFsCollectionChanged;
            this._windingInsulationPFs = new TransformerObservationWindingInsulationPFsCollection(this);
            this._windingInsulationPFs.CollectionChanging += this.WindingInsulationPFsCollectionChanging;
            this._windingInsulationPFs.CollectionChanged += this.WindingInsulationPFsCollectionChanged;
        }
        
        /// <summary>
        /// The oilIFT property
        /// </summary>
        [XmlElementNameAttribute("oilIFT")]
        [XmlAttributeAttribute(true)]
        public virtual string OilIFT
        {
            get
            {
                return this._oilIFT;
            }
            set
            {
                if ((this._oilIFT != value))
                {
                    string old = this._oilIFT;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilIFTChanging(e);
                    this.OnPropertyChanging("OilIFT", e);
                    this._oilIFT = value;
                    this.OnOilIFTChanged(e);
                    this.OnPropertyChanged("OilIFT", e);
                }
            }
        }
        
        /// <summary>
        /// The hotSpotTemp property
        /// </summary>
        [XmlElementNameAttribute("hotSpotTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float HotSpotTemp
        {
            get
            {
                return this._hotSpotTemp;
            }
            set
            {
                if ((this._hotSpotTemp != value))
                {
                    float old = this._hotSpotTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHotSpotTempChanging(e);
                    this.OnPropertyChanging("HotSpotTemp", e);
                    this._hotSpotTemp = value;
                    this.OnHotSpotTempChanged(e);
                    this.OnPropertyChanged("HotSpotTemp", e);
                }
            }
        }
        
        /// <summary>
        /// The oilDielectricStrength property
        /// </summary>
        [XmlElementNameAttribute("oilDielectricStrength")]
        [XmlAttributeAttribute(true)]
        public virtual float OilDielectricStrength
        {
            get
            {
                return this._oilDielectricStrength;
            }
            set
            {
                if ((this._oilDielectricStrength != value))
                {
                    float old = this._oilDielectricStrength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilDielectricStrengthChanging(e);
                    this.OnPropertyChanging("OilDielectricStrength", e);
                    this._oilDielectricStrength = value;
                    this.OnOilDielectricStrengthChanged(e);
                    this.OnPropertyChanged("OilDielectricStrength", e);
                }
            }
        }
        
        /// <summary>
        /// The topOilTemp property
        /// </summary>
        [XmlElementNameAttribute("topOilTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float TopOilTemp
        {
            get
            {
                return this._topOilTemp;
            }
            set
            {
                if ((this._topOilTemp != value))
                {
                    float old = this._topOilTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopOilTempChanging(e);
                    this.OnPropertyChanging("TopOilTemp", e);
                    this._topOilTemp = value;
                    this.OnTopOilTempChanged(e);
                    this.OnPropertyChanged("TopOilTemp", e);
                }
            }
        }
        
        /// <summary>
        /// The pumpVibration property
        /// </summary>
        [XmlElementNameAttribute("pumpVibration")]
        [XmlAttributeAttribute(true)]
        public virtual string PumpVibration
        {
            get
            {
                return this._pumpVibration;
            }
            set
            {
                if ((this._pumpVibration != value))
                {
                    string old = this._pumpVibration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpVibrationChanging(e);
                    this.OnPropertyChanging("PumpVibration", e);
                    this._pumpVibration = value;
                    this.OnPumpVibrationChanged(e);
                    this.OnPropertyChanged("PumpVibration", e);
                }
            }
        }
        
        /// <summary>
        /// The bushingTemp property
        /// </summary>
        [XmlElementNameAttribute("bushingTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float BushingTemp
        {
            get
            {
                return this._bushingTemp;
            }
            set
            {
                if ((this._bushingTemp != value))
                {
                    float old = this._bushingTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBushingTempChanging(e);
                    this.OnPropertyChanging("BushingTemp", e);
                    this._bushingTemp = value;
                    this.OnBushingTempChanged(e);
                    this.OnPropertyChanged("BushingTemp", e);
                }
            }
        }
        
        /// <summary>
        /// The waterContent property
        /// </summary>
        [XmlElementNameAttribute("waterContent")]
        [XmlAttributeAttribute(true)]
        public virtual string WaterContent
        {
            get
            {
                return this._waterContent;
            }
            set
            {
                if ((this._waterContent != value))
                {
                    string old = this._waterContent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWaterContentChanging(e);
                    this.OnPropertyChanging("WaterContent", e);
                    this._waterContent = value;
                    this.OnWaterContentChanged(e);
                    this.OnPropertyChanged("WaterContent", e);
                }
            }
        }
        
        /// <summary>
        /// The freqResp property
        /// </summary>
        [XmlElementNameAttribute("freqResp")]
        [XmlAttributeAttribute(true)]
        public virtual string FreqResp
        {
            get
            {
                return this._freqResp;
            }
            set
            {
                if ((this._freqResp != value))
                {
                    string old = this._freqResp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFreqRespChanging(e);
                    this.OnPropertyChanging("FreqResp", e);
                    this._freqResp = value;
                    this.OnFreqRespChanged(e);
                    this.OnPropertyChanged("FreqResp", e);
                }
            }
        }
        
        /// <summary>
        /// The furfuralDP property
        /// </summary>
        [XmlElementNameAttribute("furfuralDP")]
        [XmlAttributeAttribute(true)]
        public virtual string FurfuralDP
        {
            get
            {
                return this._furfuralDP;
            }
            set
            {
                if ((this._furfuralDP != value))
                {
                    string old = this._furfuralDP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFurfuralDPChanging(e);
                    this.OnPropertyChanging("FurfuralDP", e);
                    this._furfuralDP = value;
                    this.OnFurfuralDPChanged(e);
                    this.OnPropertyChanged("FurfuralDP", e);
                }
            }
        }
        
        /// <summary>
        /// The oilLevel property
        /// </summary>
        [XmlElementNameAttribute("oilLevel")]
        [XmlAttributeAttribute(true)]
        public virtual string OilLevel
        {
            get
            {
                return this._oilLevel;
            }
            set
            {
                if ((this._oilLevel != value))
                {
                    string old = this._oilLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilLevelChanging(e);
                    this.OnPropertyChanging("OilLevel", e);
                    this._oilLevel = value;
                    this.OnOilLevelChanged(e);
                    this.OnPropertyChanged("OilLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The oilColor property
        /// </summary>
        [XmlElementNameAttribute("oilColor")]
        [XmlAttributeAttribute(true)]
        public virtual string OilColor
        {
            get
            {
                return this._oilColor;
            }
            set
            {
                if ((this._oilColor != value))
                {
                    string old = this._oilColor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilColorChanging(e);
                    this.OnPropertyChanging("OilColor", e);
                    this._oilColor = value;
                    this.OnOilColorChanged(e);
                    this.OnPropertyChanged("OilColor", e);
                }
            }
        }
        
        /// <summary>
        /// The dga property
        /// </summary>
        [XmlElementNameAttribute("dga")]
        [XmlAttributeAttribute(true)]
        public virtual string Dga
        {
            get
            {
                return this._dga;
            }
            set
            {
                if ((this._dga != value))
                {
                    string old = this._dga;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDgaChanging(e);
                    this.OnPropertyChanging("Dga", e);
                    this._dga = value;
                    this.OnDgaChanged(e);
                    this.OnPropertyChanged("Dga", e);
                }
            }
        }
        
        /// <summary>
        /// The oilNeutralizationNumber property
        /// </summary>
        [XmlElementNameAttribute("oilNeutralizationNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string OilNeutralizationNumber
        {
            get
            {
                return this._oilNeutralizationNumber;
            }
            set
            {
                if ((this._oilNeutralizationNumber != value))
                {
                    string old = this._oilNeutralizationNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilNeutralizationNumberChanging(e);
                    this.OnPropertyChanging("OilNeutralizationNumber", e);
                    this._oilNeutralizationNumber = value;
                    this.OnOilNeutralizationNumberChanged(e);
                    this.OnPropertyChanged("OilNeutralizationNumber", e);
                }
            }
        }
        
        /// <summary>
        /// The TransformerAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerObservations")]
        public virtual ITransformerAsset TransformerAsset
        {
            get
            {
                return this._transformerAsset;
            }
            set
            {
                if ((this._transformerAsset != value))
                {
                    ITransformerAsset old = this._transformerAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerAssetChanging(e);
                    this.OnPropertyChanging("TransformerAsset", e);
                    this._transformerAsset = value;
                    if ((old != null))
                    {
                        old.TransformerObservations.Remove(this);
                        old.Deleted -= this.OnResetTransformerAsset;
                    }
                    if ((value != null))
                    {
                        value.TransformerObservations.Add(this);
                        value.Deleted += this.OnResetTransformerAsset;
                    }
                    this.OnTransformerAssetChanged(e);
                    this.OnPropertyChanged("TransformerAsset", e);
                }
            }
        }
        
        /// <summary>
        /// The Transformer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerObservations")]
        public virtual IDistributionTransformer Transformer
        {
            get
            {
                return this._transformer;
            }
            set
            {
                if ((this._transformer != value))
                {
                    IDistributionTransformer old = this._transformer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerChanging(e);
                    this.OnPropertyChanging("Transformer", e);
                    this._transformer = value;
                    if ((old != null))
                    {
                        old.TransformerObservations.Remove(this);
                        old.Deleted -= this.OnResetTransformer;
                    }
                    if ((value != null))
                    {
                        value.TransformerObservations.Add(this);
                        value.Deleted += this.OnResetTransformer;
                    }
                    this.OnTransformerChanged(e);
                    this.OnPropertyChanged("Transformer", e);
                }
            }
        }
        
        /// <summary>
        /// The ProcedureDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerObservations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProcedureDataSet> ProcedureDataSets
        {
            get
            {
                return this._procedureDataSets;
            }
        }
        
        /// <summary>
        /// The BushingInsultationPFs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerObservation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBushingInsulationPF> BushingInsultationPFs
        {
            get
            {
                return this._bushingInsultationPFs;
            }
        }
        
        /// <summary>
        /// The WindingInsulationPFs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerObservation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWindingInsulation> WindingInsulationPFs
        {
            get
            {
                return this._windingInsulationPFs;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransformerObservationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Transfo" +
                            "rmerObservation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OilIFT property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilIFTChanging;
        
        /// <summary>
        /// Gets fired when the OilIFT property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilIFTChanged;
        
        /// <summary>
        /// Gets fired before the HotSpotTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotSpotTempChanging;
        
        /// <summary>
        /// Gets fired when the HotSpotTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotSpotTempChanged;
        
        /// <summary>
        /// Gets fired before the OilDielectricStrength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilDielectricStrengthChanging;
        
        /// <summary>
        /// Gets fired when the OilDielectricStrength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilDielectricStrengthChanged;
        
        /// <summary>
        /// Gets fired before the TopOilTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopOilTempChanging;
        
        /// <summary>
        /// Gets fired when the TopOilTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopOilTempChanged;
        
        /// <summary>
        /// Gets fired before the PumpVibration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpVibrationChanging;
        
        /// <summary>
        /// Gets fired when the PumpVibration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpVibrationChanged;
        
        /// <summary>
        /// Gets fired before the BushingTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingTempChanging;
        
        /// <summary>
        /// Gets fired when the BushingTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingTempChanged;
        
        /// <summary>
        /// Gets fired before the WaterContent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WaterContentChanging;
        
        /// <summary>
        /// Gets fired when the WaterContent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WaterContentChanged;
        
        /// <summary>
        /// Gets fired before the FreqResp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqRespChanging;
        
        /// <summary>
        /// Gets fired when the FreqResp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqRespChanged;
        
        /// <summary>
        /// Gets fired before the FurfuralDP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FurfuralDPChanging;
        
        /// <summary>
        /// Gets fired when the FurfuralDP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FurfuralDPChanged;
        
        /// <summary>
        /// Gets fired before the OilLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilLevelChanging;
        
        /// <summary>
        /// Gets fired when the OilLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilLevelChanged;
        
        /// <summary>
        /// Gets fired before the OilColor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilColorChanging;
        
        /// <summary>
        /// Gets fired when the OilColor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilColorChanged;
        
        /// <summary>
        /// Gets fired before the Dga property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DgaChanging;
        
        /// <summary>
        /// Gets fired when the Dga property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DgaChanged;
        
        /// <summary>
        /// Gets fired before the OilNeutralizationNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilNeutralizationNumberChanging;
        
        /// <summary>
        /// Gets fired when the OilNeutralizationNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilNeutralizationNumberChanged;
        
        /// <summary>
        /// Gets fired before the TransformerAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerAssetChanging;
        
        /// <summary>
        /// Gets fired when the TransformerAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerAssetChanged;
        
        /// <summary>
        /// Gets fired before the Transformer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanging;
        
        /// <summary>
        /// Gets fired when the Transformer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Raises the OilIFTChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilIFTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilIFTChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilIFTChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilIFTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilIFTChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotSpotTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotSpotTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotSpotTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotSpotTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotSpotTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotSpotTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilDielectricStrengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilDielectricStrengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilDielectricStrengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilDielectricStrengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilDielectricStrengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilDielectricStrengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopOilTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopOilTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopOilTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopOilTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopOilTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopOilTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpVibrationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpVibrationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpVibrationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpVibrationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpVibrationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpVibrationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BushingTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BushingTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WaterContentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWaterContentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WaterContentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WaterContentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWaterContentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WaterContentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FreqRespChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqRespChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqRespChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FreqRespChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqRespChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqRespChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FurfuralDPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFurfuralDPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FurfuralDPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FurfuralDPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFurfuralDPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FurfuralDPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilColorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilColorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilColorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilColorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilColorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilColorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DgaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDgaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DgaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DgaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDgaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DgaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilNeutralizationNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilNeutralizationNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilNeutralizationNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilNeutralizationNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilNeutralizationNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilNeutralizationNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerAsset(object sender, System.EventArgs eventArgs)
        {
            this.TransformerAsset = null;
        }
        
        /// <summary>
        /// Raises the TransformerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Transformer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformer(object sender, System.EventArgs eventArgs)
        {
            this.Transformer = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProcedureDataSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProcedureDataSets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BushingInsultationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BushingInsultationPFsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BushingInsultationPFs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BushingInsultationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BushingInsultationPFsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BushingInsultationPFs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WindingInsulationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingInsulationPFsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WindingInsulationPFs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WindingInsulationPFs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingInsulationPFsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WindingInsulationPFs", e);
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OILIFT"))
            {
                return this.OilIFT;
            }
            if ((attribute == "HOTSPOTTEMP"))
            {
                return this.HotSpotTemp;
            }
            if ((attribute == "OILDIELECTRICSTRENGTH"))
            {
                return this.OilDielectricStrength;
            }
            if ((attribute == "TOPOILTEMP"))
            {
                return this.TopOilTemp;
            }
            if ((attribute == "PUMPVIBRATION"))
            {
                return this.PumpVibration;
            }
            if ((attribute == "BUSHINGTEMP"))
            {
                return this.BushingTemp;
            }
            if ((attribute == "WATERCONTENT"))
            {
                return this.WaterContent;
            }
            if ((attribute == "FREQRESP"))
            {
                return this.FreqResp;
            }
            if ((attribute == "FURFURALDP"))
            {
                return this.FurfuralDP;
            }
            if ((attribute == "OILLEVEL"))
            {
                return this.OilLevel;
            }
            if ((attribute == "OILCOLOR"))
            {
                return this.OilColor;
            }
            if ((attribute == "DGA"))
            {
                return this.Dga;
            }
            if ((attribute == "OILNEUTRALIZATIONNUMBER"))
            {
                return this.OilNeutralizationNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROCEDUREDATASETS"))
            {
                return this._procedureDataSets;
            }
            if ((feature == "BUSHINGINSULTATIONPFS"))
            {
                return this._bushingInsultationPFs;
            }
            if ((feature == "WINDINGINSULATIONPFS"))
            {
                return this._windingInsulationPFs;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMERASSET"))
            {
                this.TransformerAsset = ((ITransformerAsset)(value));
                return;
            }
            if ((feature == "TRANSFORMER"))
            {
                this.Transformer = ((IDistributionTransformer)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "OILIFT"))
            {
                this.OilIFT = ((string)(value));
                return;
            }
            if ((feature == "HOTSPOTTEMP"))
            {
                this.HotSpotTemp = ((float)(value));
                return;
            }
            if ((feature == "OILDIELECTRICSTRENGTH"))
            {
                this.OilDielectricStrength = ((float)(value));
                return;
            }
            if ((feature == "TOPOILTEMP"))
            {
                this.TopOilTemp = ((float)(value));
                return;
            }
            if ((feature == "PUMPVIBRATION"))
            {
                this.PumpVibration = ((string)(value));
                return;
            }
            if ((feature == "BUSHINGTEMP"))
            {
                this.BushingTemp = ((float)(value));
                return;
            }
            if ((feature == "WATERCONTENT"))
            {
                this.WaterContent = ((string)(value));
                return;
            }
            if ((feature == "FREQRESP"))
            {
                this.FreqResp = ((string)(value));
                return;
            }
            if ((feature == "FURFURALDP"))
            {
                this.FurfuralDP = ((string)(value));
                return;
            }
            if ((feature == "OILLEVEL"))
            {
                this.OilLevel = ((string)(value));
                return;
            }
            if ((feature == "OILCOLOR"))
            {
                this.OilColor = ((string)(value));
                return;
            }
            if ((feature == "DGA"))
            {
                this.Dga = ((string)(value));
                return;
            }
            if ((feature == "OILNEUTRALIZATIONNUMBER"))
            {
                this.OilNeutralizationNumber = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransformerAsset"))
            {
                return new TransformerAssetProxy(this);
            }
            if ((attribute == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransformerAsset"))
            {
                return new TransformerAssetProxy(this);
            }
            if ((reference == "Transformer"))
            {
                return new TransformerProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Transfo" +
                        "rmerObservation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransformerObservation class
        /// </summary>
        public class TransformerObservationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransformerObservation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransformerObservationReferencedElementsCollection(TransformerObservation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TransformerAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Transformer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ProcedureDataSets.Count);
                    count = (count + this._parent.BushingInsultationPFs.Count);
                    count = (count + this._parent.WindingInsulationPFs.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransformerAssetChanged += this.PropagateValueChanges;
                this._parent.TransformerChanged += this.PropagateValueChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BushingInsultationPFs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WindingInsulationPFs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransformerAssetChanged -= this.PropagateValueChanges;
                this._parent.TransformerChanged -= this.PropagateValueChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BushingInsultationPFs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WindingInsulationPFs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TransformerAsset == null))
                {
                    ITransformerAsset transformerAssetCasted = item.As<ITransformerAsset>();
                    if ((transformerAssetCasted != null))
                    {
                        this._parent.TransformerAsset = transformerAssetCasted;
                        return;
                    }
                }
                if ((this._parent.Transformer == null))
                {
                    IDistributionTransformer transformerCasted = item.As<IDistributionTransformer>();
                    if ((transformerCasted != null))
                    {
                        this._parent.Transformer = transformerCasted;
                        return;
                    }
                }
                IProcedureDataSet procedureDataSetsCasted = item.As<IProcedureDataSet>();
                if ((procedureDataSetsCasted != null))
                {
                    this._parent.ProcedureDataSets.Add(procedureDataSetsCasted);
                }
                IBushingInsulationPF bushingInsultationPFsCasted = item.As<IBushingInsulationPF>();
                if ((bushingInsultationPFsCasted != null))
                {
                    this._parent.BushingInsultationPFs.Add(bushingInsultationPFsCasted);
                }
                IWindingInsulation windingInsulationPFsCasted = item.As<IWindingInsulation>();
                if ((windingInsulationPFsCasted != null))
                {
                    this._parent.WindingInsulationPFs.Add(windingInsulationPFsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransformerAsset = null;
                this._parent.Transformer = null;
                this._parent.ProcedureDataSets.Clear();
                this._parent.BushingInsultationPFs.Clear();
                this._parent.WindingInsulationPFs.Clear();
                this._parent.Status = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TransformerAsset))
                {
                    return true;
                }
                if ((item == this._parent.Transformer))
                {
                    return true;
                }
                if (this._parent.ProcedureDataSets.Contains(item))
                {
                    return true;
                }
                if (this._parent.BushingInsultationPFs.Contains(item))
                {
                    return true;
                }
                if (this._parent.WindingInsulationPFs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TransformerAsset != null))
                {
                    array[arrayIndex] = this._parent.TransformerAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Transformer != null))
                {
                    array[arrayIndex] = this._parent.Transformer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> procedureDataSetsEnumerator = this._parent.ProcedureDataSets.GetEnumerator();
                try
                {
                    for (
                    ; procedureDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = procedureDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    procedureDataSetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bushingInsultationPFsEnumerator = this._parent.BushingInsultationPFs.GetEnumerator();
                try
                {
                    for (
                    ; bushingInsultationPFsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bushingInsultationPFsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bushingInsultationPFsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> windingInsulationPFsEnumerator = this._parent.WindingInsulationPFs.GetEnumerator();
                try
                {
                    for (
                    ; windingInsulationPFsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = windingInsulationPFsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    windingInsulationPFsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TransformerAsset == item))
                {
                    this._parent.TransformerAsset = null;
                    return true;
                }
                if ((this._parent.Transformer == item))
                {
                    this._parent.Transformer = null;
                    return true;
                }
                IProcedureDataSet procedureDataSetItem = item.As<IProcedureDataSet>();
                if (((procedureDataSetItem != null) 
                            && this._parent.ProcedureDataSets.Remove(procedureDataSetItem)))
                {
                    return true;
                }
                IBushingInsulationPF bushingInsulationPFItem = item.As<IBushingInsulationPF>();
                if (((bushingInsulationPFItem != null) 
                            && this._parent.BushingInsultationPFs.Remove(bushingInsulationPFItem)))
                {
                    return true;
                }
                IWindingInsulation windingInsulationItem = item.As<IWindingInsulation>();
                if (((windingInsulationItem != null) 
                            && this._parent.WindingInsulationPFs.Remove(windingInsulationItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransformerAsset).Concat(this._parent.Transformer).Concat(this._parent.ProcedureDataSets).Concat(this._parent.BushingInsultationPFs).Concat(this._parent.WindingInsulationPFs).Concat(this._parent.Status).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilIFT property
        /// </summary>
        private sealed class OilIFTProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilIFTProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OilIFT;
                }
                set
                {
                    this.ModelElement.OilIFT = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilIFTChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilIFTChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hotSpotTemp property
        /// </summary>
        private sealed class HotSpotTempProxy : ModelPropertyChange<ITransformerObservation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HotSpotTempProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HotSpotTemp;
                }
                set
                {
                    this.ModelElement.HotSpotTemp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HotSpotTempChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HotSpotTempChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilDielectricStrength property
        /// </summary>
        private sealed class OilDielectricStrengthProxy : ModelPropertyChange<ITransformerObservation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilDielectricStrengthProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OilDielectricStrength;
                }
                set
                {
                    this.ModelElement.OilDielectricStrength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilDielectricStrengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilDielectricStrengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the topOilTemp property
        /// </summary>
        private sealed class TopOilTempProxy : ModelPropertyChange<ITransformerObservation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopOilTempProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TopOilTemp;
                }
                set
                {
                    this.ModelElement.TopOilTemp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopOilTempChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TopOilTempChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpVibration property
        /// </summary>
        private sealed class PumpVibrationProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpVibrationProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PumpVibration;
                }
                set
                {
                    this.ModelElement.PumpVibration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PumpVibrationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PumpVibrationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bushingTemp property
        /// </summary>
        private sealed class BushingTempProxy : ModelPropertyChange<ITransformerObservation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BushingTempProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BushingTemp;
                }
                set
                {
                    this.ModelElement.BushingTemp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BushingTempChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BushingTempChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the waterContent property
        /// </summary>
        private sealed class WaterContentProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WaterContentProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.WaterContent;
                }
                set
                {
                    this.ModelElement.WaterContent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WaterContentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WaterContentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the freqResp property
        /// </summary>
        private sealed class FreqRespProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FreqRespProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FreqResp;
                }
                set
                {
                    this.ModelElement.FreqResp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FreqRespChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FreqRespChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the furfuralDP property
        /// </summary>
        private sealed class FurfuralDPProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FurfuralDPProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FurfuralDP;
                }
                set
                {
                    this.ModelElement.FurfuralDP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FurfuralDPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FurfuralDPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilLevel property
        /// </summary>
        private sealed class OilLevelProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilLevelProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OilLevel;
                }
                set
                {
                    this.ModelElement.OilLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilColor property
        /// </summary>
        private sealed class OilColorProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilColorProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OilColor;
                }
                set
                {
                    this.ModelElement.OilColor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilColorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilColorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dga property
        /// </summary>
        private sealed class DgaProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DgaProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dga;
                }
                set
                {
                    this.ModelElement.Dga = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DgaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DgaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilNeutralizationNumber property
        /// </summary>
        private sealed class OilNeutralizationNumberProxy : ModelPropertyChange<ITransformerObservation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilNeutralizationNumberProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OilNeutralizationNumber;
                }
                set
                {
                    this.ModelElement.OilNeutralizationNumber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilNeutralizationNumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilNeutralizationNumberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerAsset property
        /// </summary>
        private sealed class TransformerAssetProxy : ModelPropertyChange<ITransformerObservation, ITransformerAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerAssetProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerAsset Value
            {
                get
                {
                    return this.ModelElement.TransformerAsset;
                }
                set
                {
                    this.ModelElement.TransformerAsset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerAssetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerAssetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transformer property
        /// </summary>
        private sealed class TransformerProxy : ModelPropertyChange<ITransformerObservation, IDistributionTransformer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformer Value
            {
                get
                {
                    return this.ModelElement.Transformer;
                }
                set
                {
                    this.ModelElement.Transformer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ITransformerObservation, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ITransformerObservation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
    }
}

