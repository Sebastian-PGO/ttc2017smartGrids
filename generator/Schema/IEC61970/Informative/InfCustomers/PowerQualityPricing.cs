//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers
{
    
    
    /// <summary>
    /// The default implementation of the PowerQualityPricing class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCustomers")]
    [XmlNamespacePrefixAttribute("cimInfCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Powe" +
        "rQualityPricing")]
    [DebuggerDisplayAttribute("PowerQualityPricing {UUID}")]
    public class PowerQualityPricing : Document, IPowerQualityPricing, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ValueUninterruptedServiceEnergy property
        /// </summary>
        private float _valueUninterruptedServiceEnergy;
        
        /// <summary>
        /// The backing field for the VoltImbalanceViolCost property
        /// </summary>
        private float _voltImbalanceViolCost;
        
        /// <summary>
        /// The backing field for the VoltLimitViolCost property
        /// </summary>
        private float _voltLimitViolCost;
        
        /// <summary>
        /// The backing field for the EmergencyLowVoltLimit property
        /// </summary>
        private float _emergencyLowVoltLimit;
        
        /// <summary>
        /// The backing field for the ValueUninterruptedServiceP property
        /// </summary>
        private float _valueUninterruptedServiceP;
        
        /// <summary>
        /// The backing field for the EmergencyHighVoltLimit property
        /// </summary>
        private float _emergencyHighVoltLimit;
        
        /// <summary>
        /// The backing field for the PowerFactorMin property
        /// </summary>
        private float _powerFactorMin;
        
        /// <summary>
        /// The backing field for the NormalLowVoltLimit property
        /// </summary>
        private float _normalLowVoltLimit;
        
        /// <summary>
        /// The backing field for the NormalHighVoltLimit property
        /// </summary>
        private float _normalHighVoltLimit;
        
        /// <summary>
        /// The backing field for the PricingStructure property
        /// </summary>
        private IPricingStructure _pricingStructure;
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private PowerQualityPricingServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        private static IClass _classInstance;
        
        public PowerQualityPricing()
        {
            this._serviceDeliveryPoints = new PowerQualityPricingServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
        }
        
        /// <summary>
        /// The valueUninterruptedServiceEnergy property
        /// </summary>
        [XmlElementNameAttribute("valueUninterruptedServiceEnergy")]
        [XmlAttributeAttribute(true)]
        public virtual float ValueUninterruptedServiceEnergy
        {
            get
            {
                return this._valueUninterruptedServiceEnergy;
            }
            set
            {
                if ((this._valueUninterruptedServiceEnergy != value))
                {
                    float old = this._valueUninterruptedServiceEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueUninterruptedServiceEnergyChanging(e);
                    this.OnPropertyChanging("ValueUninterruptedServiceEnergy", e);
                    this._valueUninterruptedServiceEnergy = value;
                    this.OnValueUninterruptedServiceEnergyChanged(e);
                    this.OnPropertyChanged("ValueUninterruptedServiceEnergy", e);
                }
            }
        }
        
        /// <summary>
        /// The voltImbalanceViolCost property
        /// </summary>
        [XmlElementNameAttribute("voltImbalanceViolCost")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltImbalanceViolCost
        {
            get
            {
                return this._voltImbalanceViolCost;
            }
            set
            {
                if ((this._voltImbalanceViolCost != value))
                {
                    float old = this._voltImbalanceViolCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltImbalanceViolCostChanging(e);
                    this.OnPropertyChanging("VoltImbalanceViolCost", e);
                    this._voltImbalanceViolCost = value;
                    this.OnVoltImbalanceViolCostChanged(e);
                    this.OnPropertyChanged("VoltImbalanceViolCost", e);
                }
            }
        }
        
        /// <summary>
        /// The voltLimitViolCost property
        /// </summary>
        [XmlElementNameAttribute("voltLimitViolCost")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltLimitViolCost
        {
            get
            {
                return this._voltLimitViolCost;
            }
            set
            {
                if ((this._voltLimitViolCost != value))
                {
                    float old = this._voltLimitViolCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltLimitViolCostChanging(e);
                    this.OnPropertyChanging("VoltLimitViolCost", e);
                    this._voltLimitViolCost = value;
                    this.OnVoltLimitViolCostChanged(e);
                    this.OnPropertyChanged("VoltLimitViolCost", e);
                }
            }
        }
        
        /// <summary>
        /// The emergencyLowVoltLimit property
        /// </summary>
        [XmlElementNameAttribute("emergencyLowVoltLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float EmergencyLowVoltLimit
        {
            get
            {
                return this._emergencyLowVoltLimit;
            }
            set
            {
                if ((this._emergencyLowVoltLimit != value))
                {
                    float old = this._emergencyLowVoltLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEmergencyLowVoltLimitChanging(e);
                    this.OnPropertyChanging("EmergencyLowVoltLimit", e);
                    this._emergencyLowVoltLimit = value;
                    this.OnEmergencyLowVoltLimitChanged(e);
                    this.OnPropertyChanged("EmergencyLowVoltLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The valueUninterruptedServiceP property
        /// </summary>
        [XmlElementNameAttribute("valueUninterruptedServiceP")]
        [XmlAttributeAttribute(true)]
        public virtual float ValueUninterruptedServiceP
        {
            get
            {
                return this._valueUninterruptedServiceP;
            }
            set
            {
                if ((this._valueUninterruptedServiceP != value))
                {
                    float old = this._valueUninterruptedServiceP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueUninterruptedServicePChanging(e);
                    this.OnPropertyChanging("ValueUninterruptedServiceP", e);
                    this._valueUninterruptedServiceP = value;
                    this.OnValueUninterruptedServicePChanged(e);
                    this.OnPropertyChanged("ValueUninterruptedServiceP", e);
                }
            }
        }
        
        /// <summary>
        /// The emergencyHighVoltLimit property
        /// </summary>
        [XmlElementNameAttribute("emergencyHighVoltLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float EmergencyHighVoltLimit
        {
            get
            {
                return this._emergencyHighVoltLimit;
            }
            set
            {
                if ((this._emergencyHighVoltLimit != value))
                {
                    float old = this._emergencyHighVoltLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEmergencyHighVoltLimitChanging(e);
                    this.OnPropertyChanging("EmergencyHighVoltLimit", e);
                    this._emergencyHighVoltLimit = value;
                    this.OnEmergencyHighVoltLimitChanged(e);
                    this.OnPropertyChanged("EmergencyHighVoltLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The powerFactorMin property
        /// </summary>
        [XmlElementNameAttribute("powerFactorMin")]
        [XmlAttributeAttribute(true)]
        public virtual float PowerFactorMin
        {
            get
            {
                return this._powerFactorMin;
            }
            set
            {
                if ((this._powerFactorMin != value))
                {
                    float old = this._powerFactorMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerFactorMinChanging(e);
                    this.OnPropertyChanging("PowerFactorMin", e);
                    this._powerFactorMin = value;
                    this.OnPowerFactorMinChanged(e);
                    this.OnPropertyChanged("PowerFactorMin", e);
                }
            }
        }
        
        /// <summary>
        /// The normalLowVoltLimit property
        /// </summary>
        [XmlElementNameAttribute("normalLowVoltLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float NormalLowVoltLimit
        {
            get
            {
                return this._normalLowVoltLimit;
            }
            set
            {
                if ((this._normalLowVoltLimit != value))
                {
                    float old = this._normalLowVoltLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalLowVoltLimitChanging(e);
                    this.OnPropertyChanging("NormalLowVoltLimit", e);
                    this._normalLowVoltLimit = value;
                    this.OnNormalLowVoltLimitChanged(e);
                    this.OnPropertyChanged("NormalLowVoltLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The normalHighVoltLimit property
        /// </summary>
        [XmlElementNameAttribute("normalHighVoltLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float NormalHighVoltLimit
        {
            get
            {
                return this._normalHighVoltLimit;
            }
            set
            {
                if ((this._normalHighVoltLimit != value))
                {
                    float old = this._normalHighVoltLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalHighVoltLimitChanging(e);
                    this.OnPropertyChanging("NormalHighVoltLimit", e);
                    this._normalHighVoltLimit = value;
                    this.OnNormalHighVoltLimitChanged(e);
                    this.OnPropertyChanged("NormalHighVoltLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The PricingStructure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerQualityPricings")]
        public virtual IPricingStructure PricingStructure
        {
            get
            {
                return this._pricingStructure;
            }
            set
            {
                if ((this._pricingStructure != value))
                {
                    IPricingStructure old = this._pricingStructure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPricingStructureChanging(e);
                    this.OnPropertyChanging("PricingStructure", e);
                    this._pricingStructure = value;
                    if ((old != null))
                    {
                        old.PowerQualityPricings.Remove(this);
                        old.Deleted -= this.OnResetPricingStructure;
                    }
                    if ((value != null))
                    {
                        value.PowerQualityPricings.Add(this);
                        value.Deleted += this.OnResetPricingStructure;
                    }
                    this.OnPricingStructureChanged(e);
                    this.OnPropertyChanged("PricingStructure", e);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerQualityPricings")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PowerQualityPricingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Powe" +
                            "rQualityPricing")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ValueUninterruptedServiceEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServiceEnergyChanging;
        
        /// <summary>
        /// Gets fired when the ValueUninterruptedServiceEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServiceEnergyChanged;
        
        /// <summary>
        /// Gets fired before the VoltImbalanceViolCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltImbalanceViolCostChanging;
        
        /// <summary>
        /// Gets fired when the VoltImbalanceViolCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltImbalanceViolCostChanged;
        
        /// <summary>
        /// Gets fired before the VoltLimitViolCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltLimitViolCostChanging;
        
        /// <summary>
        /// Gets fired when the VoltLimitViolCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltLimitViolCostChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyLowVoltLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencyLowVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyLowVoltLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencyLowVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the ValueUninterruptedServiceP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServicePChanging;
        
        /// <summary>
        /// Gets fired when the ValueUninterruptedServiceP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServicePChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyHighVoltLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencyHighVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyHighVoltLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencyHighVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the PowerFactorMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorMinChanging;
        
        /// <summary>
        /// Gets fired when the PowerFactorMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerFactorMinChanged;
        
        /// <summary>
        /// Gets fired before the NormalLowVoltLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalLowVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the NormalLowVoltLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalLowVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the NormalHighVoltLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalHighVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the NormalHighVoltLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalHighVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the PricingStructure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PricingStructureChanging;
        
        /// <summary>
        /// Gets fired when the PricingStructure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PricingStructureChanged;
        
        /// <summary>
        /// Raises the ValueUninterruptedServiceEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUninterruptedServiceEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUninterruptedServiceEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueUninterruptedServiceEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUninterruptedServiceEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUninterruptedServiceEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltImbalanceViolCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltImbalanceViolCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltImbalanceViolCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltImbalanceViolCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltImbalanceViolCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltImbalanceViolCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltLimitViolCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltLimitViolCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltLimitViolCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltLimitViolCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltLimitViolCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltLimitViolCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencyLowVoltLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencyLowVoltLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencyLowVoltLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencyLowVoltLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencyLowVoltLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencyLowVoltLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueUninterruptedServicePChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUninterruptedServicePChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUninterruptedServicePChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueUninterruptedServicePChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUninterruptedServicePChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUninterruptedServicePChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencyHighVoltLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencyHighVoltLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencyHighVoltLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencyHighVoltLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencyHighVoltLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencyHighVoltLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerFactorMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerFactorMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerFactorMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalLowVoltLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalLowVoltLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalLowVoltLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalLowVoltLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalLowVoltLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalLowVoltLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalHighVoltLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalHighVoltLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalHighVoltLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalHighVoltLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalHighVoltLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalHighVoltLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PricingStructureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPricingStructureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PricingStructureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PricingStructureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPricingStructureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PricingStructureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PricingStructure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPricingStructure(object sender, System.EventArgs eventArgs)
        {
            this.PricingStructure = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUEUNINTERRUPTEDSERVICEENERGY"))
            {
                return this.ValueUninterruptedServiceEnergy;
            }
            if ((attribute == "VOLTIMBALANCEVIOLCOST"))
            {
                return this.VoltImbalanceViolCost;
            }
            if ((attribute == "VOLTLIMITVIOLCOST"))
            {
                return this.VoltLimitViolCost;
            }
            if ((attribute == "EMERGENCYLOWVOLTLIMIT"))
            {
                return this.EmergencyLowVoltLimit;
            }
            if ((attribute == "VALUEUNINTERRUPTEDSERVICEP"))
            {
                return this.ValueUninterruptedServiceP;
            }
            if ((attribute == "EMERGENCYHIGHVOLTLIMIT"))
            {
                return this.EmergencyHighVoltLimit;
            }
            if ((attribute == "POWERFACTORMIN"))
            {
                return this.PowerFactorMin;
            }
            if ((attribute == "NORMALLOWVOLTLIMIT"))
            {
                return this.NormalLowVoltLimit;
            }
            if ((attribute == "NORMALHIGHVOLTLIMIT"))
            {
                return this.NormalHighVoltLimit;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PRICINGSTRUCTURE"))
            {
                this.PricingStructure = ((IPricingStructure)(value));
                return;
            }
            if ((feature == "VALUEUNINTERRUPTEDSERVICEENERGY"))
            {
                this.ValueUninterruptedServiceEnergy = ((float)(value));
                return;
            }
            if ((feature == "VOLTIMBALANCEVIOLCOST"))
            {
                this.VoltImbalanceViolCost = ((float)(value));
                return;
            }
            if ((feature == "VOLTLIMITVIOLCOST"))
            {
                this.VoltLimitViolCost = ((float)(value));
                return;
            }
            if ((feature == "EMERGENCYLOWVOLTLIMIT"))
            {
                this.EmergencyLowVoltLimit = ((float)(value));
                return;
            }
            if ((feature == "VALUEUNINTERRUPTEDSERVICEP"))
            {
                this.ValueUninterruptedServiceP = ((float)(value));
                return;
            }
            if ((feature == "EMERGENCYHIGHVOLTLIMIT"))
            {
                this.EmergencyHighVoltLimit = ((float)(value));
                return;
            }
            if ((feature == "POWERFACTORMIN"))
            {
                this.PowerFactorMin = ((float)(value));
                return;
            }
            if ((feature == "NORMALLOWVOLTLIMIT"))
            {
                this.NormalLowVoltLimit = ((float)(value));
                return;
            }
            if ((feature == "NORMALHIGHVOLTLIMIT"))
            {
                this.NormalHighVoltLimit = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PricingStructure"))
            {
                return new PricingStructureProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PricingStructure"))
            {
                return new PricingStructureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Powe" +
                        "rQualityPricing")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PowerQualityPricing class
        /// </summary>
        public class PowerQualityPricingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PowerQualityPricing _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PowerQualityPricingReferencedElementsCollection(PowerQualityPricing parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PricingStructure != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PricingStructureChanged += this.PropagateValueChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PricingStructureChanged -= this.PropagateValueChanges;
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PricingStructure == null))
                {
                    IPricingStructure pricingStructureCasted = item.As<IPricingStructure>();
                    if ((pricingStructureCasted != null))
                    {
                        this._parent.PricingStructure = pricingStructureCasted;
                        return;
                    }
                }
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PricingStructure = null;
                this._parent.ServiceDeliveryPoints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PricingStructure))
                {
                    return true;
                }
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PricingStructure != null))
                {
                    array[arrayIndex] = this._parent.PricingStructure;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PricingStructure == item))
                {
                    this._parent.PricingStructure = null;
                    return true;
                }
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PricingStructure).Concat(this._parent.ServiceDeliveryPoints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valueUninterruptedServiceEnergy property
        /// </summary>
        private sealed class ValueUninterruptedServiceEnergyProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueUninterruptedServiceEnergyProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ValueUninterruptedServiceEnergy;
                }
                set
                {
                    this.ModelElement.ValueUninterruptedServiceEnergy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueUninterruptedServiceEnergyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueUninterruptedServiceEnergyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltImbalanceViolCost property
        /// </summary>
        private sealed class VoltImbalanceViolCostProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltImbalanceViolCostProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltImbalanceViolCost;
                }
                set
                {
                    this.ModelElement.VoltImbalanceViolCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltImbalanceViolCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltImbalanceViolCostChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltLimitViolCost property
        /// </summary>
        private sealed class VoltLimitViolCostProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltLimitViolCostProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltLimitViolCost;
                }
                set
                {
                    this.ModelElement.VoltLimitViolCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltLimitViolCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VoltLimitViolCostChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the emergencyLowVoltLimit property
        /// </summary>
        private sealed class EmergencyLowVoltLimitProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EmergencyLowVoltLimitProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EmergencyLowVoltLimit;
                }
                set
                {
                    this.ModelElement.EmergencyLowVoltLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EmergencyLowVoltLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EmergencyLowVoltLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valueUninterruptedServiceP property
        /// </summary>
        private sealed class ValueUninterruptedServicePProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueUninterruptedServicePProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ValueUninterruptedServiceP;
                }
                set
                {
                    this.ModelElement.ValueUninterruptedServiceP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueUninterruptedServicePChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueUninterruptedServicePChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the emergencyHighVoltLimit property
        /// </summary>
        private sealed class EmergencyHighVoltLimitProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EmergencyHighVoltLimitProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EmergencyHighVoltLimit;
                }
                set
                {
                    this.ModelElement.EmergencyHighVoltLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EmergencyHighVoltLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EmergencyHighVoltLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the powerFactorMin property
        /// </summary>
        private sealed class PowerFactorMinProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerFactorMinProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PowerFactorMin;
                }
                set
                {
                    this.ModelElement.PowerFactorMin = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorMinChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PowerFactorMinChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalLowVoltLimit property
        /// </summary>
        private sealed class NormalLowVoltLimitProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalLowVoltLimitProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NormalLowVoltLimit;
                }
                set
                {
                    this.ModelElement.NormalLowVoltLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalLowVoltLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalLowVoltLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalHighVoltLimit property
        /// </summary>
        private sealed class NormalHighVoltLimitProxy : ModelPropertyChange<IPowerQualityPricing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalHighVoltLimitProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NormalHighVoltLimit;
                }
                set
                {
                    this.ModelElement.NormalHighVoltLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalHighVoltLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalHighVoltLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PricingStructure property
        /// </summary>
        private sealed class PricingStructureProxy : ModelPropertyChange<IPowerQualityPricing, IPricingStructure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PricingStructureProxy(IPowerQualityPricing modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPricingStructure Value
            {
                get
                {
                    return this.ModelElement.PricingStructure;
                }
                set
                {
                    this.ModelElement.PricingStructure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PricingStructureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PricingStructureChanged -= handler;
            }
        }
    }
}

