//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the OutageRecord class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
        "ageRecord")]
    [DebuggerDisplayAttribute("OutageRecord {UUID}")]
    public partial class OutageRecord : Document, IOutageRecord, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Mode property
        /// </summary>
        private string _mode;
        
        private static Lazy<ITypedElement> _modeAttribute = new Lazy<ITypedElement>(RetrieveModeAttribute);
        
        /// <summary>
        /// The backing field for the ActionTaken property
        /// </summary>
        private string _actionTaken;
        
        private static Lazy<ITypedElement> _actionTakenAttribute = new Lazy<ITypedElement>(RetrieveActionTakenAttribute);
        
        /// <summary>
        /// The backing field for the EndDateTime property
        /// </summary>
        private DateTime _endDateTime;
        
        private static Lazy<ITypedElement> _endDateTimeAttribute = new Lazy<ITypedElement>(RetrieveEndDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the DamageCode property
        /// </summary>
        private string _damageCode;
        
        private static Lazy<ITypedElement> _damageCodeAttribute = new Lazy<ITypedElement>(RetrieveDamageCodeAttribute);
        
        /// <summary>
        /// The backing field for the IsPlanned property
        /// </summary>
        private bool _isPlanned;
        
        private static Lazy<ITypedElement> _isPlannedAttribute = new Lazy<ITypedElement>(RetrieveIsPlannedAttribute);
        
        private static Lazy<ITypedElement> _outageReportReference = new Lazy<ITypedElement>(RetrieveOutageReportReference);
        
        /// <summary>
        /// The backing field for the OutageReport property
        /// </summary>
        private IOutageReport _outageReport;
        
        private static Lazy<ITypedElement> _outageStepsReference = new Lazy<ITypedElement>(RetrieveOutageStepsReference);
        
        /// <summary>
        /// The backing field for the OutageSteps property
        /// </summary>
        private OutageRecordOutageStepsCollection _outageSteps;
        
        private static Lazy<ITypedElement> _outageCodesReference = new Lazy<ITypedElement>(RetrieveOutageCodesReference);
        
        /// <summary>
        /// The backing field for the OutageCodes property
        /// </summary>
        private OutageRecordOutageCodesCollection _outageCodes;
        
        private static IClass _classInstance;
        
        public OutageRecord()
        {
            this._outageSteps = new OutageRecordOutageStepsCollection(this);
            this._outageSteps.CollectionChanging += this.OutageStepsCollectionChanging;
            this._outageSteps.CollectionChanged += this.OutageStepsCollectionChanged;
            this._outageCodes = new OutageRecordOutageCodesCollection(this);
            this._outageCodes.CollectionChanging += this.OutageCodesCollectionChanging;
            this._outageCodes.CollectionChanged += this.OutageCodesCollectionChanged;
        }
        
        /// <summary>
        /// The mode property
        /// </summary>
        [XmlElementNameAttribute("mode")]
        [XmlAttributeAttribute(true)]
        public virtual string Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    string old = this._mode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModeChanging(e);
                    this.OnPropertyChanging("Mode", e, _modeAttribute);
                    this._mode = value;
                    this.OnModeChanged(e);
                    this.OnPropertyChanged("Mode", e, _modeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The actionTaken property
        /// </summary>
        [XmlElementNameAttribute("actionTaken")]
        [XmlAttributeAttribute(true)]
        public virtual string ActionTaken
        {
            get
            {
                return this._actionTaken;
            }
            set
            {
                if ((this._actionTaken != value))
                {
                    string old = this._actionTaken;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActionTakenChanging(e);
                    this.OnPropertyChanging("ActionTaken", e, _actionTakenAttribute);
                    this._actionTaken = value;
                    this.OnActionTakenChanged(e);
                    this.OnPropertyChanged("ActionTaken", e, _actionTakenAttribute);
                }
            }
        }
        
        /// <summary>
        /// The endDateTime property
        /// </summary>
        [XmlElementNameAttribute("endDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EndDateTime
        {
            get
            {
                return this._endDateTime;
            }
            set
            {
                if ((this._endDateTime != value))
                {
                    DateTime old = this._endDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDateTimeChanging(e);
                    this.OnPropertyChanging("EndDateTime", e, _endDateTimeAttribute);
                    this._endDateTime = value;
                    this.OnEndDateTimeChanged(e);
                    this.OnPropertyChanged("EndDateTime", e, _endDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The damageCode property
        /// </summary>
        [XmlElementNameAttribute("damageCode")]
        [XmlAttributeAttribute(true)]
        public virtual string DamageCode
        {
            get
            {
                return this._damageCode;
            }
            set
            {
                if ((this._damageCode != value))
                {
                    string old = this._damageCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDamageCodeChanging(e);
                    this.OnPropertyChanging("DamageCode", e, _damageCodeAttribute);
                    this._damageCode = value;
                    this.OnDamageCodeChanged(e);
                    this.OnPropertyChanged("DamageCode", e, _damageCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isPlanned property
        /// </summary>
        [XmlElementNameAttribute("isPlanned")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsPlanned
        {
            get
            {
                return this._isPlanned;
            }
            set
            {
                if ((this._isPlanned != value))
                {
                    bool old = this._isPlanned;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsPlannedChanging(e);
                    this.OnPropertyChanging("IsPlanned", e, _isPlannedAttribute);
                    this._isPlanned = value;
                    this.OnIsPlannedChanged(e);
                    this.OnPropertyChanged("IsPlanned", e, _isPlannedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OutageReport property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageRecord")]
        public virtual IOutageReport OutageReport
        {
            get
            {
                return this._outageReport;
            }
            set
            {
                if ((this._outageReport != value))
                {
                    IOutageReport old = this._outageReport;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutageReportChanging(e);
                    this.OnPropertyChanging("OutageReport", e, _outageReportReference);
                    this._outageReport = value;
                    if ((old != null))
                    {
                        old.OutageRecord = null;
                        old.Deleted -= this.OnResetOutageReport;
                    }
                    if ((value != null))
                    {
                        value.OutageRecord = this;
                        value.Deleted += this.OnResetOutageReport;
                    }
                    this.OnOutageReportChanged(e);
                    this.OnPropertyChanged("OutageReport", e, _outageReportReference);
                }
            }
        }
        
        /// <summary>
        /// The OutageSteps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageRecord")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageStep> OutageSteps
        {
            get
            {
                return this._outageSteps;
            }
        }
        
        /// <summary>
        /// The OutageCodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageCode> OutageCodes
        {
            get
            {
                return this._outageCodes;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OutageRecordReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
                            "ageRecord")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Mode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanging;
        
        /// <summary>
        /// Gets fired when the Mode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanged;
        
        /// <summary>
        /// Gets fired before the ActionTaken property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionTakenChanging;
        
        /// <summary>
        /// Gets fired when the ActionTaken property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionTakenChanged;
        
        /// <summary>
        /// Gets fired before the EndDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EndDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the DamageCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DamageCodeChanging;
        
        /// <summary>
        /// Gets fired when the DamageCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DamageCodeChanged;
        
        /// <summary>
        /// Gets fired before the IsPlanned property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsPlannedChanging;
        
        /// <summary>
        /// Gets fired when the IsPlanned property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsPlannedChanged;
        
        /// <summary>
        /// Gets fired before the OutageReport property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageReportChanging;
        
        /// <summary>
        /// Gets fired when the OutageReport property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageReportChanged;
        
        private static ITypedElement RetrieveModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("mode")));
        }
        
        /// <summary>
        /// Raises the ModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActionTakenAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("actionTaken")));
        }
        
        /// <summary>
        /// Raises the ActionTakenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionTakenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionTakenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActionTakenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionTakenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionTakenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEndDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("endDateTime")));
        }
        
        /// <summary>
        /// Raises the EndDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDamageCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("damageCode")));
        }
        
        /// <summary>
        /// Raises the DamageCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDamageCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DamageCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DamageCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDamageCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DamageCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsPlannedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("isPlanned")));
        }
        
        /// <summary>
        /// Raises the IsPlannedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsPlannedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsPlannedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsPlannedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsPlannedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsPlannedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutageReportReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("OutageReport")));
        }
        
        /// <summary>
        /// Raises the OutageReportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageReportChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageReportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutageReportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageReportChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageReportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutageReport property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutageReport(object sender, System.EventArgs eventArgs)
        {
            this.OutageReport = null;
        }
        
        private static ITypedElement RetrieveOutageStepsReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("OutageSteps")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageSteps", e, _outageStepsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageStepsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageSteps", e, _outageStepsReference);
        }
        
        private static ITypedElement RetrieveOutageCodesReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageRecord.ClassInstance)).Resolve("OutageCodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageCodesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageCodes", e, _outageCodesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageCodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageCodes", e, _outageCodesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MODE"))
            {
                return this.Mode;
            }
            if ((attribute == "ACTIONTAKEN"))
            {
                return this.ActionTaken;
            }
            if ((attribute == "ENDDATETIME"))
            {
                return this.EndDateTime;
            }
            if ((attribute == "DAMAGECODE"))
            {
                return this.DamageCode;
            }
            if ((attribute == "ISPLANNED"))
            {
                return this.IsPlanned;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OUTAGESTEPS"))
            {
                return this._outageSteps;
            }
            if ((feature == "OUTAGECODES"))
            {
                return this._outageCodes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OUTAGEREPORT"))
            {
                this.OutageReport = ((IOutageReport)(value));
                return;
            }
            if ((feature == "MODE"))
            {
                this.Mode = ((string)(value));
                return;
            }
            if ((feature == "ACTIONTAKEN"))
            {
                this.ActionTaken = ((string)(value));
                return;
            }
            if ((feature == "ENDDATETIME"))
            {
                this.EndDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "DAMAGECODE"))
            {
                this.DamageCode = ((string)(value));
                return;
            }
            if ((feature == "ISPLANNED"))
            {
                this.IsPlanned = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OutageReport"))
            {
                return new OutageReportProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OutageReport"))
            {
                return new OutageReportProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
                        "ageRecord")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OutageRecord class
        /// </summary>
        public class OutageRecordReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OutageRecord _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OutageRecordReferencedElementsCollection(OutageRecord parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OutageReport != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OutageSteps.Count);
                    count = (count + this._parent.OutageCodes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OutageReportChanged += this.PropagateValueChanges;
                this._parent.OutageSteps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OutageCodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OutageReportChanged -= this.PropagateValueChanges;
                this._parent.OutageSteps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OutageCodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OutageReport == null))
                {
                    IOutageReport outageReportCasted = item.As<IOutageReport>();
                    if ((outageReportCasted != null))
                    {
                        this._parent.OutageReport = outageReportCasted;
                        return;
                    }
                }
                IOutageStep outageStepsCasted = item.As<IOutageStep>();
                if ((outageStepsCasted != null))
                {
                    this._parent.OutageSteps.Add(outageStepsCasted);
                }
                IOutageCode outageCodesCasted = item.As<IOutageCode>();
                if ((outageCodesCasted != null))
                {
                    this._parent.OutageCodes.Add(outageCodesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OutageReport = null;
                this._parent.OutageSteps.Clear();
                this._parent.OutageCodes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OutageReport))
                {
                    return true;
                }
                if (this._parent.OutageSteps.Contains(item))
                {
                    return true;
                }
                if (this._parent.OutageCodes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OutageReport != null))
                {
                    array[arrayIndex] = this._parent.OutageReport;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> outageStepsEnumerator = this._parent.OutageSteps.GetEnumerator();
                try
                {
                    for (
                    ; outageStepsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageStepsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageStepsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outageCodesEnumerator = this._parent.OutageCodes.GetEnumerator();
                try
                {
                    for (
                    ; outageCodesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageCodesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageCodesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OutageReport == item))
                {
                    this._parent.OutageReport = null;
                    return true;
                }
                IOutageStep outageStepItem = item.As<IOutageStep>();
                if (((outageStepItem != null) 
                            && this._parent.OutageSteps.Remove(outageStepItem)))
                {
                    return true;
                }
                IOutageCode outageCodeItem = item.As<IOutageCode>();
                if (((outageCodeItem != null) 
                            && this._parent.OutageCodes.Remove(outageCodeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OutageReport).Concat(this._parent.OutageSteps).Concat(this._parent.OutageCodes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mode property
        /// </summary>
        private sealed class ModeProxy : ModelPropertyChange<IOutageRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModeProxy(IOutageRecord modelElement) : 
                    base(modelElement, "mode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Mode;
                }
                set
                {
                    this.ModelElement.Mode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actionTaken property
        /// </summary>
        private sealed class ActionTakenProxy : ModelPropertyChange<IOutageRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActionTakenProxy(IOutageRecord modelElement) : 
                    base(modelElement, "actionTaken")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActionTaken;
                }
                set
                {
                    this.ModelElement.ActionTaken = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the endDateTime property
        /// </summary>
        private sealed class EndDateTimeProxy : ModelPropertyChange<IOutageRecord, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDateTimeProxy(IOutageRecord modelElement) : 
                    base(modelElement, "endDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EndDateTime;
                }
                set
                {
                    this.ModelElement.EndDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the damageCode property
        /// </summary>
        private sealed class DamageCodeProxy : ModelPropertyChange<IOutageRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DamageCodeProxy(IOutageRecord modelElement) : 
                    base(modelElement, "damageCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DamageCode;
                }
                set
                {
                    this.ModelElement.DamageCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isPlanned property
        /// </summary>
        private sealed class IsPlannedProxy : ModelPropertyChange<IOutageRecord, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsPlannedProxy(IOutageRecord modelElement) : 
                    base(modelElement, "isPlanned")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsPlanned;
                }
                set
                {
                    this.ModelElement.IsPlanned = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutageReport property
        /// </summary>
        private sealed class OutageReportProxy : ModelPropertyChange<IOutageRecord, IOutageReport>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutageReportProxy(IOutageRecord modelElement) : 
                    base(modelElement, "OutageReport")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutageReport Value
            {
                get
                {
                    return this.ModelElement.OutageReport;
                }
                set
                {
                    this.ModelElement.OutageReport = value;
                }
            }
        }
    }
}

