//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The public interface for SwitchingStep
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SwitchingStep))]
    [XmlDefaultImplementationTypeAttribute(typeof(SwitchingStep))]
    public interface ISwitchingStep : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The statusKind property
        /// </summary>
        Nullable<SwitchingStepStatusKind> StatusKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The requiredControlAction property
        /// </summary>
        string RequiredControlAction
        {
            get;
            set;
        }
        
        /// <summary>
        /// The text property
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The desiredEndState property
        /// </summary>
        string DesiredEndState
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpPersonRole property
        /// </summary>
        IErpPersonScheduleStepRole ErpPersonRole
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SwitchingSchedule property
        /// </summary>
        ISwitchingSchedule SwitchingSchedule
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SafetyDocument property
        /// </summary>
        ISafetyDocument SafetyDocument
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get;
        }
        
        /// <summary>
        /// The requiredControlActionInterval property
        /// </summary>
        IDateTimeInterval RequiredControlActionInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the StatusKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusKindChanging;
        
        /// <summary>
        /// Gets fired when the StatusKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusKindChanged;
        
        /// <summary>
        /// Gets fired before the RequiredControlAction property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RequiredControlActionChanging;
        
        /// <summary>
        /// Gets fired when the RequiredControlAction property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RequiredControlActionChanged;
        
        /// <summary>
        /// Gets fired before the Text property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TextChanging;
        
        /// <summary>
        /// Gets fired when the Text property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TextChanged;
        
        /// <summary>
        /// Gets fired before the DesiredEndState property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DesiredEndStateChanging;
        
        /// <summary>
        /// Gets fired when the DesiredEndState property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DesiredEndStateChanged;
        
        /// <summary>
        /// Gets fired before the ErpPersonRole property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpPersonRoleChanging;
        
        /// <summary>
        /// Gets fired when the ErpPersonRole property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpPersonRoleChanged;
        
        /// <summary>
        /// Gets fired before the SwitchingSchedule property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchingScheduleChanging;
        
        /// <summary>
        /// Gets fired when the SwitchingSchedule property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchingScheduleChanged;
        
        /// <summary>
        /// Gets fired before the SafetyDocument property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanging;
        
        /// <summary>
        /// Gets fired when the SafetyDocument property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanged;
        
        /// <summary>
        /// Gets fired before the RequiredControlActionInterval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RequiredControlActionIntervalChanging;
        
        /// <summary>
        /// Gets fired when the RequiredControlActionInterval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RequiredControlActionIntervalChanged;
    }
}

