//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the ComplianceEvent class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Com" +
        "plianceEvent")]
    [DebuggerDisplayAttribute("ComplianceEvent {UUID}")]
    public partial class ComplianceEvent : ActivityRecord, IComplianceEvent, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ComplianceType property
        /// </summary>
        private string _complianceType;
        
        private static Lazy<ITypedElement> _complianceTypeAttribute = new Lazy<ITypedElement>(RetrieveComplianceTypeAttribute);
        
        /// <summary>
        /// The backing field for the Deadline property
        /// </summary>
        private DateTime _deadline;
        
        private static Lazy<ITypedElement> _deadlineAttribute = new Lazy<ITypedElement>(RetrieveDeadlineAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The complianceType property
        /// </summary>
        [XmlElementNameAttribute("complianceType")]
        [XmlAttributeAttribute(true)]
        public virtual string ComplianceType
        {
            get
            {
                return this._complianceType;
            }
            set
            {
                if ((this._complianceType != value))
                {
                    string old = this._complianceType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnComplianceTypeChanging(e);
                    this.OnPropertyChanging("ComplianceType", e, _complianceTypeAttribute);
                    this._complianceType = value;
                    this.OnComplianceTypeChanged(e);
                    this.OnPropertyChanged("ComplianceType", e, _complianceTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deadline property
        /// </summary>
        [XmlElementNameAttribute("deadline")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime Deadline
        {
            get
            {
                return this._deadline;
            }
            set
            {
                if ((this._deadline != value))
                {
                    DateTime old = this._deadline;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeadlineChanging(e);
                    this.OnPropertyChanging("Deadline", e, _deadlineAttribute);
                    this._deadline = value;
                    this.OnDeadlineChanged(e);
                    this.OnPropertyChanged("Deadline", e, _deadlineAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Com" +
                            "plianceEvent")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ComplianceType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComplianceTypeChanging;
        
        /// <summary>
        /// Gets fired when the ComplianceType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComplianceTypeChanged;
        
        /// <summary>
        /// Gets fired before the Deadline property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeadlineChanging;
        
        /// <summary>
        /// Gets fired when the Deadline property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeadlineChanged;
        
        private static ITypedElement RetrieveComplianceTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ComplianceEvent.ClassInstance)).Resolve("complianceType")));
        }
        
        /// <summary>
        /// Raises the ComplianceTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComplianceTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComplianceTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ComplianceTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComplianceTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComplianceTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeadlineAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ComplianceEvent.ClassInstance)).Resolve("deadline")));
        }
        
        /// <summary>
        /// Raises the DeadlineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeadlineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeadlineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeadlineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeadlineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeadlineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMPLIANCETYPE"))
            {
                return this.ComplianceType;
            }
            if ((attribute == "DEADLINE"))
            {
                return this.Deadline;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMPLIANCETYPE"))
            {
                this.ComplianceType = ((string)(value));
                return;
            }
            if ((feature == "DEADLINE"))
            {
                this.Deadline = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Com" +
                        "plianceEvent")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the complianceType property
        /// </summary>
        private sealed class ComplianceTypeProxy : ModelPropertyChange<IComplianceEvent, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ComplianceTypeProxy(IComplianceEvent modelElement) : 
                    base(modelElement, "complianceType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ComplianceType;
                }
                set
                {
                    this.ModelElement.ComplianceType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deadline property
        /// </summary>
        private sealed class DeadlineProxy : ModelPropertyChange<IComplianceEvent, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeadlineProxy(IComplianceEvent modelElement) : 
                    base(modelElement, "deadline")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.Deadline;
                }
                set
                {
                    this.ModelElement.Deadline = value;
                }
            }
        }
    }
}

