//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the SwitchingStep class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Swi" +
        "tchingStep")]
    [DebuggerDisplayAttribute("SwitchingStep {UUID}")]
    public class SwitchingStep : IdentifiedObject, ISwitchingStep, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StatusKind property
        /// </summary>
        private Nullable<SwitchingStepStatusKind> _statusKind;
        
        /// <summary>
        /// The backing field for the RequiredControlAction property
        /// </summary>
        private string _requiredControlAction;
        
        /// <summary>
        /// The backing field for the Text property
        /// </summary>
        private string _text;
        
        /// <summary>
        /// The backing field for the DesiredEndState property
        /// </summary>
        private string _desiredEndState;
        
        /// <summary>
        /// The backing field for the ErpPersonRole property
        /// </summary>
        private IErpPersonScheduleStepRole _erpPersonRole;
        
        /// <summary>
        /// The backing field for the SwitchingSchedule property
        /// </summary>
        private ISwitchingSchedule _switchingSchedule;
        
        /// <summary>
        /// The backing field for the SafetyDocument property
        /// </summary>
        private ISafetyDocument _safetyDocument;
        
        /// <summary>
        /// The backing field for the PowerSystemResources property
        /// </summary>
        private SwitchingStepPowerSystemResourcesCollection _powerSystemResources;
        
        /// <summary>
        /// The backing field for the RequiredControlActionInterval property
        /// </summary>
        private IDateTimeInterval _requiredControlActionInterval;
        
        private static IClass _classInstance;
        
        public SwitchingStep()
        {
            this._powerSystemResources = new SwitchingStepPowerSystemResourcesCollection(this);
            this._powerSystemResources.CollectionChanging += this.PowerSystemResourcesCollectionChanging;
            this._powerSystemResources.CollectionChanged += this.PowerSystemResourcesCollectionChanged;
        }
        
        /// <summary>
        /// The statusKind property
        /// </summary>
        [XmlElementNameAttribute("statusKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SwitchingStepStatusKind> StatusKind
        {
            get
            {
                return this._statusKind;
            }
            set
            {
                if ((this._statusKind != value))
                {
                    Nullable<SwitchingStepStatusKind> old = this._statusKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusKindChanging(e);
                    this.OnPropertyChanging("StatusKind", e);
                    this._statusKind = value;
                    this.OnStatusKindChanged(e);
                    this.OnPropertyChanged("StatusKind", e);
                }
            }
        }
        
        /// <summary>
        /// The requiredControlAction property
        /// </summary>
        [XmlElementNameAttribute("requiredControlAction")]
        [XmlAttributeAttribute(true)]
        public virtual string RequiredControlAction
        {
            get
            {
                return this._requiredControlAction;
            }
            set
            {
                if ((this._requiredControlAction != value))
                {
                    string old = this._requiredControlAction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiredControlActionChanging(e);
                    this.OnPropertyChanging("RequiredControlAction", e);
                    this._requiredControlAction = value;
                    this.OnRequiredControlActionChanged(e);
                    this.OnPropertyChanged("RequiredControlAction", e);
                }
            }
        }
        
        /// <summary>
        /// The text property
        /// </summary>
        [XmlElementNameAttribute("text")]
        [XmlAttributeAttribute(true)]
        public virtual string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    string old = this._text;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTextChanging(e);
                    this.OnPropertyChanging("Text", e);
                    this._text = value;
                    this.OnTextChanged(e);
                    this.OnPropertyChanged("Text", e);
                }
            }
        }
        
        /// <summary>
        /// The desiredEndState property
        /// </summary>
        [XmlElementNameAttribute("desiredEndState")]
        [XmlAttributeAttribute(true)]
        public virtual string DesiredEndState
        {
            get
            {
                return this._desiredEndState;
            }
            set
            {
                if ((this._desiredEndState != value))
                {
                    string old = this._desiredEndState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesiredEndStateChanging(e);
                    this.OnPropertyChanging("DesiredEndState", e);
                    this._desiredEndState = value;
                    this.OnDesiredEndStateChanged(e);
                    this.OnPropertyChanged("DesiredEndState", e);
                }
            }
        }
        
        /// <summary>
        /// The ErpPersonRole property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SwitchingStep")]
        public virtual IErpPersonScheduleStepRole ErpPersonRole
        {
            get
            {
                return this._erpPersonRole;
            }
            set
            {
                if ((this._erpPersonRole != value))
                {
                    IErpPersonScheduleStepRole old = this._erpPersonRole;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonRoleChanging(e);
                    this.OnPropertyChanging("ErpPersonRole", e);
                    this._erpPersonRole = value;
                    if ((old != null))
                    {
                        old.SwitchingStep = null;
                        old.Deleted -= this.OnResetErpPersonRole;
                    }
                    if ((value != null))
                    {
                        value.SwitchingStep = this;
                        value.Deleted += this.OnResetErpPersonRole;
                    }
                    this.OnErpPersonRoleChanged(e);
                    this.OnPropertyChanged("ErpPersonRole", e);
                }
            }
        }
        
        /// <summary>
        /// The SwitchingSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduleSteps")]
        public virtual ISwitchingSchedule SwitchingSchedule
        {
            get
            {
                return this._switchingSchedule;
            }
            set
            {
                if ((this._switchingSchedule != value))
                {
                    ISwitchingSchedule old = this._switchingSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchingScheduleChanging(e);
                    this.OnPropertyChanging("SwitchingSchedule", e);
                    this._switchingSchedule = value;
                    if ((old != null))
                    {
                        old.ScheduleSteps.Remove(this);
                        old.Deleted -= this.OnResetSwitchingSchedule;
                    }
                    if ((value != null))
                    {
                        value.ScheduleSteps.Add(this);
                        value.Deleted += this.OnResetSwitchingSchedule;
                    }
                    this.OnSwitchingScheduleChanged(e);
                    this.OnPropertyChanged("SwitchingSchedule", e);
                }
            }
        }
        
        /// <summary>
        /// The SafetyDocument property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduleSteps")]
        public virtual ISafetyDocument SafetyDocument
        {
            get
            {
                return this._safetyDocument;
            }
            set
            {
                if ((this._safetyDocument != value))
                {
                    ISafetyDocument old = this._safetyDocument;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSafetyDocumentChanging(e);
                    this.OnPropertyChanging("SafetyDocument", e);
                    this._safetyDocument = value;
                    if ((old != null))
                    {
                        old.ScheduleSteps.Remove(this);
                        old.Deleted -= this.OnResetSafetyDocument;
                    }
                    if ((value != null))
                    {
                        value.ScheduleSteps.Add(this);
                        value.Deleted += this.OnResetSafetyDocument;
                    }
                    this.OnSafetyDocumentChanged(e);
                    this.OnPropertyChanged("SafetyDocument", e);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ScheduleSteps")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get
            {
                return this._powerSystemResources;
            }
        }
        
        /// <summary>
        /// The requiredControlActionInterval property
        /// </summary>
        [XmlElementNameAttribute("requiredControlActionInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval RequiredControlActionInterval
        {
            get
            {
                return this._requiredControlActionInterval;
            }
            set
            {
                if ((this._requiredControlActionInterval != value))
                {
                    IDateTimeInterval old = this._requiredControlActionInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiredControlActionIntervalChanging(e);
                    this.OnPropertyChanging("RequiredControlActionInterval", e);
                    this._requiredControlActionInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRequiredControlActionInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRequiredControlActionInterval;
                    }
                    this.OnRequiredControlActionIntervalChanged(e);
                    this.OnPropertyChanged("RequiredControlActionInterval", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchingStepReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Swi" +
                            "tchingStep")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StatusKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusKindChanging;
        
        /// <summary>
        /// Gets fired when the StatusKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusKindChanged;
        
        /// <summary>
        /// Gets fired before the RequiredControlAction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequiredControlActionChanging;
        
        /// <summary>
        /// Gets fired when the RequiredControlAction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequiredControlActionChanged;
        
        /// <summary>
        /// Gets fired before the Text property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TextChanging;
        
        /// <summary>
        /// Gets fired when the Text property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TextChanged;
        
        /// <summary>
        /// Gets fired before the DesiredEndState property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesiredEndStateChanging;
        
        /// <summary>
        /// Gets fired when the DesiredEndState property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesiredEndStateChanged;
        
        /// <summary>
        /// Gets fired before the ErpPersonRole property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonRoleChanging;
        
        /// <summary>
        /// Gets fired when the ErpPersonRole property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonRoleChanged;
        
        /// <summary>
        /// Gets fired before the SwitchingSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchingScheduleChanging;
        
        /// <summary>
        /// Gets fired when the SwitchingSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchingScheduleChanged;
        
        /// <summary>
        /// Gets fired before the SafetyDocument property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanging;
        
        /// <summary>
        /// Gets fired when the SafetyDocument property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanged;
        
        /// <summary>
        /// Gets fired before the RequiredControlActionInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequiredControlActionIntervalChanging;
        
        /// <summary>
        /// Gets fired when the RequiredControlActionInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequiredControlActionIntervalChanged;
        
        /// <summary>
        /// Raises the StatusKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequiredControlActionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredControlActionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequiredControlActionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequiredControlActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredControlActionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequiredControlActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTextChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTextChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesiredEndStateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesiredEndStateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesiredEndStateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesiredEndStateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesiredEndStateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesiredEndStateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonRoleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonRoleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonRoleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonRoleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonRoleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonRoleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPersonRole property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPersonRole(object sender, System.EventArgs eventArgs)
        {
            this.ErpPersonRole = null;
        }
        
        /// <summary>
        /// Raises the SwitchingScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchingScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchingScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchingScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchingScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchingScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SwitchingSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSwitchingSchedule(object sender, System.EventArgs eventArgs)
        {
            this.SwitchingSchedule = null;
        }
        
        /// <summary>
        /// Raises the SafetyDocumentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSafetyDocumentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SafetyDocumentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SafetyDocumentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSafetyDocumentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SafetyDocumentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SafetyDocument property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSafetyDocument(object sender, System.EventArgs eventArgs)
        {
            this.SafetyDocument = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResources", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResources", e);
        }
        
        /// <summary>
        /// Raises the RequiredControlActionIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredControlActionIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequiredControlActionIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequiredControlActionIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredControlActionIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequiredControlActionIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RequiredControlActionInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequiredControlActionInterval(object sender, System.EventArgs eventArgs)
        {
            this.RequiredControlActionInterval = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATUSKIND"))
            {
                return this.StatusKind;
            }
            if ((attribute == "REQUIREDCONTROLACTION"))
            {
                return this.RequiredControlAction;
            }
            if ((attribute == "TEXT"))
            {
                return this.Text;
            }
            if ((attribute == "DESIREDENDSTATE"))
            {
                return this.DesiredEndState;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POWERSYSTEMRESOURCES"))
            {
                return this._powerSystemResources;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPPERSONROLE"))
            {
                this.ErpPersonRole = ((IErpPersonScheduleStepRole)(value));
                return;
            }
            if ((feature == "SWITCHINGSCHEDULE"))
            {
                this.SwitchingSchedule = ((ISwitchingSchedule)(value));
                return;
            }
            if ((feature == "SAFETYDOCUMENT"))
            {
                this.SafetyDocument = ((ISafetyDocument)(value));
                return;
            }
            if ((feature == "REQUIREDCONTROLACTIONINTERVAL"))
            {
                this.RequiredControlActionInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "STATUSKIND"))
            {
                this.StatusKind = ((SwitchingStepStatusKind)(value));
                return;
            }
            if ((feature == "REQUIREDCONTROLACTION"))
            {
                this.RequiredControlAction = ((string)(value));
                return;
            }
            if ((feature == "TEXT"))
            {
                this.Text = ((string)(value));
                return;
            }
            if ((feature == "DESIREDENDSTATE"))
            {
                this.DesiredEndState = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpPersonRole"))
            {
                return new ErpPersonRoleProxy(this);
            }
            if ((attribute == "SwitchingSchedule"))
            {
                return new SwitchingScheduleProxy(this);
            }
            if ((attribute == "SafetyDocument"))
            {
                return new SafetyDocumentProxy(this);
            }
            if ((attribute == "RequiredControlActionInterval"))
            {
                return new RequiredControlActionIntervalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpPersonRole"))
            {
                return new ErpPersonRoleProxy(this);
            }
            if ((reference == "SwitchingSchedule"))
            {
                return new SwitchingScheduleProxy(this);
            }
            if ((reference == "SafetyDocument"))
            {
                return new SafetyDocumentProxy(this);
            }
            if ((reference == "RequiredControlActionInterval"))
            {
                return new RequiredControlActionIntervalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Swi" +
                        "tchingStep")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SwitchingStep class
        /// </summary>
        public class SwitchingStepReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SwitchingStep _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchingStepReferencedElementsCollection(SwitchingStep parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpPersonRole != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SwitchingSchedule != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SafetyDocument != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PowerSystemResources.Count);
                    if ((this._parent.RequiredControlActionInterval != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpPersonRoleChanged += this.PropagateValueChanges;
                this._parent.SwitchingScheduleChanged += this.PropagateValueChanges;
                this._parent.SafetyDocumentChanged += this.PropagateValueChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredControlActionIntervalChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpPersonRoleChanged -= this.PropagateValueChanges;
                this._parent.SwitchingScheduleChanged -= this.PropagateValueChanges;
                this._parent.SafetyDocumentChanged -= this.PropagateValueChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredControlActionIntervalChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpPersonRole == null))
                {
                    IErpPersonScheduleStepRole erpPersonRoleCasted = item.As<IErpPersonScheduleStepRole>();
                    if ((erpPersonRoleCasted != null))
                    {
                        this._parent.ErpPersonRole = erpPersonRoleCasted;
                        return;
                    }
                }
                if ((this._parent.SwitchingSchedule == null))
                {
                    ISwitchingSchedule switchingScheduleCasted = item.As<ISwitchingSchedule>();
                    if ((switchingScheduleCasted != null))
                    {
                        this._parent.SwitchingSchedule = switchingScheduleCasted;
                        return;
                    }
                }
                if ((this._parent.SafetyDocument == null))
                {
                    ISafetyDocument safetyDocumentCasted = item.As<ISafetyDocument>();
                    if ((safetyDocumentCasted != null))
                    {
                        this._parent.SafetyDocument = safetyDocumentCasted;
                        return;
                    }
                }
                IPowerSystemResource powerSystemResourcesCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourcesCasted != null))
                {
                    this._parent.PowerSystemResources.Add(powerSystemResourcesCasted);
                }
                if ((this._parent.RequiredControlActionInterval == null))
                {
                    IDateTimeInterval requiredControlActionIntervalCasted = item.As<IDateTimeInterval>();
                    if ((requiredControlActionIntervalCasted != null))
                    {
                        this._parent.RequiredControlActionInterval = requiredControlActionIntervalCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpPersonRole = null;
                this._parent.SwitchingSchedule = null;
                this._parent.SafetyDocument = null;
                this._parent.PowerSystemResources.Clear();
                this._parent.RequiredControlActionInterval = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpPersonRole))
                {
                    return true;
                }
                if ((item == this._parent.SwitchingSchedule))
                {
                    return true;
                }
                if ((item == this._parent.SafetyDocument))
                {
                    return true;
                }
                if (this._parent.PowerSystemResources.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RequiredControlActionInterval))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpPersonRole != null))
                {
                    array[arrayIndex] = this._parent.ErpPersonRole;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SwitchingSchedule != null))
                {
                    array[arrayIndex] = this._parent.SwitchingSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SafetyDocument != null))
                {
                    array[arrayIndex] = this._parent.SafetyDocument;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> powerSystemResourcesEnumerator = this._parent.PowerSystemResources.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourcesEnumerator.Dispose();
                }
                if ((this._parent.RequiredControlActionInterval != null))
                {
                    array[arrayIndex] = this._parent.RequiredControlActionInterval;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpPersonRole == item))
                {
                    this._parent.ErpPersonRole = null;
                    return true;
                }
                if ((this._parent.SwitchingSchedule == item))
                {
                    this._parent.SwitchingSchedule = null;
                    return true;
                }
                if ((this._parent.SafetyDocument == item))
                {
                    this._parent.SafetyDocument = null;
                    return true;
                }
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResources.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                if ((this._parent.RequiredControlActionInterval == item))
                {
                    this._parent.RequiredControlActionInterval = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpPersonRole).Concat(this._parent.SwitchingSchedule).Concat(this._parent.SafetyDocument).Concat(this._parent.PowerSystemResources).Concat(this._parent.RequiredControlActionInterval).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the statusKind property
        /// </summary>
        private sealed class StatusKindProxy : ModelPropertyChange<ISwitchingStep, Nullable<SwitchingStepStatusKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusKindProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SwitchingStepStatusKind> Value
            {
                get
                {
                    return this.ModelElement.StatusKind;
                }
                set
                {
                    this.ModelElement.StatusKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiredControlAction property
        /// </summary>
        private sealed class RequiredControlActionProxy : ModelPropertyChange<ISwitchingStep, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiredControlActionProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RequiredControlAction;
                }
                set
                {
                    this.ModelElement.RequiredControlAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredControlActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredControlActionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the text property
        /// </summary>
        private sealed class TextProxy : ModelPropertyChange<ISwitchingStep, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TextProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Text;
                }
                set
                {
                    this.ModelElement.Text = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TextChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TextChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the desiredEndState property
        /// </summary>
        private sealed class DesiredEndStateProxy : ModelPropertyChange<ISwitchingStep, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesiredEndStateProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DesiredEndState;
                }
                set
                {
                    this.ModelElement.DesiredEndState = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesiredEndStateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DesiredEndStateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPersonRole property
        /// </summary>
        private sealed class ErpPersonRoleProxy : ModelPropertyChange<ISwitchingStep, IErpPersonScheduleStepRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonRoleProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPersonScheduleStepRole Value
            {
                get
                {
                    return this.ModelElement.ErpPersonRole;
                }
                set
                {
                    this.ModelElement.ErpPersonRole = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonRoleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ErpPersonRoleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SwitchingSchedule property
        /// </summary>
        private sealed class SwitchingScheduleProxy : ModelPropertyChange<ISwitchingStep, ISwitchingSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchingScheduleProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISwitchingSchedule Value
            {
                get
                {
                    return this.ModelElement.SwitchingSchedule;
                }
                set
                {
                    this.ModelElement.SwitchingSchedule = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwitchingScheduleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SwitchingScheduleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SafetyDocument property
        /// </summary>
        private sealed class SafetyDocumentProxy : ModelPropertyChange<ISwitchingStep, ISafetyDocument>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SafetyDocumentProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISafetyDocument Value
            {
                get
                {
                    return this.ModelElement.SafetyDocument;
                }
                set
                {
                    this.ModelElement.SafetyDocument = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SafetyDocumentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SafetyDocumentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiredControlActionInterval property
        /// </summary>
        private sealed class RequiredControlActionIntervalProxy : ModelPropertyChange<ISwitchingStep, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiredControlActionIntervalProxy(ISwitchingStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.RequiredControlActionInterval;
                }
                set
                {
                    this.ModelElement.RequiredControlActionInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredControlActionIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredControlActionIntervalChanged -= handler;
            }
        }
    }
}

