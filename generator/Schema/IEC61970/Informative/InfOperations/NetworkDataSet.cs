//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the NetworkDataSet class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Net" +
        "workDataSet")]
    [DebuggerDisplayAttribute("NetworkDataSet {UUID}")]
    public partial class NetworkDataSet : IdentifiedObject, INetworkDataSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        private static Lazy<ITypedElement> _circuitSectionsReference = new Lazy<ITypedElement>(RetrieveCircuitSectionsReference);
        
        /// <summary>
        /// The backing field for the CircuitSections property
        /// </summary>
        private NetworkDataSetCircuitSectionsCollection _circuitSections;
        
        private static Lazy<ITypedElement> _changeItemsReference = new Lazy<ITypedElement>(RetrieveChangeItemsReference);
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private NetworkDataSetChangeItemsCollection _changeItems;
        
        private static Lazy<ITypedElement> _changeSetsReference = new Lazy<ITypedElement>(RetrieveChangeSetsReference);
        
        /// <summary>
        /// The backing field for the ChangeSets property
        /// </summary>
        private NetworkDataSetChangeSetsCollection _changeSets;
        
        private static Lazy<ITypedElement> _powerSystemResourcesReference = new Lazy<ITypedElement>(RetrievePowerSystemResourcesReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResources property
        /// </summary>
        private NetworkDataSetPowerSystemResourcesCollection _powerSystemResources;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _landBasesReference = new Lazy<ITypedElement>(RetrieveLandBasesReference);
        
        /// <summary>
        /// The backing field for the LandBases property
        /// </summary>
        private ObservableAssociationOrderedSet<ILandBase> _landBases;
        
        private static Lazy<ITypedElement> _documentsReference = new Lazy<ITypedElement>(RetrieveDocumentsReference);
        
        /// <summary>
        /// The backing field for the Documents property
        /// </summary>
        private NetworkDataSetDocumentsCollection _documents;
        
        private static IClass _classInstance;
        
        public NetworkDataSet()
        {
            this._circuitSections = new NetworkDataSetCircuitSectionsCollection(this);
            this._circuitSections.CollectionChanging += this.CircuitSectionsCollectionChanging;
            this._circuitSections.CollectionChanged += this.CircuitSectionsCollectionChanged;
            this._changeItems = new NetworkDataSetChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._changeSets = new NetworkDataSetChangeSetsCollection(this);
            this._changeSets.CollectionChanging += this.ChangeSetsCollectionChanging;
            this._changeSets.CollectionChanged += this.ChangeSetsCollectionChanged;
            this._powerSystemResources = new NetworkDataSetPowerSystemResourcesCollection(this);
            this._powerSystemResources.CollectionChanging += this.PowerSystemResourcesCollectionChanging;
            this._powerSystemResources.CollectionChanged += this.PowerSystemResourcesCollectionChanged;
            this._landBases = new ObservableAssociationOrderedSet<ILandBase>();
            this._landBases.CollectionChanging += this.LandBasesCollectionChanging;
            this._landBases.CollectionChanged += this.LandBasesCollectionChanged;
            this._documents = new NetworkDataSetDocumentsCollection(this);
            this._documents.CollectionChanging += this.DocumentsCollectionChanging;
            this._documents.CollectionChanged += this.DocumentsCollectionChanged;
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CircuitSections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NetworkDataSets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICircuitSection> CircuitSections
        {
            get
            {
                return this._circuitSections;
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NetworkDataSet")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The ChangeSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NetworkDataSets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeSet> ChangeSets
        {
            get
            {
                return this._changeSets;
            }
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NetworkDataSets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get
            {
                return this._powerSystemResources;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The LandBases property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILandBase> LandBases
        {
            get
            {
                return this._landBases;
            }
        }
        
        /// <summary>
        /// The Documents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NetworkDataSets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocument> Documents
        {
            get
            {
                return this._documents;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NetworkDataSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Net" +
                            "workDataSet")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCircuitSectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("CircuitSections")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CircuitSections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitSectionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CircuitSections", e, _circuitSectionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CircuitSections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitSectionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CircuitSections", e, _circuitSectionsReference);
        }
        
        private static ITypedElement RetrieveChangeItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("ChangeItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e, _changeItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e, _changeItemsReference);
        }
        
        private static ITypedElement RetrieveChangeSetsReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("ChangeSets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeSets", e, _changeSetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeSets", e, _changeSetsReference);
        }
        
        private static ITypedElement RetrievePowerSystemResourcesReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("PowerSystemResources")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveLandBasesReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("LandBases")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LandBases property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandBasesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LandBases", e, _landBasesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LandBases property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandBasesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LandBases", e, _landBasesReference);
        }
        
        private static ITypedElement RetrieveDocumentsReference()
        {
            return ((ITypedElement)(((ModelElement)(NetworkDataSet.ClassInstance)).Resolve("Documents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Documents", e, _documentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Documents", e, _documentsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CIRCUITSECTIONS"))
            {
                return this._circuitSections;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "CHANGESETS"))
            {
                return this._changeSets;
            }
            if ((feature == "POWERSYSTEMRESOURCES"))
            {
                return this._powerSystemResources;
            }
            if ((feature == "LANDBASES"))
            {
                return this._landBases;
            }
            if ((feature == "DOCUMENTS"))
            {
                return this._documents;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Net" +
                        "workDataSet")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the NetworkDataSet class
        /// </summary>
        public class NetworkDataSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private NetworkDataSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NetworkDataSetReferencedElementsCollection(NetworkDataSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CircuitSections.Count);
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.ChangeSets.Count);
                    count = (count + this._parent.PowerSystemResources.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LandBases.Count);
                    count = (count + this._parent.Documents.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CircuitSections.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.LandBases.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CircuitSections.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.LandBases.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICircuitSection circuitSectionsCasted = item.As<ICircuitSection>();
                if ((circuitSectionsCasted != null))
                {
                    this._parent.CircuitSections.Add(circuitSectionsCasted);
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                IChangeSet changeSetsCasted = item.As<IChangeSet>();
                if ((changeSetsCasted != null))
                {
                    this._parent.ChangeSets.Add(changeSetsCasted);
                }
                IPowerSystemResource powerSystemResourcesCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourcesCasted != null))
                {
                    this._parent.PowerSystemResources.Add(powerSystemResourcesCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ILandBase landBasesCasted = item.As<ILandBase>();
                if ((landBasesCasted != null))
                {
                    this._parent.LandBases.Add(landBasesCasted);
                }
                IDocument documentsCasted = item.As<IDocument>();
                if ((documentsCasted != null))
                {
                    this._parent.Documents.Add(documentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CircuitSections.Clear();
                this._parent.ChangeItems.Clear();
                this._parent.ChangeSets.Clear();
                this._parent.PowerSystemResources.Clear();
                this._parent.Status = null;
                this._parent.LandBases.Clear();
                this._parent.Documents.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CircuitSections.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeSets.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerSystemResources.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.LandBases.Contains(item))
                {
                    return true;
                }
                if (this._parent.Documents.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> circuitSectionsEnumerator = this._parent.CircuitSections.GetEnumerator();
                try
                {
                    for (
                    ; circuitSectionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = circuitSectionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    circuitSectionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeSetsEnumerator = this._parent.ChangeSets.GetEnumerator();
                try
                {
                    for (
                    ; changeSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeSetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerSystemResourcesEnumerator = this._parent.PowerSystemResources.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourcesEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> landBasesEnumerator = this._parent.LandBases.GetEnumerator();
                try
                {
                    for (
                    ; landBasesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = landBasesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    landBasesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> documentsEnumerator = this._parent.Documents.GetEnumerator();
                try
                {
                    for (
                    ; documentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICircuitSection circuitSectionItem = item.As<ICircuitSection>();
                if (((circuitSectionItem != null) 
                            && this._parent.CircuitSections.Remove(circuitSectionItem)))
                {
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                IChangeSet changeSetItem = item.As<IChangeSet>();
                if (((changeSetItem != null) 
                            && this._parent.ChangeSets.Remove(changeSetItem)))
                {
                    return true;
                }
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResources.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ILandBase landBaseItem = item.As<ILandBase>();
                if (((landBaseItem != null) 
                            && this._parent.LandBases.Remove(landBaseItem)))
                {
                    return true;
                }
                IDocument documentItem = item.As<IDocument>();
                if (((documentItem != null) 
                            && this._parent.Documents.Remove(documentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CircuitSections).Concat(this._parent.ChangeItems).Concat(this._parent.ChangeSets).Concat(this._parent.PowerSystemResources).Concat(this._parent.Status).Concat(this._parent.LandBases).Concat(this._parent.Documents).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<INetworkDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(INetworkDataSet modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<INetworkDataSet, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(INetworkDataSet modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

