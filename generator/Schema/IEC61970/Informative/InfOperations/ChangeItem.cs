//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the ChangeItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cha" +
        "ngeItem")]
    [DebuggerDisplayAttribute("ChangeItem {UUID}")]
    public partial class ChangeItem : IdentifiedObject, IChangeItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ChangeItemKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        private static Lazy<ITypedElement> _changeSetReference = new Lazy<ITypedElement>(RetrieveChangeSetReference);
        
        /// <summary>
        /// The backing field for the ChangeSet property
        /// </summary>
        private IChangeSet _changeSet;
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _networkDataSetReference = new Lazy<ITypedElement>(RetrieveNetworkDataSetReference);
        
        /// <summary>
        /// The backing field for the NetworkDataSet property
        /// </summary>
        private INetworkDataSet _networkDataSet;
        
        private static Lazy<ITypedElement> _gmlSelectorReference = new Lazy<ITypedElement>(RetrieveGmlSelectorReference);
        
        /// <summary>
        /// The backing field for the GmlSelector property
        /// </summary>
        private IGmlSelector _gmlSelector;
        
        private static Lazy<ITypedElement> _organisationReference = new Lazy<ITypedElement>(RetrieveOrganisationReference);
        
        /// <summary>
        /// The backing field for the Organisation property
        /// </summary>
        private IErpOrganisation _organisation;
        
        private static Lazy<ITypedElement> _gmlObservationReference = new Lazy<ITypedElement>(RetrieveGmlObservationReference);
        
        /// <summary>
        /// The backing field for the GmlObservation property
        /// </summary>
        private IGmlObservation _gmlObservation;
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private ILocation _location;
        
        private static Lazy<ITypedElement> _powerSystemResourceReference = new Lazy<ITypedElement>(RetrievePowerSystemResourceReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private IPowerSystemResource _powerSystemResource;
        
        private static Lazy<ITypedElement> _documentReference = new Lazy<ITypedElement>(RetrieveDocumentReference);
        
        /// <summary>
        /// The backing field for the Document property
        /// </summary>
        private IDocument _document;
        
        private static Lazy<ITypedElement> _erpPersonReference = new Lazy<ITypedElement>(RetrieveErpPersonReference);
        
        /// <summary>
        /// The backing field for the ErpPerson property
        /// </summary>
        private IErpPerson _erpPerson;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ChangeItemKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ChangeItemKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ChangeSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IChangeSet ChangeSet
        {
            get
            {
                return this._changeSet;
            }
            set
            {
                if ((this._changeSet != value))
                {
                    IChangeSet old = this._changeSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChangeSetChanging(e);
                    this.OnPropertyChanging("ChangeSet", e, _changeSetReference);
                    this._changeSet = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetChangeSet;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetChangeSet;
                    }
                    this.OnChangeSetChanged(e);
                    this.OnPropertyChanged("ChangeSet", e, _changeSetReference);
                }
            }
        }
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The NetworkDataSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual INetworkDataSet NetworkDataSet
        {
            get
            {
                return this._networkDataSet;
            }
            set
            {
                if ((this._networkDataSet != value))
                {
                    INetworkDataSet old = this._networkDataSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetworkDataSetChanging(e);
                    this.OnPropertyChanging("NetworkDataSet", e, _networkDataSetReference);
                    this._networkDataSet = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetNetworkDataSet;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetNetworkDataSet;
                    }
                    this.OnNetworkDataSetChanged(e);
                    this.OnPropertyChanged("NetworkDataSet", e, _networkDataSetReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlSelector property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IGmlSelector GmlSelector
        {
            get
            {
                return this._gmlSelector;
            }
            set
            {
                if ((this._gmlSelector != value))
                {
                    IGmlSelector old = this._gmlSelector;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlSelectorChanging(e);
                    this.OnPropertyChanging("GmlSelector", e, _gmlSelectorReference);
                    this._gmlSelector = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetGmlSelector;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetGmlSelector;
                    }
                    this.OnGmlSelectorChanged(e);
                    this.OnPropertyChanged("GmlSelector", e, _gmlSelectorReference);
                }
            }
        }
        
        /// <summary>
        /// The Organisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IErpOrganisation Organisation
        {
            get
            {
                return this._organisation;
            }
            set
            {
                if ((this._organisation != value))
                {
                    IErpOrganisation old = this._organisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrganisationChanging(e);
                    this.OnPropertyChanging("Organisation", e, _organisationReference);
                    this._organisation = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetOrganisation;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetOrganisation;
                    }
                    this.OnOrganisationChanged(e);
                    this.OnPropertyChanged("Organisation", e, _organisationReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlObservation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IGmlObservation GmlObservation
        {
            get
            {
                return this._gmlObservation;
            }
            set
            {
                if ((this._gmlObservation != value))
                {
                    IGmlObservation old = this._gmlObservation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlObservationChanging(e);
                    this.OnPropertyChanging("GmlObservation", e, _gmlObservationReference);
                    this._gmlObservation = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetGmlObservation;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetGmlObservation;
                    }
                    this.OnGmlObservationChanged(e);
                    this.OnPropertyChanged("GmlObservation", e, _gmlObservationReference);
                }
            }
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IPowerSystemResource PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
            set
            {
                if ((this._powerSystemResource != value))
                {
                    IPowerSystemResource old = this._powerSystemResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerSystemResourceChanging(e);
                    this.OnPropertyChanging("PowerSystemResource", e, _powerSystemResourceReference);
                    this._powerSystemResource = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetPowerSystemResource;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetPowerSystemResource;
                    }
                    this.OnPowerSystemResourceChanged(e);
                    this.OnPropertyChanged("PowerSystemResource", e, _powerSystemResourceReference);
                }
            }
        }
        
        /// <summary>
        /// The Document property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IDocument Document
        {
            get
            {
                return this._document;
            }
            set
            {
                if ((this._document != value))
                {
                    IDocument old = this._document;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDocumentChanging(e);
                    this.OnPropertyChanging("Document", e, _documentReference);
                    this._document = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetDocument;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetDocument;
                    }
                    this.OnDocumentChanged(e);
                    this.OnPropertyChanged("Document", e, _documentReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPerson property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChangeItems")]
        public virtual IErpPerson ErpPerson
        {
            get
            {
                return this._erpPerson;
            }
            set
            {
                if ((this._erpPerson != value))
                {
                    IErpPerson old = this._erpPerson;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonChanging(e);
                    this.OnPropertyChanging("ErpPerson", e, _erpPersonReference);
                    this._erpPerson = value;
                    if ((old != null))
                    {
                        old.ChangeItems.Remove(this);
                        old.Deleted -= this.OnResetErpPerson;
                    }
                    if ((value != null))
                    {
                        value.ChangeItems.Add(this);
                        value.Deleted += this.OnResetErpPerson;
                    }
                    this.OnErpPersonChanged(e);
                    this.OnPropertyChanged("ErpPerson", e, _erpPersonReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ChangeItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cha" +
                            "ngeItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the ChangeSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChangeSetChanging;
        
        /// <summary>
        /// Gets fired when the ChangeSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChangeSetChanged;
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the NetworkDataSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetworkDataSetChanging;
        
        /// <summary>
        /// Gets fired when the NetworkDataSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetworkDataSetChanged;
        
        /// <summary>
        /// Gets fired before the GmlSelector property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlSelectorChanging;
        
        /// <summary>
        /// Gets fired when the GmlSelector property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlSelectorChanged;
        
        /// <summary>
        /// Gets fired before the Organisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanging;
        
        /// <summary>
        /// Gets fired when the Organisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanged;
        
        /// <summary>
        /// Gets fired before the GmlObservation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlObservationChanging;
        
        /// <summary>
        /// Gets fired when the GmlObservation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlObservationChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the PowerSystemResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanging;
        
        /// <summary>
        /// Gets fired when the PowerSystemResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanged;
        
        /// <summary>
        /// Gets fired before the Document property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanging;
        
        /// <summary>
        /// Gets fired when the Document property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanged;
        
        /// <summary>
        /// Gets fired before the ErpPerson property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanging;
        
        /// <summary>
        /// Gets fired when the ErpPerson property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveChangeSetReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("ChangeSet")));
        }
        
        /// <summary>
        /// Raises the ChangeSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChangeSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChangeSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChangeSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChangeSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChangeSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChangeSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChangeSet(object sender, System.EventArgs eventArgs)
        {
            this.ChangeSet = null;
        }
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveNetworkDataSetReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("NetworkDataSet")));
        }
        
        /// <summary>
        /// Raises the NetworkDataSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetworkDataSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetworkDataSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetworkDataSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetworkDataSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetworkDataSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NetworkDataSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNetworkDataSet(object sender, System.EventArgs eventArgs)
        {
            this.NetworkDataSet = null;
        }
        
        private static ITypedElement RetrieveGmlSelectorReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("GmlSelector")));
        }
        
        /// <summary>
        /// Raises the GmlSelectorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlSelectorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlSelectorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlSelectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlSelectorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlSelectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlSelector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlSelector(object sender, System.EventArgs eventArgs)
        {
            this.GmlSelector = null;
        }
        
        private static ITypedElement RetrieveOrganisationReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("Organisation")));
        }
        
        /// <summary>
        /// Raises the OrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Organisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.Organisation = null;
        }
        
        private static ITypedElement RetrieveGmlObservationReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("GmlObservation")));
        }
        
        /// <summary>
        /// Raises the GmlObservationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlObservationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlObservationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlObservationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlObservationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlObservationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlObservation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlObservation(object sender, System.EventArgs eventArgs)
        {
            this.GmlObservation = null;
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("Location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        private static ITypedElement RetrievePowerSystemResourceReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("PowerSystemResource")));
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerSystemResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerSystemResource(object sender, System.EventArgs eventArgs)
        {
            this.PowerSystemResource = null;
        }
        
        private static ITypedElement RetrieveDocumentReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("Document")));
        }
        
        /// <summary>
        /// Raises the DocumentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DocumentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Document property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDocument(object sender, System.EventArgs eventArgs)
        {
            this.Document = null;
        }
        
        private static ITypedElement RetrieveErpPersonReference()
        {
            return ((ITypedElement)(((ModelElement)(ChangeItem.ClassInstance)).Resolve("ErpPerson")));
        }
        
        /// <summary>
        /// Raises the ErpPersonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPerson property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPerson(object sender, System.EventArgs eventArgs)
        {
            this.ErpPerson = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CHANGESET"))
            {
                this.ChangeSet = ((IChangeSet)(value));
                return;
            }
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "NETWORKDATASET"))
            {
                this.NetworkDataSet = ((INetworkDataSet)(value));
                return;
            }
            if ((feature == "GMLSELECTOR"))
            {
                this.GmlSelector = ((IGmlSelector)(value));
                return;
            }
            if ((feature == "ORGANISATION"))
            {
                this.Organisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "GMLOBSERVATION"))
            {
                this.GmlObservation = ((IGmlObservation)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                this.PowerSystemResource = ((IPowerSystemResource)(value));
                return;
            }
            if ((feature == "DOCUMENT"))
            {
                this.Document = ((IDocument)(value));
                return;
            }
            if ((feature == "ERPPERSON"))
            {
                this.ErpPerson = ((IErpPerson)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ChangeItemKind)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ChangeSet"))
            {
                return new ChangeSetProxy(this);
            }
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "NetworkDataSet"))
            {
                return new NetworkDataSetProxy(this);
            }
            if ((attribute == "GmlSelector"))
            {
                return new GmlSelectorProxy(this);
            }
            if ((attribute == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            if ((attribute == "GmlObservation"))
            {
                return new GmlObservationProxy(this);
            }
            if ((attribute == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((attribute == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((attribute == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((attribute == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ChangeSet"))
            {
                return new ChangeSetProxy(this);
            }
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "NetworkDataSet"))
            {
                return new NetworkDataSetProxy(this);
            }
            if ((reference == "GmlSelector"))
            {
                return new GmlSelectorProxy(this);
            }
            if ((reference == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            if ((reference == "GmlObservation"))
            {
                return new GmlObservationProxy(this);
            }
            if ((reference == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((reference == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((reference == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((reference == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cha" +
                        "ngeItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ChangeItem class
        /// </summary>
        public class ChangeItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ChangeItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ChangeItemReferencedElementsCollection(ChangeItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ChangeSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NetworkDataSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlSelector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Organisation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlObservation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerSystemResource != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Document != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPerson != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ChangeSetChanged += this.PropagateValueChanges;
                this._parent.AssetChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.NetworkDataSetChanged += this.PropagateValueChanges;
                this._parent.GmlSelectorChanged += this.PropagateValueChanges;
                this._parent.OrganisationChanged += this.PropagateValueChanges;
                this._parent.GmlObservationChanged += this.PropagateValueChanges;
                this._parent.LocationChanged += this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged += this.PropagateValueChanges;
                this._parent.DocumentChanged += this.PropagateValueChanges;
                this._parent.ErpPersonChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ChangeSetChanged -= this.PropagateValueChanges;
                this._parent.AssetChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.NetworkDataSetChanged -= this.PropagateValueChanges;
                this._parent.GmlSelectorChanged -= this.PropagateValueChanges;
                this._parent.OrganisationChanged -= this.PropagateValueChanges;
                this._parent.GmlObservationChanged -= this.PropagateValueChanges;
                this._parent.LocationChanged -= this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged -= this.PropagateValueChanges;
                this._parent.DocumentChanged -= this.PropagateValueChanges;
                this._parent.ErpPersonChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ChangeSet == null))
                {
                    IChangeSet changeSetCasted = item.As<IChangeSet>();
                    if ((changeSetCasted != null))
                    {
                        this._parent.ChangeSet = changeSetCasted;
                        return;
                    }
                }
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.NetworkDataSet == null))
                {
                    INetworkDataSet networkDataSetCasted = item.As<INetworkDataSet>();
                    if ((networkDataSetCasted != null))
                    {
                        this._parent.NetworkDataSet = networkDataSetCasted;
                        return;
                    }
                }
                if ((this._parent.GmlSelector == null))
                {
                    IGmlSelector gmlSelectorCasted = item.As<IGmlSelector>();
                    if ((gmlSelectorCasted != null))
                    {
                        this._parent.GmlSelector = gmlSelectorCasted;
                        return;
                    }
                }
                if ((this._parent.Organisation == null))
                {
                    IErpOrganisation organisationCasted = item.As<IErpOrganisation>();
                    if ((organisationCasted != null))
                    {
                        this._parent.Organisation = organisationCasted;
                        return;
                    }
                }
                if ((this._parent.GmlObservation == null))
                {
                    IGmlObservation gmlObservationCasted = item.As<IGmlObservation>();
                    if ((gmlObservationCasted != null))
                    {
                        this._parent.GmlObservation = gmlObservationCasted;
                        return;
                    }
                }
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
                if ((this._parent.PowerSystemResource == null))
                {
                    IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                    if ((powerSystemResourceCasted != null))
                    {
                        this._parent.PowerSystemResource = powerSystemResourceCasted;
                        return;
                    }
                }
                if ((this._parent.Document == null))
                {
                    IDocument documentCasted = item.As<IDocument>();
                    if ((documentCasted != null))
                    {
                        this._parent.Document = documentCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPerson == null))
                {
                    IErpPerson erpPersonCasted = item.As<IErpPerson>();
                    if ((erpPersonCasted != null))
                    {
                        this._parent.ErpPerson = erpPersonCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ChangeSet = null;
                this._parent.Asset = null;
                this._parent.Status = null;
                this._parent.NetworkDataSet = null;
                this._parent.GmlSelector = null;
                this._parent.Organisation = null;
                this._parent.GmlObservation = null;
                this._parent.Location = null;
                this._parent.PowerSystemResource = null;
                this._parent.Document = null;
                this._parent.ErpPerson = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ChangeSet))
                {
                    return true;
                }
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.NetworkDataSet))
                {
                    return true;
                }
                if ((item == this._parent.GmlSelector))
                {
                    return true;
                }
                if ((item == this._parent.Organisation))
                {
                    return true;
                }
                if ((item == this._parent.GmlObservation))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                if ((item == this._parent.PowerSystemResource))
                {
                    return true;
                }
                if ((item == this._parent.Document))
                {
                    return true;
                }
                if ((item == this._parent.ErpPerson))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ChangeSet != null))
                {
                    array[arrayIndex] = this._parent.ChangeSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NetworkDataSet != null))
                {
                    array[arrayIndex] = this._parent.NetworkDataSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlSelector != null))
                {
                    array[arrayIndex] = this._parent.GmlSelector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Organisation != null))
                {
                    array[arrayIndex] = this._parent.Organisation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlObservation != null))
                {
                    array[arrayIndex] = this._parent.GmlObservation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerSystemResource != null))
                {
                    array[arrayIndex] = this._parent.PowerSystemResource;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Document != null))
                {
                    array[arrayIndex] = this._parent.Document;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPerson != null))
                {
                    array[arrayIndex] = this._parent.ErpPerson;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ChangeSet == item))
                {
                    this._parent.ChangeSet = null;
                    return true;
                }
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.NetworkDataSet == item))
                {
                    this._parent.NetworkDataSet = null;
                    return true;
                }
                if ((this._parent.GmlSelector == item))
                {
                    this._parent.GmlSelector = null;
                    return true;
                }
                if ((this._parent.Organisation == item))
                {
                    this._parent.Organisation = null;
                    return true;
                }
                if ((this._parent.GmlObservation == item))
                {
                    this._parent.GmlObservation = null;
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                if ((this._parent.PowerSystemResource == item))
                {
                    this._parent.PowerSystemResource = null;
                    return true;
                }
                if ((this._parent.Document == item))
                {
                    this._parent.Document = null;
                    return true;
                }
                if ((this._parent.ErpPerson == item))
                {
                    this._parent.ErpPerson = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ChangeSet).Concat(this._parent.Asset).Concat(this._parent.Status).Concat(this._parent.NetworkDataSet).Concat(this._parent.GmlSelector).Concat(this._parent.Organisation).Concat(this._parent.GmlObservation).Concat(this._parent.Location).Concat(this._parent.PowerSystemResource).Concat(this._parent.Document).Concat(this._parent.ErpPerson).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IChangeItem, Nullable<ChangeItemKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IChangeItem modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ChangeItemKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<IChangeItem, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(IChangeItem modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChangeSet property
        /// </summary>
        private sealed class ChangeSetProxy : ModelPropertyChange<IChangeItem, IChangeSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChangeSetProxy(IChangeItem modelElement) : 
                    base(modelElement, "ChangeSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IChangeSet Value
            {
                get
                {
                    return this.ModelElement.ChangeSet;
                }
                set
                {
                    this.ModelElement.ChangeSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IChangeItem, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IChangeItem modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IChangeItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IChangeItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NetworkDataSet property
        /// </summary>
        private sealed class NetworkDataSetProxy : ModelPropertyChange<IChangeItem, INetworkDataSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetworkDataSetProxy(IChangeItem modelElement) : 
                    base(modelElement, "NetworkDataSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INetworkDataSet Value
            {
                get
                {
                    return this.ModelElement.NetworkDataSet;
                }
                set
                {
                    this.ModelElement.NetworkDataSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlSelector property
        /// </summary>
        private sealed class GmlSelectorProxy : ModelPropertyChange<IChangeItem, IGmlSelector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlSelectorProxy(IChangeItem modelElement) : 
                    base(modelElement, "GmlSelector")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlSelector Value
            {
                get
                {
                    return this.ModelElement.GmlSelector;
                }
                set
                {
                    this.ModelElement.GmlSelector = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Organisation property
        /// </summary>
        private sealed class OrganisationProxy : ModelPropertyChange<IChangeItem, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrganisationProxy(IChangeItem modelElement) : 
                    base(modelElement, "Organisation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.Organisation;
                }
                set
                {
                    this.ModelElement.Organisation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlObservation property
        /// </summary>
        private sealed class GmlObservationProxy : ModelPropertyChange<IChangeItem, IGmlObservation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlObservationProxy(IChangeItem modelElement) : 
                    base(modelElement, "GmlObservation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlObservation Value
            {
                get
                {
                    return this.ModelElement.GmlObservation;
                }
                set
                {
                    this.ModelElement.GmlObservation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IChangeItem, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IChangeItem modelElement) : 
                    base(modelElement, "Location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerSystemResource property
        /// </summary>
        private sealed class PowerSystemResourceProxy : ModelPropertyChange<IChangeItem, IPowerSystemResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerSystemResourceProxy(IChangeItem modelElement) : 
                    base(modelElement, "PowerSystemResource")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerSystemResource Value
            {
                get
                {
                    return this.ModelElement.PowerSystemResource;
                }
                set
                {
                    this.ModelElement.PowerSystemResource = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Document property
        /// </summary>
        private sealed class DocumentProxy : ModelPropertyChange<IChangeItem, IDocument>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DocumentProxy(IChangeItem modelElement) : 
                    base(modelElement, "Document")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDocument Value
            {
                get
                {
                    return this.ModelElement.Document;
                }
                set
                {
                    this.ModelElement.Document = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPerson property
        /// </summary>
        private sealed class ErpPersonProxy : ModelPropertyChange<IChangeItem, IErpPerson>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonProxy(IChangeItem modelElement) : 
                    base(modelElement, "ErpPerson")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPerson Value
            {
                get
                {
                    return this.ModelElement.ErpPerson;
                }
                set
                {
                    this.ModelElement.ErpPerson = value;
                }
            }
        }
    }
}

