//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the CallBack class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cal" +
        "lBack")]
    [DebuggerDisplayAttribute("CallBack {UUID}")]
    public partial class CallBack : IdentifiedObject, ICallBack, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Advice property
        /// </summary>
        private string _advice;
        
        private static Lazy<ITypedElement> _adviceAttribute = new Lazy<ITypedElement>(RetrieveAdviceAttribute);
        
        /// <summary>
        /// The backing field for the ProblemInfo property
        /// </summary>
        private string _problemInfo;
        
        private static Lazy<ITypedElement> _problemInfoAttribute = new Lazy<ITypedElement>(RetrieveProblemInfoAttribute);
        
        /// <summary>
        /// The backing field for the ContactDetail property
        /// </summary>
        private string _contactDetail;
        
        private static Lazy<ITypedElement> _contactDetailAttribute = new Lazy<ITypedElement>(RetrieveContactDetailAttribute);
        
        /// <summary>
        /// The backing field for the DateTime property
        /// </summary>
        private DateTime _dateTime;
        
        private static Lazy<ITypedElement> _dateTimeAttribute = new Lazy<ITypedElement>(RetrieveDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Comment property
        /// </summary>
        private string _comment;
        
        private static Lazy<ITypedElement> _commentAttribute = new Lazy<ITypedElement>(RetrieveCommentAttribute);
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpPersonsReference = new Lazy<ITypedElement>(RetrieveErpPersonsReference);
        
        /// <summary>
        /// The backing field for the ErpPersons property
        /// </summary>
        private CallBackErpPersonsCollection _erpPersons;
        
        private static Lazy<ITypedElement> _appointmentsReference = new Lazy<ITypedElement>(RetrieveAppointmentsReference);
        
        /// <summary>
        /// The backing field for the Appointments property
        /// </summary>
        private CallBackAppointmentsCollection _appointments;
        
        private static Lazy<ITypedElement> _troubleTicketsReference = new Lazy<ITypedElement>(RetrieveTroubleTicketsReference);
        
        /// <summary>
        /// The backing field for the TroubleTickets property
        /// </summary>
        private CallBackTroubleTicketsCollection _troubleTickets;
        
        private static IClass _classInstance;
        
        public CallBack()
        {
            this._erpPersons = new CallBackErpPersonsCollection(this);
            this._erpPersons.CollectionChanging += this.ErpPersonsCollectionChanging;
            this._erpPersons.CollectionChanged += this.ErpPersonsCollectionChanged;
            this._appointments = new CallBackAppointmentsCollection(this);
            this._appointments.CollectionChanging += this.AppointmentsCollectionChanging;
            this._appointments.CollectionChanged += this.AppointmentsCollectionChanged;
            this._troubleTickets = new CallBackTroubleTicketsCollection(this);
            this._troubleTickets.CollectionChanging += this.TroubleTicketsCollectionChanging;
            this._troubleTickets.CollectionChanged += this.TroubleTicketsCollectionChanged;
        }
        
        /// <summary>
        /// The advice property
        /// </summary>
        [XmlElementNameAttribute("advice")]
        [XmlAttributeAttribute(true)]
        public virtual string Advice
        {
            get
            {
                return this._advice;
            }
            set
            {
                if ((this._advice != value))
                {
                    string old = this._advice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAdviceChanging(e);
                    this.OnPropertyChanging("Advice", e, _adviceAttribute);
                    this._advice = value;
                    this.OnAdviceChanged(e);
                    this.OnPropertyChanged("Advice", e, _adviceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The problemInfo property
        /// </summary>
        [XmlElementNameAttribute("problemInfo")]
        [XmlAttributeAttribute(true)]
        public virtual string ProblemInfo
        {
            get
            {
                return this._problemInfo;
            }
            set
            {
                if ((this._problemInfo != value))
                {
                    string old = this._problemInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProblemInfoChanging(e);
                    this.OnPropertyChanging("ProblemInfo", e, _problemInfoAttribute);
                    this._problemInfo = value;
                    this.OnProblemInfoChanged(e);
                    this.OnPropertyChanged("ProblemInfo", e, _problemInfoAttribute);
                }
            }
        }
        
        /// <summary>
        /// The contactDetail property
        /// </summary>
        [XmlElementNameAttribute("contactDetail")]
        [XmlAttributeAttribute(true)]
        public virtual string ContactDetail
        {
            get
            {
                return this._contactDetail;
            }
            set
            {
                if ((this._contactDetail != value))
                {
                    string old = this._contactDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContactDetailChanging(e);
                    this.OnPropertyChanging("ContactDetail", e, _contactDetailAttribute);
                    this._contactDetail = value;
                    this.OnContactDetailChanged(e);
                    this.OnPropertyChanged("ContactDetail", e, _contactDetailAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dateTime property
        /// </summary>
        [XmlElementNameAttribute("dateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DateTime
        {
            get
            {
                return this._dateTime;
            }
            set
            {
                if ((this._dateTime != value))
                {
                    DateTime old = this._dateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateTimeChanging(e);
                    this.OnPropertyChanging("DateTime", e, _dateTimeAttribute);
                    this._dateTime = value;
                    this.OnDateTimeChanged(e);
                    this.OnPropertyChanged("DateTime", e, _dateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The comment property
        /// </summary>
        [XmlElementNameAttribute("comment")]
        [XmlAttributeAttribute(true)]
        public virtual string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    string old = this._comment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommentChanging(e);
                    this.OnPropertyChanging("Comment", e, _commentAttribute);
                    this._comment = value;
                    this.OnCommentChanged(e);
                    this.OnPropertyChanged("Comment", e, _commentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CallBacks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get
            {
                return this._erpPersons;
            }
        }
        
        /// <summary>
        /// The Appointments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CallBack")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAppointment> Appointments
        {
            get
            {
                return this._appointments;
            }
        }
        
        /// <summary>
        /// The TroubleTickets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CallBacks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITroubleTicket> TroubleTickets
        {
            get
            {
                return this._troubleTickets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CallBackReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cal" +
                            "lBack")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Advice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AdviceChanging;
        
        /// <summary>
        /// Gets fired when the Advice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AdviceChanged;
        
        /// <summary>
        /// Gets fired before the ProblemInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProblemInfoChanging;
        
        /// <summary>
        /// Gets fired when the ProblemInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProblemInfoChanged;
        
        /// <summary>
        /// Gets fired before the ContactDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContactDetailChanging;
        
        /// <summary>
        /// Gets fired when the ContactDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContactDetailChanged;
        
        /// <summary>
        /// Gets fired before the DateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanging;
        
        /// <summary>
        /// Gets fired when the DateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Comment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanging;
        
        /// <summary>
        /// Gets fired when the Comment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveAdviceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("advice")));
        }
        
        /// <summary>
        /// Raises the AdviceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdviceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AdviceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AdviceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdviceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AdviceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProblemInfoAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("problemInfo")));
        }
        
        /// <summary>
        /// Raises the ProblemInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProblemInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProblemInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProblemInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProblemInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProblemInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveContactDetailAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("contactDetail")));
        }
        
        /// <summary>
        /// Raises the ContactDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContactDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContactDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContactDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContactDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContactDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("dateTime")));
        }
        
        /// <summary>
        /// Raises the DateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCommentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("comment")));
        }
        
        /// <summary>
        /// Raises the CommentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpPersonsReference()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("ErpPersons")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpPersons", e, _erpPersonsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersons", e, _erpPersonsReference);
        }
        
        private static ITypedElement RetrieveAppointmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("Appointments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Appointments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AppointmentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Appointments", e, _appointmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Appointments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AppointmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Appointments", e, _appointmentsReference);
        }
        
        private static ITypedElement RetrieveTroubleTicketsReference()
        {
            return ((ITypedElement)(((ModelElement)(CallBack.ClassInstance)).Resolve("TroubleTickets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TroubleTickets", e, _troubleTicketsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TroubleTickets", e, _troubleTicketsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ADVICE"))
            {
                return this.Advice;
            }
            if ((attribute == "PROBLEMINFO"))
            {
                return this.ProblemInfo;
            }
            if ((attribute == "CONTACTDETAIL"))
            {
                return this.ContactDetail;
            }
            if ((attribute == "DATETIME"))
            {
                return this.DateTime;
            }
            if ((attribute == "COMMENT"))
            {
                return this.Comment;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPPERSONS"))
            {
                return this._erpPersons;
            }
            if ((feature == "APPOINTMENTS"))
            {
                return this._appointments;
            }
            if ((feature == "TROUBLETICKETS"))
            {
                return this._troubleTickets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ADVICE"))
            {
                this.Advice = ((string)(value));
                return;
            }
            if ((feature == "PROBLEMINFO"))
            {
                this.ProblemInfo = ((string)(value));
                return;
            }
            if ((feature == "CONTACTDETAIL"))
            {
                this.ContactDetail = ((string)(value));
                return;
            }
            if ((feature == "DATETIME"))
            {
                this.DateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "COMMENT"))
            {
                this.Comment = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cal" +
                        "lBack")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CallBack class
        /// </summary>
        public class CallBackReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CallBack _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CallBackReferencedElementsCollection(CallBack parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpPersons.Count);
                    count = (count + this._parent.Appointments.Count);
                    count = (count + this._parent.TroubleTickets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Appointments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Appointments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IErpPerson erpPersonsCasted = item.As<IErpPerson>();
                if ((erpPersonsCasted != null))
                {
                    this._parent.ErpPersons.Add(erpPersonsCasted);
                }
                IAppointment appointmentsCasted = item.As<IAppointment>();
                if ((appointmentsCasted != null))
                {
                    this._parent.Appointments.Add(appointmentsCasted);
                }
                ITroubleTicket troubleTicketsCasted = item.As<ITroubleTicket>();
                if ((troubleTicketsCasted != null))
                {
                    this._parent.TroubleTickets.Add(troubleTicketsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
                this._parent.ErpPersons.Clear();
                this._parent.Appointments.Clear();
                this._parent.TroubleTickets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ErpPersons.Contains(item))
                {
                    return true;
                }
                if (this._parent.Appointments.Contains(item))
                {
                    return true;
                }
                if (this._parent.TroubleTickets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpPersonsEnumerator = this._parent.ErpPersons.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> appointmentsEnumerator = this._parent.Appointments.GetEnumerator();
                try
                {
                    for (
                    ; appointmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = appointmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    appointmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> troubleTicketsEnumerator = this._parent.TroubleTickets.GetEnumerator();
                try
                {
                    for (
                    ; troubleTicketsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = troubleTicketsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    troubleTicketsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.ErpPersons.Remove(erpPersonItem)))
                {
                    return true;
                }
                IAppointment appointmentItem = item.As<IAppointment>();
                if (((appointmentItem != null) 
                            && this._parent.Appointments.Remove(appointmentItem)))
                {
                    return true;
                }
                ITroubleTicket troubleTicketItem = item.As<ITroubleTicket>();
                if (((troubleTicketItem != null) 
                            && this._parent.TroubleTickets.Remove(troubleTicketItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).Concat(this._parent.ErpPersons).Concat(this._parent.Appointments).Concat(this._parent.TroubleTickets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the advice property
        /// </summary>
        private sealed class AdviceProxy : ModelPropertyChange<ICallBack, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AdviceProxy(ICallBack modelElement) : 
                    base(modelElement, "advice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Advice;
                }
                set
                {
                    this.ModelElement.Advice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the problemInfo property
        /// </summary>
        private sealed class ProblemInfoProxy : ModelPropertyChange<ICallBack, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProblemInfoProxy(ICallBack modelElement) : 
                    base(modelElement, "problemInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ProblemInfo;
                }
                set
                {
                    this.ModelElement.ProblemInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the contactDetail property
        /// </summary>
        private sealed class ContactDetailProxy : ModelPropertyChange<ICallBack, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContactDetailProxy(ICallBack modelElement) : 
                    base(modelElement, "contactDetail")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ContactDetail;
                }
                set
                {
                    this.ModelElement.ContactDetail = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dateTime property
        /// </summary>
        private sealed class DateTimeProxy : ModelPropertyChange<ICallBack, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateTimeProxy(ICallBack modelElement) : 
                    base(modelElement, "dateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DateTime;
                }
                set
                {
                    this.ModelElement.DateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the comment property
        /// </summary>
        private sealed class CommentProxy : ModelPropertyChange<ICallBack, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommentProxy(ICallBack modelElement) : 
                    base(modelElement, "comment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Comment;
                }
                set
                {
                    this.ModelElement.Comment = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ICallBack, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ICallBack modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

