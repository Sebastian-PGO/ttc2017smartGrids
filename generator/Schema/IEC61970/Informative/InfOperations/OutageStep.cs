//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the OutageStep class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
        "ageStep")]
    [DebuggerDisplayAttribute("OutageStep {UUID}")]
    public class OutageStep : IdentifiedObject, IOutageStep, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Injury property
        /// </summary>
        private bool _injury;
        
        /// <summary>
        /// The backing field for the SpecialCustomerCount property
        /// </summary>
        private int _specialCustomerCount;
        
        /// <summary>
        /// The backing field for the EstimatedRestoreDateTime property
        /// </summary>
        private DateTime _estimatedRestoreDateTime;
        
        /// <summary>
        /// The backing field for the Fatality property
        /// </summary>
        private bool _fatality;
        
        /// <summary>
        /// The backing field for the CallerCount property
        /// </summary>
        private int _callerCount;
        
        /// <summary>
        /// The backing field for the Damage property
        /// </summary>
        private bool _damage;
        
        /// <summary>
        /// The backing field for the JobPriority property
        /// </summary>
        private string _jobPriority;
        
        /// <summary>
        /// The backing field for the ShockReported property
        /// </summary>
        private bool _shockReported;
        
        /// <summary>
        /// The backing field for the AverageCml property
        /// </summary>
        private float _averageCml;
        
        /// <summary>
        /// The backing field for the TotalCml property
        /// </summary>
        private float _totalCml;
        
        /// <summary>
        /// The backing field for the TotalCustomerCount property
        /// </summary>
        private int _totalCustomerCount;
        
        /// <summary>
        /// The backing field for the CriticalCustomerCount property
        /// </summary>
        private int _criticalCustomerCount;
        
        /// <summary>
        /// The backing field for the OutageCodes property
        /// </summary>
        private OutageStepOutageCodesCollection _outageCodes;
        
        /// <summary>
        /// The backing field for the Crews property
        /// </summary>
        private OutageStepCrewsCollection _crews;
        
        /// <summary>
        /// The backing field for the NoPowerInterval property
        /// </summary>
        private IDateTimeInterval _noPowerInterval;
        
        /// <summary>
        /// The backing field for the ConductingEquipmentRoles property
        /// </summary>
        private OutageStepConductingEquipmentRolesCollection _conductingEquipmentRoles;
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        /// <summary>
        /// The backing field for the OutageRecord property
        /// </summary>
        private IOutageRecord _outageRecord;
        
        private static IClass _classInstance;
        
        public OutageStep()
        {
            this._outageCodes = new OutageStepOutageCodesCollection(this);
            this._outageCodes.CollectionChanging += this.OutageCodesCollectionChanging;
            this._outageCodes.CollectionChanged += this.OutageCodesCollectionChanged;
            this._crews = new OutageStepCrewsCollection(this);
            this._crews.CollectionChanging += this.CrewsCollectionChanging;
            this._crews.CollectionChanged += this.CrewsCollectionChanged;
            this._conductingEquipmentRoles = new OutageStepConductingEquipmentRolesCollection(this);
            this._conductingEquipmentRoles.CollectionChanging += this.ConductingEquipmentRolesCollectionChanging;
            this._conductingEquipmentRoles.CollectionChanged += this.ConductingEquipmentRolesCollectionChanged;
        }
        
        /// <summary>
        /// The injury property
        /// </summary>
        [XmlElementNameAttribute("injury")]
        [XmlAttributeAttribute(true)]
        public virtual bool Injury
        {
            get
            {
                return this._injury;
            }
            set
            {
                if ((this._injury != value))
                {
                    bool old = this._injury;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInjuryChanging(e);
                    this.OnPropertyChanging("Injury", e);
                    this._injury = value;
                    this.OnInjuryChanged(e);
                    this.OnPropertyChanged("Injury", e);
                }
            }
        }
        
        /// <summary>
        /// The specialCustomerCount property
        /// </summary>
        [XmlElementNameAttribute("specialCustomerCount")]
        [XmlAttributeAttribute(true)]
        public virtual int SpecialCustomerCount
        {
            get
            {
                return this._specialCustomerCount;
            }
            set
            {
                if ((this._specialCustomerCount != value))
                {
                    int old = this._specialCustomerCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecialCustomerCountChanging(e);
                    this.OnPropertyChanging("SpecialCustomerCount", e);
                    this._specialCustomerCount = value;
                    this.OnSpecialCustomerCountChanged(e);
                    this.OnPropertyChanged("SpecialCustomerCount", e);
                }
            }
        }
        
        /// <summary>
        /// The estimatedRestoreDateTime property
        /// </summary>
        [XmlElementNameAttribute("estimatedRestoreDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EstimatedRestoreDateTime
        {
            get
            {
                return this._estimatedRestoreDateTime;
            }
            set
            {
                if ((this._estimatedRestoreDateTime != value))
                {
                    DateTime old = this._estimatedRestoreDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatedRestoreDateTimeChanging(e);
                    this.OnPropertyChanging("EstimatedRestoreDateTime", e);
                    this._estimatedRestoreDateTime = value;
                    this.OnEstimatedRestoreDateTimeChanged(e);
                    this.OnPropertyChanged("EstimatedRestoreDateTime", e);
                }
            }
        }
        
        /// <summary>
        /// The fatality property
        /// </summary>
        [XmlElementNameAttribute("fatality")]
        [XmlAttributeAttribute(true)]
        public virtual bool Fatality
        {
            get
            {
                return this._fatality;
            }
            set
            {
                if ((this._fatality != value))
                {
                    bool old = this._fatality;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFatalityChanging(e);
                    this.OnPropertyChanging("Fatality", e);
                    this._fatality = value;
                    this.OnFatalityChanged(e);
                    this.OnPropertyChanged("Fatality", e);
                }
            }
        }
        
        /// <summary>
        /// The callerCount property
        /// </summary>
        [XmlElementNameAttribute("callerCount")]
        [XmlAttributeAttribute(true)]
        public virtual int CallerCount
        {
            get
            {
                return this._callerCount;
            }
            set
            {
                if ((this._callerCount != value))
                {
                    int old = this._callerCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallerCountChanging(e);
                    this.OnPropertyChanging("CallerCount", e);
                    this._callerCount = value;
                    this.OnCallerCountChanged(e);
                    this.OnPropertyChanged("CallerCount", e);
                }
            }
        }
        
        /// <summary>
        /// The damage property
        /// </summary>
        [XmlElementNameAttribute("damage")]
        [XmlAttributeAttribute(true)]
        public virtual bool Damage
        {
            get
            {
                return this._damage;
            }
            set
            {
                if ((this._damage != value))
                {
                    bool old = this._damage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDamageChanging(e);
                    this.OnPropertyChanging("Damage", e);
                    this._damage = value;
                    this.OnDamageChanged(e);
                    this.OnPropertyChanged("Damage", e);
                }
            }
        }
        
        /// <summary>
        /// The jobPriority property
        /// </summary>
        [XmlElementNameAttribute("jobPriority")]
        [XmlAttributeAttribute(true)]
        public virtual string JobPriority
        {
            get
            {
                return this._jobPriority;
            }
            set
            {
                if ((this._jobPriority != value))
                {
                    string old = this._jobPriority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnJobPriorityChanging(e);
                    this.OnPropertyChanging("JobPriority", e);
                    this._jobPriority = value;
                    this.OnJobPriorityChanged(e);
                    this.OnPropertyChanged("JobPriority", e);
                }
            }
        }
        
        /// <summary>
        /// The shockReported property
        /// </summary>
        [XmlElementNameAttribute("shockReported")]
        [XmlAttributeAttribute(true)]
        public virtual bool ShockReported
        {
            get
            {
                return this._shockReported;
            }
            set
            {
                if ((this._shockReported != value))
                {
                    bool old = this._shockReported;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShockReportedChanging(e);
                    this.OnPropertyChanging("ShockReported", e);
                    this._shockReported = value;
                    this.OnShockReportedChanged(e);
                    this.OnPropertyChanged("ShockReported", e);
                }
            }
        }
        
        /// <summary>
        /// The averageCml property
        /// </summary>
        [XmlElementNameAttribute("averageCml")]
        [XmlAttributeAttribute(true)]
        public virtual float AverageCml
        {
            get
            {
                return this._averageCml;
            }
            set
            {
                if ((this._averageCml != value))
                {
                    float old = this._averageCml;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAverageCmlChanging(e);
                    this.OnPropertyChanging("AverageCml", e);
                    this._averageCml = value;
                    this.OnAverageCmlChanged(e);
                    this.OnPropertyChanged("AverageCml", e);
                }
            }
        }
        
        /// <summary>
        /// The totalCml property
        /// </summary>
        [XmlElementNameAttribute("totalCml")]
        [XmlAttributeAttribute(true)]
        public virtual float TotalCml
        {
            get
            {
                return this._totalCml;
            }
            set
            {
                if ((this._totalCml != value))
                {
                    float old = this._totalCml;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalCmlChanging(e);
                    this.OnPropertyChanging("TotalCml", e);
                    this._totalCml = value;
                    this.OnTotalCmlChanged(e);
                    this.OnPropertyChanged("TotalCml", e);
                }
            }
        }
        
        /// <summary>
        /// The totalCustomerCount property
        /// </summary>
        [XmlElementNameAttribute("totalCustomerCount")]
        [XmlAttributeAttribute(true)]
        public virtual int TotalCustomerCount
        {
            get
            {
                return this._totalCustomerCount;
            }
            set
            {
                if ((this._totalCustomerCount != value))
                {
                    int old = this._totalCustomerCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalCustomerCountChanging(e);
                    this.OnPropertyChanging("TotalCustomerCount", e);
                    this._totalCustomerCount = value;
                    this.OnTotalCustomerCountChanged(e);
                    this.OnPropertyChanged("TotalCustomerCount", e);
                }
            }
        }
        
        /// <summary>
        /// The criticalCustomerCount property
        /// </summary>
        [XmlElementNameAttribute("criticalCustomerCount")]
        [XmlAttributeAttribute(true)]
        public virtual int CriticalCustomerCount
        {
            get
            {
                return this._criticalCustomerCount;
            }
            set
            {
                if ((this._criticalCustomerCount != value))
                {
                    int old = this._criticalCustomerCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCriticalCustomerCountChanging(e);
                    this.OnPropertyChanging("CriticalCustomerCount", e);
                    this._criticalCustomerCount = value;
                    this.OnCriticalCustomerCountChanged(e);
                    this.OnPropertyChanged("CriticalCustomerCount", e);
                }
            }
        }
        
        /// <summary>
        /// The OutageCodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSteps")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageCode> OutageCodes
        {
            get
            {
                return this._outageCodes;
            }
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSteps")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICrew> Crews
        {
            get
            {
                return this._crews;
            }
        }
        
        /// <summary>
        /// The noPowerInterval property
        /// </summary>
        [XmlElementNameAttribute("noPowerInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval NoPowerInterval
        {
            get
            {
                return this._noPowerInterval;
            }
            set
            {
                if ((this._noPowerInterval != value))
                {
                    IDateTimeInterval old = this._noPowerInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoPowerIntervalChanging(e);
                    this.OnPropertyChanging("NoPowerInterval", e);
                    this._noPowerInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNoPowerInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNoPowerInterval;
                    }
                    this.OnNoPowerIntervalChanged(e);
                    this.OnPropertyChanged("NoPowerInterval", e);
                }
            }
        }
        
        /// <summary>
        /// The ConductingEquipmentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageStep")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOutageStepPsrRole> ConductingEquipmentRoles
        {
            get
            {
                return this._conductingEquipmentRoles;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e);
                }
            }
        }
        
        /// <summary>
        /// The OutageRecord property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSteps")]
        public virtual IOutageRecord OutageRecord
        {
            get
            {
                return this._outageRecord;
            }
            set
            {
                if ((this._outageRecord != value))
                {
                    IOutageRecord old = this._outageRecord;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutageRecordChanging(e);
                    this.OnPropertyChanging("OutageRecord", e);
                    this._outageRecord = value;
                    if ((old != null))
                    {
                        old.OutageSteps.Remove(this);
                        old.Deleted -= this.OnResetOutageRecord;
                    }
                    if ((value != null))
                    {
                        value.OutageSteps.Add(this);
                        value.Deleted += this.OnResetOutageRecord;
                    }
                    this.OnOutageRecordChanged(e);
                    this.OnPropertyChanged("OutageRecord", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OutageStepReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
                            "ageStep")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Injury property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InjuryChanging;
        
        /// <summary>
        /// Gets fired when the Injury property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InjuryChanged;
        
        /// <summary>
        /// Gets fired before the SpecialCustomerCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the SpecialCustomerCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedRestoreDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedRestoreDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Fatality property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatalityChanging;
        
        /// <summary>
        /// Gets fired when the Fatality property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FatalityChanged;
        
        /// <summary>
        /// Gets fired before the CallerCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallerCountChanging;
        
        /// <summary>
        /// Gets fired when the CallerCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallerCountChanged;
        
        /// <summary>
        /// Gets fired before the Damage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DamageChanging;
        
        /// <summary>
        /// Gets fired when the Damage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DamageChanged;
        
        /// <summary>
        /// Gets fired before the JobPriority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JobPriorityChanging;
        
        /// <summary>
        /// Gets fired when the JobPriority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JobPriorityChanged;
        
        /// <summary>
        /// Gets fired before the ShockReported property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShockReportedChanging;
        
        /// <summary>
        /// Gets fired when the ShockReported property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShockReportedChanged;
        
        /// <summary>
        /// Gets fired before the AverageCml property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AverageCmlChanging;
        
        /// <summary>
        /// Gets fired when the AverageCml property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AverageCmlChanged;
        
        /// <summary>
        /// Gets fired before the TotalCml property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalCmlChanging;
        
        /// <summary>
        /// Gets fired when the TotalCml property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalCmlChanged;
        
        /// <summary>
        /// Gets fired before the TotalCustomerCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the TotalCustomerCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the CriticalCustomerCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CriticalCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the CriticalCustomerCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CriticalCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the NoPowerInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoPowerIntervalChanging;
        
        /// <summary>
        /// Gets fired when the NoPowerInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoPowerIntervalChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the OutageRecord property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageRecordChanging;
        
        /// <summary>
        /// Gets fired when the OutageRecord property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageRecordChanged;
        
        /// <summary>
        /// Raises the InjuryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInjuryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InjuryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InjuryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInjuryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InjuryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecialCustomerCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialCustomerCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialCustomerCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecialCustomerCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialCustomerCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialCustomerCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedRestoreDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedRestoreDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedRestoreDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedRestoreDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedRestoreDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedRestoreDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FatalityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatalityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatalityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FatalityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFatalityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FatalityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallerCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallerCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallerCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallerCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallerCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallerCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DamageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDamageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DamageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DamageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDamageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DamageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JobPriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJobPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JobPriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JobPriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJobPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JobPriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShockReportedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShockReportedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShockReportedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShockReportedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShockReportedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShockReportedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AverageCmlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAverageCmlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AverageCmlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AverageCmlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAverageCmlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AverageCmlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalCmlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalCmlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalCmlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalCmlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalCmlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalCmlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalCustomerCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalCustomerCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalCustomerCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalCustomerCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalCustomerCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalCustomerCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CriticalCustomerCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCriticalCustomerCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CriticalCustomerCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CriticalCustomerCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCriticalCustomerCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CriticalCustomerCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutageCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageCodesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OutageCodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutageCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutageCodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutageCodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Crews", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crews", e);
        }
        
        /// <summary>
        /// Raises the NoPowerIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoPowerIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoPowerIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoPowerIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoPowerIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoPowerIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NoPowerInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNoPowerInterval(object sender, System.EventArgs eventArgs)
        {
            this.NoPowerInterval = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConductingEquipmentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductingEquipmentRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConductingEquipmentRoles", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConductingEquipmentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductingEquipmentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConductingEquipmentRoles", e);
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Raises the OutageRecordChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageRecordChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageRecordChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutageRecordChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageRecordChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageRecordChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutageRecord property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutageRecord(object sender, System.EventArgs eventArgs)
        {
            this.OutageRecord = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INJURY"))
            {
                return this.Injury;
            }
            if ((attribute == "SPECIALCUSTOMERCOUNT"))
            {
                return this.SpecialCustomerCount;
            }
            if ((attribute == "ESTIMATEDRESTOREDATETIME"))
            {
                return this.EstimatedRestoreDateTime;
            }
            if ((attribute == "FATALITY"))
            {
                return this.Fatality;
            }
            if ((attribute == "CALLERCOUNT"))
            {
                return this.CallerCount;
            }
            if ((attribute == "DAMAGE"))
            {
                return this.Damage;
            }
            if ((attribute == "JOBPRIORITY"))
            {
                return this.JobPriority;
            }
            if ((attribute == "SHOCKREPORTED"))
            {
                return this.ShockReported;
            }
            if ((attribute == "AVERAGECML"))
            {
                return this.AverageCml;
            }
            if ((attribute == "TOTALCML"))
            {
                return this.TotalCml;
            }
            if ((attribute == "TOTALCUSTOMERCOUNT"))
            {
                return this.TotalCustomerCount;
            }
            if ((attribute == "CRITICALCUSTOMERCOUNT"))
            {
                return this.CriticalCustomerCount;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OUTAGECODES"))
            {
                return this._outageCodes;
            }
            if ((feature == "CREWS"))
            {
                return this._crews;
            }
            if ((feature == "CONDUCTINGEQUIPMENTROLES"))
            {
                return this._conductingEquipmentRoles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NOPOWERINTERVAL"))
            {
                this.NoPowerInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "OUTAGERECORD"))
            {
                this.OutageRecord = ((IOutageRecord)(value));
                return;
            }
            if ((feature == "INJURY"))
            {
                this.Injury = ((bool)(value));
                return;
            }
            if ((feature == "SPECIALCUSTOMERCOUNT"))
            {
                this.SpecialCustomerCount = ((int)(value));
                return;
            }
            if ((feature == "ESTIMATEDRESTOREDATETIME"))
            {
                this.EstimatedRestoreDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "FATALITY"))
            {
                this.Fatality = ((bool)(value));
                return;
            }
            if ((feature == "CALLERCOUNT"))
            {
                this.CallerCount = ((int)(value));
                return;
            }
            if ((feature == "DAMAGE"))
            {
                this.Damage = ((bool)(value));
                return;
            }
            if ((feature == "JOBPRIORITY"))
            {
                this.JobPriority = ((string)(value));
                return;
            }
            if ((feature == "SHOCKREPORTED"))
            {
                this.ShockReported = ((bool)(value));
                return;
            }
            if ((feature == "AVERAGECML"))
            {
                this.AverageCml = ((float)(value));
                return;
            }
            if ((feature == "TOTALCML"))
            {
                this.TotalCml = ((float)(value));
                return;
            }
            if ((feature == "TOTALCUSTOMERCOUNT"))
            {
                this.TotalCustomerCount = ((int)(value));
                return;
            }
            if ((feature == "CRITICALCUSTOMERCOUNT"))
            {
                this.CriticalCustomerCount = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NoPowerInterval"))
            {
                return new NoPowerIntervalProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "OutageRecord"))
            {
                return new OutageRecordProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "NoPowerInterval"))
            {
                return new NoPowerIntervalProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "OutageRecord"))
            {
                return new OutageRecordProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Out" +
                        "ageStep")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OutageStep class
        /// </summary>
        public class OutageStepReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OutageStep _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OutageStepReferencedElementsCollection(OutageStep parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OutageCodes.Count);
                    count = (count + this._parent.Crews.Count);
                    if ((this._parent.NoPowerInterval != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConductingEquipmentRoles.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutageRecord != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OutageCodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NoPowerIntervalChanged += this.PropagateValueChanges;
                this._parent.ConductingEquipmentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.OutageRecordChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OutageCodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NoPowerIntervalChanged -= this.PropagateValueChanges;
                this._parent.ConductingEquipmentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.OutageRecordChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOutageCode outageCodesCasted = item.As<IOutageCode>();
                if ((outageCodesCasted != null))
                {
                    this._parent.OutageCodes.Add(outageCodesCasted);
                }
                ICrew crewsCasted = item.As<ICrew>();
                if ((crewsCasted != null))
                {
                    this._parent.Crews.Add(crewsCasted);
                }
                if ((this._parent.NoPowerInterval == null))
                {
                    IDateTimeInterval noPowerIntervalCasted = item.As<IDateTimeInterval>();
                    if ((noPowerIntervalCasted != null))
                    {
                        this._parent.NoPowerInterval = noPowerIntervalCasted;
                        return;
                    }
                }
                IOutageStepPsrRole conductingEquipmentRolesCasted = item.As<IOutageStepPsrRole>();
                if ((conductingEquipmentRolesCasted != null))
                {
                    this._parent.ConductingEquipmentRoles.Add(conductingEquipmentRolesCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.OutageRecord == null))
                {
                    IOutageRecord outageRecordCasted = item.As<IOutageRecord>();
                    if ((outageRecordCasted != null))
                    {
                        this._parent.OutageRecord = outageRecordCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OutageCodes.Clear();
                this._parent.Crews.Clear();
                this._parent.NoPowerInterval = null;
                this._parent.ConductingEquipmentRoles.Clear();
                this._parent.Status = null;
                this._parent.OutageRecord = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OutageCodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.Crews.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.NoPowerInterval))
                {
                    return true;
                }
                if (this._parent.ConductingEquipmentRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.OutageRecord))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> outageCodesEnumerator = this._parent.OutageCodes.GetEnumerator();
                try
                {
                    for (
                    ; outageCodesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outageCodesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outageCodesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> crewsEnumerator = this._parent.Crews.GetEnumerator();
                try
                {
                    for (
                    ; crewsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewsEnumerator.Dispose();
                }
                if ((this._parent.NoPowerInterval != null))
                {
                    array[arrayIndex] = this._parent.NoPowerInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> conductingEquipmentRolesEnumerator = this._parent.ConductingEquipmentRoles.GetEnumerator();
                try
                {
                    for (
                    ; conductingEquipmentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conductingEquipmentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conductingEquipmentRolesEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutageRecord != null))
                {
                    array[arrayIndex] = this._parent.OutageRecord;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOutageCode outageCodeItem = item.As<IOutageCode>();
                if (((outageCodeItem != null) 
                            && this._parent.OutageCodes.Remove(outageCodeItem)))
                {
                    return true;
                }
                ICrew crewItem = item.As<ICrew>();
                if (((crewItem != null) 
                            && this._parent.Crews.Remove(crewItem)))
                {
                    return true;
                }
                if ((this._parent.NoPowerInterval == item))
                {
                    this._parent.NoPowerInterval = null;
                    return true;
                }
                IOutageStepPsrRole outageStepPsrRoleItem = item.As<IOutageStepPsrRole>();
                if (((outageStepPsrRoleItem != null) 
                            && this._parent.ConductingEquipmentRoles.Remove(outageStepPsrRoleItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.OutageRecord == item))
                {
                    this._parent.OutageRecord = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OutageCodes).Concat(this._parent.Crews).Concat(this._parent.NoPowerInterval).Concat(this._parent.ConductingEquipmentRoles).Concat(this._parent.Status).Concat(this._parent.OutageRecord).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the injury property
        /// </summary>
        private sealed class InjuryProxy : ModelPropertyChange<IOutageStep, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InjuryProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Injury;
                }
                set
                {
                    this.ModelElement.Injury = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InjuryChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InjuryChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specialCustomerCount property
        /// </summary>
        private sealed class SpecialCustomerCountProxy : ModelPropertyChange<IOutageStep, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecialCustomerCountProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SpecialCustomerCount;
                }
                set
                {
                    this.ModelElement.SpecialCustomerCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecialCustomerCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecialCustomerCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatedRestoreDateTime property
        /// </summary>
        private sealed class EstimatedRestoreDateTimeProxy : ModelPropertyChange<IOutageStep, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatedRestoreDateTimeProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EstimatedRestoreDateTime;
                }
                set
                {
                    this.ModelElement.EstimatedRestoreDateTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedRestoreDateTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EstimatedRestoreDateTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fatality property
        /// </summary>
        private sealed class FatalityProxy : ModelPropertyChange<IOutageStep, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FatalityProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Fatality;
                }
                set
                {
                    this.ModelElement.Fatality = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FatalityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FatalityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the callerCount property
        /// </summary>
        private sealed class CallerCountProxy : ModelPropertyChange<IOutageStep, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallerCountProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CallerCount;
                }
                set
                {
                    this.ModelElement.CallerCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallerCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallerCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the damage property
        /// </summary>
        private sealed class DamageProxy : ModelPropertyChange<IOutageStep, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DamageProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Damage;
                }
                set
                {
                    this.ModelElement.Damage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DamageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DamageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the jobPriority property
        /// </summary>
        private sealed class JobPriorityProxy : ModelPropertyChange<IOutageStep, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public JobPriorityProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.JobPriority;
                }
                set
                {
                    this.ModelElement.JobPriority = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JobPriorityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JobPriorityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shockReported property
        /// </summary>
        private sealed class ShockReportedProxy : ModelPropertyChange<IOutageStep, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShockReportedProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ShockReported;
                }
                set
                {
                    this.ModelElement.ShockReported = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShockReportedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShockReportedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the averageCml property
        /// </summary>
        private sealed class AverageCmlProxy : ModelPropertyChange<IOutageStep, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AverageCmlProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AverageCml;
                }
                set
                {
                    this.ModelElement.AverageCml = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AverageCmlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AverageCmlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the totalCml property
        /// </summary>
        private sealed class TotalCmlProxy : ModelPropertyChange<IOutageStep, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalCmlProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TotalCml;
                }
                set
                {
                    this.ModelElement.TotalCml = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotalCmlChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotalCmlChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the totalCustomerCount property
        /// </summary>
        private sealed class TotalCustomerCountProxy : ModelPropertyChange<IOutageStep, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalCustomerCountProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.TotalCustomerCount;
                }
                set
                {
                    this.ModelElement.TotalCustomerCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotalCustomerCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TotalCustomerCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the criticalCustomerCount property
        /// </summary>
        private sealed class CriticalCustomerCountProxy : ModelPropertyChange<IOutageStep, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CriticalCustomerCountProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CriticalCustomerCount;
                }
                set
                {
                    this.ModelElement.CriticalCustomerCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CriticalCustomerCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CriticalCustomerCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noPowerInterval property
        /// </summary>
        private sealed class NoPowerIntervalProxy : ModelPropertyChange<IOutageStep, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoPowerIntervalProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.NoPowerInterval;
                }
                set
                {
                    this.ModelElement.NoPowerInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NoPowerIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NoPowerIntervalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IOutageStep, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StatusChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutageRecord property
        /// </summary>
        private sealed class OutageRecordProxy : ModelPropertyChange<IOutageStep, IOutageRecord>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutageRecordProxy(IOutageStep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutageRecord Value
            {
                get
                {
                    return this.ModelElement.OutageRecord;
                }
                set
                {
                    this.ModelElement.OutageRecord = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutageRecordChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OutageRecordChanged -= handler;
            }
        }
    }
}

