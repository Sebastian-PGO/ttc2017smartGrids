//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial
{
    
    
    /// <summary>
    /// The default implementation of the OpenAccessProduct class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Financial")]
    [XmlNamespacePrefixAttribute("cimFinancial")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/OpenAcc" +
        "essProduct")]
    [DebuggerDisplayAttribute("OpenAccessProduct {UUID}")]
    public partial class OpenAccessProduct : Agreement, IOpenAccessProduct, IModelElement
    {
        
        private static Lazy<ITypedElement> _providedBy_TransmissionServiceReference = new Lazy<ITypedElement>(RetrieveProvidedBy_TransmissionServiceReference);
        
        /// <summary>
        /// The backing field for the ProvidedBy_TransmissionService property
        /// </summary>
        private OpenAccessProductProvidedBy_TransmissionServiceCollection _providedBy_TransmissionService;
        
        private static Lazy<ITypedElement> _ancillaryServicesReference = new Lazy<ITypedElement>(RetrieveAncillaryServicesReference);
        
        /// <summary>
        /// The backing field for the AncillaryServices property
        /// </summary>
        private OpenAccessProductAncillaryServicesCollection _ancillaryServices;
        
        private static IClass _classInstance;
        
        public OpenAccessProduct()
        {
            this._providedBy_TransmissionService = new OpenAccessProductProvidedBy_TransmissionServiceCollection(this);
            this._providedBy_TransmissionService.CollectionChanging += this.ProvidedBy_TransmissionServiceCollectionChanging;
            this._providedBy_TransmissionService.CollectionChanged += this.ProvidedBy_TransmissionServiceCollectionChanged;
            this._ancillaryServices = new OpenAccessProductAncillaryServicesCollection(this);
            this._ancillaryServices.CollectionChanging += this.AncillaryServicesCollectionChanging;
            this._ancillaryServices.CollectionChanged += this.AncillaryServicesCollectionChanged;
        }
        
        /// <summary>
        /// The ProvidedBy_TransmissionService property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransContractFor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionService> ProvidedBy_TransmissionService
        {
            get
            {
                return this._providedBy_TransmissionService;
            }
        }
        
        /// <summary>
        /// The AncillaryServices property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OpenAccessProduct")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAncillaryService> AncillaryServices
        {
            get
            {
                return this._ancillaryServices;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OpenAccessProductReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/OpenAcc" +
                            "essProduct")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveProvidedBy_TransmissionServiceReference()
        {
            return ((ITypedElement)(((ModelElement)(OpenAccessProduct.ClassInstance)).Resolve("ProvidedBy_TransmissionService")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProvidedBy_TransmissionService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedBy_TransmissionServiceCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProvidedBy_TransmissionService", e, _providedBy_TransmissionServiceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProvidedBy_TransmissionService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedBy_TransmissionServiceCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedBy_TransmissionService", e, _providedBy_TransmissionServiceReference);
        }
        
        private static ITypedElement RetrieveAncillaryServicesReference()
        {
            return ((ITypedElement)(((ModelElement)(OpenAccessProduct.ClassInstance)).Resolve("AncillaryServices")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServicesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AncillaryServices", e, _ancillaryServicesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServicesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AncillaryServices", e, _ancillaryServicesReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROVIDEDBY_TRANSMISSIONSERVICE"))
            {
                return this._providedBy_TransmissionService;
            }
            if ((feature == "ANCILLARYSERVICES"))
            {
                return this._ancillaryServices;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/OpenAcc" +
                        "essProduct")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OpenAccessProduct class
        /// </summary>
        public class OpenAccessProductReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OpenAccessProduct _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OpenAccessProductReferencedElementsCollection(OpenAccessProduct parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ProvidedBy_TransmissionService.Count);
                    count = (count + this._parent.AncillaryServices.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProvidedBy_TransmissionService.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AncillaryServices.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProvidedBy_TransmissionService.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AncillaryServices.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransmissionService providedBy_TransmissionServiceCasted = item.As<ITransmissionService>();
                if ((providedBy_TransmissionServiceCasted != null))
                {
                    this._parent.ProvidedBy_TransmissionService.Add(providedBy_TransmissionServiceCasted);
                }
                IAncillaryService ancillaryServicesCasted = item.As<IAncillaryService>();
                if ((ancillaryServicesCasted != null))
                {
                    this._parent.AncillaryServices.Add(ancillaryServicesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProvidedBy_TransmissionService.Clear();
                this._parent.AncillaryServices.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ProvidedBy_TransmissionService.Contains(item))
                {
                    return true;
                }
                if (this._parent.AncillaryServices.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> providedBy_TransmissionServiceEnumerator = this._parent.ProvidedBy_TransmissionService.GetEnumerator();
                try
                {
                    for (
                    ; providedBy_TransmissionServiceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedBy_TransmissionServiceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedBy_TransmissionServiceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ancillaryServicesEnumerator = this._parent.AncillaryServices.GetEnumerator();
                try
                {
                    for (
                    ; ancillaryServicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ancillaryServicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ancillaryServicesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransmissionService transmissionServiceItem = item.As<ITransmissionService>();
                if (((transmissionServiceItem != null) 
                            && this._parent.ProvidedBy_TransmissionService.Remove(transmissionServiceItem)))
                {
                    return true;
                }
                IAncillaryService ancillaryServiceItem = item.As<IAncillaryService>();
                if (((ancillaryServiceItem != null) 
                            && this._parent.AncillaryServices.Remove(ancillaryServiceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProvidedBy_TransmissionService).Concat(this._parent.AncillaryServices).GetEnumerator();
            }
        }
    }
}

