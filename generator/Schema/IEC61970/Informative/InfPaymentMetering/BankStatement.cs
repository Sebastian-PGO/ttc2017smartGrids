//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the BankStatement class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering")]
    [XmlNamespacePrefixAttribute("cimInfPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
        "g/BankStatement")]
    [DebuggerDisplayAttribute("BankStatement {UUID}")]
    public partial class BankStatement : Document, IBankStatement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MerchantCreditAmount property
        /// </summary>
        private float _merchantCreditAmount;
        
        private static Lazy<ITypedElement> _merchantCreditAmountAttribute = new Lazy<ITypedElement>(RetrieveMerchantCreditAmountAttribute);
        
        /// <summary>
        /// The backing field for the DepositAmount property
        /// </summary>
        private float _depositAmount;
        
        private static Lazy<ITypedElement> _depositAmountAttribute = new Lazy<ITypedElement>(RetrieveDepositAmountAttribute);
        
        /// <summary>
        /// The backing field for the DepositDateTime property
        /// </summary>
        private DateTime _depositDateTime;
        
        private static Lazy<ITypedElement> _depositDateTimeAttribute = new Lazy<ITypedElement>(RetrieveDepositDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Posted property
        /// </summary>
        private bool _posted;
        
        private static Lazy<ITypedElement> _postedAttribute = new Lazy<ITypedElement>(RetrievePostedAttribute);
        
        private static Lazy<ITypedElement> _bankAccountReference = new Lazy<ITypedElement>(RetrieveBankAccountReference);
        
        /// <summary>
        /// The backing field for the BankAccount property
        /// </summary>
        private IBankAccount _bankAccount;
        
        private static Lazy<ITypedElement> _merchantAccountReference = new Lazy<ITypedElement>(RetrieveMerchantAccountReference);
        
        /// <summary>
        /// The backing field for the MerchantAccount property
        /// </summary>
        private IMerchantAccount _merchantAccount;
        
        private static Lazy<ITypedElement> _vendorReference = new Lazy<ITypedElement>(RetrieveVendorReference);
        
        /// <summary>
        /// The backing field for the Vendor property
        /// </summary>
        private IVendor _vendor;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The merchantCreditAmount property
        /// </summary>
        [XmlElementNameAttribute("merchantCreditAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float MerchantCreditAmount
        {
            get
            {
                return this._merchantCreditAmount;
            }
            set
            {
                if ((this._merchantCreditAmount != value))
                {
                    float old = this._merchantCreditAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMerchantCreditAmountChanging(e);
                    this.OnPropertyChanging("MerchantCreditAmount", e, _merchantCreditAmountAttribute);
                    this._merchantCreditAmount = value;
                    this.OnMerchantCreditAmountChanged(e);
                    this.OnPropertyChanged("MerchantCreditAmount", e, _merchantCreditAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The depositAmount property
        /// </summary>
        [XmlElementNameAttribute("depositAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float DepositAmount
        {
            get
            {
                return this._depositAmount;
            }
            set
            {
                if ((this._depositAmount != value))
                {
                    float old = this._depositAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDepositAmountChanging(e);
                    this.OnPropertyChanging("DepositAmount", e, _depositAmountAttribute);
                    this._depositAmount = value;
                    this.OnDepositAmountChanged(e);
                    this.OnPropertyChanged("DepositAmount", e, _depositAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The depositDateTime property
        /// </summary>
        [XmlElementNameAttribute("depositDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DepositDateTime
        {
            get
            {
                return this._depositDateTime;
            }
            set
            {
                if ((this._depositDateTime != value))
                {
                    DateTime old = this._depositDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDepositDateTimeChanging(e);
                    this.OnPropertyChanging("DepositDateTime", e, _depositDateTimeAttribute);
                    this._depositDateTime = value;
                    this.OnDepositDateTimeChanged(e);
                    this.OnPropertyChanged("DepositDateTime", e, _depositDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The posted property
        /// </summary>
        [XmlElementNameAttribute("posted")]
        [XmlAttributeAttribute(true)]
        public virtual bool Posted
        {
            get
            {
                return this._posted;
            }
            set
            {
                if ((this._posted != value))
                {
                    bool old = this._posted;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPostedChanging(e);
                    this.OnPropertyChanging("Posted", e, _postedAttribute);
                    this._posted = value;
                    this.OnPostedChanged(e);
                    this.OnPropertyChanged("Posted", e, _postedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The BankAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankStatements")]
        public virtual IBankAccount BankAccount
        {
            get
            {
                return this._bankAccount;
            }
            set
            {
                if ((this._bankAccount != value))
                {
                    IBankAccount old = this._bankAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBankAccountChanging(e);
                    this.OnPropertyChanging("BankAccount", e, _bankAccountReference);
                    this._bankAccount = value;
                    if ((old != null))
                    {
                        old.BankStatements.Remove(this);
                        old.Deleted -= this.OnResetBankAccount;
                    }
                    if ((value != null))
                    {
                        value.BankStatements.Add(this);
                        value.Deleted += this.OnResetBankAccount;
                    }
                    this.OnBankAccountChanged(e);
                    this.OnPropertyChanged("BankAccount", e, _bankAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The MerchantAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankStatements")]
        public virtual IMerchantAccount MerchantAccount
        {
            get
            {
                return this._merchantAccount;
            }
            set
            {
                if ((this._merchantAccount != value))
                {
                    IMerchantAccount old = this._merchantAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMerchantAccountChanging(e);
                    this.OnPropertyChanging("MerchantAccount", e, _merchantAccountReference);
                    this._merchantAccount = value;
                    if ((old != null))
                    {
                        old.BankStatements.Remove(this);
                        old.Deleted -= this.OnResetMerchantAccount;
                    }
                    if ((value != null))
                    {
                        value.BankStatements.Add(this);
                        value.Deleted += this.OnResetMerchantAccount;
                    }
                    this.OnMerchantAccountChanged(e);
                    this.OnPropertyChanged("MerchantAccount", e, _merchantAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The Vendor property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankStatements")]
        public virtual IVendor Vendor
        {
            get
            {
                return this._vendor;
            }
            set
            {
                if ((this._vendor != value))
                {
                    IVendor old = this._vendor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendorChanging(e);
                    this.OnPropertyChanging("Vendor", e, _vendorReference);
                    this._vendor = value;
                    if ((old != null))
                    {
                        old.BankStatements.Remove(this);
                        old.Deleted -= this.OnResetVendor;
                    }
                    if ((value != null))
                    {
                        value.BankStatements.Add(this);
                        value.Deleted += this.OnResetVendor;
                    }
                    this.OnVendorChanged(e);
                    this.OnPropertyChanged("Vendor", e, _vendorReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BankStatementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                            "g/BankStatement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MerchantCreditAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantCreditAmountChanging;
        
        /// <summary>
        /// Gets fired when the MerchantCreditAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantCreditAmountChanged;
        
        /// <summary>
        /// Gets fired before the DepositAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositAmountChanging;
        
        /// <summary>
        /// Gets fired when the DepositAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositAmountChanged;
        
        /// <summary>
        /// Gets fired before the DepositDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the DepositDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Posted property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostedChanging;
        
        /// <summary>
        /// Gets fired when the Posted property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostedChanged;
        
        /// <summary>
        /// Gets fired before the BankAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankAccountChanging;
        
        /// <summary>
        /// Gets fired when the BankAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankAccountChanged;
        
        /// <summary>
        /// Gets fired before the MerchantAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAccountChanging;
        
        /// <summary>
        /// Gets fired when the MerchantAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAccountChanged;
        
        /// <summary>
        /// Gets fired before the Vendor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanging;
        
        /// <summary>
        /// Gets fired when the Vendor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorChanged;
        
        private static ITypedElement RetrieveMerchantCreditAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("merchantCreditAmount")));
        }
        
        /// <summary>
        /// Raises the MerchantCreditAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantCreditAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantCreditAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MerchantCreditAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantCreditAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantCreditAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDepositAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("depositAmount")));
        }
        
        /// <summary>
        /// Raises the DepositAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DepositAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDepositDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("depositDateTime")));
        }
        
        /// <summary>
        /// Raises the DepositDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DepositDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePostedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("posted")));
        }
        
        /// <summary>
        /// Raises the PostedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PostedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBankAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("BankAccount")));
        }
        
        /// <summary>
        /// Raises the BankAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BankAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BankAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBankAccount(object sender, System.EventArgs eventArgs)
        {
            this.BankAccount = null;
        }
        
        private static ITypedElement RetrieveMerchantAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("MerchantAccount")));
        }
        
        /// <summary>
        /// Raises the MerchantAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MerchantAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MerchantAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMerchantAccount(object sender, System.EventArgs eventArgs)
        {
            this.MerchantAccount = null;
        }
        
        private static ITypedElement RetrieveVendorReference()
        {
            return ((ITypedElement)(((ModelElement)(BankStatement.ClassInstance)).Resolve("Vendor")));
        }
        
        /// <summary>
        /// Raises the VendorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Vendor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVendor(object sender, System.EventArgs eventArgs)
        {
            this.Vendor = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MERCHANTCREDITAMOUNT"))
            {
                return this.MerchantCreditAmount;
            }
            if ((attribute == "DEPOSITAMOUNT"))
            {
                return this.DepositAmount;
            }
            if ((attribute == "DEPOSITDATETIME"))
            {
                return this.DepositDateTime;
            }
            if ((attribute == "POSTED"))
            {
                return this.Posted;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BANKACCOUNT"))
            {
                this.BankAccount = ((IBankAccount)(value));
                return;
            }
            if ((feature == "MERCHANTACCOUNT"))
            {
                this.MerchantAccount = ((IMerchantAccount)(value));
                return;
            }
            if ((feature == "VENDOR"))
            {
                this.Vendor = ((IVendor)(value));
                return;
            }
            if ((feature == "MERCHANTCREDITAMOUNT"))
            {
                this.MerchantCreditAmount = ((float)(value));
                return;
            }
            if ((feature == "DEPOSITAMOUNT"))
            {
                this.DepositAmount = ((float)(value));
                return;
            }
            if ((feature == "DEPOSITDATETIME"))
            {
                this.DepositDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "POSTED"))
            {
                this.Posted = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BankAccount"))
            {
                return new BankAccountProxy(this);
            }
            if ((attribute == "MerchantAccount"))
            {
                return new MerchantAccountProxy(this);
            }
            if ((attribute == "Vendor"))
            {
                return new VendorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BankAccount"))
            {
                return new BankAccountProxy(this);
            }
            if ((reference == "MerchantAccount"))
            {
                return new MerchantAccountProxy(this);
            }
            if ((reference == "Vendor"))
            {
                return new VendorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                        "g/BankStatement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BankStatement class
        /// </summary>
        public class BankStatementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BankStatement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BankStatementReferencedElementsCollection(BankStatement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BankAccount != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MerchantAccount != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Vendor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BankAccountChanged += this.PropagateValueChanges;
                this._parent.MerchantAccountChanged += this.PropagateValueChanges;
                this._parent.VendorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BankAccountChanged -= this.PropagateValueChanges;
                this._parent.MerchantAccountChanged -= this.PropagateValueChanges;
                this._parent.VendorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BankAccount == null))
                {
                    IBankAccount bankAccountCasted = item.As<IBankAccount>();
                    if ((bankAccountCasted != null))
                    {
                        this._parent.BankAccount = bankAccountCasted;
                        return;
                    }
                }
                if ((this._parent.MerchantAccount == null))
                {
                    IMerchantAccount merchantAccountCasted = item.As<IMerchantAccount>();
                    if ((merchantAccountCasted != null))
                    {
                        this._parent.MerchantAccount = merchantAccountCasted;
                        return;
                    }
                }
                if ((this._parent.Vendor == null))
                {
                    IVendor vendorCasted = item.As<IVendor>();
                    if ((vendorCasted != null))
                    {
                        this._parent.Vendor = vendorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BankAccount = null;
                this._parent.MerchantAccount = null;
                this._parent.Vendor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BankAccount))
                {
                    return true;
                }
                if ((item == this._parent.MerchantAccount))
                {
                    return true;
                }
                if ((item == this._parent.Vendor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BankAccount != null))
                {
                    array[arrayIndex] = this._parent.BankAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MerchantAccount != null))
                {
                    array[arrayIndex] = this._parent.MerchantAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Vendor != null))
                {
                    array[arrayIndex] = this._parent.Vendor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BankAccount == item))
                {
                    this._parent.BankAccount = null;
                    return true;
                }
                if ((this._parent.MerchantAccount == item))
                {
                    this._parent.MerchantAccount = null;
                    return true;
                }
                if ((this._parent.Vendor == item))
                {
                    this._parent.Vendor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BankAccount).Concat(this._parent.MerchantAccount).Concat(this._parent.Vendor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the merchantCreditAmount property
        /// </summary>
        private sealed class MerchantCreditAmountProxy : ModelPropertyChange<IBankStatement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MerchantCreditAmountProxy(IBankStatement modelElement) : 
                    base(modelElement, "merchantCreditAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MerchantCreditAmount;
                }
                set
                {
                    this.ModelElement.MerchantCreditAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the depositAmount property
        /// </summary>
        private sealed class DepositAmountProxy : ModelPropertyChange<IBankStatement, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DepositAmountProxy(IBankStatement modelElement) : 
                    base(modelElement, "depositAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DepositAmount;
                }
                set
                {
                    this.ModelElement.DepositAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the depositDateTime property
        /// </summary>
        private sealed class DepositDateTimeProxy : ModelPropertyChange<IBankStatement, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DepositDateTimeProxy(IBankStatement modelElement) : 
                    base(modelElement, "depositDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DepositDateTime;
                }
                set
                {
                    this.ModelElement.DepositDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the posted property
        /// </summary>
        private sealed class PostedProxy : ModelPropertyChange<IBankStatement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PostedProxy(IBankStatement modelElement) : 
                    base(modelElement, "posted")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Posted;
                }
                set
                {
                    this.ModelElement.Posted = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BankAccount property
        /// </summary>
        private sealed class BankAccountProxy : ModelPropertyChange<IBankStatement, IBankAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BankAccountProxy(IBankStatement modelElement) : 
                    base(modelElement, "BankAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBankAccount Value
            {
                get
                {
                    return this.ModelElement.BankAccount;
                }
                set
                {
                    this.ModelElement.BankAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MerchantAccount property
        /// </summary>
        private sealed class MerchantAccountProxy : ModelPropertyChange<IBankStatement, IMerchantAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MerchantAccountProxy(IBankStatement modelElement) : 
                    base(modelElement, "MerchantAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMerchantAccount Value
            {
                get
                {
                    return this.ModelElement.MerchantAccount;
                }
                set
                {
                    this.ModelElement.MerchantAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Vendor property
        /// </summary>
        private sealed class VendorProxy : ModelPropertyChange<IBankStatement, IVendor>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendorProxy(IBankStatement modelElement) : 
                    base(modelElement, "Vendor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVendor Value
            {
                get
                {
                    return this.ModelElement.Vendor;
                }
                set
                {
                    this.ModelElement.Vendor = value;
                }
            }
        }
    }
}

