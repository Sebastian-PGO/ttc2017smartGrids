//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Bank class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering")]
    [XmlNamespacePrefixAttribute("cimInfPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
        "g/Bank")]
    [DebuggerDisplayAttribute("Bank {UUID}")]
    public partial class Bank : Organisation, IBank, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BranchCode property
        /// </summary>
        private string _branchCode;
        
        private static Lazy<ITypedElement> _branchCodeAttribute = new Lazy<ITypedElement>(RetrieveBranchCodeAttribute);
        
        /// <summary>
        /// The backing field for the Bic property
        /// </summary>
        private string _bic;
        
        private static Lazy<ITypedElement> _bicAttribute = new Lazy<ITypedElement>(RetrieveBicAttribute);
        
        /// <summary>
        /// The backing field for the Iban property
        /// </summary>
        private string _iban;
        
        private static Lazy<ITypedElement> _ibanAttribute = new Lazy<ITypedElement>(RetrieveIbanAttribute);
        
        private static Lazy<ITypedElement> _bankAccountsReference = new Lazy<ITypedElement>(RetrieveBankAccountsReference);
        
        /// <summary>
        /// The backing field for the BankAccounts property
        /// </summary>
        private BankBankAccountsCollection _bankAccounts;
        
        private static IClass _classInstance;
        
        public Bank()
        {
            this._bankAccounts = new BankBankAccountsCollection(this);
            this._bankAccounts.CollectionChanging += this.BankAccountsCollectionChanging;
            this._bankAccounts.CollectionChanged += this.BankAccountsCollectionChanged;
        }
        
        /// <summary>
        /// The branchCode property
        /// </summary>
        [XmlElementNameAttribute("branchCode")]
        [XmlAttributeAttribute(true)]
        public virtual string BranchCode
        {
            get
            {
                return this._branchCode;
            }
            set
            {
                if ((this._branchCode != value))
                {
                    string old = this._branchCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBranchCodeChanging(e);
                    this.OnPropertyChanging("BranchCode", e, _branchCodeAttribute);
                    this._branchCode = value;
                    this.OnBranchCodeChanged(e);
                    this.OnPropertyChanged("BranchCode", e, _branchCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bic property
        /// </summary>
        [XmlElementNameAttribute("bic")]
        [XmlAttributeAttribute(true)]
        public virtual string Bic
        {
            get
            {
                return this._bic;
            }
            set
            {
                if ((this._bic != value))
                {
                    string old = this._bic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBicChanging(e);
                    this.OnPropertyChanging("Bic", e, _bicAttribute);
                    this._bic = value;
                    this.OnBicChanged(e);
                    this.OnPropertyChanged("Bic", e, _bicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The iban property
        /// </summary>
        [XmlElementNameAttribute("iban")]
        [XmlAttributeAttribute(true)]
        public virtual string Iban
        {
            get
            {
                return this._iban;
            }
            set
            {
                if ((this._iban != value))
                {
                    string old = this._iban;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIbanChanging(e);
                    this.OnPropertyChanging("Iban", e, _ibanAttribute);
                    this._iban = value;
                    this.OnIbanChanged(e);
                    this.OnPropertyChanged("Iban", e, _ibanAttribute);
                }
            }
        }
        
        /// <summary>
        /// The BankAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Bank")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBankAccount> BankAccounts
        {
            get
            {
                return this._bankAccounts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BankReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                            "g/Bank")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BranchCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchCodeChanging;
        
        /// <summary>
        /// Gets fired when the BranchCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchCodeChanged;
        
        /// <summary>
        /// Gets fired before the Bic property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BicChanging;
        
        /// <summary>
        /// Gets fired when the Bic property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BicChanged;
        
        /// <summary>
        /// Gets fired before the Iban property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IbanChanging;
        
        /// <summary>
        /// Gets fired when the Iban property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IbanChanged;
        
        private static ITypedElement RetrieveBranchCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bank.ClassInstance)).Resolve("branchCode")));
        }
        
        /// <summary>
        /// Raises the BranchCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BranchCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bank.ClassInstance)).Resolve("bic")));
        }
        
        /// <summary>
        /// Raises the BicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBicChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBicChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIbanAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bank.ClassInstance)).Resolve("iban")));
        }
        
        /// <summary>
        /// Raises the IbanChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIbanChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IbanChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IbanChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIbanChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IbanChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBankAccountsReference()
        {
            return ((ITypedElement)(((ModelElement)(Bank.ClassInstance)).Resolve("BankAccounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BankAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankAccountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BankAccounts", e, _bankAccountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BankAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BankAccounts", e, _bankAccountsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BRANCHCODE"))
            {
                return this.BranchCode;
            }
            if ((attribute == "BIC"))
            {
                return this.Bic;
            }
            if ((attribute == "IBAN"))
            {
                return this.Iban;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BANKACCOUNTS"))
            {
                return this._bankAccounts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BRANCHCODE"))
            {
                this.BranchCode = ((string)(value));
                return;
            }
            if ((feature == "BIC"))
            {
                this.Bic = ((string)(value));
                return;
            }
            if ((feature == "IBAN"))
            {
                this.Iban = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                        "g/Bank")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Bank class
        /// </summary>
        public class BankReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Bank _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BankReferencedElementsCollection(Bank parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BankAccounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BankAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BankAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBankAccount bankAccountsCasted = item.As<IBankAccount>();
                if ((bankAccountsCasted != null))
                {
                    this._parent.BankAccounts.Add(bankAccountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BankAccounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.BankAccounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> bankAccountsEnumerator = this._parent.BankAccounts.GetEnumerator();
                try
                {
                    for (
                    ; bankAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bankAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bankAccountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBankAccount bankAccountItem = item.As<IBankAccount>();
                if (((bankAccountItem != null) 
                            && this._parent.BankAccounts.Remove(bankAccountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BankAccounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the branchCode property
        /// </summary>
        private sealed class BranchCodeProxy : ModelPropertyChange<IBank, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BranchCodeProxy(IBank modelElement) : 
                    base(modelElement, "branchCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BranchCode;
                }
                set
                {
                    this.ModelElement.BranchCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bic property
        /// </summary>
        private sealed class BicProxy : ModelPropertyChange<IBank, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BicProxy(IBank modelElement) : 
                    base(modelElement, "bic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Bic;
                }
                set
                {
                    this.ModelElement.Bic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the iban property
        /// </summary>
        private sealed class IbanProxy : ModelPropertyChange<IBank, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IbanProxy(IBank modelElement) : 
                    base(modelElement, "iban")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Iban;
                }
                set
                {
                    this.ModelElement.Iban = value;
                }
            }
        }
    }
}

