//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the CreditRegister class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering")]
    [XmlNamespacePrefixAttribute("cimInfPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
        "g/CreditRegister")]
    [DebuggerDisplayAttribute("CreditRegister {UUID}")]
    public class CreditRegister : IdentifiedObject, ICreditRegister, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CreditKind property
        /// </summary>
        private Nullable<CreditKind> _creditKind;
        
        /// <summary>
        /// The backing field for the CreditAmount property
        /// </summary>
        private IAccountingUnit _creditAmount;
        
        /// <summary>
        /// The backing field for the SDPAccountingFunction property
        /// </summary>
        private ISDPAccountingFunction _sDPAccountingFunction;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The creditKind property
        /// </summary>
        [XmlElementNameAttribute("creditKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CreditKind> CreditKind
        {
            get
            {
                return this._creditKind;
            }
            set
            {
                if ((this._creditKind != value))
                {
                    Nullable<CreditKind> old = this._creditKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCreditKindChanging(e);
                    this.OnPropertyChanging("CreditKind", e);
                    this._creditKind = value;
                    this.OnCreditKindChanged(e);
                    this.OnPropertyChanged("CreditKind", e);
                }
            }
        }
        
        /// <summary>
        /// The creditAmount property
        /// </summary>
        [XmlElementNameAttribute("creditAmount")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountingUnit CreditAmount
        {
            get
            {
                return this._creditAmount;
            }
            set
            {
                if ((this._creditAmount != value))
                {
                    IAccountingUnit old = this._creditAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCreditAmountChanging(e);
                    this.OnPropertyChanging("CreditAmount", e);
                    this._creditAmount = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCreditAmount;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCreditAmount;
                    }
                    this.OnCreditAmountChanged(e);
                    this.OnPropertyChanged("CreditAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The SDPAccountingFunction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CreditRegisters")]
        public virtual ISDPAccountingFunction SDPAccountingFunction
        {
            get
            {
                return this._sDPAccountingFunction;
            }
            set
            {
                if ((this._sDPAccountingFunction != value))
                {
                    ISDPAccountingFunction old = this._sDPAccountingFunction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSDPAccountingFunctionChanging(e);
                    this.OnPropertyChanging("SDPAccountingFunction", e);
                    this._sDPAccountingFunction = value;
                    if ((old != null))
                    {
                        old.CreditRegisters.Remove(this);
                        old.Deleted -= this.OnResetSDPAccountingFunction;
                    }
                    if ((value != null))
                    {
                        value.CreditRegisters.Add(this);
                        value.Deleted += this.OnResetSDPAccountingFunction;
                    }
                    this.OnSDPAccountingFunctionChanged(e);
                    this.OnPropertyChanged("SDPAccountingFunction", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CreditRegisterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                            "g/CreditRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CreditKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditKindChanging;
        
        /// <summary>
        /// Gets fired when the CreditKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditKindChanged;
        
        /// <summary>
        /// Gets fired before the CreditAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditAmountChanging;
        
        /// <summary>
        /// Gets fired when the CreditAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditAmountChanged;
        
        /// <summary>
        /// Gets fired before the SDPAccountingFunction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SDPAccountingFunctionChanging;
        
        /// <summary>
        /// Gets fired when the SDPAccountingFunction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SDPAccountingFunctionChanged;
        
        /// <summary>
        /// Raises the CreditKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreditKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreditAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreditAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CreditAmount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCreditAmount(object sender, System.EventArgs eventArgs)
        {
            this.CreditAmount = null;
        }
        
        /// <summary>
        /// Raises the SDPAccountingFunctionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSDPAccountingFunctionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SDPAccountingFunctionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SDPAccountingFunctionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSDPAccountingFunctionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SDPAccountingFunctionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SDPAccountingFunction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSDPAccountingFunction(object sender, System.EventArgs eventArgs)
        {
            this.SDPAccountingFunction = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CREDITKIND"))
            {
                return this.CreditKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CREDITAMOUNT"))
            {
                this.CreditAmount = ((IAccountingUnit)(value));
                return;
            }
            if ((feature == "SDPACCOUNTINGFUNCTION"))
            {
                this.SDPAccountingFunction = ((ISDPAccountingFunction)(value));
                return;
            }
            if ((feature == "CREDITKIND"))
            {
                this.CreditKind = ((CreditKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CreditAmount"))
            {
                return new CreditAmountProxy(this);
            }
            if ((attribute == "SDPAccountingFunction"))
            {
                return new SDPAccountingFunctionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CreditAmount"))
            {
                return new CreditAmountProxy(this);
            }
            if ((reference == "SDPAccountingFunction"))
            {
                return new SDPAccountingFunctionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                        "g/CreditRegister")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CreditRegister class
        /// </summary>
        public class CreditRegisterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CreditRegister _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CreditRegisterReferencedElementsCollection(CreditRegister parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CreditAmount != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SDPAccountingFunction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CreditAmountChanged += this.PropagateValueChanges;
                this._parent.SDPAccountingFunctionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CreditAmountChanged -= this.PropagateValueChanges;
                this._parent.SDPAccountingFunctionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CreditAmount == null))
                {
                    IAccountingUnit creditAmountCasted = item.As<IAccountingUnit>();
                    if ((creditAmountCasted != null))
                    {
                        this._parent.CreditAmount = creditAmountCasted;
                        return;
                    }
                }
                if ((this._parent.SDPAccountingFunction == null))
                {
                    ISDPAccountingFunction sDPAccountingFunctionCasted = item.As<ISDPAccountingFunction>();
                    if ((sDPAccountingFunctionCasted != null))
                    {
                        this._parent.SDPAccountingFunction = sDPAccountingFunctionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CreditAmount = null;
                this._parent.SDPAccountingFunction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CreditAmount))
                {
                    return true;
                }
                if ((item == this._parent.SDPAccountingFunction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CreditAmount != null))
                {
                    array[arrayIndex] = this._parent.CreditAmount;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SDPAccountingFunction != null))
                {
                    array[arrayIndex] = this._parent.SDPAccountingFunction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CreditAmount == item))
                {
                    this._parent.CreditAmount = null;
                    return true;
                }
                if ((this._parent.SDPAccountingFunction == item))
                {
                    this._parent.SDPAccountingFunction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CreditAmount).Concat(this._parent.SDPAccountingFunction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the creditKind property
        /// </summary>
        private sealed class CreditKindProxy : ModelPropertyChange<ICreditRegister, Nullable<CreditKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CreditKindProxy(ICreditRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CreditKind> Value
            {
                get
                {
                    return this.ModelElement.CreditKind;
                }
                set
                {
                    this.ModelElement.CreditKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreditKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreditKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the creditAmount property
        /// </summary>
        private sealed class CreditAmountProxy : ModelPropertyChange<ICreditRegister, IAccountingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CreditAmountProxy(ICreditRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountingUnit Value
            {
                get
                {
                    return this.ModelElement.CreditAmount;
                }
                set
                {
                    this.ModelElement.CreditAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreditAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CreditAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SDPAccountingFunction property
        /// </summary>
        private sealed class SDPAccountingFunctionProxy : ModelPropertyChange<ICreditRegister, ISDPAccountingFunction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SDPAccountingFunctionProxy(ICreditRegister modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISDPAccountingFunction Value
            {
                get
                {
                    return this.ModelElement.SDPAccountingFunction;
                }
                set
                {
                    this.ModelElement.SDPAccountingFunction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SDPAccountingFunctionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SDPAccountingFunctionChanged -= handler;
            }
        }
    }
}

