//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Token class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering")]
    [XmlNamespacePrefixAttribute("cimInfPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
        "g/Token")]
    [DebuggerDisplayAttribute("Token {UUID}")]
    public partial class Token : IdentifiedObject, IToken, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Comment property
        /// </summary>
        private string _comment;
        
        private static Lazy<ITypedElement> _commentAttribute = new Lazy<ITypedElement>(RetrieveCommentAttribute);
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        private static Lazy<ITypedElement> _codeAttribute = new Lazy<ITypedElement>(RetrieveCodeAttribute);
        
        private static Lazy<ITypedElement> _pointOfSaleReference = new Lazy<ITypedElement>(RetrievePointOfSaleReference);
        
        /// <summary>
        /// The backing field for the PointOfSale property
        /// </summary>
        private IPointOfSale _pointOfSale;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The comment property
        /// </summary>
        [XmlElementNameAttribute("comment")]
        [XmlAttributeAttribute(true)]
        public virtual string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    string old = this._comment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommentChanging(e);
                    this.OnPropertyChanging("Comment", e, _commentAttribute);
                    this._comment = value;
                    this.OnCommentChanged(e);
                    this.OnPropertyChanged("Comment", e, _commentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e, _codeAttribute);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e, _codeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PointOfSale property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tokens")]
        public virtual IPointOfSale PointOfSale
        {
            get
            {
                return this._pointOfSale;
            }
            set
            {
                if ((this._pointOfSale != value))
                {
                    IPointOfSale old = this._pointOfSale;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPointOfSaleChanging(e);
                    this.OnPropertyChanging("PointOfSale", e, _pointOfSaleReference);
                    this._pointOfSale = value;
                    if ((old != null))
                    {
                        old.Tokens.Remove(this);
                        old.Deleted -= this.OnResetPointOfSale;
                    }
                    if ((value != null))
                    {
                        value.Tokens.Add(this);
                        value.Deleted += this.OnResetPointOfSale;
                    }
                    this.OnPointOfSaleChanged(e);
                    this.OnPropertyChanged("PointOfSale", e, _pointOfSaleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TokenReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                            "g/Token")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Comment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanging;
        
        /// <summary>
        /// Gets fired when the Comment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanged;
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the PointOfSale property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointOfSaleChanging;
        
        /// <summary>
        /// Gets fired when the PointOfSale property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointOfSaleChanged;
        
        private static ITypedElement RetrieveCommentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Token.ClassInstance)).Resolve("comment")));
        }
        
        /// <summary>
        /// Raises the CommentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Token.ClassInstance)).Resolve("code")));
        }
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePointOfSaleReference()
        {
            return ((ITypedElement)(((ModelElement)(Token.ClassInstance)).Resolve("PointOfSale")));
        }
        
        /// <summary>
        /// Raises the PointOfSaleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointOfSaleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointOfSaleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PointOfSaleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointOfSaleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointOfSaleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PointOfSale property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPointOfSale(object sender, System.EventArgs eventArgs)
        {
            this.PointOfSale = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMMENT"))
            {
                return this.Comment;
            }
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POINTOFSALE"))
            {
                this.PointOfSale = ((IPointOfSale)(value));
                return;
            }
            if ((feature == "COMMENT"))
            {
                this.Comment = ((string)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PointOfSale"))
            {
                return new PointOfSaleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PointOfSale"))
            {
                return new PointOfSaleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                        "g/Token")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Token class
        /// </summary>
        public class TokenReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Token _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TokenReferencedElementsCollection(Token parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PointOfSale != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PointOfSaleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PointOfSaleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PointOfSale == null))
                {
                    IPointOfSale pointOfSaleCasted = item.As<IPointOfSale>();
                    if ((pointOfSaleCasted != null))
                    {
                        this._parent.PointOfSale = pointOfSaleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PointOfSale = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PointOfSale))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PointOfSale != null))
                {
                    array[arrayIndex] = this._parent.PointOfSale;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PointOfSale == item))
                {
                    this._parent.PointOfSale = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PointOfSale).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the comment property
        /// </summary>
        private sealed class CommentProxy : ModelPropertyChange<IToken, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommentProxy(IToken modelElement) : 
                    base(modelElement, "comment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Comment;
                }
                set
                {
                    this.ModelElement.Comment = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<IToken, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(IToken modelElement) : 
                    base(modelElement, "code")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PointOfSale property
        /// </summary>
        private sealed class PointOfSaleProxy : ModelPropertyChange<IToken, IPointOfSale>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PointOfSaleProxy(IToken modelElement) : 
                    base(modelElement, "PointOfSale")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPointOfSale Value
            {
                get
                {
                    return this.ModelElement.PointOfSale;
                }
                set
                {
                    this.ModelElement.PointOfSale = value;
                }
            }
        }
    }
}

