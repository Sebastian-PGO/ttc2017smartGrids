//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels
{
    
    
    /// <summary>
    /// The public interface for MeterAssetModel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeterAssetModel))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeterAssetModel))]
    public interface IMeterAssetModel : IModelElement, IElectricalAssetModel
    {
        
        /// <summary>
        /// The kH property
        /// </summary>
        float KH
        {
            get;
            set;
        }
        
        /// <summary>
        /// The intervalDataMeter property
        /// </summary>
        bool IntervalDataMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxRegisterCount property
        /// </summary>
        int MaxRegisterCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The kVAhMeter property
        /// </summary>
        bool KVAhMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The wireCount property
        /// </summary>
        int WireCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The timeOfUseMeter property
        /// </summary>
        bool TimeOfUseMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The demandMeter property
        /// </summary>
        bool DemandMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reactiveMeter property
        /// </summary>
        bool ReactiveMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The form property
        /// </summary>
        string Form
        {
            get;
            set;
        }
        
        /// <summary>
        /// The registerRatio property
        /// </summary>
        float RegisterRatio
        {
            get;
            set;
        }
        
        /// <summary>
        /// The kwhMeter property
        /// </summary>
        bool KwhMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qMeter property
        /// </summary>
        bool QMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The loadProfileMeter property
        /// </summary>
        bool LoadProfileMeter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeterAssets property
        /// </summary>
        IOrderedSetExpression<IMeterAsset> MeterAssets
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the KH property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KHChanging;
        
        /// <summary>
        /// Gets fired when the KH property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KHChanged;
        
        /// <summary>
        /// Gets fired before the IntervalDataMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntervalDataMeterChanging;
        
        /// <summary>
        /// Gets fired when the IntervalDataMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntervalDataMeterChanged;
        
        /// <summary>
        /// Gets fired before the MaxRegisterCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxRegisterCountChanging;
        
        /// <summary>
        /// Gets fired when the MaxRegisterCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxRegisterCountChanged;
        
        /// <summary>
        /// Gets fired before the KVAhMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KVAhMeterChanging;
        
        /// <summary>
        /// Gets fired when the KVAhMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KVAhMeterChanged;
        
        /// <summary>
        /// Gets fired before the WireCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WireCountChanging;
        
        /// <summary>
        /// Gets fired when the WireCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WireCountChanged;
        
        /// <summary>
        /// Gets fired before the TimeOfUseMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeOfUseMeterChanging;
        
        /// <summary>
        /// Gets fired when the TimeOfUseMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeOfUseMeterChanged;
        
        /// <summary>
        /// Gets fired before the DemandMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DemandMeterChanging;
        
        /// <summary>
        /// Gets fired when the DemandMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DemandMeterChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveMeterChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactiveMeterChanged;
        
        /// <summary>
        /// Gets fired before the Form property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FormChanging;
        
        /// <summary>
        /// Gets fired when the Form property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FormChanged;
        
        /// <summary>
        /// Gets fired before the RegisterRatio property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisterRatioChanging;
        
        /// <summary>
        /// Gets fired when the RegisterRatio property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisterRatioChanged;
        
        /// <summary>
        /// Gets fired before the KwhMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KwhMeterChanging;
        
        /// <summary>
        /// Gets fired when the KwhMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KwhMeterChanged;
        
        /// <summary>
        /// Gets fired before the QMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QMeterChanging;
        
        /// <summary>
        /// Gets fired when the QMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QMeterChanged;
        
        /// <summary>
        /// Gets fired before the LoadProfileMeter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadProfileMeterChanging;
        
        /// <summary>
        /// Gets fired when the LoadProfileMeter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadProfileMeterChanged;
    }
}

