//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels
{
    
    
    /// <summary>
    /// The default implementation of the TransformerAssetModel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssetModels")]
    [XmlNamespacePrefixAttribute("cimInfAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Tr" +
        "ansformerAssetModel")]
    [DebuggerDisplayAttribute("TransformerAssetModel {UUID}")]
    public class TransformerAssetModel : AssetModel, ITransformerAssetModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HourOverLoadRating property
        /// </summary>
        private float _hourOverLoadRating;
        
        /// <summary>
        /// The backing field for the OilPreservationKind property
        /// </summary>
        private Nullable<OilPreservationKind> _oilPreservationKind;
        
        /// <summary>
        /// The backing field for the CoreCoilsWeight property
        /// </summary>
        private float _coreCoilsWeight;
        
        /// <summary>
        /// The backing field for the WindingInsulationKind property
        /// </summary>
        private Nullable<WindingInsulationKind> _windingInsulationKind;
        
        /// <summary>
        /// The backing field for the AltSecondaryNomVoltage property
        /// </summary>
        private float _altSecondaryNomVoltage;
        
        /// <summary>
        /// The backing field for the SolidInsulationWeight property
        /// </summary>
        private float _solidInsulationWeight;
        
        /// <summary>
        /// The backing field for the NeutralBIL property
        /// </summary>
        private float _neutralBIL;
        
        /// <summary>
        /// The backing field for the CoreKind property
        /// </summary>
        private Nullable<TransformerCoreKind> _coreKind;
        
        /// <summary>
        /// The backing field for the DayOverLoadRating property
        /// </summary>
        private float _dayOverLoadRating;
        
        /// <summary>
        /// The backing field for the Function property
        /// </summary>
        private Nullable<TransformerFunctionKind> _function;
        
        /// <summary>
        /// The backing field for the ConstructionKind property
        /// </summary>
        private Nullable<TransformerConstructionKind> _constructionKind;
        
        /// <summary>
        /// The backing field for the AutoTransformer property
        /// </summary>
        private bool _autoTransformer;
        
        /// <summary>
        /// The backing field for the AltPrimaryNomVoltage property
        /// </summary>
        private float _altPrimaryNomVoltage;
        
        /// <summary>
        /// The backing field for the ReconfigWinding property
        /// </summary>
        private bool _reconfigWinding;
        
        /// <summary>
        /// The backing field for the TransformerInfo property
        /// </summary>
        private ITransformerInfo _transformerInfo;
        
        /// <summary>
        /// The backing field for the TransformerAssets property
        /// </summary>
        private TransformerAssetModelTransformerAssetsCollection _transformerAssets;
        
        private static IClass _classInstance;
        
        public TransformerAssetModel()
        {
            this._transformerAssets = new TransformerAssetModelTransformerAssetsCollection(this);
            this._transformerAssets.CollectionChanging += this.TransformerAssetsCollectionChanging;
            this._transformerAssets.CollectionChanged += this.TransformerAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The hourOverLoadRating property
        /// </summary>
        [XmlElementNameAttribute("hourOverLoadRating")]
        [XmlAttributeAttribute(true)]
        public virtual float HourOverLoadRating
        {
            get
            {
                return this._hourOverLoadRating;
            }
            set
            {
                if ((this._hourOverLoadRating != value))
                {
                    float old = this._hourOverLoadRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHourOverLoadRatingChanging(e);
                    this.OnPropertyChanging("HourOverLoadRating", e);
                    this._hourOverLoadRating = value;
                    this.OnHourOverLoadRatingChanged(e);
                    this.OnPropertyChanged("HourOverLoadRating", e);
                }
            }
        }
        
        /// <summary>
        /// The oilPreservationKind property
        /// </summary>
        [XmlElementNameAttribute("oilPreservationKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<OilPreservationKind> OilPreservationKind
        {
            get
            {
                return this._oilPreservationKind;
            }
            set
            {
                if ((this._oilPreservationKind != value))
                {
                    Nullable<OilPreservationKind> old = this._oilPreservationKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOilPreservationKindChanging(e);
                    this.OnPropertyChanging("OilPreservationKind", e);
                    this._oilPreservationKind = value;
                    this.OnOilPreservationKindChanged(e);
                    this.OnPropertyChanged("OilPreservationKind", e);
                }
            }
        }
        
        /// <summary>
        /// The coreCoilsWeight property
        /// </summary>
        [XmlElementNameAttribute("coreCoilsWeight")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreCoilsWeight
        {
            get
            {
                return this._coreCoilsWeight;
            }
            set
            {
                if ((this._coreCoilsWeight != value))
                {
                    float old = this._coreCoilsWeight;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreCoilsWeightChanging(e);
                    this.OnPropertyChanging("CoreCoilsWeight", e);
                    this._coreCoilsWeight = value;
                    this.OnCoreCoilsWeightChanged(e);
                    this.OnPropertyChanged("CoreCoilsWeight", e);
                }
            }
        }
        
        /// <summary>
        /// The windingInsulationKind property
        /// </summary>
        [XmlElementNameAttribute("windingInsulationKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WindingInsulationKind> WindingInsulationKind
        {
            get
            {
                return this._windingInsulationKind;
            }
            set
            {
                if ((this._windingInsulationKind != value))
                {
                    Nullable<WindingInsulationKind> old = this._windingInsulationKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingInsulationKindChanging(e);
                    this.OnPropertyChanging("WindingInsulationKind", e);
                    this._windingInsulationKind = value;
                    this.OnWindingInsulationKindChanged(e);
                    this.OnPropertyChanged("WindingInsulationKind", e);
                }
            }
        }
        
        /// <summary>
        /// The altSecondaryNomVoltage property
        /// </summary>
        [XmlElementNameAttribute("altSecondaryNomVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float AltSecondaryNomVoltage
        {
            get
            {
                return this._altSecondaryNomVoltage;
            }
            set
            {
                if ((this._altSecondaryNomVoltage != value))
                {
                    float old = this._altSecondaryNomVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAltSecondaryNomVoltageChanging(e);
                    this.OnPropertyChanging("AltSecondaryNomVoltage", e);
                    this._altSecondaryNomVoltage = value;
                    this.OnAltSecondaryNomVoltageChanged(e);
                    this.OnPropertyChanged("AltSecondaryNomVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The solidInsulationWeight property
        /// </summary>
        [XmlElementNameAttribute("solidInsulationWeight")]
        [XmlAttributeAttribute(true)]
        public virtual float SolidInsulationWeight
        {
            get
            {
                return this._solidInsulationWeight;
            }
            set
            {
                if ((this._solidInsulationWeight != value))
                {
                    float old = this._solidInsulationWeight;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSolidInsulationWeightChanging(e);
                    this.OnPropertyChanging("SolidInsulationWeight", e);
                    this._solidInsulationWeight = value;
                    this.OnSolidInsulationWeightChanged(e);
                    this.OnPropertyChanged("SolidInsulationWeight", e);
                }
            }
        }
        
        /// <summary>
        /// The neutralBIL property
        /// </summary>
        [XmlElementNameAttribute("neutralBIL")]
        [XmlAttributeAttribute(true)]
        public virtual float NeutralBIL
        {
            get
            {
                return this._neutralBIL;
            }
            set
            {
                if ((this._neutralBIL != value))
                {
                    float old = this._neutralBIL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralBILChanging(e);
                    this.OnPropertyChanging("NeutralBIL", e);
                    this._neutralBIL = value;
                    this.OnNeutralBILChanged(e);
                    this.OnPropertyChanged("NeutralBIL", e);
                }
            }
        }
        
        /// <summary>
        /// The coreKind property
        /// </summary>
        [XmlElementNameAttribute("coreKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TransformerCoreKind> CoreKind
        {
            get
            {
                return this._coreKind;
            }
            set
            {
                if ((this._coreKind != value))
                {
                    Nullable<TransformerCoreKind> old = this._coreKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreKindChanging(e);
                    this.OnPropertyChanging("CoreKind", e);
                    this._coreKind = value;
                    this.OnCoreKindChanged(e);
                    this.OnPropertyChanged("CoreKind", e);
                }
            }
        }
        
        /// <summary>
        /// The dayOverLoadRating property
        /// </summary>
        [XmlElementNameAttribute("dayOverLoadRating")]
        [XmlAttributeAttribute(true)]
        public virtual float DayOverLoadRating
        {
            get
            {
                return this._dayOverLoadRating;
            }
            set
            {
                if ((this._dayOverLoadRating != value))
                {
                    float old = this._dayOverLoadRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDayOverLoadRatingChanging(e);
                    this.OnPropertyChanging("DayOverLoadRating", e);
                    this._dayOverLoadRating = value;
                    this.OnDayOverLoadRatingChanged(e);
                    this.OnPropertyChanged("DayOverLoadRating", e);
                }
            }
        }
        
        /// <summary>
        /// The function property
        /// </summary>
        [XmlElementNameAttribute("function")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TransformerFunctionKind> Function
        {
            get
            {
                return this._function;
            }
            set
            {
                if ((this._function != value))
                {
                    Nullable<TransformerFunctionKind> old = this._function;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFunctionChanging(e);
                    this.OnPropertyChanging("Function", e);
                    this._function = value;
                    this.OnFunctionChanged(e);
                    this.OnPropertyChanged("Function", e);
                }
            }
        }
        
        /// <summary>
        /// The constructionKind property
        /// </summary>
        [XmlElementNameAttribute("constructionKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TransformerConstructionKind> ConstructionKind
        {
            get
            {
                return this._constructionKind;
            }
            set
            {
                if ((this._constructionKind != value))
                {
                    Nullable<TransformerConstructionKind> old = this._constructionKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConstructionKindChanging(e);
                    this.OnPropertyChanging("ConstructionKind", e);
                    this._constructionKind = value;
                    this.OnConstructionKindChanged(e);
                    this.OnPropertyChanged("ConstructionKind", e);
                }
            }
        }
        
        /// <summary>
        /// The autoTransformer property
        /// </summary>
        [XmlElementNameAttribute("autoTransformer")]
        [XmlAttributeAttribute(true)]
        public virtual bool AutoTransformer
        {
            get
            {
                return this._autoTransformer;
            }
            set
            {
                if ((this._autoTransformer != value))
                {
                    bool old = this._autoTransformer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoTransformerChanging(e);
                    this.OnPropertyChanging("AutoTransformer", e);
                    this._autoTransformer = value;
                    this.OnAutoTransformerChanged(e);
                    this.OnPropertyChanged("AutoTransformer", e);
                }
            }
        }
        
        /// <summary>
        /// The altPrimaryNomVoltage property
        /// </summary>
        [XmlElementNameAttribute("altPrimaryNomVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float AltPrimaryNomVoltage
        {
            get
            {
                return this._altPrimaryNomVoltage;
            }
            set
            {
                if ((this._altPrimaryNomVoltage != value))
                {
                    float old = this._altPrimaryNomVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAltPrimaryNomVoltageChanging(e);
                    this.OnPropertyChanging("AltPrimaryNomVoltage", e);
                    this._altPrimaryNomVoltage = value;
                    this.OnAltPrimaryNomVoltageChanged(e);
                    this.OnPropertyChanged("AltPrimaryNomVoltage", e);
                }
            }
        }
        
        /// <summary>
        /// The reconfigWinding property
        /// </summary>
        [XmlElementNameAttribute("reconfigWinding")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReconfigWinding
        {
            get
            {
                return this._reconfigWinding;
            }
            set
            {
                if ((this._reconfigWinding != value))
                {
                    bool old = this._reconfigWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReconfigWindingChanging(e);
                    this.OnPropertyChanging("ReconfigWinding", e);
                    this._reconfigWinding = value;
                    this.OnReconfigWindingChanged(e);
                    this.OnPropertyChanged("ReconfigWinding", e);
                }
            }
        }
        
        /// <summary>
        /// The TransformerInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerAssetModels")]
        public virtual ITransformerInfo TransformerInfo
        {
            get
            {
                return this._transformerInfo;
            }
            set
            {
                if ((this._transformerInfo != value))
                {
                    ITransformerInfo old = this._transformerInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerInfoChanging(e);
                    this.OnPropertyChanging("TransformerInfo", e);
                    this._transformerInfo = value;
                    if ((old != null))
                    {
                        old.TransformerAssetModels.Remove(this);
                        old.Deleted -= this.OnResetTransformerInfo;
                    }
                    if ((value != null))
                    {
                        value.TransformerAssetModels.Add(this);
                        value.Deleted += this.OnResetTransformerInfo;
                    }
                    this.OnTransformerInfoChanged(e);
                    this.OnPropertyChanged("TransformerInfo", e);
                }
            }
        }
        
        /// <summary>
        /// The TransformerAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerAssetModel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransformerAsset> TransformerAssets
        {
            get
            {
                return this._transformerAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransformerAssetModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Tr" +
                            "ansformerAssetModel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HourOverLoadRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HourOverLoadRatingChanging;
        
        /// <summary>
        /// Gets fired when the HourOverLoadRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HourOverLoadRatingChanged;
        
        /// <summary>
        /// Gets fired before the OilPreservationKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilPreservationKindChanging;
        
        /// <summary>
        /// Gets fired when the OilPreservationKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OilPreservationKindChanged;
        
        /// <summary>
        /// Gets fired before the CoreCoilsWeight property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreCoilsWeightChanging;
        
        /// <summary>
        /// Gets fired when the CoreCoilsWeight property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreCoilsWeightChanged;
        
        /// <summary>
        /// Gets fired before the WindingInsulationKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingInsulationKindChanging;
        
        /// <summary>
        /// Gets fired when the WindingInsulationKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingInsulationKindChanged;
        
        /// <summary>
        /// Gets fired before the AltSecondaryNomVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AltSecondaryNomVoltageChanging;
        
        /// <summary>
        /// Gets fired when the AltSecondaryNomVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AltSecondaryNomVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SolidInsulationWeight property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SolidInsulationWeightChanging;
        
        /// <summary>
        /// Gets fired when the SolidInsulationWeight property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SolidInsulationWeightChanged;
        
        /// <summary>
        /// Gets fired before the NeutralBIL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralBILChanging;
        
        /// <summary>
        /// Gets fired when the NeutralBIL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralBILChanged;
        
        /// <summary>
        /// Gets fired before the CoreKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreKindChanging;
        
        /// <summary>
        /// Gets fired when the CoreKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreKindChanged;
        
        /// <summary>
        /// Gets fired before the DayOverLoadRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DayOverLoadRatingChanging;
        
        /// <summary>
        /// Gets fired when the DayOverLoadRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DayOverLoadRatingChanged;
        
        /// <summary>
        /// Gets fired before the Function property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FunctionChanging;
        
        /// <summary>
        /// Gets fired when the Function property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FunctionChanged;
        
        /// <summary>
        /// Gets fired before the ConstructionKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanging;
        
        /// <summary>
        /// Gets fired when the ConstructionKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanged;
        
        /// <summary>
        /// Gets fired before the AutoTransformer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoTransformerChanging;
        
        /// <summary>
        /// Gets fired when the AutoTransformer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoTransformerChanged;
        
        /// <summary>
        /// Gets fired before the AltPrimaryNomVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AltPrimaryNomVoltageChanging;
        
        /// <summary>
        /// Gets fired when the AltPrimaryNomVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AltPrimaryNomVoltageChanged;
        
        /// <summary>
        /// Gets fired before the ReconfigWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReconfigWindingChanging;
        
        /// <summary>
        /// Gets fired when the ReconfigWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReconfigWindingChanged;
        
        /// <summary>
        /// Gets fired before the TransformerInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanging;
        
        /// <summary>
        /// Gets fired when the TransformerInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanged;
        
        /// <summary>
        /// Raises the HourOverLoadRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHourOverLoadRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HourOverLoadRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HourOverLoadRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHourOverLoadRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HourOverLoadRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilPreservationKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilPreservationKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilPreservationKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OilPreservationKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOilPreservationKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OilPreservationKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreCoilsWeightChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreCoilsWeightChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreCoilsWeightChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreCoilsWeightChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreCoilsWeightChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreCoilsWeightChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingInsulationKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingInsulationKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingInsulationKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingInsulationKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingInsulationKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingInsulationKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AltSecondaryNomVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAltSecondaryNomVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AltSecondaryNomVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AltSecondaryNomVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAltSecondaryNomVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AltSecondaryNomVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SolidInsulationWeightChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSolidInsulationWeightChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SolidInsulationWeightChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SolidInsulationWeightChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSolidInsulationWeightChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SolidInsulationWeightChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralBILChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralBILChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralBILChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralBILChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralBILChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralBILChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DayOverLoadRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDayOverLoadRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DayOverLoadRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DayOverLoadRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDayOverLoadRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DayOverLoadRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FunctionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFunctionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FunctionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FunctionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFunctionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FunctionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConstructionKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConstructionKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConstructionKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoTransformerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoTransformerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoTransformerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoTransformerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoTransformerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoTransformerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AltPrimaryNomVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAltPrimaryNomVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AltPrimaryNomVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AltPrimaryNomVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAltPrimaryNomVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AltPrimaryNomVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReconfigWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReconfigWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReconfigWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReconfigWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReconfigWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReconfigWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerInfo(object sender, System.EventArgs eventArgs)
        {
            this.TransformerInfo = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransformerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TransformerAssets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransformerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransformerAssets", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HOUROVERLOADRATING"))
            {
                return this.HourOverLoadRating;
            }
            if ((attribute == "OILPRESERVATIONKIND"))
            {
                return this.OilPreservationKind;
            }
            if ((attribute == "CORECOILSWEIGHT"))
            {
                return this.CoreCoilsWeight;
            }
            if ((attribute == "WINDINGINSULATIONKIND"))
            {
                return this.WindingInsulationKind;
            }
            if ((attribute == "ALTSECONDARYNOMVOLTAGE"))
            {
                return this.AltSecondaryNomVoltage;
            }
            if ((attribute == "SOLIDINSULATIONWEIGHT"))
            {
                return this.SolidInsulationWeight;
            }
            if ((attribute == "NEUTRALBIL"))
            {
                return this.NeutralBIL;
            }
            if ((attribute == "COREKIND"))
            {
                return this.CoreKind;
            }
            if ((attribute == "DAYOVERLOADRATING"))
            {
                return this.DayOverLoadRating;
            }
            if ((attribute == "FUNCTION"))
            {
                return this.Function;
            }
            if ((attribute == "CONSTRUCTIONKIND"))
            {
                return this.ConstructionKind;
            }
            if ((attribute == "AUTOTRANSFORMER"))
            {
                return this.AutoTransformer;
            }
            if ((attribute == "ALTPRIMARYNOMVOLTAGE"))
            {
                return this.AltPrimaryNomVoltage;
            }
            if ((attribute == "RECONFIGWINDING"))
            {
                return this.ReconfigWinding;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSFORMERASSETS"))
            {
                return this._transformerAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMERINFO"))
            {
                this.TransformerInfo = ((ITransformerInfo)(value));
                return;
            }
            if ((feature == "HOUROVERLOADRATING"))
            {
                this.HourOverLoadRating = ((float)(value));
                return;
            }
            if ((feature == "OILPRESERVATIONKIND"))
            {
                this.OilPreservationKind = ((OilPreservationKind)(value));
                return;
            }
            if ((feature == "CORECOILSWEIGHT"))
            {
                this.CoreCoilsWeight = ((float)(value));
                return;
            }
            if ((feature == "WINDINGINSULATIONKIND"))
            {
                this.WindingInsulationKind = ((WindingInsulationKind)(value));
                return;
            }
            if ((feature == "ALTSECONDARYNOMVOLTAGE"))
            {
                this.AltSecondaryNomVoltage = ((float)(value));
                return;
            }
            if ((feature == "SOLIDINSULATIONWEIGHT"))
            {
                this.SolidInsulationWeight = ((float)(value));
                return;
            }
            if ((feature == "NEUTRALBIL"))
            {
                this.NeutralBIL = ((float)(value));
                return;
            }
            if ((feature == "COREKIND"))
            {
                this.CoreKind = ((TransformerCoreKind)(value));
                return;
            }
            if ((feature == "DAYOVERLOADRATING"))
            {
                this.DayOverLoadRating = ((float)(value));
                return;
            }
            if ((feature == "FUNCTION"))
            {
                this.Function = ((TransformerFunctionKind)(value));
                return;
            }
            if ((feature == "CONSTRUCTIONKIND"))
            {
                this.ConstructionKind = ((TransformerConstructionKind)(value));
                return;
            }
            if ((feature == "AUTOTRANSFORMER"))
            {
                this.AutoTransformer = ((bool)(value));
                return;
            }
            if ((feature == "ALTPRIMARYNOMVOLTAGE"))
            {
                this.AltPrimaryNomVoltage = ((float)(value));
                return;
            }
            if ((feature == "RECONFIGWINDING"))
            {
                this.ReconfigWinding = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Tr" +
                        "ansformerAssetModel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransformerAssetModel class
        /// </summary>
        public class TransformerAssetModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransformerAssetModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransformerAssetModelReferencedElementsCollection(TransformerAssetModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TransformerInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TransformerAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransformerInfoChanged += this.PropagateValueChanges;
                this._parent.TransformerAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransformerInfoChanged -= this.PropagateValueChanges;
                this._parent.TransformerAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TransformerInfo == null))
                {
                    ITransformerInfo transformerInfoCasted = item.As<ITransformerInfo>();
                    if ((transformerInfoCasted != null))
                    {
                        this._parent.TransformerInfo = transformerInfoCasted;
                        return;
                    }
                }
                ITransformerAsset transformerAssetsCasted = item.As<ITransformerAsset>();
                if ((transformerAssetsCasted != null))
                {
                    this._parent.TransformerAssets.Add(transformerAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransformerInfo = null;
                this._parent.TransformerAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TransformerInfo))
                {
                    return true;
                }
                if (this._parent.TransformerAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TransformerInfo != null))
                {
                    array[arrayIndex] = this._parent.TransformerInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transformerAssetsEnumerator = this._parent.TransformerAssets.GetEnumerator();
                try
                {
                    for (
                    ; transformerAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transformerAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transformerAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TransformerInfo == item))
                {
                    this._parent.TransformerInfo = null;
                    return true;
                }
                ITransformerAsset transformerAssetItem = item.As<ITransformerAsset>();
                if (((transformerAssetItem != null) 
                            && this._parent.TransformerAssets.Remove(transformerAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransformerInfo).Concat(this._parent.TransformerAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hourOverLoadRating property
        /// </summary>
        private sealed class HourOverLoadRatingProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HourOverLoadRatingProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HourOverLoadRating;
                }
                set
                {
                    this.ModelElement.HourOverLoadRating = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HourOverLoadRatingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HourOverLoadRatingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oilPreservationKind property
        /// </summary>
        private sealed class OilPreservationKindProxy : ModelPropertyChange<ITransformerAssetModel, Nullable<OilPreservationKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OilPreservationKindProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<OilPreservationKind> Value
            {
                get
                {
                    return this.ModelElement.OilPreservationKind;
                }
                set
                {
                    this.ModelElement.OilPreservationKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilPreservationKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OilPreservationKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreCoilsWeight property
        /// </summary>
        private sealed class CoreCoilsWeightProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreCoilsWeightProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreCoilsWeight;
                }
                set
                {
                    this.ModelElement.CoreCoilsWeight = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreCoilsWeightChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreCoilsWeightChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the windingInsulationKind property
        /// </summary>
        private sealed class WindingInsulationKindProxy : ModelPropertyChange<ITransformerAssetModel, Nullable<WindingInsulationKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingInsulationKindProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WindingInsulationKind> Value
            {
                get
                {
                    return this.ModelElement.WindingInsulationKind;
                }
                set
                {
                    this.ModelElement.WindingInsulationKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingInsulationKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindingInsulationKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the altSecondaryNomVoltage property
        /// </summary>
        private sealed class AltSecondaryNomVoltageProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AltSecondaryNomVoltageProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AltSecondaryNomVoltage;
                }
                set
                {
                    this.ModelElement.AltSecondaryNomVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AltSecondaryNomVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AltSecondaryNomVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the solidInsulationWeight property
        /// </summary>
        private sealed class SolidInsulationWeightProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SolidInsulationWeightProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SolidInsulationWeight;
                }
                set
                {
                    this.ModelElement.SolidInsulationWeight = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SolidInsulationWeightChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SolidInsulationWeightChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neutralBIL property
        /// </summary>
        private sealed class NeutralBILProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralBILProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NeutralBIL;
                }
                set
                {
                    this.ModelElement.NeutralBIL = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralBILChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NeutralBILChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreKind property
        /// </summary>
        private sealed class CoreKindProxy : ModelPropertyChange<ITransformerAssetModel, Nullable<TransformerCoreKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreKindProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TransformerCoreKind> Value
            {
                get
                {
                    return this.ModelElement.CoreKind;
                }
                set
                {
                    this.ModelElement.CoreKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dayOverLoadRating property
        /// </summary>
        private sealed class DayOverLoadRatingProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DayOverLoadRatingProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DayOverLoadRating;
                }
                set
                {
                    this.ModelElement.DayOverLoadRating = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DayOverLoadRatingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DayOverLoadRatingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the function property
        /// </summary>
        private sealed class FunctionProxy : ModelPropertyChange<ITransformerAssetModel, Nullable<TransformerFunctionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FunctionProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TransformerFunctionKind> Value
            {
                get
                {
                    return this.ModelElement.Function;
                }
                set
                {
                    this.ModelElement.Function = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FunctionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FunctionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the constructionKind property
        /// </summary>
        private sealed class ConstructionKindProxy : ModelPropertyChange<ITransformerAssetModel, Nullable<TransformerConstructionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConstructionKindProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TransformerConstructionKind> Value
            {
                get
                {
                    return this.ModelElement.ConstructionKind;
                }
                set
                {
                    this.ModelElement.ConstructionKind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionKindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConstructionKindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the autoTransformer property
        /// </summary>
        private sealed class AutoTransformerProxy : ModelPropertyChange<ITransformerAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoTransformerProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AutoTransformer;
                }
                set
                {
                    this.ModelElement.AutoTransformer = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoTransformerChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoTransformerChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the altPrimaryNomVoltage property
        /// </summary>
        private sealed class AltPrimaryNomVoltageProxy : ModelPropertyChange<ITransformerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AltPrimaryNomVoltageProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AltPrimaryNomVoltage;
                }
                set
                {
                    this.ModelElement.AltPrimaryNomVoltage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AltPrimaryNomVoltageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AltPrimaryNomVoltageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reconfigWinding property
        /// </summary>
        private sealed class ReconfigWindingProxy : ModelPropertyChange<ITransformerAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReconfigWindingProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReconfigWinding;
                }
                set
                {
                    this.ModelElement.ReconfigWinding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReconfigWindingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReconfigWindingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerInfo property
        /// </summary>
        private sealed class TransformerInfoProxy : ModelPropertyChange<ITransformerAssetModel, ITransformerInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerInfoProxy(ITransformerAssetModel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerInfo Value
            {
                get
                {
                    return this.ModelElement.TransformerInfo;
                }
                set
                {
                    this.ModelElement.TransformerInfo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerInfoChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TransformerInfoChanged -= handler;
            }
        }
    }
}

