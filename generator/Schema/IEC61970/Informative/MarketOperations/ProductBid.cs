//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ProductBid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ProductBid")]
    [DebuggerDisplayAttribute("ProductBid {UUID}")]
    public partial class ProductBid : IdentifiedObject, IProductBid, IModelElement
    {
        
        private static Lazy<ITypedElement> _bidReference = new Lazy<ITypedElement>(RetrieveBidReference);
        
        /// <summary>
        /// The backing field for the Bid property
        /// </summary>
        private IBid _bid;
        
        private static Lazy<ITypedElement> _productBidClearingReference = new Lazy<ITypedElement>(RetrieveProductBidClearingReference);
        
        /// <summary>
        /// The backing field for the ProductBidClearing property
        /// </summary>
        private IProductBidClearing _productBidClearing;
        
        private static Lazy<ITypedElement> _bidPriceCurveReference = new Lazy<ITypedElement>(RetrieveBidPriceCurveReference);
        
        /// <summary>
        /// The backing field for the BidPriceCurve property
        /// </summary>
        private IBidPriceCurve _bidPriceCurve;
        
        private static Lazy<ITypedElement> _marketProductReference = new Lazy<ITypedElement>(RetrieveMarketProductReference);
        
        /// <summary>
        /// The backing field for the MarketProduct property
        /// </summary>
        private IMarketProduct _marketProduct;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Bid property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ProductBids")]
        public virtual IBid Bid
        {
            get
            {
                return this._bid;
            }
            set
            {
                if ((this._bid != value))
                {
                    IBid old = this._bid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBidChanging(e);
                    this.OnPropertyChanging("Bid", e, _bidReference);
                    this._bid = value;
                    if ((old != null))
                    {
                        old.ProductBids.Remove(this);
                        old.Deleted -= this.OnResetBid;
                    }
                    if ((value != null))
                    {
                        value.ProductBids.Add(this);
                        value.Deleted += this.OnResetBid;
                    }
                    this.OnBidChanged(e);
                    this.OnPropertyChanged("Bid", e, _bidReference);
                }
            }
        }
        
        /// <summary>
        /// The ProductBidClearing property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ProductBids")]
        public virtual IProductBidClearing ProductBidClearing
        {
            get
            {
                return this._productBidClearing;
            }
            set
            {
                if ((this._productBidClearing != value))
                {
                    IProductBidClearing old = this._productBidClearing;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProductBidClearingChanging(e);
                    this.OnPropertyChanging("ProductBidClearing", e, _productBidClearingReference);
                    this._productBidClearing = value;
                    if ((old != null))
                    {
                        old.ProductBids.Remove(this);
                        old.Deleted -= this.OnResetProductBidClearing;
                    }
                    if ((value != null))
                    {
                        value.ProductBids.Add(this);
                        value.Deleted += this.OnResetProductBidClearing;
                    }
                    this.OnProductBidClearingChanged(e);
                    this.OnPropertyChanged("ProductBidClearing", e, _productBidClearingReference);
                }
            }
        }
        
        /// <summary>
        /// The BidPriceCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ProductBids")]
        public virtual IBidPriceCurve BidPriceCurve
        {
            get
            {
                return this._bidPriceCurve;
            }
            set
            {
                if ((this._bidPriceCurve != value))
                {
                    IBidPriceCurve old = this._bidPriceCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBidPriceCurveChanging(e);
                    this.OnPropertyChanging("BidPriceCurve", e, _bidPriceCurveReference);
                    this._bidPriceCurve = value;
                    if ((old != null))
                    {
                        old.ProductBids.Remove(this);
                        old.Deleted -= this.OnResetBidPriceCurve;
                    }
                    if ((value != null))
                    {
                        value.ProductBids.Add(this);
                        value.Deleted += this.OnResetBidPriceCurve;
                    }
                    this.OnBidPriceCurveChanged(e);
                    this.OnPropertyChanged("BidPriceCurve", e, _bidPriceCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The MarketProduct property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ProductBids")]
        public virtual IMarketProduct MarketProduct
        {
            get
            {
                return this._marketProduct;
            }
            set
            {
                if ((this._marketProduct != value))
                {
                    IMarketProduct old = this._marketProduct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketProductChanging(e);
                    this.OnPropertyChanging("MarketProduct", e, _marketProductReference);
                    this._marketProduct = value;
                    if ((old != null))
                    {
                        old.ProductBids.Remove(this);
                        old.Deleted -= this.OnResetMarketProduct;
                    }
                    if ((value != null))
                    {
                        value.ProductBids.Add(this);
                        value.Deleted += this.OnResetMarketProduct;
                    }
                    this.OnMarketProductChanged(e);
                    this.OnPropertyChanged("MarketProduct", e, _marketProductReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProductBidReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ProductBid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Bid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidChanging;
        
        /// <summary>
        /// Gets fired when the Bid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidChanged;
        
        /// <summary>
        /// Gets fired before the ProductBidClearing property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProductBidClearingChanging;
        
        /// <summary>
        /// Gets fired when the ProductBidClearing property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProductBidClearingChanged;
        
        /// <summary>
        /// Gets fired before the BidPriceCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidPriceCurveChanging;
        
        /// <summary>
        /// Gets fired when the BidPriceCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidPriceCurveChanged;
        
        /// <summary>
        /// Gets fired before the MarketProduct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketProductChanging;
        
        /// <summary>
        /// Gets fired when the MarketProduct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketProductChanged;
        
        private static ITypedElement RetrieveBidReference()
        {
            return ((ITypedElement)(((ModelElement)(ProductBid.ClassInstance)).Resolve("Bid")));
        }
        
        /// <summary>
        /// Raises the BidChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BidChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Bid property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBid(object sender, System.EventArgs eventArgs)
        {
            this.Bid = null;
        }
        
        private static ITypedElement RetrieveProductBidClearingReference()
        {
            return ((ITypedElement)(((ModelElement)(ProductBid.ClassInstance)).Resolve("ProductBidClearing")));
        }
        
        /// <summary>
        /// Raises the ProductBidClearingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProductBidClearingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProductBidClearingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProductBidClearingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProductBidClearingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProductBidClearingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProductBidClearing property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProductBidClearing(object sender, System.EventArgs eventArgs)
        {
            this.ProductBidClearing = null;
        }
        
        private static ITypedElement RetrieveBidPriceCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ProductBid.ClassInstance)).Resolve("BidPriceCurve")));
        }
        
        /// <summary>
        /// Raises the BidPriceCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidPriceCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidPriceCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BidPriceCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidPriceCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidPriceCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BidPriceCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBidPriceCurve(object sender, System.EventArgs eventArgs)
        {
            this.BidPriceCurve = null;
        }
        
        private static ITypedElement RetrieveMarketProductReference()
        {
            return ((ITypedElement)(((ModelElement)(ProductBid.ClassInstance)).Resolve("MarketProduct")));
        }
        
        /// <summary>
        /// Raises the MarketProductChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketProductChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketProductChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketProductChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketProductChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketProductChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MarketProduct property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMarketProduct(object sender, System.EventArgs eventArgs)
        {
            this.MarketProduct = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BID"))
            {
                this.Bid = ((IBid)(value));
                return;
            }
            if ((feature == "PRODUCTBIDCLEARING"))
            {
                this.ProductBidClearing = ((IProductBidClearing)(value));
                return;
            }
            if ((feature == "BIDPRICECURVE"))
            {
                this.BidPriceCurve = ((IBidPriceCurve)(value));
                return;
            }
            if ((feature == "MARKETPRODUCT"))
            {
                this.MarketProduct = ((IMarketProduct)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Bid"))
            {
                return new BidProxy(this);
            }
            if ((attribute == "ProductBidClearing"))
            {
                return new ProductBidClearingProxy(this);
            }
            if ((attribute == "BidPriceCurve"))
            {
                return new BidPriceCurveProxy(this);
            }
            if ((attribute == "MarketProduct"))
            {
                return new MarketProductProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Bid"))
            {
                return new BidProxy(this);
            }
            if ((reference == "ProductBidClearing"))
            {
                return new ProductBidClearingProxy(this);
            }
            if ((reference == "BidPriceCurve"))
            {
                return new BidPriceCurveProxy(this);
            }
            if ((reference == "MarketProduct"))
            {
                return new MarketProductProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ProductBid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProductBid class
        /// </summary>
        public class ProductBidReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProductBid _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProductBidReferencedElementsCollection(ProductBid parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Bid != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProductBidClearing != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BidPriceCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MarketProduct != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BidChanged += this.PropagateValueChanges;
                this._parent.ProductBidClearingChanged += this.PropagateValueChanges;
                this._parent.BidPriceCurveChanged += this.PropagateValueChanges;
                this._parent.MarketProductChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BidChanged -= this.PropagateValueChanges;
                this._parent.ProductBidClearingChanged -= this.PropagateValueChanges;
                this._parent.BidPriceCurveChanged -= this.PropagateValueChanges;
                this._parent.MarketProductChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Bid == null))
                {
                    IBid bidCasted = item.As<IBid>();
                    if ((bidCasted != null))
                    {
                        this._parent.Bid = bidCasted;
                        return;
                    }
                }
                if ((this._parent.ProductBidClearing == null))
                {
                    IProductBidClearing productBidClearingCasted = item.As<IProductBidClearing>();
                    if ((productBidClearingCasted != null))
                    {
                        this._parent.ProductBidClearing = productBidClearingCasted;
                        return;
                    }
                }
                if ((this._parent.BidPriceCurve == null))
                {
                    IBidPriceCurve bidPriceCurveCasted = item.As<IBidPriceCurve>();
                    if ((bidPriceCurveCasted != null))
                    {
                        this._parent.BidPriceCurve = bidPriceCurveCasted;
                        return;
                    }
                }
                if ((this._parent.MarketProduct == null))
                {
                    IMarketProduct marketProductCasted = item.As<IMarketProduct>();
                    if ((marketProductCasted != null))
                    {
                        this._parent.MarketProduct = marketProductCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Bid = null;
                this._parent.ProductBidClearing = null;
                this._parent.BidPriceCurve = null;
                this._parent.MarketProduct = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Bid))
                {
                    return true;
                }
                if ((item == this._parent.ProductBidClearing))
                {
                    return true;
                }
                if ((item == this._parent.BidPriceCurve))
                {
                    return true;
                }
                if ((item == this._parent.MarketProduct))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Bid != null))
                {
                    array[arrayIndex] = this._parent.Bid;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProductBidClearing != null))
                {
                    array[arrayIndex] = this._parent.ProductBidClearing;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BidPriceCurve != null))
                {
                    array[arrayIndex] = this._parent.BidPriceCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MarketProduct != null))
                {
                    array[arrayIndex] = this._parent.MarketProduct;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Bid == item))
                {
                    this._parent.Bid = null;
                    return true;
                }
                if ((this._parent.ProductBidClearing == item))
                {
                    this._parent.ProductBidClearing = null;
                    return true;
                }
                if ((this._parent.BidPriceCurve == item))
                {
                    this._parent.BidPriceCurve = null;
                    return true;
                }
                if ((this._parent.MarketProduct == item))
                {
                    this._parent.MarketProduct = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Bid).Concat(this._parent.ProductBidClearing).Concat(this._parent.BidPriceCurve).Concat(this._parent.MarketProduct).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Bid property
        /// </summary>
        private sealed class BidProxy : ModelPropertyChange<IProductBid, IBid>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BidProxy(IProductBid modelElement) : 
                    base(modelElement, "Bid")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBid Value
            {
                get
                {
                    return this.ModelElement.Bid;
                }
                set
                {
                    this.ModelElement.Bid = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProductBidClearing property
        /// </summary>
        private sealed class ProductBidClearingProxy : ModelPropertyChange<IProductBid, IProductBidClearing>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProductBidClearingProxy(IProductBid modelElement) : 
                    base(modelElement, "ProductBidClearing")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProductBidClearing Value
            {
                get
                {
                    return this.ModelElement.ProductBidClearing;
                }
                set
                {
                    this.ModelElement.ProductBidClearing = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BidPriceCurve property
        /// </summary>
        private sealed class BidPriceCurveProxy : ModelPropertyChange<IProductBid, IBidPriceCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BidPriceCurveProxy(IProductBid modelElement) : 
                    base(modelElement, "BidPriceCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBidPriceCurve Value
            {
                get
                {
                    return this.ModelElement.BidPriceCurve;
                }
                set
                {
                    this.ModelElement.BidPriceCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MarketProduct property
        /// </summary>
        private sealed class MarketProductProxy : ModelPropertyChange<IProductBid, IMarketProduct>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketProductProxy(IProductBid modelElement) : 
                    base(modelElement, "MarketProduct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketProduct Value
            {
                get
                {
                    return this.ModelElement.MarketProduct;
                }
                set
                {
                    this.ModelElement.MarketProduct = value;
                }
            }
        }
    }
}

