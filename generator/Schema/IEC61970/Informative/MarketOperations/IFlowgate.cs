//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for Flowgate
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Flowgate))]
    [XmlDefaultImplementationTypeAttribute(typeof(Flowgate))]
    public interface IFlowgate : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The AfcUseCode property
        /// </summary>
        object AfcUseCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The IdcOperationalName property
        /// </summary>
        string IdcOperationalName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inServiceDate property
        /// </summary>
        DateTime InServiceDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The outOfServiceDate property
        /// </summary>
        DateTime OutOfServiceDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The coordinatedFlag property
        /// </summary>
        bool CoordinatedFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AtcFlag property
        /// </summary>
        bool AtcFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The deletionDate property
        /// </summary>
        DateTime DeletionDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reciprocalFlag property
        /// </summary>
        bool ReciprocalFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The IdcAssignedId property
        /// </summary>
        int IdcAssignedId
        {
            get;
            set;
        }
        
        /// <summary>
        /// The positiveImpactValue property
        /// </summary>
        int PositiveImpactValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The counterFlowValue property
        /// </summary>
        int CounterFlowValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The coordinationStudyDate property
        /// </summary>
        DateTime CoordinationStudyDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The IdcType property
        /// </summary>
        object IdcType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The managingEntityFlag property
        /// </summary>
        bool ManagingEntityFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TransmissionReliabilityMargin property
        /// </summary>
        ITransmissionReliabilityMargin TransmissionReliabilityMargin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ViolationLimits property
        /// </summary>
        IOrderedSetExpression<IViolationLimit> ViolationLimits
        {
            get;
        }
        
        /// <summary>
        /// The CapacityBenefitMargin property
        /// </summary>
        IOrderedSetExpression<ICapacityBenefitMargin> CapacityBenefitMargin
        {
            get;
        }
        
        /// <summary>
        /// The PowerTransormers property
        /// </summary>
        IOrderedSetExpression<IPowerTransformer> PowerTransormers
        {
            get;
        }
        
        /// <summary>
        /// The FTRs property
        /// </summary>
        IOrderedSetExpression<IFTR> FTRs
        {
            get;
        }
        
        /// <summary>
        /// The Lines property
        /// </summary>
        IOrderedSetExpression<ILine> Lines
        {
            get;
        }
        
        /// <summary>
        /// The SubControlArea property
        /// </summary>
        ISubControlArea SubControlArea
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TransmissionProvider property
        /// </summary>
        IOrderedSetExpression<ITransmissionProvider> TransmissionProvider
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the AfcUseCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AfcUseCodeChanging;
        
        /// <summary>
        /// Gets fired when the AfcUseCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AfcUseCodeChanged;
        
        /// <summary>
        /// Gets fired before the IdcOperationalName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcOperationalNameChanging;
        
        /// <summary>
        /// Gets fired when the IdcOperationalName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcOperationalNameChanged;
        
        /// <summary>
        /// Gets fired before the InServiceDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InServiceDateChanging;
        
        /// <summary>
        /// Gets fired when the InServiceDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InServiceDateChanged;
        
        /// <summary>
        /// Gets fired before the OutOfServiceDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutOfServiceDateChanging;
        
        /// <summary>
        /// Gets fired when the OutOfServiceDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutOfServiceDateChanged;
        
        /// <summary>
        /// Gets fired before the CoordinatedFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoordinatedFlagChanging;
        
        /// <summary>
        /// Gets fired when the CoordinatedFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoordinatedFlagChanged;
        
        /// <summary>
        /// Gets fired before the AtcFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AtcFlagChanging;
        
        /// <summary>
        /// Gets fired when the AtcFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AtcFlagChanged;
        
        /// <summary>
        /// Gets fired before the DeletionDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeletionDateChanging;
        
        /// <summary>
        /// Gets fired when the DeletionDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeletionDateChanged;
        
        /// <summary>
        /// Gets fired before the ReciprocalFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReciprocalFlagChanging;
        
        /// <summary>
        /// Gets fired when the ReciprocalFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReciprocalFlagChanged;
        
        /// <summary>
        /// Gets fired before the IdcAssignedId property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcAssignedIdChanging;
        
        /// <summary>
        /// Gets fired when the IdcAssignedId property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcAssignedIdChanged;
        
        /// <summary>
        /// Gets fired before the PositiveImpactValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PositiveImpactValueChanging;
        
        /// <summary>
        /// Gets fired when the PositiveImpactValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PositiveImpactValueChanged;
        
        /// <summary>
        /// Gets fired before the CounterFlowValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CounterFlowValueChanging;
        
        /// <summary>
        /// Gets fired when the CounterFlowValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CounterFlowValueChanged;
        
        /// <summary>
        /// Gets fired before the CoordinationStudyDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoordinationStudyDateChanging;
        
        /// <summary>
        /// Gets fired when the CoordinationStudyDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoordinationStudyDateChanged;
        
        /// <summary>
        /// Gets fired before the IdcType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcTypeChanging;
        
        /// <summary>
        /// Gets fired when the IdcType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdcTypeChanged;
        
        /// <summary>
        /// Gets fired before the ManagingEntityFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManagingEntityFlagChanging;
        
        /// <summary>
        /// Gets fired when the ManagingEntityFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManagingEntityFlagChanged;
        
        /// <summary>
        /// Gets fired before the TransmissionReliabilityMargin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransmissionReliabilityMarginChanging;
        
        /// <summary>
        /// Gets fired when the TransmissionReliabilityMargin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransmissionReliabilityMarginChanged;
        
        /// <summary>
        /// Gets fired before the SubControlArea property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SubControlArea property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanged;
    }
}

