//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for ViolationLimit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ViolationLimit))]
    [XmlDefaultImplementationTypeAttribute(typeof(ViolationLimit))]
    public interface IViolationLimit : IModelElement, ILimit
    {
        
        /// <summary>
        /// The enforced property
        /// </summary>
        bool Enforced
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Season property
        /// </summary>
        ISeason Season
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Measurement property
        /// </summary>
        IMeasurement Measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Organisations property
        /// </summary>
        IOrderedSetExpression<IErpOrganisation> Organisations
        {
            get;
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        IFlowgate Flowgate
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Enforced property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnforcedChanging;
        
        /// <summary>
        /// Gets fired when the Enforced property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnforcedChanged;
        
        /// <summary>
        /// Gets fired before the Season property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeasonChanging;
        
        /// <summary>
        /// Gets fired when the Season property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SeasonChanged;
        
        /// <summary>
        /// Gets fired before the Measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementChanging;
        
        /// <summary>
        /// Gets fired when the Measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementChanged;
        
        /// <summary>
        /// Gets fired before the Flowgate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FlowgateChanging;
        
        /// <summary>
        /// Gets fired when the Flowgate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FlowgateChanged;
    }
}

